// Decompiled with JetBrains decompiler
// Type: TaleWorlds.CampaignSystem.MapEvents.ForceSuppliesEventComponent
// Assembly: TaleWorlds.CampaignSystem, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E85F8C15-4DF6-4E9C-A58A-29177E40D07A
// Assembly location: D:\steam\steamapps\common\Mount & Blade II Bannerlord\bin\Win64_Shipping_Client\TaleWorlds.CampaignSystem.dll

using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;

#nullable disable
namespace TaleWorlds.CampaignSystem.MapEvents
{
  public class ForceSuppliesEventComponent : MapEventComponent
  {
    internal static void AutoGeneratedStaticCollectObjectsForceSuppliesEventComponent(
      object o,
      List<object> collectedObjects)
    {
      ((MapEventComponent) o).AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
    {
      base.AutoGeneratedInstanceCollectObjects(collectedObjects);
    }

    protected ForceSuppliesEventComponent(MapEvent mapEvent)
      : base(mapEvent)
    {
    }

    public static ForceSuppliesEventComponent CreateForceSuppliesEvent(
      PartyBase attackerParty,
      PartyBase defenderParty)
    {
      MapEvent mapEvent = new MapEvent();
      ForceSuppliesEventComponent component = new ForceSuppliesEventComponent(mapEvent);
      mapEvent.Initialize(attackerParty, defenderParty, (MapEventComponent) component, MapEvent.BattleTypes.IsForcingSupplies);
      if (defenderParty.Settlement?.MilitiaPartyComponent != null)
        defenderParty.Settlement.MilitiaPartyComponent.MobileParty.MapEventSide = mapEvent.DefenderSide;
      Campaign.Current.MapEventManager.OnMapEventCreated(mapEvent);
      return component;
    }

    public static ForceSuppliesEventComponent CreateComponentForOldSaves(MapEvent mapEvent)
    {
      return new ForceSuppliesEventComponent(mapEvent);
    }

    protected override void OnInitialize()
    {
      ChangeVillageStateAction.ApplyBySettingToBeingForcedForSupplies(this.MapEvent.MapEventSettlement, this.MapEvent.AttackerSide.LeaderParty.MobileParty);
    }

    protected override void OnFinalize()
    {
      CampaignEventDispatcher.Instance.ForceSuppliesCompleted(this.MapEvent.BattleState == BattleState.AttackerVictory ? BattleSideEnum.Attacker : BattleSideEnum.Defender, this);
      ChangeVillageStateAction.ApplyBySettingToNormal(this.MapEvent.MapEventSettlement);
    }
  }
}
