using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	// Token: 0x02000349 RID: 841
	public sealed class TraitObject : PropertyObject
	{
		// Token: 0x06002F7C RID: 12156 RVA: 0x000C3BA3 File Offset: 0x000C1DA3
		internal static void AutoGeneratedStaticCollectObjectsTraitObject(object o, List<object> collectedObjects)
		{
			((TraitObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002F7D RID: 12157 RVA: 0x000C3BB1 File Offset: 0x000C1DB1
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000B54 RID: 2900
		// (get) Token: 0x06002F7E RID: 12158 RVA: 0x000C3BBA File Offset: 0x000C1DBA
		public static MBReadOnlyList<TraitObject> All
		{
			get
			{
				return Campaign.Current.AllTraits;
			}
		}

		// Token: 0x17000B55 RID: 2901
		// (get) Token: 0x06002F7F RID: 12159 RVA: 0x000C3BC6 File Offset: 0x000C1DC6
		// (set) Token: 0x06002F80 RID: 12160 RVA: 0x000C3BCE File Offset: 0x000C1DCE
		public int MinValue { get; private set; }

		// Token: 0x17000B56 RID: 2902
		// (get) Token: 0x06002F81 RID: 12161 RVA: 0x000C3BD7 File Offset: 0x000C1DD7
		// (set) Token: 0x06002F82 RID: 12162 RVA: 0x000C3BDF File Offset: 0x000C1DDF
		public int MaxValue { get; private set; }

		// Token: 0x17000B57 RID: 2903
		// (get) Token: 0x06002F83 RID: 12163 RVA: 0x000C3BE8 File Offset: 0x000C1DE8
		// (set) Token: 0x06002F84 RID: 12164 RVA: 0x000C3BF0 File Offset: 0x000C1DF0
		public bool IsHidden { get; private set; }

		// Token: 0x06002F85 RID: 12165 RVA: 0x000C3BF9 File Offset: 0x000C1DF9
		public TraitObject(string stringId) : base(stringId)
		{
		}

		// Token: 0x06002F86 RID: 12166 RVA: 0x000C3C02 File Offset: 0x000C1E02
		public void Initialize(TextObject name, TextObject description, bool isHidden, int minValue, int maxValue)
		{
			base.Initialize(name, description);
			this.MinValue = minValue;
			this.MaxValue = maxValue;
			this.IsHidden = isHidden;
			base.AfterInitialized();
		}
	}
}
