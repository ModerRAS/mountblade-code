using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	// Token: 0x0200026F RID: 623
	public class KingdomPolicyDecision : KingdomDecision
	{
		// Token: 0x060020D5 RID: 8405 RVA: 0x0008BCD8 File Offset: 0x00089ED8
		internal static void AutoGeneratedStaticCollectObjectsKingdomPolicyDecision(object o, List<object> collectedObjects)
		{
			((KingdomPolicyDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060020D6 RID: 8406 RVA: 0x0008BCE6 File Offset: 0x00089EE6
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Policy);
			collectedObjects.Add(this._kingdomPolicies);
		}

		// Token: 0x060020D7 RID: 8407 RVA: 0x0008BD07 File Offset: 0x00089F07
		internal static object AutoGeneratedGetMemberValuePolicy(object o)
		{
			return ((KingdomPolicyDecision)o).Policy;
		}

		// Token: 0x060020D8 RID: 8408 RVA: 0x0008BD14 File Offset: 0x00089F14
		internal static object AutoGeneratedGetMemberValue_isInvertedDecision(object o)
		{
			return ((KingdomPolicyDecision)o)._isInvertedDecision;
		}

		// Token: 0x060020D9 RID: 8409 RVA: 0x0008BD26 File Offset: 0x00089F26
		internal static object AutoGeneratedGetMemberValue_kingdomPolicies(object o)
		{
			return ((KingdomPolicyDecision)o)._kingdomPolicies;
		}

		// Token: 0x060020DA RID: 8410 RVA: 0x0008BD33 File Offset: 0x00089F33
		public KingdomPolicyDecision(Clan proposerClan, PolicyObject policy, bool isInvertedDecision = false) : base(proposerClan)
		{
			this.Policy = policy;
			this._isInvertedDecision = isInvertedDecision;
			this._kingdomPolicies = new List<PolicyObject>(base.Kingdom.ActivePolicies);
		}

		// Token: 0x060020DB RID: 8411 RVA: 0x0008BD60 File Offset: 0x00089F60
		public override bool IsAllowed()
		{
			return Campaign.Current.Models.KingdomDecisionPermissionModel.IsPolicyDecisionAllowed(this.Policy);
		}

		// Token: 0x060020DC RID: 8412 RVA: 0x0008BD7C File Offset: 0x00089F7C
		public override int GetProposalInfluenceCost()
		{
			return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfPolicyProposalAndDisavowal(base.ProposerClan);
		}

		// Token: 0x060020DD RID: 8413 RVA: 0x0008BD98 File Offset: 0x00089F98
		public override TextObject GetGeneralTitle()
		{
			return this.Policy.Name;
		}

		// Token: 0x060020DE RID: 8414 RVA: 0x0008BDA8 File Offset: 0x00089FA8
		public override TextObject GetSupportTitle()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=XGcST2dB}Vote to disavow {POLICY_NAME}", null);
			}
			else
			{
				textObject = new TextObject("{=iiH5gKzE}Vote for {POLICY_NAME}", null);
			}
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x060020DF RID: 8415 RVA: 0x0008BDF4 File Offset: 0x00089FF4
		public override TextObject GetChooseTitle()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=9DaDtQbo}Disavow {POLICY_NAME}", null);
			}
			else
			{
				textObject = new TextObject("{=!}{POLICY_NAME}", null);
			}
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x060020E0 RID: 8416 RVA: 0x0008BE40 File Offset: 0x0008A040
		public override TextObject GetSupportDescription()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=ZPv3uCOb}{FACTION_LEADER} proposes disavowing the policy of {POLICY_NAME}. You can pick your stance regarding this decision.", null);
			}
			else
			{
				textObject = new TextObject("{=jFOva44m}{FACTION_LEADER} proposes the policy of {POLICY_NAME}. You can pick your stance regarding this decision.", null);
			}
			textObject.SetTextVariable("FACTION_LEADER", this.DetermineChooser().Leader.Name);
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x060020E1 RID: 8417 RVA: 0x0008BEA8 File Offset: 0x0008A0A8
		public override TextObject GetChooseDescription()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=1AU2jnNV}As {?IS_FEMALE}queen{?}king{\\?} you must decide whether to disavow the policy of {POLICY_NAME}.", null);
			}
			else
			{
				textObject = new TextObject("{=0EqPRs21}As {?IS_FEMALE}queen{?}king{\\?} you must decide whether to enforce the policy of {POLICY_NAME}.", null);
			}
			textObject.SetTextVariable("IS_FEMALE", this.DetermineChooser().Leader.IsFemale ? 1 : 0);
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x060020E2 RID: 8418 RVA: 0x0008BF13 File Offset: 0x0008A113
		public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
		{
			yield return new KingdomPolicyDecision.PolicyDecisionOutcome(true);
			yield return new KingdomPolicyDecision.PolicyDecisionOutcome(false);
			yield break;
		}

		// Token: 0x060020E3 RID: 8419 RVA: 0x0008BF1C File Offset: 0x0008A11C
		public override Clan DetermineChooser()
		{
			return base.Kingdom.RulingClan;
		}

		// Token: 0x060020E4 RID: 8420 RVA: 0x0008BF29 File Offset: 0x0008A129
		public float CalculateSupport(Clan clan)
		{
			return this.DetermineSupport(clan, new KingdomPolicyDecision.PolicyDecisionOutcome(true));
		}

		// Token: 0x060020E5 RID: 8421 RVA: 0x0008BF38 File Offset: 0x0008A138
		protected override bool ShouldBeCancelledInternal()
		{
			if (!this._isInvertedDecision)
			{
				return base.Kingdom.ActivePolicies.Contains(this.Policy);
			}
			return !base.Kingdom.ActivePolicies.Contains(this.Policy);
		}

		// Token: 0x060020E6 RID: 8422 RVA: 0x0008BF74 File Offset: 0x0008A174
		public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
		{
			KingdomPolicyDecision.PolicyDecisionOutcome policyDecisionOutcome = possibleOutcome as KingdomPolicyDecision.PolicyDecisionOutcome;
			float num = 0.1f;
			float num2 = 0.1f;
			float num3 = 0.1f;
			if (clan.Kingdom != null && clan.Kingdom.RulingClan == clan)
			{
				num2 += 1f;
				num3 -= 1.5f;
				num -= 0.4f;
			}
			else if (clan.IsMinorFaction)
			{
				num += 1f;
				num3 -= 1.5f;
				num2 -= 0.3f;
			}
			else if (clan.Tier >= 3)
			{
				num -= 1.3f;
				num3 += (float)clan.Tier * 0.2f;
				num2 -= 1.3f;
			}
			else if (clan.Tier == 2)
			{
				num2 -= 0.1f;
				num3 += 0.4f;
				num -= 0.5f;
			}
			CultureObject culture = clan.Culture;
			num += 0.6f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Egalitarian) - 0.9f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic);
			num3 += 0.6f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic) - 0.9f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Egalitarian) - 0.5f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Authoritarian);
			num2 += 0.8f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Authoritarian) - 1.3f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic);
			float num4 = this.Policy.EgalitarianWeight * num + this.Policy.OligarchicWeight * num3 + this.Policy.AuthoritarianWeight * num2;
			if (this._isInvertedDecision)
			{
				num4 = -num4;
			}
			float num5;
			if (policyDecisionOutcome.ShouldDecisionBeEnforced)
			{
				num5 = 60f;
			}
			else
			{
				num5 = -100f;
			}
			return num4 * num5;
		}

		// Token: 0x060020E7 RID: 8423 RVA: 0x0008C144 File Offset: 0x0008A344
		public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			foreach (DecisionOutcome decisionOutcome in possibleOutcomes)
			{
				if (((KingdomPolicyDecision.PolicyDecisionOutcome)decisionOutcome).ShouldDecisionBeEnforced)
				{
					decisionOutcome.SetSponsor(base.ProposerClan);
				}
				else
				{
					base.AssignDefaultSponsor(decisionOutcome);
				}
			}
		}

		// Token: 0x060020E8 RID: 8424 RVA: 0x0008C1B0 File Offset: 0x0008A3B0
		public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
		{
			bool shouldDecisionBeEnforced = ((KingdomPolicyDecision.PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced;
			if (shouldDecisionBeEnforced && !this._isInvertedDecision)
			{
				base.Kingdom.AddPolicy(this.Policy);
				return;
			}
			if (shouldDecisionBeEnforced && this._isInvertedDecision)
			{
				base.Kingdom.RemovePolicy(this.Policy);
			}
		}

		// Token: 0x060020E9 RID: 8425 RVA: 0x0008C204 File Offset: 0x0008A404
		public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false)
		{
			TextObject textObject;
			if ((((KingdomPolicyDecision.PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced && !this._isInvertedDecision) || (!((KingdomPolicyDecision.PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced && this._isInvertedDecision))
			{
				if (!this._kingdomPolicies.Contains(this.Policy))
				{
					textObject = new TextObject("{=Lbs2bNlg}The {KINGDOM} will start {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
				}
				else
				{
					textObject = new TextObject("{=jnYwiCAz}The {KINGDOM} will continue {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
				}
			}
			else if (this._kingdomPolicies.Contains(this.Policy))
			{
				textObject = new TextObject("{=2BVDp7Tg}The {KINGDOM} will stop {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
			}
			else
			{
				textObject = new TextObject("{=faUooB7V}The {KINGDOM} will not be {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
			}
			textObject.SetTextVariable("KINGDOM", base.Kingdom.InformalName);
			textObject.SetTextVariable("POLICY", this.Policy.Name);
			textObject.SetTextVariable("POLICY_DESCRIPTION", this.Policy.LogEntryDescription);
			if (isShortVersion || base.IsSingleClanDecision())
			{
				textObject.SetTextVariable("POLICY_SUPPORT", TextObject.Empty);
			}
			else
			{
				textObject.SetTextVariable("POLICY_SUPPORT", "{=bqEO389P}This decision caused a split in the council.");
				if (supportStatus == KingdomDecision.SupportStatus.Majority)
				{
					textObject.SetTextVariable("POLICY_SUPPORT", "{=3W67kdtc}This decision had the support of the council.");
				}
				if (supportStatus == KingdomDecision.SupportStatus.Minority)
				{
					textObject.SetTextVariable("POLICY_SUPPORT", "{=b6MgRYlM}This decision was opposed by most of the council.");
				}
			}
			return textObject;
		}

		// Token: 0x060020EA RID: 8426 RVA: 0x0008C336 File Offset: 0x0008A536
		public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.FirstOrDefault((DecisionOutcome t) => ((KingdomPolicyDecision.PolicyDecisionOutcome)t).ShouldDecisionBeEnforced);
		}

		// Token: 0x060020EB RID: 8427 RVA: 0x0008C35D File Offset: 0x0008A55D
		public override TextObject GetSecondaryEffects()
		{
			return this.Policy.SecondaryEffects;
		}

		// Token: 0x060020EC RID: 8428 RVA: 0x0008C36A File Offset: 0x0008A56A
		public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
		{
		}

		// Token: 0x04000A4B RID: 2635
		[SaveableField(200)]
		public readonly PolicyObject Policy;

		// Token: 0x04000A4C RID: 2636
		[SaveableField(203)]
		private bool _isInvertedDecision;

		// Token: 0x04000A4D RID: 2637
		[SaveableField(202)]
		private List<PolicyObject> _kingdomPolicies;

		// Token: 0x0200057D RID: 1405
		public class PolicyDecisionOutcome : DecisionOutcome
		{
			// Token: 0x060045A7 RID: 17831 RVA: 0x0014A8CE File Offset: 0x00148ACE
			internal static void AutoGeneratedStaticCollectObjectsPolicyDecisionOutcome(object o, List<object> collectedObjects)
			{
				((KingdomPolicyDecision.PolicyDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060045A8 RID: 17832 RVA: 0x0014A8DC File Offset: 0x00148ADC
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060045A9 RID: 17833 RVA: 0x0014A8E5 File Offset: 0x00148AE5
			internal static object AutoGeneratedGetMemberValueShouldDecisionBeEnforced(object o)
			{
				return ((KingdomPolicyDecision.PolicyDecisionOutcome)o).ShouldDecisionBeEnforced;
			}

			// Token: 0x17000DCA RID: 3530
			// (get) Token: 0x060045AA RID: 17834 RVA: 0x0014A8F7 File Offset: 0x00148AF7
			// (set) Token: 0x060045AB RID: 17835 RVA: 0x0014A8FF File Offset: 0x00148AFF
			[SaveableProperty(200)]
			public bool ShouldDecisionBeEnforced { get; private set; }

			// Token: 0x060045AC RID: 17836 RVA: 0x0014A908 File Offset: 0x00148B08
			public override TextObject GetDecisionTitle()
			{
				TextObject textObject = new TextObject("{=kakxnaN5}{?SUPPORT}Yes{?}No{\\?}", null);
				textObject.SetTextVariable("SUPPORT", this.ShouldDecisionBeEnforced ? 1 : 0);
				return textObject;
			}

			// Token: 0x060045AD RID: 17837 RVA: 0x0014A92D File Offset: 0x00148B2D
			public override TextObject GetDecisionDescription()
			{
				if (this.ShouldDecisionBeEnforced)
				{
					return new TextObject("{=pWyxaauF}We support this proposal", null);
				}
				return new TextObject("{=BktSNgY4}We oppose this proposal", null);
			}

			// Token: 0x060045AE RID: 17838 RVA: 0x0014A94E File Offset: 0x00148B4E
			public override string GetDecisionLink()
			{
				return null;
			}

			// Token: 0x060045AF RID: 17839 RVA: 0x0014A951 File Offset: 0x00148B51
			public override ImageIdentifier GetDecisionImageIdentifier()
			{
				return null;
			}

			// Token: 0x060045B0 RID: 17840 RVA: 0x0014A954 File Offset: 0x00148B54
			public PolicyDecisionOutcome(bool shouldBeEnforced)
			{
				this.ShouldDecisionBeEnforced = shouldBeEnforced;
			}
		}
	}
}
