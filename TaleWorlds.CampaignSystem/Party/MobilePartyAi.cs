using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party
{
	// Token: 0x0200029A RID: 666
	public class MobilePartyAi
	{
		// Token: 0x060025B8 RID: 9656 RVA: 0x0009F19B File Offset: 0x0009D39B
		internal static void AutoGeneratedStaticCollectObjectsMobilePartyAi(object o, List<object> collectedObjects)
		{
			((MobilePartyAi)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060025B9 RID: 9657 RVA: 0x0009F1AC File Offset: 0x0009D3AC
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._mobileParty);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._initiativeRestoreTime, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._nextAiCheckTime, collectedObjects);
			collectedObjects.Add(this._aiBehaviorMapEntity);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._enableAgainAtHour, collectedObjects);
			collectedObjects.Add(this.MoveTargetParty);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.DoNotAttackMainPartyUntil, collectedObjects);
		}

		// Token: 0x060025BA RID: 9658 RVA: 0x0009F221 File Offset: 0x0009D421
		internal static object AutoGeneratedGetMemberValue_enableAgainAtHour(object o)
		{
			return ((MobilePartyAi)o)._enableAgainAtHour;
		}

		// Token: 0x060025BB RID: 9659 RVA: 0x0009F233 File Offset: 0x0009D433
		internal static object AutoGeneratedGetMemberValueRethinkAtNextHourlyTick(object o)
		{
			return ((MobilePartyAi)o).RethinkAtNextHourlyTick;
		}

		// Token: 0x060025BC RID: 9660 RVA: 0x0009F245 File Offset: 0x0009D445
		internal static object AutoGeneratedGetMemberValueDoNotMakeNewDecisions(object o)
		{
			return ((MobilePartyAi)o).DoNotMakeNewDecisions;
		}

		// Token: 0x060025BD RID: 9661 RVA: 0x0009F257 File Offset: 0x0009D457
		internal static object AutoGeneratedGetMemberValueIsAlerted(object o)
		{
			return ((MobilePartyAi)o).IsAlerted;
		}

		// Token: 0x060025BE RID: 9662 RVA: 0x0009F269 File Offset: 0x0009D469
		internal static object AutoGeneratedGetMemberValuePartyMoveMode(object o)
		{
			return ((MobilePartyAi)o).PartyMoveMode;
		}

		// Token: 0x060025BF RID: 9663 RVA: 0x0009F27B File Offset: 0x0009D47B
		internal static object AutoGeneratedGetMemberValueMoveTargetParty(object o)
		{
			return ((MobilePartyAi)o).MoveTargetParty;
		}

		// Token: 0x060025C0 RID: 9664 RVA: 0x0009F288 File Offset: 0x0009D488
		internal static object AutoGeneratedGetMemberValueNextTargetPosition(object o)
		{
			return ((MobilePartyAi)o).NextTargetPosition;
		}

		// Token: 0x060025C1 RID: 9665 RVA: 0x0009F29A File Offset: 0x0009D49A
		internal static object AutoGeneratedGetMemberValueDoNotAttackMainPartyUntil(object o)
		{
			return ((MobilePartyAi)o).DoNotAttackMainPartyUntil;
		}

		// Token: 0x060025C2 RID: 9666 RVA: 0x0009F2AC File Offset: 0x0009D4AC
		internal static object AutoGeneratedGetMemberValueHourCounter(object o)
		{
			return ((MobilePartyAi)o).HourCounter;
		}

		// Token: 0x060025C3 RID: 9667 RVA: 0x0009F2BE File Offset: 0x0009D4BE
		internal static object AutoGeneratedGetMemberValueBehaviorTarget(object o)
		{
			return ((MobilePartyAi)o).BehaviorTarget;
		}

		// Token: 0x060025C4 RID: 9668 RVA: 0x0009F2D0 File Offset: 0x0009D4D0
		internal static object AutoGeneratedGetMemberValueDefaultBehaviorNeedsUpdate(object o)
		{
			return ((MobilePartyAi)o).DefaultBehaviorNeedsUpdate;
		}

		// Token: 0x060025C5 RID: 9669 RVA: 0x0009F2E2 File Offset: 0x0009D4E2
		internal static object AutoGeneratedGetMemberValue_isDisabled(object o)
		{
			return ((MobilePartyAi)o)._isDisabled;
		}

		// Token: 0x060025C6 RID: 9670 RVA: 0x0009F2F4 File Offset: 0x0009D4F4
		internal static object AutoGeneratedGetMemberValue_mobileParty(object o)
		{
			return ((MobilePartyAi)o)._mobileParty;
		}

		// Token: 0x060025C7 RID: 9671 RVA: 0x0009F301 File Offset: 0x0009D501
		internal static object AutoGeneratedGetMemberValue_attackInitiative(object o)
		{
			return ((MobilePartyAi)o)._attackInitiative;
		}

		// Token: 0x060025C8 RID: 9672 RVA: 0x0009F313 File Offset: 0x0009D513
		internal static object AutoGeneratedGetMemberValue_avoidInitiative(object o)
		{
			return ((MobilePartyAi)o)._avoidInitiative;
		}

		// Token: 0x060025C9 RID: 9673 RVA: 0x0009F325 File Offset: 0x0009D525
		internal static object AutoGeneratedGetMemberValue_initiativeRestoreTime(object o)
		{
			return ((MobilePartyAi)o)._initiativeRestoreTime;
		}

		// Token: 0x060025CA RID: 9674 RVA: 0x0009F337 File Offset: 0x0009D537
		internal static object AutoGeneratedGetMemberValue_aiBehaviorResetNeeded(object o)
		{
			return ((MobilePartyAi)o)._aiBehaviorResetNeeded;
		}

		// Token: 0x060025CB RID: 9675 RVA: 0x0009F349 File Offset: 0x0009D549
		internal static object AutoGeneratedGetMemberValue_nextAiCheckTime(object o)
		{
			return ((MobilePartyAi)o)._nextAiCheckTime;
		}

		// Token: 0x060025CC RID: 9676 RVA: 0x0009F35B File Offset: 0x0009D55B
		internal static object AutoGeneratedGetMemberValue_numberOfRecentFleeingFromAParty(object o)
		{
			return ((MobilePartyAi)o)._numberOfRecentFleeingFromAParty;
		}

		// Token: 0x060025CD RID: 9677 RVA: 0x0009F36D File Offset: 0x0009D56D
		internal static object AutoGeneratedGetMemberValue_defaultBehavior(object o)
		{
			return ((MobilePartyAi)o)._defaultBehavior;
		}

		// Token: 0x060025CE RID: 9678 RVA: 0x0009F37F File Offset: 0x0009D57F
		internal static object AutoGeneratedGetMemberValue_aiPathMode(object o)
		{
			return ((MobilePartyAi)o)._aiPathMode;
		}

		// Token: 0x060025CF RID: 9679 RVA: 0x0009F391 File Offset: 0x0009D591
		internal static object AutoGeneratedGetMemberValue_aiPathNeeded(object o)
		{
			return ((MobilePartyAi)o)._aiPathNeeded;
		}

		// Token: 0x060025D0 RID: 9680 RVA: 0x0009F3A3 File Offset: 0x0009D5A3
		internal static object AutoGeneratedGetMemberValue_formationPosition(object o)
		{
			return ((MobilePartyAi)o)._formationPosition;
		}

		// Token: 0x060025D1 RID: 9681 RVA: 0x0009F3B5 File Offset: 0x0009D5B5
		internal static object AutoGeneratedGetMemberValue_moveTargetPoint(object o)
		{
			return ((MobilePartyAi)o)._moveTargetPoint;
		}

		// Token: 0x060025D2 RID: 9682 RVA: 0x0009F3C7 File Offset: 0x0009D5C7
		internal static object AutoGeneratedGetMemberValue_aiPathLastPosition(object o)
		{
			return ((MobilePartyAi)o)._aiPathLastPosition;
		}

		// Token: 0x060025D3 RID: 9683 RVA: 0x0009F3D9 File Offset: 0x0009D5D9
		internal static object AutoGeneratedGetMemberValue_aiBehaviorMapEntity(object o)
		{
			return ((MobilePartyAi)o)._aiBehaviorMapEntity;
		}

		// Token: 0x17000983 RID: 2435
		// (get) Token: 0x060025D4 RID: 9684 RVA: 0x0009F3E6 File Offset: 0x0009D5E6
		// (set) Token: 0x060025D5 RID: 9685 RVA: 0x0009F3EE File Offset: 0x0009D5EE
		public bool IsDisabled
		{
			get
			{
				return this._isDisabled;
			}
			private set
			{
				this._isDisabled = value;
			}
		}

		// Token: 0x17000984 RID: 2436
		// (get) Token: 0x060025D6 RID: 9686 RVA: 0x0009F3F7 File Offset: 0x0009D5F7
		// (set) Token: 0x060025D7 RID: 9687 RVA: 0x0009F3FF File Offset: 0x0009D5FF
		[SaveableProperty(3)]
		private CampaignTime _enableAgainAtHour { get; set; }

		// Token: 0x17000985 RID: 2437
		// (get) Token: 0x060025D8 RID: 9688 RVA: 0x0009F408 File Offset: 0x0009D608
		// (set) Token: 0x060025D9 RID: 9689 RVA: 0x0009F410 File Offset: 0x0009D610
		[SaveableProperty(10)]
		public bool RethinkAtNextHourlyTick { get; set; }

		// Token: 0x17000986 RID: 2438
		// (get) Token: 0x060025DA RID: 9690 RVA: 0x0009F419 File Offset: 0x0009D619
		// (set) Token: 0x060025DB RID: 9691 RVA: 0x0009F421 File Offset: 0x0009D621
		[SaveableProperty(11)]
		public bool DoNotMakeNewDecisions { get; private set; }

		// Token: 0x17000987 RID: 2439
		// (get) Token: 0x060025DC RID: 9692 RVA: 0x0009F42A File Offset: 0x0009D62A
		// (set) Token: 0x060025DD RID: 9693 RVA: 0x0009F432 File Offset: 0x0009D632
		[SaveableProperty(17)]
		public bool IsAlerted { get; private set; }

		// Token: 0x17000988 RID: 2440
		// (get) Token: 0x060025DE RID: 9694 RVA: 0x0009F43B File Offset: 0x0009D63B
		// (set) Token: 0x060025DF RID: 9695 RVA: 0x0009F443 File Offset: 0x0009D643
		[SaveableProperty(24)]
		public MoveModeType PartyMoveMode { get; private set; }

		// Token: 0x17000989 RID: 2441
		// (get) Token: 0x060025E0 RID: 9696 RVA: 0x0009F44C File Offset: 0x0009D64C
		// (set) Token: 0x060025E1 RID: 9697 RVA: 0x0009F454 File Offset: 0x0009D654
		[SaveableProperty(26)]
		public MobileParty MoveTargetParty { get; private set; }

		// Token: 0x1700098A RID: 2442
		// (get) Token: 0x060025E2 RID: 9698 RVA: 0x0009F45D File Offset: 0x0009D65D
		// (set) Token: 0x060025E3 RID: 9699 RVA: 0x0009F465 File Offset: 0x0009D665
		[SaveableProperty(27)]
		public Vec2 NextTargetPosition { get; private set; }

		// Token: 0x1700098B RID: 2443
		// (get) Token: 0x060025E4 RID: 9700 RVA: 0x0009F46E File Offset: 0x0009D66E
		// (set) Token: 0x060025E5 RID: 9701 RVA: 0x0009F476 File Offset: 0x0009D676
		[SaveableProperty(31)]
		public CampaignTime DoNotAttackMainPartyUntil { get; internal set; }

		// Token: 0x1700098C RID: 2444
		// (get) Token: 0x060025E6 RID: 9702 RVA: 0x0009F47F File Offset: 0x0009D67F
		// (set) Token: 0x060025E7 RID: 9703 RVA: 0x0009F487 File Offset: 0x0009D687
		[CachedData]
		public int PathBegin { get; private set; }

		// Token: 0x1700098D RID: 2445
		// (get) Token: 0x060025E8 RID: 9704 RVA: 0x0009F490 File Offset: 0x0009D690
		// (set) Token: 0x060025E9 RID: 9705 RVA: 0x0009F498 File Offset: 0x0009D698
		[CachedData]
		public NavigationPath Path { get; private set; }

		// Token: 0x1700098E RID: 2446
		// (get) Token: 0x060025EA RID: 9706 RVA: 0x0009F4A1 File Offset: 0x0009D6A1
		// (set) Token: 0x060025EB RID: 9707 RVA: 0x0009F4A9 File Offset: 0x0009D6A9
		[CachedData]
		public bool ForceAiNoPathMode { get; set; }

		// Token: 0x1700098F RID: 2447
		// (get) Token: 0x060025EC RID: 9708 RVA: 0x0009F4B2 File Offset: 0x0009D6B2
		// (set) Token: 0x060025ED RID: 9709 RVA: 0x0009F4BC File Offset: 0x0009D6BC
		public AiBehavior DefaultBehavior
		{
			get
			{
				return this._defaultBehavior;
			}
			private set
			{
				if (this._defaultBehavior != value)
				{
					this._numberOfRecentFleeingFromAParty = 0;
					this._defaultBehavior = value;
					this.DefaultBehaviorNeedsUpdate = true;
					if (this._mobileParty != MobileParty.MainParty && this._mobileParty.BesiegedSettlement != null && value != AiBehavior.BesiegeSettlement && value != AiBehavior.EscortParty && value != AiBehavior.AssaultSettlement)
					{
						this._mobileParty.BesiegerCamp = null;
					}
				}
			}
		}

		// Token: 0x17000990 RID: 2448
		// (get) Token: 0x060025EE RID: 9710 RVA: 0x0009F51A File Offset: 0x0009D71A
		public bool NeedTargetReset
		{
			get
			{
				return this._numberOfRecentFleeingFromAParty >= 6;
			}
		}

		// Token: 0x17000991 RID: 2449
		// (get) Token: 0x060025EF RID: 9711 RVA: 0x0009F528 File Offset: 0x0009D728
		public int NumberOfRecentFleeingFromAParty
		{
			get
			{
				return this._numberOfRecentFleeingFromAParty;
			}
		}

		// Token: 0x17000992 RID: 2450
		// (get) Token: 0x060025F0 RID: 9712 RVA: 0x0009F530 File Offset: 0x0009D730
		private float AvoidInitiative
		{
			get
			{
				if (!this._initiativeRestoreTime.IsPast)
				{
					return this._avoidInitiative;
				}
				return 1f;
			}
		}

		// Token: 0x17000993 RID: 2451
		// (get) Token: 0x060025F1 RID: 9713 RVA: 0x0009F54B File Offset: 0x0009D74B
		private float AttackInitiative
		{
			get
			{
				if (!this._initiativeRestoreTime.IsPast)
				{
					return this._attackInitiative;
				}
				return 1f;
			}
		}

		// Token: 0x17000994 RID: 2452
		// (get) Token: 0x060025F2 RID: 9714 RVA: 0x0009F566 File Offset: 0x0009D766
		// (set) Token: 0x060025F3 RID: 9715 RVA: 0x0009F56E File Offset: 0x0009D76E
		public PartyBase AiBehaviorPartyBase { get; private set; }

		// Token: 0x17000995 RID: 2453
		// (get) Token: 0x060025F4 RID: 9716 RVA: 0x0009F577 File Offset: 0x0009D777
		// (set) Token: 0x060025F5 RID: 9717 RVA: 0x0009F580 File Offset: 0x0009D780
		public IMapEntity AiBehaviorMapEntity
		{
			get
			{
				return this._aiBehaviorMapEntity;
			}
			set
			{
				if (this._aiBehaviorMapEntity != value)
				{
					this._aiBehaviorMapEntity = value;
					this.AiBehaviorPartyBase = null;
					if (this._aiBehaviorMapEntity != null)
					{
						MobileParty mobileParty;
						if ((mobileParty = (this._aiBehaviorMapEntity as MobileParty)) != null)
						{
							this.AiBehaviorPartyBase = mobileParty.Party;
							return;
						}
						Settlement settlement;
						if ((settlement = (this._aiBehaviorMapEntity as Settlement)) != null)
						{
							this.AiBehaviorPartyBase = settlement.Party;
							return;
						}
					}
					else
					{
						this.AiBehaviorPartyBase = null;
					}
				}
			}
		}

		// Token: 0x060025F6 RID: 9718 RVA: 0x0009F5EC File Offset: 0x0009D7EC
		internal MobilePartyAi(MobileParty mobileParty)
		{
			this._mobileParty = mobileParty;
			this.RethinkAtNextHourlyTick = false;
			this.HourCounter = MBRandom.RandomInt(100);
			this._lastTargetedParties = new List<MobileParty>();
			this.InitCached();
			this._formationPosition.x = 10000f;
			this._formationPosition.y = 10000f;
			while (this._formationPosition.LengthSquared > 0.36f || this._formationPosition.LengthSquared < 0.22f)
			{
				this._formationPosition = new Vec2(MBRandom.RandomFloat * 1.2f - 0.6f, MBRandom.RandomFloat * 1.2f - 0.6f);
			}
		}

		// Token: 0x060025F7 RID: 9719 RVA: 0x0009F6CA File Offset: 0x0009D8CA
		internal void StartUp()
		{
			this.NextTargetPosition = this._mobileParty.Position2D;
			this._aiPathLastFace = PathFaceRecord.NullFaceRecord;
			this._moveTargetPoint = this._mobileParty.Position2D;
			this.ForceAiNoPathMode = false;
		}

		// Token: 0x060025F8 RID: 9720 RVA: 0x0009F700 File Offset: 0x0009D900
		internal void OnGameInitialized()
		{
			this.UpdatePathModeWithPosition(this._moveTargetPoint);
			this.ComputePath(this._moveTargetPoint);
		}

		// Token: 0x060025F9 RID: 9721 RVA: 0x0009F71B File Offset: 0x0009D91B
		internal void InitCached()
		{
			this.Path = new NavigationPath();
			this._aiPathLastFace = PathFaceRecord.NullFaceRecord;
			this.ForceAiNoPathMode = false;
		}

		// Token: 0x060025FA RID: 9722 RVA: 0x0009F73C File Offset: 0x0009D93C
		internal void PreAfterLoad()
		{
			if (this.AiBehaviorMapEntity != null)
			{
				Settlement settlement;
				if ((settlement = (this.AiBehaviorMapEntity as Settlement)) != null)
				{
					this.AiBehaviorPartyBase = settlement.Party;
					return;
				}
				MobileParty mobileParty;
				if ((mobileParty = (this.AiBehaviorMapEntity as MobileParty)) != null)
				{
					this.AiBehaviorPartyBase = mobileParty.Party;
				}
			}
		}

		// Token: 0x060025FB RID: 9723 RVA: 0x0009F788 File Offset: 0x0009D988
		internal void OnBeforeLoad()
		{
			this._lastTargetedParties = new List<MobileParty>();
		}

		// Token: 0x060025FC RID: 9724 RVA: 0x0009F795 File Offset: 0x0009D995
		internal void HourlyTick()
		{
			if (this._numberOfRecentFleeingFromAParty > 5 && MBRandom.RandomFloat < 0.2f)
			{
				this._numberOfRecentFleeingFromAParty -= 5;
			}
			this.RemoveOneOfLastTargettedPartiesWithProbability(0.2f);
		}

		// Token: 0x060025FD RID: 9725 RVA: 0x0009F7C8 File Offset: 0x0009D9C8
		internal void Tick(float dt)
		{
			if (this.DefaultBehaviorNeedsUpdate)
			{
				this._nextAiCheckTime = CampaignTime.Now;
				this.DefaultBehaviorNeedsUpdate = false;
			}
			if (!this._nextAiCheckTime.IsFuture)
			{
				this.TickInternal();
				long valueInSeconds = (long)(0.25f * (0.6f + 0.1f * MBRandom.RandomFloat) * ((this._mobileParty.ShortTermTargetParty == MobileParty.MainParty && this._mobileParty.ShortTermBehavior == AiBehavior.EngageParty) ? 0.5f : 1f) * 60f * 60f);
				this._nextAiCheckTime = CampaignTime.Now + CampaignTime.Seconds(valueInSeconds);
			}
		}

		// Token: 0x060025FE RID: 9726 RVA: 0x0009F86C File Offset: 0x0009DA6C
		private void TickInternal()
		{
			if (this._mobileParty.MapEvent != null)
			{
				return;
			}
			if (this._mobileParty == MobileParty.MainParty && MobileParty.MainParty.DefaultBehavior == AiBehavior.EngageParty && !MobileParty.MainParty.TargetParty.IsVisible)
			{
				MobileParty.MainParty.Ai.SetMoveModeHold();
			}
			if (this.IsDisabled && this.EnableAgainAtHourIsPast())
			{
				this.EnableAi();
				return;
			}
			if (this._mobileParty.Army != null && this._mobileParty.Army.LeaderParty.AttachedParties.Contains(this._mobileParty))
			{
				return;
			}
			AiBehavior newAiBehavior;
			PartyBase partyBase;
			Vec2 bestTargetPoint;
			this.GetBehaviors(out newAiBehavior, out partyBase, out bestTargetPoint);
			if (this.IsDisabled && partyBase == null)
			{
				return;
			}
			this.SetAiBehavior(newAiBehavior, partyBase, bestTargetPoint);
		}

		// Token: 0x060025FF RID: 9727 RVA: 0x0009F92C File Offset: 0x0009DB2C
		private void RemoveOneOfLastTargettedPartiesWithProbability(float probabilityToRemove)
		{
			int num = -1;
			for (int i = 0; i < this._lastTargetedParties.Count; i++)
			{
				if (MBRandom.RandomFloat < probabilityToRemove)
				{
					num = i;
					break;
				}
			}
			if (num >= 0)
			{
				this._lastTargetedParties.RemoveAt(num);
			}
		}

		// Token: 0x06002600 RID: 9728 RVA: 0x0009F96D File Offset: 0x0009DB6D
		public void CheckPartyNeedsUpdate()
		{
			if (this.DefaultBehaviorNeedsUpdate)
			{
				this.Tick(0f);
				EncounterManager.HandleEncounterForMobileParty(this._mobileParty, 0f);
			}
		}

		// Token: 0x06002601 RID: 9729 RVA: 0x0009F992 File Offset: 0x0009DB92
		public void SetMoveModeHold()
		{
			this.DefaultBehavior = AiBehavior.Hold;
			this.SetShortTermBehavior(AiBehavior.Hold, null);
			this._mobileParty.TargetSettlement = null;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x06002602 RID: 9730 RVA: 0x0009F9BB File Offset: 0x0009DBBB
		public void SetMoveEngageParty(MobileParty party)
		{
			this.DefaultBehavior = AiBehavior.EngageParty;
			this._mobileParty.TargetParty = party;
			this._mobileParty.TargetSettlement = null;
		}

		// Token: 0x06002603 RID: 9731 RVA: 0x0009F9DC File Offset: 0x0009DBDC
		public void SetMoveGoAroundParty(MobileParty party)
		{
			this.DefaultBehavior = AiBehavior.GoAroundParty;
			this._mobileParty.TargetParty = party;
			this._mobileParty.TargetSettlement = null;
		}

		// Token: 0x06002604 RID: 9732 RVA: 0x0009F9FD File Offset: 0x0009DBFD
		public void SetMoveGoToSettlement(Settlement settlement)
		{
			this.DefaultBehavior = AiBehavior.GoToSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
			this._mobileParty.TargetPosition = settlement.GatePosition;
		}

		// Token: 0x06002605 RID: 9733 RVA: 0x0009FA2F File Offset: 0x0009DC2F
		public void SetMoveGoToPoint(Vec2 point)
		{
			this.DefaultBehavior = AiBehavior.GoToPoint;
			this._mobileParty.TargetPosition = point;
			this._mobileParty.TargetSettlement = null;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x06002606 RID: 9734 RVA: 0x0009FA5D File Offset: 0x0009DC5D
		public void SetMoveEscortParty(MobileParty mobileParty)
		{
			this.DefaultBehavior = AiBehavior.EscortParty;
			this._mobileParty.TargetParty = mobileParty;
			this._mobileParty.TargetSettlement = null;
		}

		// Token: 0x06002607 RID: 9735 RVA: 0x0009FA7F File Offset: 0x0009DC7F
		public void SetMovePatrolAroundPoint(Vec2 point)
		{
			this._mobileParty.TargetParty = null;
			this._mobileParty.TargetSettlement = null;
			this.DefaultBehavior = AiBehavior.PatrolAroundPoint;
			this._mobileParty.TargetPosition = point;
			this._aiBehaviorResetNeeded = true;
		}

		// Token: 0x06002608 RID: 9736 RVA: 0x0009FAB4 File Offset: 0x0009DCB4
		public void SetMovePatrolAroundSettlement(Settlement settlement)
		{
			this.SetMovePatrolAroundPoint(settlement.GatePosition);
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x06002609 RID: 9737 RVA: 0x0009FADA File Offset: 0x0009DCDA
		public void SetMoveRaidSettlement(Settlement settlement)
		{
			this.DefaultBehavior = AiBehavior.RaidSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x0600260A RID: 9738 RVA: 0x0009FAFC File Offset: 0x0009DCFC
		public void SetMoveBesiegeSettlement(Settlement settlement)
		{
			if (this._mobileParty.BesiegedSettlement != null && this._mobileParty.BesiegedSettlement != settlement)
			{
				this._mobileParty.BesiegerCamp = null;
			}
			this.DefaultBehavior = AiBehavior.BesiegeSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x0600260B RID: 9739 RVA: 0x0009FB4F File Offset: 0x0009DD4F
		public void SetMoveDefendSettlement(Settlement settlement)
		{
			this.DefaultBehavior = AiBehavior.DefendSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x0600260C RID: 9740 RVA: 0x0009FB74 File Offset: 0x0009DD74
		internal void GetBehaviors(out AiBehavior bestAiBehavior, out PartyBase behaviorParty, out Vec2 bestTargetPoint)
		{
			bestAiBehavior = this._mobileParty.DefaultBehavior;
			MobileParty mobileParty = this._mobileParty.TargetParty;
			bestTargetPoint = this._mobileParty.TargetPosition;
			Vec2 avarageEnemyVec = new Vec2(0f, 0f);
			MobileParty bestInitiativeAllyPartyToEscort = null;
			if (Campaign.Current.GameStarted && this._mobileParty != MobileParty.MainParty && this._mobileParty.BesiegedSettlement == null && (this._mobileParty.Army == null || !this._mobileParty.Army.LeaderParty.AttachedParties.Contains(this._mobileParty)))
			{
				AiBehavior aiBehavior;
				MobileParty mobileParty2;
				float num;
				this.GetBestInitiativeBehavior(out aiBehavior, out mobileParty2, out num, out avarageEnemyVec);
				if (!this.DoNotMakeNewDecisions || (mobileParty2 != null && this._mobileParty.TargetSettlement != null && ((mobileParty2.MapEvent != null && mobileParty2.MapEvent.MapEventSettlement == this._mobileParty.TargetSettlement) || mobileParty2.BesiegedSettlement == this._mobileParty.TargetSettlement)))
				{
					if (this._mobileParty.ShortTermBehavior == AiBehavior.EngageParty && this._mobileParty.ShortTermTargetParty != null && (num < 1f || aiBehavior != AiBehavior.EngageParty || mobileParty2 != this._mobileParty.ShortTermTargetParty))
					{
						this._lastTargetedParties.Add(this._mobileParty.ShortTermTargetParty);
					}
					if (num > 1f)
					{
						bestAiBehavior = aiBehavior;
						mobileParty = mobileParty2;
					}
					else if (this._mobileParty.ShortTermBehavior == AiBehavior.FleeToPoint || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToGate)
					{
						float num2 = this._mobileParty.AiBehaviorTarget.DistanceSquared(this._mobileParty.Position2D);
						float lastCalculatedSpeed = this._mobileParty._lastCalculatedSpeed;
						if (num2 >= lastCalculatedSpeed * lastCalculatedSpeed * 0.25f * 0.25f)
						{
							bestAiBehavior = AiBehavior.FleeToPoint;
							mobileParty = this._mobileParty.ShortTermTargetParty;
						}
					}
					if (aiBehavior == AiBehavior.DefendSettlement && mobileParty2.DefaultBehavior == AiBehavior.DefendSettlement)
					{
						if (mobileParty2.MapEvent != null)
						{
							bestAiBehavior = AiBehavior.EngageParty;
							mobileParty = mobileParty2.ShortTermTargetParty;
						}
						else
						{
							bestInitiativeAllyPartyToEscort = mobileParty2;
						}
					}
				}
			}
			this.IsAlerted = false;
			AiBehavior aiBehavior2 = bestAiBehavior;
			Vec2 vec = bestTargetPoint;
			Settlement targetSettlement = this._mobileParty.TargetSettlement;
			MobileParty mobileParty3 = mobileParty;
			switch (bestAiBehavior)
			{
			case AiBehavior.GoToSettlement:
				if (this._mobileParty.CurrentSettlement == this._mobileParty.TargetSettlement)
				{
					this.GetInSettlementBehavior(ref aiBehavior2, ref mobileParty3);
				}
				break;
			case AiBehavior.BesiegeSettlement:
				if (!this._mobileParty.IsMainParty)
				{
					this.GetBesiegeBehavior(out aiBehavior2, out vec, out targetSettlement);
				}
				break;
			case AiBehavior.EngageParty:
				this.SetShortTermBehavior(AiBehavior.EngageParty, mobileParty3);
				break;
			case AiBehavior.GoAroundParty:
				this.GetGoAroundPartyBehavior(this._mobileParty.TargetParty, bestInitiativeAllyPartyToEscort, out aiBehavior2, out vec, out mobileParty3);
				break;
			case AiBehavior.FleeToPoint:
				if (this._mobileParty.DefaultBehavior == AiBehavior.PatrolAroundPoint)
				{
					this._aiBehaviorResetNeeded = true;
				}
				this.IsAlerted = true;
				this.GetFleeBehavior(out aiBehavior2, out vec, ref targetSettlement, mobileParty, avarageEnemyVec);
				break;
			case AiBehavior.PatrolAroundPoint:
				this.GetPatrolBehavior(out aiBehavior2, out vec, out mobileParty3, this._mobileParty.TargetPosition);
				break;
			case AiBehavior.EscortParty:
				this.GetFollowBehavior(ref aiBehavior2, ref targetSettlement, mobileParty);
				break;
			case AiBehavior.DefendSettlement:
			{
				Settlement targetSettlement2 = this._mobileParty.TargetSettlement;
				if (targetSettlement2 == null)
				{
					targetSettlement2 = mobileParty.TargetSettlement;
				}
				if (targetSettlement2.LastAttackerParty != null && targetSettlement2.LastAttackerParty.IsActive)
				{
					this.GetGoAroundPartyBehavior(targetSettlement2.LastAttackerParty, bestInitiativeAllyPartyToEscort, out aiBehavior2, out vec, out mobileParty3);
				}
				break;
			}
			}
			bestAiBehavior = aiBehavior2;
			bestTargetPoint = vec;
			if (mobileParty3 != null)
			{
				mobileParty = mobileParty3;
			}
			if (bestAiBehavior == AiBehavior.GoToSettlement || bestAiBehavior == AiBehavior.RaidSettlement || bestAiBehavior == AiBehavior.AssaultSettlement || bestAiBehavior == AiBehavior.BesiegeSettlement || (bestAiBehavior == AiBehavior.DefendSettlement && mobileParty == null))
			{
				behaviorParty = ((targetSettlement != null) ? targetSettlement.Party : this._mobileParty.TargetSettlement.Party);
				return;
			}
			behaviorParty = ((mobileParty != null) ? mobileParty.Party : null);
		}

		// Token: 0x0600260D RID: 9741 RVA: 0x0009FF50 File Offset: 0x0009E150
		private void GetInSettlementBehavior(ref AiBehavior shortTermBehavior, ref MobileParty shortTermTargetParty)
		{
			if (this._mobileParty.MapEvent != null)
			{
				MobileParty mobileParty = this._mobileParty.MapEvent.AttackerSide.LeaderParty.MobileParty;
				if (FactionManager.IsAtWarAgainstFaction(mobileParty.MapFaction, this._mobileParty.MapFaction))
				{
					shortTermBehavior = AiBehavior.EngageParty;
					shortTermTargetParty = mobileParty;
				}
			}
		}

		// Token: 0x0600260E RID: 9742 RVA: 0x0009FFA3 File Offset: 0x0009E1A3
		private void GetFollowBehavior(ref AiBehavior shortTermBehavior, ref Settlement shortTermTargetSettlement, MobileParty followedParty)
		{
			shortTermBehavior = AiBehavior.EscortParty;
			if (followedParty == null || !followedParty.IsActive)
			{
				shortTermBehavior = AiBehavior.Hold;
				return;
			}
			if (followedParty.CurrentSettlement != null)
			{
				shortTermBehavior = AiBehavior.GoToSettlement;
				shortTermTargetSettlement = followedParty.CurrentSettlement;
			}
		}

		// Token: 0x0600260F RID: 9743 RVA: 0x0009FFCC File Offset: 0x0009E1CC
		private void GetBesiegeBehavior(out AiBehavior shortTermBehavior, out Vec2 shortTermTargetPoint, out Settlement shortTermTargetSettlement)
		{
			if (this._mobileParty.TargetSettlement != null)
			{
				if (this._mobileParty.TargetSettlement.SiegeEvent != null && this._mobileParty.TargetSettlement.SiegeEvent.BesiegerCamp.LeaderParty == this._mobileParty && this._mobileParty.TargetSettlement.SiegeEvent.BesiegerCamp.IsReadyToBesiege)
				{
					shortTermTargetSettlement = this._mobileParty.TargetSettlement;
					shortTermBehavior = AiBehavior.AssaultSettlement;
				}
				else if (this._mobileParty.BesiegedSettlement == this._mobileParty.TargetSettlement)
				{
					shortTermTargetSettlement = null;
					shortTermBehavior = AiBehavior.Hold;
				}
				else
				{
					shortTermTargetSettlement = this._mobileParty.TargetSettlement;
					shortTermBehavior = AiBehavior.GoToSettlement;
				}
			}
			else
			{
				shortTermTargetSettlement = null;
				shortTermBehavior = AiBehavior.GoToPoint;
			}
			shortTermTargetPoint = this._mobileParty.TargetSettlement.GatePosition;
		}

		// Token: 0x06002610 RID: 9744 RVA: 0x000A009C File Offset: 0x0009E29C
		private void GetFleeBehavior(out AiBehavior fleeBehaviorInternal, out Vec2 fleeTargetPoint, ref Settlement fleeTargetSettlement, MobileParty partyToFleeFrom, Vec2 avarageEnemyVec)
		{
			fleeBehaviorInternal = this._mobileParty.ShortTermBehavior;
			fleeTargetPoint = this._mobileParty.AiBehaviorTarget;
			if (this._mobileParty.CurrentSettlement != null)
			{
				fleeBehaviorInternal = AiBehavior.GoToSettlement;
				fleeTargetSettlement = this._mobileParty.CurrentSettlement;
			}
			else if (this._mobileParty.DefaultBehavior == AiBehavior.GoToSettlement && ((partyToFleeFrom.MapEvent != null && partyToFleeFrom.MapEvent.MapEventSettlement == this._mobileParty.TargetSettlement) || partyToFleeFrom.BesiegedSettlement == this._mobileParty.TargetSettlement))
			{
				fleeBehaviorInternal = AiBehavior.FleeToPoint;
				fleeTargetPoint = this._mobileParty.Position2D;
			}
			else if (this._mobileParty.ShortTermBehavior != AiBehavior.FleeToPoint || this._mobileParty.ShortTermTargetParty != partyToFleeFrom || this._mobileParty.AiBehaviorTarget.Distance(this._mobileParty.Position2D) < this._mobileParty._lastCalculatedSpeed * 0.25f)
			{
				fleeBehaviorInternal = AiBehavior.FleeToPoint;
				fleeTargetPoint = this._mobileParty.Position2D;
				Vec2 vec = partyToFleeFrom.Position2D - this._mobileParty.Position2D;
				float num = MathF.Min(3f, vec.Length);
				float num2 = 2f * MBRandom.RandomFloat - 1f;
				float num3 = 2f * MBRandom.RandomFloat - 1f;
				vec.Normalize();
				this._mobileParty.AverageFleeTargetDirection = new Vec2((this._mobileParty.AverageFleeTargetDirection.x * (float)(this._numberOfRecentFleeingFromAParty - 1) + vec.x) / (float)this._numberOfRecentFleeingFromAParty, (this._mobileParty.AverageFleeTargetDirection.y * (float)(this._numberOfRecentFleeingFromAParty - 1) + vec.y) / (float)this._numberOfRecentFleeingFromAParty);
				this._mobileParty.AverageFleeTargetDirection.Normalize();
				vec += 3f * avarageEnemyVec;
				vec.Normalize();
				Vec2 direction = -vec + 0.1f * this._mobileParty.Bearing + new Vec2(num2 * (num / 10f), num3 * (num / 10f));
				direction.Normalize();
				float num4 = (partyToFleeFrom.GetTotalStrengthWithFollowers(false) + 0.1f) / (this._mobileParty.GetTotalStrengthWithFollowers(false) + 0.1f) * 3f;
				num4 += (float)this.NumberOfRecentFleeingFromAParty * 2f;
				num4 = MathF.Min(num4, this._mobileParty.IsLordParty ? 10f : 5f);
				fleeBehaviorInternal = AiBehavior.FleeToPoint;
				direction.Normalize();
				this.GetAccessibleTargetPointInDirection(out fleeTargetPoint, direction, num4, this._mobileParty.Position2D, 100, 0.1f);
			}
			Vec2 fleeDirection = fleeTargetPoint - this._mobileParty.Position2D;
			fleeDirection.Normalize();
			if (this._mobileParty.IsLordParty && this._mobileParty.MapFaction.IsKingdomFaction)
			{
				ValueTuple<AiBehavior, Settlement> behaviorForNearbySettlementToFlee = this.GetBehaviorForNearbySettlementToFlee(partyToFleeFrom.Position2D, fleeDirection);
				AiBehavior item = behaviorForNearbySettlementToFlee.Item1;
				Settlement item2 = behaviorForNearbySettlementToFlee.Item2;
				if (item != AiBehavior.None)
				{
					fleeBehaviorInternal = item;
					if (item == AiBehavior.GoToSettlement)
					{
						fleeTargetSettlement = item2;
					}
					else if (item == AiBehavior.FleeToGate)
					{
						fleeTargetPoint = item2.GatePosition;
					}
				}
			}
			MobileParty nearbyPartyToFlee = this.GetNearbyPartyToFlee(partyToFleeFrom, fleeDirection);
			if (nearbyPartyToFlee != null)
			{
				fleeBehaviorInternal = AiBehavior.FleeToParty;
				fleeTargetPoint = nearbyPartyToFlee.Position2D;
			}
			if (this.IsFleeBehavior(fleeBehaviorInternal))
			{
				this._numberOfRecentFleeingFromAParty++;
			}
		}

		// Token: 0x06002611 RID: 9745 RVA: 0x000A0420 File Offset: 0x0009E620
		private void GetGoAroundPartyBehavior(MobileParty targetParty, MobileParty bestInitiativeAllyPartyToEscort, out AiBehavior goAroundPartyBehavior, out Vec2 goAroundPartyTargetPoint, out MobileParty goAroundPartyTargetParty)
		{
			Vec2 position2D = targetParty.Position2D;
			goAroundPartyTargetPoint = position2D;
			goAroundPartyTargetParty = targetParty;
			Vec2 vec = this._mobileParty.Position2D - position2D;
			float length = vec.Length;
			vec.Normalize();
			bool flag = false;
			Vec2 vec2 = goAroundPartyTargetPoint;
			int num = 5;
			while (num >= 0 && !flag)
			{
				int num2 = this._mobileParty.RandomInt(-4, 5);
				int num3 = 1;
				while (num3 <= 2 && !flag)
				{
					for (int i = num2; i < num2 + 9; i++)
					{
						Vec2 v = vec;
						v.RotateCCW((float)i / 9f * 1.5707964f * (float)num3 * 0.5f * (MathF.Min(MathF.Max(0f, length - 3.6000001f), 9f) / 9f));
						Vec2 vec3 = position2D + v * 3f * 1.2f * ((float)num / 5f);
						PathFaceRecord faceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(this._mobileParty.Position2D);
						PathFaceRecord faceIndex2 = Campaign.Current.MapSceneWrapper.GetFaceIndex(vec3);
						if (Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, faceIndex2, false) && PartyBase.IsPositionOkForTraveling(vec3))
						{
							flag = true;
							vec2 = vec3;
							break;
						}
					}
					num3++;
				}
				num--;
			}
			if (flag)
			{
				if (MBRandom.RandomFloat < 0.2f * this._mobileParty.AiBehaviorTarget.DistanceSquared(vec2) || targetParty._lastCalculatedSpeed > this._mobileParty._lastCalculatedSpeed)
				{
					goAroundPartyTargetPoint = vec2;
				}
				else
				{
					goAroundPartyTargetPoint = this._mobileParty.AiBehaviorTarget;
				}
				goAroundPartyBehavior = AiBehavior.GoToPoint;
			}
			else
			{
				goAroundPartyBehavior = AiBehavior.EngageParty;
				goAroundPartyTargetParty = targetParty;
			}
			if (bestInitiativeAllyPartyToEscort != null && targetParty.SiegeEvent != null && targetParty.BesiegerCamp.LeaderParty == targetParty)
			{
				goAroundPartyBehavior = AiBehavior.EscortParty;
				goAroundPartyTargetParty = bestInitiativeAllyPartyToEscort;
			}
		}

		// Token: 0x06002612 RID: 9746 RVA: 0x000A061C File Offset: 0x0009E81C
		private void GetPatrolBehavior(out AiBehavior patrolBehavior, out Vec2 patrolTargetPoint, out MobileParty patrolTargetParty, Vec2 patrollingCenterPoint)
		{
			float num = this._mobileParty.AiBehaviorTarget.DistanceSquared(this._mobileParty.Position2D);
			patrolBehavior = AiBehavior.GoToPoint;
			patrolTargetPoint = this._mobileParty.AiBehaviorTarget;
			patrolTargetParty = null;
			if (this._mobileParty.ShortTermBehavior == AiBehavior.GoToSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.EngageParty || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToPoint)
			{
				this._aiBehaviorResetNeeded = true;
			}
			if (num < 1f || this._aiBehaviorResetNeeded)
			{
				if (MBRandom.RandomFloat < 0.125f || this._aiBehaviorResetNeeded)
				{
					Vec2 v = patrollingCenterPoint - this._mobileParty.Position2D;
					float num2 = v.Normalize();
					float maxPatrolRadiusForSettlement = this.GetMaxPatrolRadiusForSettlement();
					float num3 = MathF.Max(num2 * 0.25f, maxPatrolRadiusForSettlement);
					if (num2 > num3 * (3.2f / (this._mobileParty.IsCurrentlyUsedByAQuest ? 1.5f : 1f)))
					{
						patrolBehavior = AiBehavior.GoToPoint;
						patrolTargetPoint = ((this._mobileParty.TargetSettlement != null) ? this._mobileParty.TargetSettlement.GatePosition : patrollingCenterPoint);
					}
					else
					{
						float num4 = (this._mobileParty.TargetSettlement != null && this._mobileParty.TargetSettlement.NumberOfEnemiesSpottedAround > 1f) ? (MathF.Sqrt(this._mobileParty.TargetSettlement.NumberOfEnemiesSpottedAround) - 1f) : 0f;
						float num5 = MathF.Max(0f, MathF.Min(0.9f, num2 / (num3 / (((this._mobileParty.TargetSettlement != null && this._mobileParty.TargetSettlement.MapFaction == this._mobileParty.MapFaction) ? num4 : 0f) + 1f)) - 0.4f));
						Vec2 direction = (1f - num5) * this._mobileParty.Bearing + num5 * v;
						direction.RotateCCW((-0.3f + MBRandom.RandomFloat) * 0.15f);
						direction.Normalize();
						float num6 = 0.5f + 0.5f * MBRandom.RandomFloat;
						float rotationChangeLimitAddition = (num2 > maxPatrolRadiusForSettlement * 4f) ? 0.2f : ((num2 > maxPatrolRadiusForSettlement * 2f) ? 0.4f : ((num2 > maxPatrolRadiusForSettlement) ? 0.6f : 1f));
						this.GetAccessibleTargetPointInDirection(out patrolTargetPoint, direction, num3 * num6, patrollingCenterPoint, 20, rotationChangeLimitAddition);
					}
					this._aiBehaviorResetNeeded = false;
					return;
				}
				patrolTargetPoint = this._mobileParty.Position2D;
			}
		}

		// Token: 0x06002613 RID: 9747 RVA: 0x000A08A0 File Offset: 0x0009EAA0
		private void GetBestInitiativeBehavior(out AiBehavior bestInitiativeBehavior, out MobileParty bestInitiativeTargetParty, out float bestInitiativeBehaviorScore, out Vec2 averageEnemyVec)
		{
			MobilePartyAi.DangerousPartiesAndTheirVecs.Clear();
			bestInitiativeBehaviorScore = 0f;
			bestInitiativeTargetParty = null;
			bestInitiativeBehavior = AiBehavior.None;
			averageEnemyVec = Vec2.Zero;
			if (this._mobileParty.CurrentSettlement != null && (this._mobileParty.IsGarrison || this._mobileParty.IsMilitia || this._mobileParty.IsBandit))
			{
				return;
			}
			LocatableSearchData<MobileParty> locatableSearchData = MobileParty.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 9f);
			MobileParty mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
			while (mobileParty != null)
			{
				if (mobileParty.MapEvent != null && MobileParty.MainParty.MapEvent == mobileParty.MapEvent && (MobileParty.MainParty.Army == null || MobileParty.MainParty.Army.LeaderParty == MobileParty.MainParty) && mobileParty != MobileParty.MainParty)
				{
					mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
				}
				else
				{
					if (mobileParty != this._mobileParty && mobileParty.IsActive && this.IsEnemy(mobileParty.Party) && !mobileParty.ShouldBeIgnored && (mobileParty.CurrentSettlement == null || mobileParty.IsGarrison || mobileParty.IsLordParty))
					{
						Settlement currentSettlement = this._mobileParty.CurrentSettlement;
						if (((currentSettlement != null) ? currentSettlement.SiegeEvent : null) == null && (!mobileParty.IsGarrison || this._mobileParty.IsBandit) && (mobileParty.BesiegerCamp == null || mobileParty.BesiegerCamp.LeaderParty == mobileParty) && (mobileParty.Army == null || mobileParty.Army.LeaderParty == mobileParty || mobileParty.AttachedTo == null) && (mobileParty.MapEvent == null || mobileParty == MobileParty.MainParty || mobileParty.Party.MapEvent.MapEventSettlement != null || mobileParty.Party == mobileParty.Party.MapEvent.GetLeaderParty(BattleSideEnum.Attacker) || mobileParty.Party == mobileParty.Party.MapEvent.GetLeaderParty(BattleSideEnum.Defender)) && (mobileParty.MapEvent == null || this.IsEnemy(mobileParty.MapEvent.AttackerSide.LeaderParty) != this.IsEnemy(mobileParty.MapEvent.DefenderSide.LeaderParty)) && (mobileParty.CurrentSettlement == null || !mobileParty.CurrentSettlement.IsHideout || !this._mobileParty.IsBandit))
						{
							Vec2 vec = (mobileParty.BesiegedSettlement != null) ? mobileParty.VisualPosition2DWithoutError : mobileParty.Position2D;
							float num = this._mobileParty.Position2D.Distance(vec);
							if (num >= 6f)
							{
								mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
								continue;
							}
							float num2 = 1f + MathF.Max(0f, (num - 1f) / 4f);
							num2 = ((num2 > 2f) ? 2f : num2);
							float num3 = 0.01f + ((this._mobileParty.Army != null && this._mobileParty == this._mobileParty.Army.LeaderParty) ? this._mobileParty.Army.TotalStrength : this._mobileParty.Party.TotalStrength);
							float aggressiveness = this._mobileParty.Aggressiveness;
							float num4 = 0f;
							float num5 = 0.01f;
							if (mobileParty.BesiegerCamp != null)
							{
								using (IEnumerator<PartyBase> enumerator = mobileParty.SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).GetEnumerator())
								{
									while (enumerator.MoveNext())
									{
										PartyBase partyBase = enumerator.Current;
										num5 += partyBase.TotalStrength;
									}
									goto IL_3A4;
								}
								goto IL_36E;
							}
							goto IL_36E;
							IL_3A4:
							MobileParty mobileParty2 = null;
							LocatableSearchData<MobileParty> locatableSearchData2 = MobileParty.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 9f);
							MobileParty mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
							while (mobileParty3 != null)
							{
								if ((this._mobileParty.MapFaction == mobileParty3.MapFaction && mobileParty3.BesiegedSettlement != null) || (mobileParty3.MapEvent != null && mobileParty3.MapEvent != mobileParty.MapEvent))
								{
									mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
								}
								else if (mobileParty3.AttachedTo != null)
								{
									mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
								}
								else
								{
									if (mobileParty3 != this._mobileParty && mobileParty3 != mobileParty)
									{
										Vec2 v = (mobileParty3.BesiegedSettlement != null) ? mobileParty3.VisualPosition2DWithoutError : mobileParty3.Position2D;
										float num6 = (mobileParty3 != mobileParty) ? v.Distance(vec) : this._mobileParty.Position2D.Distance(v);
										if (num6 > 6f)
										{
											mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
											continue;
										}
										if (mobileParty3.BesiegerCamp != null && mobileParty3.BesiegerCamp.LeaderParty != mobileParty3)
										{
											mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
											continue;
										}
										PartyBase aiBehaviorPartyBase = mobileParty3.Ai.AiBehaviorPartyBase;
										if (mobileParty3.Army != null)
										{
											aiBehaviorPartyBase = mobileParty3.Army.LeaderParty.Ai.AiBehaviorPartyBase;
										}
										bool flag = aiBehaviorPartyBase != null && (aiBehaviorPartyBase == mobileParty.Party || (aiBehaviorPartyBase.MapEvent != null && aiBehaviorPartyBase.MapEvent == mobileParty.Party.MapEvent));
										bool flag2 = (this._mobileParty.Army != null && this._mobileParty.Army == mobileParty3.Army && this._mobileParty.Army.DoesLeaderPartyAndAttachedPartiesContain(this._mobileParty)) || (mobileParty.Army != null && mobileParty.Army == mobileParty3.Army) || (mobileParty.BesiegedSettlement != null && mobileParty.BesiegedSettlement == mobileParty3.BesiegedSettlement) || (num > 3f && flag) || (num6 > 3f && flag && mobileParty != MobileParty.MainParty && (MobileParty.MainParty.Army == null || mobileParty != MobileParty.MainParty.Army.LeaderParty));
										if (this._mobileParty.MapFaction == mobileParty3.MapFaction && mobileParty.BesiegedSettlement != null && mobileParty3.CurrentSettlement == null && mobileParty3.DefaultBehavior == AiBehavior.DefendSettlement && mobileParty.BesiegedSettlement == mobileParty3.TargetSettlement && mobileParty3.Party.TotalStrength > this._mobileParty.Party.TotalStrength * 1.25f)
										{
											mobileParty2 = ((mobileParty3.Army != null) ? mobileParty3.Army.LeaderParty : mobileParty3);
										}
										if (flag2 || num6 < 3f * num2)
										{
											float num7 = flag2 ? 1f : ((num6 < 3f) ? 1f : (1f - (num6 - 3f) / (3f * (num2 - 1f))));
											num7 = MathF.Min(1f, num7);
											bool flag3 = mobileParty.MapEvent != null && mobileParty.MapEvent == mobileParty3.MapEvent;
											float num8 = (mobileParty3.Army != null && mobileParty3.Army.LeaderParty == mobileParty3) ? mobileParty3.Army.TotalStrength : mobileParty3.Party.TotalStrength;
											if ((mobileParty3.Aggressiveness > 0.01f || mobileParty3.IsGarrison || flag3) && mobileParty3.MapFaction == mobileParty.MapFaction)
											{
												if (mobileParty3.BesiegerCamp != null)
												{
													using (IEnumerator<PartyBase> enumerator = mobileParty3.SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).GetEnumerator())
													{
														while (enumerator.MoveNext())
														{
															PartyBase partyBase2 = enumerator.Current;
															if (partyBase2.MobileParty.AttachedTo == null)
															{
																float num9 = num5;
																Army army = partyBase2.MobileParty.Army;
																num5 = num9 + ((army != null) ? army.TotalStrength : partyBase2.TotalStrength);
															}
														}
														goto IL_7AE;
													}
												}
												num5 += num8 * num7;
											}
											IL_7AE:
											if (this._mobileParty.MapFaction == mobileParty3.MapFaction)
											{
												bool flag4 = mobileParty3.Aggressiveness > 0.01f || (mobileParty3.CurrentSettlement != null && mobileParty3.CurrentSettlement == mobileParty.CurrentSettlement);
												bool flag5 = mobileParty != MobileParty.MainParty || mobileParty3.Ai.CanAttack(MobileParty.MainParty);
												bool flag6 = mobileParty3.CurrentSettlement == null || !mobileParty3.CurrentSettlement.IsHideout;
												if (flag3 || (flag4 && flag5 && flag6))
												{
													Settlement currentSettlement2 = mobileParty3.CurrentSettlement;
													if (((currentSettlement2 != null) ? currentSettlement2.SiegeEvent : null) == null || mobileParty != mobileParty3.CurrentSettlement.SiegeEvent.BesiegerCamp.LeaderParty)
													{
														if (mobileParty3.BesiegerCamp != null)
														{
															using (IEnumerator<PartyBase> enumerator = mobileParty3.SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).GetEnumerator())
															{
																while (enumerator.MoveNext())
																{
																	PartyBase partyBase3 = enumerator.Current;
																	if (partyBase3.MobileParty.AttachedTo == null)
																	{
																		float num10 = num3;
																		Army army2 = partyBase3.MobileParty.Army;
																		num3 = num10 + ((army2 != null) ? army2.TotalStrength : partyBase3.TotalStrength);
																		if (partyBase3.MobileParty.Aggressiveness > aggressiveness)
																		{
																			aggressiveness = partyBase3.MobileParty.Aggressiveness;
																		}
																	}
																}
																goto IL_937;
															}
														}
														num3 += num8 * num7;
														if (mobileParty3.Aggressiveness > aggressiveness)
														{
															aggressiveness = mobileParty3.Aggressiveness;
														}
														if (mobileParty3.CurrentSettlement != null)
														{
															num4 += num8 * num7;
														}
													}
												}
											}
										}
									}
									IL_937:
									mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
								}
							}
							if (this._mobileParty.CurrentSettlement != null)
							{
								num3 -= num4;
							}
							if (mobileParty.LastVisitedSettlement != null && mobileParty.LastVisitedSettlement.IsVillage && mobileParty.Position2D.DistanceSquared(mobileParty.LastVisitedSettlement.Position2D) < 1f && mobileParty.LastVisitedSettlement.MapFaction.IsAtWarWith(this._mobileParty.MapFaction))
							{
								num5 += 20f;
							}
							float num11 = num3 / num5;
							num11 *= (((this._mobileParty.IsCaravan || this._mobileParty.IsVillager) && mobileParty == MobileParty.MainParty) ? 0.6f : 1f);
							if (mobileParty.IsCaravan)
							{
								if (this._mobileParty.IsBandit)
								{
									float playerProgress = Campaign.Current.Models.PlayerProgressionModel.GetPlayerProgress();
									num11 *= 2.4f - 0.9f * playerProgress;
								}
								else if (this._mobileParty.LeaderHero != null && this._mobileParty.LeaderHero.IsMinorFactionHero)
								{
									num11 *= 1.5f;
								}
							}
							if (mobileParty.MapEvent != null && mobileParty.MapEvent.IsSiegeAssault && mobileParty == mobileParty.MapEvent.AttackerSide.LeaderParty.MobileParty)
							{
								float settlementAdvantage = Campaign.Current.Models.CombatSimulationModel.GetSettlementAdvantage(mobileParty.MapEvent.MapEventSettlement);
								if (num4 * MathF.Sqrt(settlementAdvantage) > num5)
								{
									mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
									continue;
								}
							}
							float num12;
							float num13;
							this.CalculateInitiativeScoresForEnemy(mobileParty, out num12, out num13, num11, aggressiveness);
							if (mobileParty.CurrentSettlement != null && mobileParty.MapEvent == null)
							{
								num13 = 0f;
							}
							if (num12 > 1f)
							{
								MobilePartyAi.DangerousPartiesAndTheirVecs.Add(new ValueTuple<float, Vec2>(num12, (vec - this._mobileParty.Position2D).Normalized()));
							}
							if (mobileParty2 == null)
							{
								if (num12 > bestInitiativeBehaviorScore || (num12 * 0.75f > bestInitiativeBehaviorScore && bestInitiativeBehavior == AiBehavior.EngageParty))
								{
									bestInitiativeBehavior = AiBehavior.FleeToPoint;
									bestInitiativeTargetParty = mobileParty;
									bestInitiativeBehaviorScore = num12;
								}
								if (num13 > bestInitiativeBehaviorScore && (bestInitiativeBehaviorScore < num13 * 0.75f || bestInitiativeBehavior == AiBehavior.EngageParty))
								{
									bestInitiativeBehavior = AiBehavior.EngageParty;
									bestInitiativeTargetParty = mobileParty;
									bestInitiativeBehaviorScore = num13;
								}
							}
							else if (this._mobileParty.Aggressiveness > 0.01f)
							{
								bestInitiativeBehavior = AiBehavior.DefendSettlement;
								bestInitiativeTargetParty = mobileParty2;
								bestInitiativeBehaviorScore = num13;
							}
							mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
							continue;
							IL_36E:
							if (mobileParty.CurrentSettlement == null || !mobileParty.CurrentSettlement.IsUnderSiege)
							{
								float num14 = num5;
								Army army3 = mobileParty.Army;
								num5 = num14 + ((army3 != null) ? army3.TotalStrength : mobileParty.Party.TotalStrength);
								goto IL_3A4;
							}
							goto IL_3A4;
						}
					}
					mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
				}
			}
			if (bestInitiativeBehavior == AiBehavior.FleeToPoint || bestInitiativeBehavior == AiBehavior.FleeToGate)
			{
				float num15 = 0f;
				for (int i = 0; i < 8; i++)
				{
					Vec2 v2 = new Vec2(MathF.Sin((float)i / 8f * 3.1415927f * 2f), MathF.Cos((float)i / 8f * 3.1415927f * 2f));
					float num16 = 0f;
					for (int j = 0; j < MobilePartyAi.DangerousPartiesAndTheirVecs.Count; j++)
					{
						Vec2 item = MobilePartyAi.DangerousPartiesAndTheirVecs[j].Item2;
						float num17 = item.DistanceSquared(v2);
						if (num17 > 1f)
						{
							num17 = 1f + (num17 - 1f) * 0.5f;
						}
						num16 += num17 * MobilePartyAi.DangerousPartiesAndTheirVecs[j].Item1;
					}
					if (num16 > num15)
					{
						averageEnemyVec = -v2;
						num15 = num16;
					}
				}
			}
		}

		// Token: 0x06002614 RID: 9748 RVA: 0x000A1560 File Offset: 0x0009F760
		private void SetAiBehavior(AiBehavior newAiBehavior, PartyBase targetPartyFigure, Vec2 bestTargetPoint)
		{
			IMapEntity mapEntity;
			if (targetPartyFigure == null)
			{
				mapEntity = null;
			}
			else if (!targetPartyFigure.IsSettlement)
			{
				IMapEntity mapEntity2 = targetPartyFigure.MobileParty;
				mapEntity = mapEntity2;
			}
			else
			{
				IMapEntity mapEntity2 = targetPartyFigure.Settlement;
				mapEntity = mapEntity2;
			}
			IMapEntity mapEntity3 = mapEntity;
			this.SetShortTermBehavior(newAiBehavior, mapEntity3);
			this.BehaviorTarget = bestTargetPoint;
			this.UpdateBehavior();
		}

		// Token: 0x06002615 RID: 9749 RVA: 0x000A15A4 File Offset: 0x0009F7A4
		internal void SetShortTermBehavior(AiBehavior newBehavior, IMapEntity mapEntity)
		{
			AiBehavior shortTermBehavior = this._mobileParty.ShortTermBehavior;
			if (shortTermBehavior != newBehavior)
			{
				if (this.IsFleeBehavior(shortTermBehavior) && !this.IsFleeBehavior(newBehavior))
				{
					this._numberOfRecentFleeingFromAParty = 0;
				}
				this._mobileParty.ShortTermBehavior = newBehavior;
			}
			this.AiBehaviorMapEntity = mapEntity;
		}

		// Token: 0x06002616 RID: 9750 RVA: 0x000A15F0 File Offset: 0x0009F7F0
		private void UpdateBehavior()
		{
			if (this._mobileParty.ShortTermBehavior == AiBehavior.GoToPoint || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToPoint || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToGate || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToParty)
			{
				this.SetNavigationModePoint(this._mobileParty.AiBehaviorTarget);
				return;
			}
			if ((this._mobileParty.ShortTermBehavior == AiBehavior.GoToSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.RaidSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.AssaultSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.BesiegeSettlement) && this.AiBehaviorPartyBase != null && this.AiBehaviorPartyBase.IsValid)
			{
				this.SetNavigationModePoint(this.AiBehaviorPartyBase.Settlement.GatePosition);
				return;
			}
			AiBehavior shortTermBehavior = this._mobileParty.ShortTermBehavior;
			if (shortTermBehavior != AiBehavior.Hold)
			{
				switch (shortTermBehavior)
				{
				case AiBehavior.EngageParty:
					this.SetNavigationModeParty(this.AiBehaviorPartyBase.MobileParty);
					return;
				case AiBehavior.FleeToPoint:
				case AiBehavior.FleeToGate:
				case AiBehavior.FleeToParty:
				case AiBehavior.DefendSettlement:
					return;
				case AiBehavior.EscortParty:
					this.SetNavigationModeEscort(this.AiBehaviorPartyBase.MobileParty);
					return;
				}
				Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\MobilePartyAi.cs", "UpdateBehavior", 1387);
				return;
			}
			this.SetNavigationModeHold();
		}

		// Token: 0x06002617 RID: 9751 RVA: 0x000A1734 File Offset: 0x0009F934
		public void RecalculateShortTermAi()
		{
			if (this._mobileParty.DefaultBehavior == AiBehavior.RaidSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.RaidSettlement, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.BesiegeSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.BesiegeSettlement, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.GoToSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.GoToSettlement, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.EngageParty)
			{
				this.SetShortTermBehavior(AiBehavior.EngageParty, this._mobileParty.TargetParty);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.DefendSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.GoToPoint, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.EscortParty)
			{
				this.SetShortTermBehavior(AiBehavior.EscortParty, this._mobileParty.TargetParty);
				return;
			}
			if (this.DefaultBehavior == AiBehavior.None)
			{
				this._mobileParty.ShortTermBehavior = AiBehavior.None;
			}
		}

		// Token: 0x06002618 RID: 9752 RVA: 0x000A1820 File Offset: 0x0009FA20
		private MobileParty GetNearbyPartyToFlee(MobileParty partyToFleeFrom, Vec2 fleeDirection)
		{
			ValueTuple<MobileParty, float> valueTuple = new ValueTuple<MobileParty, float>(null, 0f);
			LocatableSearchData<MobileParty> locatableSearchData = MobileParty.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 10f);
			for (MobileParty mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData); mobileParty != null; mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData))
			{
				if (!mobileParty.IsMilitia && !mobileParty.IsGarrison && !mobileParty.IsCaravan && mobileParty != this._mobileParty && (mobileParty.MapFaction == this._mobileParty.MapFaction || (mobileParty.IsBandit && this._mobileParty.IsBandit)))
				{
					if (mobileParty.AttachedTo != null || mobileParty.CurrentSettlement != null || mobileParty.MapEvent != null)
					{
						mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
						continue;
					}
					float num = (mobileParty.Army != null && mobileParty.Army.DoesLeaderPartyAndAttachedPartiesContain(this._mobileParty)) ? mobileParty.Army.TotalStrength : mobileParty.Party.TotalStrength;
					if (num > this._mobileParty.Party.TotalStrength && (this._mobileParty.IsBandit || num + this._mobileParty.Party.TotalStrength > partyToFleeFrom.Party.TotalStrength * 0.5f))
					{
						Vec2 vec = mobileParty.Position2D - this._mobileParty.Position2D;
						float length = vec.Length;
						if (length < 1f && mobileParty._lastCalculatedSpeed < this._mobileParty._lastCalculatedSpeed)
						{
							mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
							continue;
						}
						float length2 = (partyToFleeFrom.Position2D - mobileParty.Position2D).Length;
						vec.Normalize();
						if (vec.DistanceSquared(fleeDirection) < 0.3f + 0.1f * (10f - Math.Min(10f, length)) && length < length2 * 0.86f)
						{
							float num2 = length * 0.66f + num * 0.34f;
							if (valueTuple.Item2 < num2)
							{
								valueTuple.Item1 = mobileParty;
								valueTuple.Item2 = num2;
							}
						}
					}
				}
			}
			return valueTuple.Item1;
		}

		// Token: 0x06002619 RID: 9753 RVA: 0x000A1A40 File Offset: 0x0009FC40
		private ValueTuple<AiBehavior, Settlement> GetBehaviorForNearbySettlementToFlee(Vec2 partyToFleeFromPosition, Vec2 fleeDirection)
		{
			LocatableSearchData<Settlement> locatableSearchData = Campaign.Current.SettlementLocator.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 20f);
			for (Settlement settlement = Campaign.Current.SettlementLocator.FindNextLocatable(ref locatableSearchData); settlement != null; settlement = Campaign.Current.SettlementLocator.FindNextLocatable(ref locatableSearchData))
			{
				if (settlement.IsFortification && settlement.MapFaction == this._mobileParty.MapFaction && !settlement.IsUnderSiege)
				{
					Vec2 vec = settlement.GatePosition - this._mobileParty.Position2D;
					float length = vec.Length;
					float length2 = (partyToFleeFromPosition - settlement.GatePosition).Length;
					if (length < length2 * 0.86f)
					{
						if (length > 1f)
						{
							return new ValueTuple<AiBehavior, Settlement>(AiBehavior.FleeToGate, settlement);
						}
						this.DisableForHours(3);
						return new ValueTuple<AiBehavior, Settlement>(AiBehavior.GoToSettlement, settlement);
					}
					else
					{
						vec.Normalize();
						if (vec.DistanceSquared(fleeDirection) < 0.3f + 0.1f * (10f - MathF.Min(10f, length)))
						{
							if (length <= 1f)
							{
								return new ValueTuple<AiBehavior, Settlement>(AiBehavior.GoToSettlement, settlement);
							}
							return new ValueTuple<AiBehavior, Settlement>(AiBehavior.FleeToGate, settlement);
						}
					}
				}
			}
			return new ValueTuple<AiBehavior, Settlement>(AiBehavior.None, null);
		}

		// Token: 0x0600261A RID: 9754 RVA: 0x000A1B78 File Offset: 0x0009FD78
		private float GetMaxPatrolRadiusForSettlement()
		{
			if (this._mobileParty.TargetSettlement != null)
			{
				if (this._mobileParty.TargetSettlement.IsHideout)
				{
					return 25f;
				}
				if (this._mobileParty.TargetSettlement.IsFortification)
				{
					return 30f;
				}
				if (this._mobileParty.TargetSettlement.IsVillage)
				{
					return 15f;
				}
			}
			return 0f;
		}

		// Token: 0x0600261B RID: 9755 RVA: 0x000A1BE0 File Offset: 0x0009FDE0
		private float CalculateStanceScore(MobileParty otherParty)
		{
			if (FactionManager.IsAtWarAgainstFaction(this._mobileParty.MapFaction, otherParty.MapFaction))
			{
				return 1f;
			}
			if (FactionManager.IsAlliedWithFaction(this._mobileParty.MapFaction, otherParty.MapFaction))
			{
				return -1f;
			}
			return 0f;
		}

		// Token: 0x0600261C RID: 9756 RVA: 0x000A1C30 File Offset: 0x0009FE30
		private void CalculateInitiativeScoresForEnemy(MobileParty enemyParty, out float avoidScore, out float attackScore, float localAdvantage, float maxAggressiveness)
		{
			float num = 1f;
			if (enemyParty.IsCaravan)
			{
				num = (this._mobileParty.IsBandit ? 2f : ((this._mobileParty.Army == null) ? 1.5f : 1f));
			}
			else if (enemyParty.IsBandit || enemyParty.Aggressiveness < 0.1f)
			{
				num = 0.7f;
			}
			else if ((this._mobileParty.DefaultBehavior == AiBehavior.GoAroundParty || this._mobileParty.ShortTermBehavior == AiBehavior.GoAroundParty) && enemyParty != this._mobileParty.TargetParty)
			{
				num = 0.7f;
			}
			int num2 = 0;
			for (int i = 0; i < this._lastTargetedParties.Count; i++)
			{
				if (enemyParty == this._lastTargetedParties[i])
				{
					num2++;
				}
			}
			if (num2 > 0)
			{
				num *= 3f / ((float)num2 + 3f);
			}
			if (enemyParty.MapEvent == null && this._mobileParty._lastCalculatedSpeed < enemyParty.Speed * 1.1f && (this._mobileParty.DefaultBehavior != AiBehavior.GoAroundParty || this._mobileParty.TargetParty != enemyParty) && (this._mobileParty.DefaultBehavior != AiBehavior.DefendSettlement || enemyParty != this._mobileParty.TargetSettlement.LastAttackerParty))
			{
				float b = MathF.Max(0.5f, (this._mobileParty.Speed + 0.1f) / (enemyParty.Speed + 0.1f)) / 1.1f;
				num *= MathF.Max(0.8f, b) * MathF.Max(0.8f, b);
			}
			float num3 = (this._mobileParty.IsCaravan || this._mobileParty.IsVillager) ? 0.9f : ((enemyParty.IsGarrison || enemyParty.IsMilitia || enemyParty.CurrentSettlement != null) ? 0.4f : 0.7f);
			float num4 = 4.8f * num;
			float num5 = 4.8f * num3;
			num4 *= (1f + ((this._mobileParty.Army != null && this._mobileParty.Army.LeaderParty != null && (enemyParty.BesiegedSettlement == this._mobileParty.Army.LeaderParty.TargetSettlement || (this._mobileParty.Army.LeaderParty.TargetSettlement != null && enemyParty == this._mobileParty.Army.LeaderParty.TargetSettlement.LastAttackerParty))) ? 1f : this.AttackInitiative)) / 2f;
			num4 *= ((enemyParty.Army != null) ? MathF.Pow((float)enemyParty.Army.Parties.Count, 0.33f) : 1f);
			num5 *= (1f + this.AvoidInitiative) / 2f;
			bool flag = enemyParty.MapEvent != null || enemyParty.BesiegedSettlement != null;
			if (flag || (this._mobileParty.DefaultBehavior == AiBehavior.EngageParty && this._mobileParty.TargetParty == enemyParty) || (this._mobileParty.DefaultBehavior == AiBehavior.GoAroundParty && this._mobileParty.TargetParty == enemyParty))
			{
				num5 = 2.88f;
				num4 = 7.2000003f;
			}
			Vec2 otherPartyDif = ((enemyParty.BesiegedSettlement != null) ? enemyParty.VisualPosition2DWithoutError : enemyParty.Position2D) - this._mobileParty.Position2D;
			float length = otherPartyDif.Length;
			float num6 = num4 / (length + 1E-05f);
			float num7 = num5 / (length + 1E-05f);
			num6 = MBMath.ClampFloat((!flag) ? (num6 * num6 * num6) : 1f, 0.05f, 1f);
			num7 = MBMath.ClampFloat(num7 * num7 * num7, 0.05f, 1f);
			float num8 = 1f;
			if (enemyParty.IsMoving && enemyParty.SiegeEvent == null && enemyParty.MapEvent == null && (this._mobileParty.DefaultBehavior != AiBehavior.GoAroundParty || this._mobileParty.TargetParty != enemyParty))
			{
				num8 = this.CalculateInitiativeSpeedScore(enemyParty, otherPartyDif);
			}
			float num9 = MBMath.ClampFloat(0.5f * (1f + localAdvantage), 0.05f, 2f);
			float num10 = MBMath.ClampFloat((localAdvantage < 1f) ? MBMath.ClampFloat(1f / localAdvantage, 0.05f, 2f) : 0f, 0.05f, 2f);
			float num11 = this.CalculateStanceScore(enemyParty);
			float num12 = (enemyParty.IsLordParty && enemyParty.LeaderHero != null && enemyParty.LeaderHero.IsLord) ? 1f : this.AttackInitiative;
			if ((double)this._mobileParty.Aggressiveness < 0.01)
			{
				maxAggressiveness = this._mobileParty.Aggressiveness;
			}
			float num13 = (enemyParty.MapEvent != null && maxAggressiveness > 0.1f) ? MathF.Max(1f + (enemyParty.MapEvent.IsSallyOut ? 0.3f : 0f), maxAggressiveness) : maxAggressiveness;
			float num14 = (this._mobileParty.DefaultBehavior == AiBehavior.DefendSettlement && ((enemyParty.BesiegedSettlement != null && this.AiBehaviorPartyBase == enemyParty.BesiegedSettlement.Party) || (enemyParty.MapEvent != null && enemyParty.MapEvent.MapEventSettlement != null && this.AiBehaviorPartyBase == enemyParty.MapEvent.MapEventSettlement.Party))) ? 1.1f : 1f;
			float num15 = 1f;
			if (localAdvantage > 1f && this.IsFleeBehavior(enemyParty.ShortTermBehavior) && enemyParty.ShortTermTargetParty == this._mobileParty)
			{
				num15 = this.CalculateContinueChasingScore(enemyParty);
			}
			attackScore = (this.CanAttack(enemyParty) ? (1.06f * num14 * num6 * num9 * num11 * num8 * num13 * num15 * num12) : 0f);
			num12 = ((enemyParty.IsLordParty && enemyParty.LeaderHero != null && enemyParty.LeaderHero.IsLord) ? 1f : this.AvoidInitiative);
			if (attackScore < 1f)
			{
				if (!enemyParty.IsGarrison || this._numberOfRecentFleeingFromAParty <= 0)
				{
					avoidScore = (this.CanAvoid(enemyParty) ? (0.9433963f * num12 * num7 * ((num11 > 0.01f) ? 1f : 0f) * num10) : 0f);
					return;
				}
				avoidScore = 0f;
				attackScore = 0f;
				if (enemyParty == this._mobileParty.ShortTermTargetParty)
				{
					this.RecalculateShortTermAi();
					return;
				}
			}
			else
			{
				avoidScore = 0f;
			}
		}

		// Token: 0x0600261D RID: 9757 RVA: 0x000A226C File Offset: 0x000A046C
		private float CalculateInitiativeSpeedScore(MobileParty enemyParty, Vec2 otherPartyDif)
		{
			float num = 1f;
			float length = otherPartyDif.Length;
			float num2 = (this._mobileParty.Speed + 0.1f) / (enemyParty.Speed + 0.1f);
			float num3 = enemyParty.IsLordParty ? 4.5f : 3f;
			float num8;
			if (num2 < 1.1f && length < num3 && length > 0.5f)
			{
				float num4 = enemyParty.Bearing.DotProduct(otherPartyDif);
				float num5 = 2f;
				float num6 = num5 * 0.5f;
				if (num4 > num5)
				{
					num = 0f;
				}
				else if (num4 > num5 * 0.5f)
				{
					num = 1f - (num4 - num6) / (num5 - num6);
				}
				else if (num4 < 0f)
				{
					num = 1f + (1.1f / num2 - 1f) * MathF.Min(1f, MathF.Abs(num4) / 3f);
					float num7 = 1f - MathF.Max(0f, length - num3 * 0.5f) / num3 * 0.5f * 0.67f;
					num = 1f + (num - 1f) * num7;
				}
				num8 = num2 * 1.5f * MathF.Pow(num2 / 1.1f, 1f - MathF.Max(0.8f, 0.5f * num));
				num8 = MathF.Pow(num8, MathF.Min(2.5f, length - 1f));
			}
			else
			{
				num8 = 1f;
			}
			return MBMath.ClampFloat(num8, 0.0001f, 1f);
		}

		// Token: 0x0600261E RID: 9758 RVA: 0x000A2404 File Offset: 0x000A0604
		private float CalculateContinueChasingScore(MobileParty enemyParty)
		{
			float num = (this._mobileParty.Army != null && this._mobileParty.Army.LeaderParty == this._mobileParty) ? this._mobileParty.Army.TotalStrength : this._mobileParty.Party.TotalStrength;
			float num2 = ((enemyParty.Army != null && enemyParty.Army.LeaderParty == this._mobileParty) ? enemyParty.Army.TotalStrength : enemyParty.Party.TotalStrength) / (num + 0.01f);
			float num3 = 1f + 0.01f * (float)enemyParty.Ai._numberOfRecentFleeingFromAParty;
			float num4 = Math.Min(1f, (this._mobileParty.Position2D - enemyParty.Position2D).Length / 3f);
			Settlement settlement;
			if (this._mobileParty.IsBandit)
			{
				Hideout hideout = this._mobileParty.BanditPartyComponent.Hideout;
				settlement = ((hideout != null) ? hideout.Settlement : null);
			}
			else if (this._mobileParty.IsLordParty && this._mobileParty.LeaderHero != null && this._mobileParty.LeaderHero.IsMinorFactionHero)
			{
				settlement = this._mobileParty.MapFaction.FactionMidSettlement;
			}
			else
			{
				settlement = SettlementHelper.FindNearestFortification((Settlement x) => x.MapFaction == this._mobileParty.MapFaction, null);
			}
			float num5 = Campaign.AverageDistanceBetweenTwoFortifications * 3f;
			if (settlement != null)
			{
				num5 = Campaign.Current.Models.MapDistanceModel.GetDistance(this._mobileParty, settlement);
			}
			float num6 = num5 / (Campaign.AverageDistanceBetweenTwoFortifications * 3f);
			float num7 = 1f + (float)Math.Pow((double)(enemyParty.Speed / (this._mobileParty.Speed - 0.25f)), 3.0);
			num7 = MBMath.Map(num7, 0f, 5.2f, 0f, 2f);
			float num8 = 60000f;
			float num9 = 10000f;
			float num10 = (float)((enemyParty.LeaderHero != null) ? (enemyParty.PartyTradeGold + enemyParty.LeaderHero.Gold) : enemyParty.PartyTradeGold) / (enemyParty.IsCaravan ? num9 : num8);
			float num11 = (enemyParty.LeaderHero != null) ? ((enemyParty.LeaderHero.IsKingdomLeader || enemyParty.LeaderHero.IsClanLeader) ? 1.5f : 1f) : 0.75f;
			float num12 = num2 * num6 * num7 * num3 * num4;
			return MBMath.ClampFloat(num10 * num11 / (num12 + 0.001f), 0.005f, 3f);
		}

		// Token: 0x0600261F RID: 9759 RVA: 0x000A2690 File Offset: 0x000A0890
		private bool GetAccessibleTargetPointInDirection(out Vec2 targetPoint, Vec2 direction, float distance, Vec2 alternativePosition, int neededTriesForAlternative, float rotationChangeLimitAddition = 0.1f)
		{
			targetPoint = this._mobileParty.Position2D;
			float num = 2f * rotationChangeLimitAddition;
			float num2 = 1f;
			bool flag = false;
			int num3 = 0;
			while (!flag)
			{
				Vec2 v = direction;
				float randomFloat = MBRandom.RandomFloat;
				v.RotateCCW((-0.5f + randomFloat) * num);
				targetPoint = this._mobileParty.Position2D + v * distance * num2;
				num3++;
				num += rotationChangeLimitAddition;
				num2 *= 0.97f;
				PathFaceRecord faceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(targetPoint);
				if (faceIndex.IsValid() && Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, this._mobileParty.CurrentNavigationFace, false) && (targetPoint.x > Campaign.Current.MinSettlementX - 50f || targetPoint.x > this._mobileParty.Position2D.x) && (targetPoint.y > Campaign.Current.MinSettlementY - 50f || targetPoint.y > this._mobileParty.Position2D.y) && (targetPoint.x < Campaign.Current.MaxSettlementX + 50f || targetPoint.x < this._mobileParty.Position2D.x) && (targetPoint.y < Campaign.Current.MaxSettlementY + 50f || targetPoint.y < this._mobileParty.Position2D.y))
				{
					flag = (num3 >= neededTriesForAlternative || MobilePartyAi.CheckIfThereIsAnyHugeObstacleBetweenPartyAndTarget(this._mobileParty, targetPoint));
				}
				if (num3 >= neededTriesForAlternative)
				{
					flag = true;
					targetPoint = alternativePosition;
				}
			}
			return flag;
		}

		// Token: 0x06002620 RID: 9760 RVA: 0x000A284E File Offset: 0x000A0A4E
		private bool CanAvoid(MobileParty targetParty)
		{
			return (targetParty.Aggressiveness > 0.01f && targetParty.Party.IsMobile) || targetParty.IsGarrison;
		}

		// Token: 0x06002621 RID: 9761 RVA: 0x000A2874 File Offset: 0x000A0A74
		private bool CanAttack(MobileParty targetParty)
		{
			bool flag = targetParty != MobileParty.MainParty || !Game.Current.CheatMode || CampaignCheats.MainPartyIsAttackable;
			bool flag2 = targetParty != MobileParty.MainParty || this.DoNotAttackMainPartyUntil.IsPast;
			return flag && flag2;
		}

		// Token: 0x06002622 RID: 9762 RVA: 0x000A28B9 File Offset: 0x000A0AB9
		private bool IsEnemy(PartyBase party)
		{
			return FactionManager.IsAtWarAgainstFaction(party.MapFaction, this._mobileParty.MapFaction);
		}

		// Token: 0x06002623 RID: 9763 RVA: 0x000A28D1 File Offset: 0x000A0AD1
		private bool IsFleeBehavior(AiBehavior aiBehavior)
		{
			return aiBehavior == AiBehavior.FleeToPoint || aiBehavior == AiBehavior.FleeToGate || aiBehavior == AiBehavior.FleeToParty;
		}

		// Token: 0x06002624 RID: 9764 RVA: 0x000A28E4 File Offset: 0x000A0AE4
		public bool IsFleeing()
		{
			return this.IsFleeBehavior(this._mobileParty.ShortTermBehavior) || this.IsFleeBehavior(this._mobileParty.DefaultBehavior);
		}

		// Token: 0x06002625 RID: 9765 RVA: 0x000A290C File Offset: 0x000A0B0C
		internal void CacheTargetPartyVariablesAtFrameStart(ref MobileParty.CachedPartyVariables variables)
		{
			if (this.MoveTargetParty != null)
			{
				variables.TargetPartyPositionAtFrameStart = this.MoveTargetParty.Position2D;
				variables.TargetPartyCurrentNavigationFaceAtFrameStart = this.MoveTargetParty.CurrentNavigationFace;
			}
		}

		// Token: 0x06002626 RID: 9766 RVA: 0x000A2938 File Offset: 0x000A0B38
		private bool ComputePath(Vec2 newTargetPosition)
		{
			bool flag = false;
			if (this._mobileParty.CurrentNavigationFace.IsValid())
			{
				this._targetAiFaceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(newTargetPosition);
				if (this._targetAiFaceIndex.IsValid())
				{
					Vec2 position2D = this._mobileParty.Position2D;
					flag = Campaign.Current.MapSceneWrapper.GetPathBetweenAIFaces(this._mobileParty.CurrentNavigationFace, this._targetAiFaceIndex, position2D, newTargetPosition, 0.1f, this.Path, null);
				}
				else
				{
					Debug.FailedAssert("Path finding target is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\MobilePartyAi.cs", "ComputePath", 2017);
				}
			}
			this.PathBegin = 0;
			if (!flag)
			{
				this._aiPathMode = false;
			}
			return flag;
		}

		// Token: 0x06002627 RID: 9767 RVA: 0x000A29E8 File Offset: 0x000A0BE8
		private void DoAIMove(ref MobileParty.CachedPartyVariables variables)
		{
			Vec2 vec;
			PathFaceRecord pathFaceRecord;
			bool flag;
			this.GetTargetPositionAndFace(ref variables, out vec, out pathFaceRecord, out flag);
			if (this._aiPathMode)
			{
				float num = (this._aiPathLastPosition.DistanceSquared(this._mobileParty.Position2D) > 108f) ? 3f : (this._aiPathLastPosition.DistanceSquared(this._mobileParty.Position2D) / 36f);
				if (flag || pathFaceRecord.FaceIndex != this._aiPathLastFace.FaceIndex || this._aiPathLastPosition.DistanceSquared(vec) > num)
				{
					this._aiPathMode = false;
					this._aiPathLastFace = PathFaceRecord.NullFaceRecord;
				}
			}
			if (!this._aiPathMode && !flag && !this._aiPathNotFound)
			{
				if ((pathFaceRecord.FaceIndex != this._aiPathLastFace.FaceIndex || this._aiPathNeeded) && pathFaceRecord.IsValid())
				{
					if (this._mobileParty.CurrentNavigationFace.FaceIndex != pathFaceRecord.FaceIndex || this._aiPathNeeded)
					{
						this._aiPathNotFound = !this.ComputePath(vec);
						this._aiPathNeeded = false;
						if (!this._aiPathNotFound)
						{
							this._aiPathLastFace = pathFaceRecord;
							this._aiPathLastPosition = vec;
							this._aiPathMode = true;
						}
					}
					else
					{
						this._aiPathMode = false;
					}
				}
				else if (pathFaceRecord.FaceIndex == this._aiPathLastFace.FaceIndex && this._mobileParty.CurrentNavigationFace.FaceIndex != pathFaceRecord.FaceIndex)
				{
					this._aiPathMode = true;
				}
			}
			if (!this._aiPathMode)
			{
				this.NextTargetPosition = vec;
			}
		}

		// Token: 0x06002628 RID: 9768 RVA: 0x000A2B64 File Offset: 0x000A0D64
		internal void DoAiPathMode(ref MobileParty.CachedPartyVariables variables)
		{
			if (variables.IsAttachedArmyMember)
			{
				this._aiPathMode = false;
				return;
			}
			this.DoAIMove(ref variables);
			if (this._aiPathMode)
			{
				bool flag;
				do
				{
					flag = false;
					this.NextTargetPosition = this.Path[this.PathBegin];
					float lengthSquared = (this.NextTargetPosition - variables.CurrentPosition).LengthSquared;
					if (lengthSquared < variables.NextMoveDistance * variables.NextMoveDistance)
					{
						flag = true;
						variables.NextMoveDistance -= MathF.Sqrt(lengthSquared);
						variables.LastCurrentPosition = variables.CurrentPosition;
						variables.CurrentPosition = this.NextTargetPosition;
						int pathBegin = this.PathBegin + 1;
						this.PathBegin = pathBegin;
					}
				}
				while (flag && this.PathBegin < this.Path.Size);
				if (this.PathBegin >= this.Path.Size)
				{
					this._aiPathMode = false;
					this._aiPathNeeded = false;
					if (this.Path.Size > 0)
					{
						variables.CurrentPosition = variables.LastCurrentPosition;
						this.NextTargetPosition = this.Path[this.Path.Size - 1];
					}
				}
			}
		}

		// Token: 0x06002629 RID: 9769 RVA: 0x000A2C82 File Offset: 0x000A0E82
		public void ResetAiBehaviorObject()
		{
			this.AiBehaviorPartyBase = null;
		}

		// Token: 0x0600262A RID: 9770 RVA: 0x000A2C8B File Offset: 0x000A0E8B
		private void UpdatePathModeWithPosition(Vec2 newTargetPosition)
		{
			this._moveTargetPoint = newTargetPosition;
			this._moveTargetAiFaceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(newTargetPosition);
		}

		// Token: 0x0600262B RID: 9771 RVA: 0x000A2CAC File Offset: 0x000A0EAC
		internal void GetTargetPositionAndFace(ref MobileParty.CachedPartyVariables variables, out Vec2 finalTargetPosition, out PathFaceRecord finalTargetNavigationFace, out bool forceNoPathMode)
		{
			finalTargetPosition = this._mobileParty.Position2D;
			finalTargetNavigationFace = this._mobileParty.CurrentNavigationFace;
			forceNoPathMode = false;
			if (this.PartyMoveMode == MoveModeType.Point)
			{
				finalTargetPosition = this._moveTargetPoint;
				finalTargetNavigationFace = this._moveTargetAiFaceIndex;
				forceNoPathMode = this.ForceAiNoPathMode;
				return;
			}
			if (this.PartyMoveMode == MoveModeType.Party)
			{
				if (this.MoveTargetParty.Party.IsValid)
				{
					if (!this.MoveTargetParty.IsMoving)
					{
						finalTargetPosition = variables.TargetPartyPositionAtFrameStart;
						finalTargetNavigationFace = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
						return;
					}
					Vec2 targetPartyPositionAtFrameStart = variables.TargetPartyPositionAtFrameStart;
					if (PartyBase.IsPositionOkForTraveling(targetPartyPositionAtFrameStart))
					{
						finalTargetPosition = targetPartyPositionAtFrameStart;
						finalTargetNavigationFace = Campaign.Current.MapSceneWrapper.GetFaceIndex(targetPartyPositionAtFrameStart);
						return;
					}
					finalTargetPosition = variables.TargetPartyPositionAtFrameStart;
					finalTargetNavigationFace = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
					return;
				}
			}
			else if (this.PartyMoveMode == MoveModeType.Escort)
			{
				if (this.MoveTargetParty != null && this.MoveTargetParty.Party.IsValid && this.MoveTargetParty.CurrentSettlement == null && this._mobileParty.CurrentSettlement == null)
				{
					if (variables.TargetPartyPositionAtFrameStart.DistanceSquared(this._mobileParty.Position2D) > 25f)
					{
						finalTargetPosition = variables.TargetPartyPositionAtFrameStart;
						finalTargetNavigationFace = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
						return;
					}
					float num = (this._mobileParty.Army != null) ? 0f : (((this.MoveTargetParty.DefaultBehavior == AiBehavior.DefendSettlement || this.MoveTargetParty.DefaultBehavior == AiBehavior.BesiegeSettlement || this.MoveTargetParty.DefaultBehavior == AiBehavior.RaidSettlement) && this._mobileParty.Party.MobileParty.Position2D.DistanceSquared(this.MoveTargetParty.AiBehaviorTarget) < 100f) ? 1.2f : 2.4f);
					for (;;)
					{
						finalTargetPosition = variables.TargetPartyPositionAtFrameStart + num * this._formationPosition;
						PathFaceRecord faceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(this._mobileParty.Position2D);
						finalTargetNavigationFace = Campaign.Current.MapSceneWrapper.GetFaceIndex(finalTargetPosition);
						PathFaceRecord targetPartyCurrentNavigationFaceAtFrameStart = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
						Vec2.StackArray6Vec2 stackArray6Vec = default(Vec2.StackArray6Vec2);
						PathFaceRecord.StackArray6PathFaceRecord stackArray6PathFaceRecord = default(PathFaceRecord.StackArray6PathFaceRecord);
						for (int i = 0; i < 6; i++)
						{
							stackArray6Vec[i] = new Vec2((finalTargetPosition.x * (float)i + this._mobileParty.Position2D.x * (float)(6 - i)) / 6f, (finalTargetPosition.y * (float)i + this._mobileParty.Position2D.y * (float)(6 - i)) / 6f);
							stackArray6PathFaceRecord[i] = Campaign.Current.MapSceneWrapper.GetFaceIndex(stackArray6Vec[i]);
						}
						bool flag = Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, finalTargetNavigationFace, false);
						int num2 = 0;
						while (num2 < 6 && flag)
						{
							if (faceIndex.FaceIndex != stackArray6PathFaceRecord[num2].FaceIndex && !Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, stackArray6PathFaceRecord[num2], false))
							{
								flag = false;
							}
							num2++;
						}
						if (flag)
						{
							Vec2.StackArray6Vec2 stackArray6Vec2 = default(Vec2.StackArray6Vec2);
							PathFaceRecord.StackArray6PathFaceRecord stackArray6PathFaceRecord2 = default(PathFaceRecord.StackArray6PathFaceRecord);
							for (int j = 0; j < 6; j++)
							{
								stackArray6Vec2[j] = new Vec2((finalTargetPosition.x * (float)j + variables.TargetPartyPositionAtFrameStart.x * (float)(6 - j)) / 6f, (finalTargetPosition.y * (float)j + variables.TargetPartyPositionAtFrameStart.y * (float)(6 - j)) / 6f);
								stackArray6PathFaceRecord2[j] = Campaign.Current.MapSceneWrapper.GetFaceIndex(stackArray6Vec2[j]);
							}
							bool flag2 = Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(finalTargetNavigationFace, targetPartyCurrentNavigationFaceAtFrameStart, false);
							int num3 = 0;
							while (num3 < 6 && flag2)
							{
								if (variables.TargetPartyCurrentNavigationFaceAtFrameStart.FaceIndex != stackArray6PathFaceRecord2[num3].FaceIndex && !Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(variables.TargetPartyCurrentNavigationFaceAtFrameStart, stackArray6PathFaceRecord2[num3], false))
								{
									flag2 = false;
								}
								num3++;
							}
							if (flag2)
							{
								break;
							}
						}
						num *= 0.75f;
						num -= 0.1f;
						if (num < 0.1f)
						{
							break;
						}
						if (num <= 0.3f)
						{
							num = 0f;
						}
					}
				}
				else
				{
					this.SetMoveModeHold();
				}
			}
		}

		// Token: 0x0600262C RID: 9772 RVA: 0x000A3135 File Offset: 0x000A1335
		internal void SetNavigationModeHold()
		{
			this.PartyMoveMode = MoveModeType.Hold;
			this._aiPathMode = false;
			this._aiPathNeeded = false;
			this.NextTargetPosition = this._mobileParty.Position2D;
			this.MoveTargetParty = null;
		}

		// Token: 0x0600262D RID: 9773 RVA: 0x000A3164 File Offset: 0x000A1364
		private void SetNavigationModePoint(Vec2 newTargetPosition)
		{
			this.PartyMoveMode = MoveModeType.Point;
			this.UpdatePathModeWithPosition(newTargetPosition);
			this._aiPathNotFound = false;
			this.MoveTargetParty = null;
		}

		// Token: 0x0600262E RID: 9774 RVA: 0x000A3182 File Offset: 0x000A1382
		private void SetNavigationModeParty(MobileParty targetParty)
		{
			this.PartyMoveMode = MoveModeType.Party;
			this.MoveTargetParty = targetParty;
			this._aiPathNotFound = false;
		}

		// Token: 0x0600262F RID: 9775 RVA: 0x000A3199 File Offset: 0x000A1399
		private void SetNavigationModeEscort(MobileParty targetParty)
		{
			if (this.PartyMoveMode != MoveModeType.Escort || this.MoveTargetParty != targetParty)
			{
				this.PartyMoveMode = MoveModeType.Escort;
				this.MoveTargetParty = targetParty;
				this._aiPathNotFound = false;
			}
		}

		// Token: 0x06002630 RID: 9776 RVA: 0x000A31C2 File Offset: 0x000A13C2
		public void DisableForHours(int hours)
		{
			this._isDisabled = true;
			this._enableAgainAtHour = CampaignTime.Now + CampaignTime.Hours((float)hours);
		}

		// Token: 0x06002631 RID: 9777 RVA: 0x000A31E2 File Offset: 0x000A13E2
		public void DisableAi()
		{
			this._isDisabled = true;
			this._enableAgainAtHour = CampaignTime.Never;
		}

		// Token: 0x06002632 RID: 9778 RVA: 0x000A31F6 File Offset: 0x000A13F6
		public void EnableAi()
		{
			this._isDisabled = false;
			this._enableAgainAtHour = CampaignTime.Now;
		}

		// Token: 0x06002633 RID: 9779 RVA: 0x000A320C File Offset: 0x000A140C
		public bool EnableAgainAtHourIsPast()
		{
			return this._enableAgainAtHour.IsPast;
		}

		// Token: 0x06002634 RID: 9780 RVA: 0x000A3228 File Offset: 0x000A1428
		public void SetDoNotAttackMainParty(int hours)
		{
			if (this.DoNotAttackMainPartyUntil.RemainingHoursFromNow < (float)hours)
			{
				this.DoNotAttackMainPartyUntil = CampaignTime.HoursFromNow((float)hours);
			}
		}

		// Token: 0x06002635 RID: 9781 RVA: 0x000A3254 File Offset: 0x000A1454
		public void SetAsMainParty()
		{
			this.SetInitiative(0f, 0f, 100000000f);
		}

		// Token: 0x06002636 RID: 9782 RVA: 0x000A326B File Offset: 0x000A146B
		internal void ForceDefaultBehaviorUpdate()
		{
			this.DefaultBehaviorNeedsUpdate = true;
		}

		// Token: 0x06002637 RID: 9783 RVA: 0x000A3274 File Offset: 0x000A1474
		public void SetInitiative(float attackInitiative, float avoidInitiative, float hoursUntilReset)
		{
			if (this._mobileParty != MobileParty.MainParty)
			{
				this._attackInitiative = attackInitiative;
				this._avoidInitiative = avoidInitiative;
				this._initiativeRestoreTime = CampaignTime.HoursFromNow(hoursUntilReset);
			}
		}

		// Token: 0x06002638 RID: 9784 RVA: 0x000A329D File Offset: 0x000A149D
		public void SetDoNotMakeNewDecisions(bool doNotMakeNewDecisions)
		{
			this.DoNotMakeNewDecisions = doNotMakeNewDecisions;
		}

		// Token: 0x06002639 RID: 9785 RVA: 0x000A32A8 File Offset: 0x000A14A8
		internal void InitializeForOldSaves(float attackInitiative, float avoidInitiative, CampaignTime initiativeRestoreTime, int numberOfRecentFleeingFromAParty, AiBehavior aiBehavior, Vec2 oldAiBehaviorTarget, bool oldAiPathMode, bool oldAiPathNeeded, MoveModeType oldPartyMoveMode, MobileParty oldMoveTargetParty, Vec2 oldNextTargetPosition, Vec2 oldMoveTargetPoint, Vec2 oldAiPathLastPosition, Vec2 oldFormationPosition, IMapEntity oldAiBehaviorMapEntity, CampaignTime oldDoNotAttackMainPartyUntil)
		{
			this._attackInitiative = attackInitiative;
			this._avoidInitiative = avoidInitiative;
			this._initiativeRestoreTime = initiativeRestoreTime;
			this._numberOfRecentFleeingFromAParty = numberOfRecentFleeingFromAParty;
			this._defaultBehavior = aiBehavior;
			this.BehaviorTarget = oldAiBehaviorTarget;
			this._aiPathMode = oldAiPathMode;
			this._aiPathNeeded = oldAiPathNeeded;
			this.PartyMoveMode = oldPartyMoveMode;
			this.MoveTargetParty = oldMoveTargetParty;
			this.NextTargetPosition = oldNextTargetPosition;
			this._moveTargetPoint = oldMoveTargetPoint;
			this._aiPathLastPosition = oldAiPathLastPosition;
			this._formationPosition = oldFormationPosition;
			this.AiBehaviorMapEntity = oldAiBehaviorMapEntity;
			this.DoNotAttackMainPartyUntil = oldDoNotAttackMainPartyUntil;
		}

		// Token: 0x0600263A RID: 9786 RVA: 0x000A3334 File Offset: 0x000A1534
		internal void RecoverPositionsForNavMeshUpdate()
		{
			if (this._moveTargetPoint.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this._moveTargetPoint))
			{
				Debug.Print(string.Concat(new object[]
				{
					"Target of ",
					this._mobileParty.StringId,
					" is not valid! (",
					this._mobileParty.Position2D.x,
					", ",
					this._mobileParty.Position2D.y,
					") Party will be moved to a valid position."
				}), 0, Debug.DebugColor.White, 17592186044416UL);
				Settlement targetSettlement = this._mobileParty.TargetSettlement;
				this._moveTargetPoint = ((targetSettlement != null) ? targetSettlement.GatePosition : this._mobileParty.Position2D);
				this._mobileParty.TargetPosition = this._moveTargetPoint;
				this.NextTargetPosition = this._moveTargetPoint;
				this.BehaviorTarget = this._moveTargetPoint;
			}
			if (this._mobileParty.TargetPosition.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this._mobileParty.TargetPosition))
			{
				this._mobileParty.TargetPosition = Vec2.Zero;
			}
			if (this.DefaultBehavior != AiBehavior.Hold && ((this._mobileParty.TargetPosition.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this._mobileParty.TargetPosition)) || (this.NextTargetPosition.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this.NextTargetPosition)) || (this.BehaviorTarget.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this.BehaviorTarget))))
			{
				this.ForceDefaultBehaviorUpdate();
				this.SetMoveModeHold();
				this.SetNavigationModeHold();
			}
		}

		// Token: 0x0600263B RID: 9787 RVA: 0x000A34DA File Offset: 0x000A16DA
		internal void ResetNumberOfRecentFleeing()
		{
			this._numberOfRecentFleeingFromAParty = 0;
		}

		// Token: 0x0600263C RID: 9788 RVA: 0x000A34E4 File Offset: 0x000A16E4
		internal static bool CheckIfThereIsAnyHugeObstacleBetweenPartyAndTarget(MobileParty party, Vec2 newTargetPosition)
		{
			IMapScene mapSceneWrapper = Campaign.Current.MapSceneWrapper;
			Vec2 position2D = party.Position2D;
			Vec2 position = new Vec2((newTargetPosition.x + position2D.x * 3f) * 0.25f, (newTargetPosition.y + position2D.y * 3f) * 0.25f);
			PathFaceRecord faceIndex = mapSceneWrapper.GetFaceIndex(position);
			Vec2 position2 = new Vec2((newTargetPosition.x + position2D.x) * 0.5f, (newTargetPosition.y + position2D.y) * 0.5f);
			PathFaceRecord faceIndex2 = mapSceneWrapper.GetFaceIndex(position2);
			Vec2 position3 = new Vec2((newTargetPosition.x * 3f + position2D.x) * 0.25f, (newTargetPosition.y * 3f + position2D.y) * 0.25f);
			PathFaceRecord faceIndex3 = mapSceneWrapper.GetFaceIndex(position3);
			return faceIndex.IsValid() && mapSceneWrapper.AreFacesOnSameIsland(faceIndex, party.CurrentNavigationFace, false) && faceIndex2.IsValid() && mapSceneWrapper.AreFacesOnSameIsland(faceIndex2, party.CurrentNavigationFace, false) && faceIndex3.IsValid() && mapSceneWrapper.AreFacesOnSameIsland(faceIndex3, party.CurrentNavigationFace, false);
		}

		// Token: 0x04000B54 RID: 2900
		private const float AiCheckInterval = 0.25f;

		// Token: 0x04000B55 RID: 2901
		private const int FleeToNearbyPartyDistanceRadius = 10;

		// Token: 0x04000B56 RID: 2902
		private const int FleeToNearbySettlementDistanceRadius = 20;

		// Token: 0x04000B57 RID: 2903
		public const float GoAroundPartyWaitNearbyRadiusMultiplier = 1.2f;

		// Token: 0x04000B58 RID: 2904
		private const float HideoutPatrolRadius = 25f;

		// Token: 0x04000B59 RID: 2905
		private const float FortificationPatrolRadius = 30f;

		// Token: 0x04000B5A RID: 2906
		private const float VillagePatrolRadius = 15f;

		// Token: 0x04000B5B RID: 2907
		private const float MaximumJoiningRadiusMultiplier = 2f;

		// Token: 0x04000B5C RID: 2908
		private static readonly List<ValueTuple<float, Vec2>> DangerousPartiesAndTheirVecs = new List<ValueTuple<float, Vec2>>();

		// Token: 0x04000B5D RID: 2909
		[SaveableField(2)]
		private bool _isDisabled;

		// Token: 0x04000B5F RID: 2911
		[SaveableField(5)]
		private readonly MobileParty _mobileParty;

		// Token: 0x04000B60 RID: 2912
		[SaveableField(6)]
		public int HourCounter;

		// Token: 0x04000B63 RID: 2915
		[SaveableField(12)]
		internal Vec2 BehaviorTarget;

		// Token: 0x04000B64 RID: 2916
		[SaveableField(13)]
		private float _attackInitiative = 1f;

		// Token: 0x04000B65 RID: 2917
		[SaveableField(14)]
		private float _avoidInitiative = 1f;

		// Token: 0x04000B66 RID: 2918
		[SaveableField(15)]
		private CampaignTime _initiativeRestoreTime;

		// Token: 0x04000B67 RID: 2919
		[SaveableField(16)]
		private bool _aiBehaviorResetNeeded;

		// Token: 0x04000B69 RID: 2921
		[SaveableField(18)]
		private CampaignTime _nextAiCheckTime;

		// Token: 0x04000B6A RID: 2922
		[SaveableField(19)]
		internal bool DefaultBehaviorNeedsUpdate;

		// Token: 0x04000B6B RID: 2923
		[SaveableField(20)]
		private int _numberOfRecentFleeingFromAParty;

		// Token: 0x04000B6C RID: 2924
		[SaveableField(21)]
		private AiBehavior _defaultBehavior;

		// Token: 0x04000B6D RID: 2925
		[SaveableField(22)]
		private bool _aiPathMode;

		// Token: 0x04000B6E RID: 2926
		[SaveableField(23)]
		private bool _aiPathNeeded;

		// Token: 0x04000B70 RID: 2928
		[SaveableField(25)]
		private Vec2 _formationPosition;

		// Token: 0x04000B73 RID: 2931
		[SaveableField(28)]
		private Vec2 _moveTargetPoint;

		// Token: 0x04000B74 RID: 2932
		[SaveableField(29)]
		private Vec2 _aiPathLastPosition;

		// Token: 0x04000B75 RID: 2933
		[SaveableField(30)]
		private IMapEntity _aiBehaviorMapEntity;

		// Token: 0x04000B79 RID: 2937
		[CachedData]
		private PathFaceRecord _targetAiFaceIndex = PathFaceRecord.NullFaceRecord;

		// Token: 0x04000B7A RID: 2938
		[CachedData]
		private PathFaceRecord _moveTargetAiFaceIndex = PathFaceRecord.NullFaceRecord;

		// Token: 0x04000B7B RID: 2939
		[CachedData]
		private PathFaceRecord _aiPathLastFace;

		// Token: 0x04000B7C RID: 2940
		[CachedData]
		private List<MobileParty> _lastTargetedParties;

		// Token: 0x04000B7E RID: 2942
		private bool _aiPathNotFound;
	}
}
