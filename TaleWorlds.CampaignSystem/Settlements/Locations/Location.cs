using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Locations
{
	// Token: 0x02000368 RID: 872
	public class Location
	{
		// Token: 0x0600332E RID: 13102 RVA: 0x000D4E7A File Offset: 0x000D307A
		internal static void AutoGeneratedStaticCollectObjectsLocation(object o, List<object> collectedObjects)
		{
			((Location)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600332F RID: 13103 RVA: 0x000D4E88 File Offset: 0x000D3088
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._overriddenName);
			collectedObjects.Add(this._overriddenDoorName);
			collectedObjects.Add(this.SpecialItems);
		}

		// Token: 0x06003330 RID: 13104 RVA: 0x000D4EAE File Offset: 0x000D30AE
		internal static object AutoGeneratedGetMemberValueStringId(object o)
		{
			return ((Location)o).StringId;
		}

		// Token: 0x06003331 RID: 13105 RVA: 0x000D4EBB File Offset: 0x000D30BB
		internal static object AutoGeneratedGetMemberValueSpecialItems(object o)
		{
			return ((Location)o).SpecialItems;
		}

		// Token: 0x06003332 RID: 13106 RVA: 0x000D4EC8 File Offset: 0x000D30C8
		internal static object AutoGeneratedGetMemberValueIsReserved(object o)
		{
			return ((Location)o).IsReserved;
		}

		// Token: 0x06003333 RID: 13107 RVA: 0x000D4EDA File Offset: 0x000D30DA
		internal static object AutoGeneratedGetMemberValue_overriddenName(object o)
		{
			return ((Location)o)._overriddenName;
		}

		// Token: 0x06003334 RID: 13108 RVA: 0x000D4EE7 File Offset: 0x000D30E7
		internal static object AutoGeneratedGetMemberValue_overriddenDoorName(object o)
		{
			return ((Location)o)._overriddenDoorName;
		}

		// Token: 0x17000C8F RID: 3215
		// (get) Token: 0x06003335 RID: 13109 RVA: 0x000D4EF4 File Offset: 0x000D30F4
		// (set) Token: 0x06003336 RID: 13110 RVA: 0x000D4EFC File Offset: 0x000D30FC
		[SaveableProperty(10)]
		public string StringId { get; private set; }

		// Token: 0x17000C90 RID: 3216
		// (get) Token: 0x06003337 RID: 13111 RVA: 0x000D4F05 File Offset: 0x000D3105
		// (set) Token: 0x06003338 RID: 13112 RVA: 0x000D4F0D File Offset: 0x000D310D
		[SaveableProperty(20)]
		public List<ItemObject> SpecialItems { get; private set; }

		// Token: 0x17000C91 RID: 3217
		// (get) Token: 0x06003339 RID: 13113 RVA: 0x000D4F16 File Offset: 0x000D3116
		// (set) Token: 0x0600333A RID: 13114 RVA: 0x000D4F1E File Offset: 0x000D311E
		[SaveableProperty(30)]
		public bool IsReserved { get; private set; }

		// Token: 0x17000C92 RID: 3218
		// (get) Token: 0x0600333B RID: 13115 RVA: 0x000D4F27 File Offset: 0x000D3127
		// (set) Token: 0x0600333C RID: 13116 RVA: 0x000D4F2F File Offset: 0x000D312F
		public List<Location> LocationsOfPassages { get; private set; }

		// Token: 0x17000C93 RID: 3219
		// (get) Token: 0x0600333D RID: 13117 RVA: 0x000D4F38 File Offset: 0x000D3138
		public TextObject Name
		{
			get
			{
				if (!TextObject.IsNullOrEmpty(this._overriddenName))
				{
					return this._overriddenName;
				}
				return this._name;
			}
		}

		// Token: 0x17000C94 RID: 3220
		// (get) Token: 0x0600333E RID: 13118 RVA: 0x000D4F54 File Offset: 0x000D3154
		public TextObject DoorName
		{
			get
			{
				if (!TextObject.IsNullOrEmpty(this._overriddenDoorName))
				{
					return this._overriddenDoorName;
				}
				return this._doorName;
			}
		}

		// Token: 0x17000C95 RID: 3221
		// (get) Token: 0x0600333F RID: 13119 RVA: 0x000D4F70 File Offset: 0x000D3170
		// (set) Token: 0x06003340 RID: 13120 RVA: 0x000D4F78 File Offset: 0x000D3178
		public bool IsIndoor { get; private set; }

		// Token: 0x17000C96 RID: 3222
		// (get) Token: 0x06003341 RID: 13121 RVA: 0x000D4F81 File Offset: 0x000D3181
		// (set) Token: 0x06003342 RID: 13122 RVA: 0x000D4F89 File Offset: 0x000D3189
		public bool CanBeReserved { get; private set; }

		// Token: 0x17000C97 RID: 3223
		// (get) Token: 0x06003343 RID: 13123 RVA: 0x000D4F92 File Offset: 0x000D3192
		// (set) Token: 0x06003344 RID: 13124 RVA: 0x000D4F9A File Offset: 0x000D319A
		[CachedData]
		public bool IsInitialized { get; private set; }

		// Token: 0x17000C98 RID: 3224
		// (get) Token: 0x06003345 RID: 13125 RVA: 0x000D4FA3 File Offset: 0x000D31A3
		public int CharacterCount
		{
			get
			{
				return this._characterList.Count;
			}
		}

		// Token: 0x06003346 RID: 13126 RVA: 0x000D4FB0 File Offset: 0x000D31B0
		public Location(string stringId, TextObject name, TextObject doorName, int prosperityMax, bool isIndoor, bool canBeReserved, string playerCanEnter, string playerCanSee, string aiCanExit, string aiCanEnter, string[] sceneNames, LocationComplex locationComplex)
		{
			this.ProsperityMax = prosperityMax;
			this._characterList = new List<LocationCharacter>();
			this.LocationsOfPassages = new List<Location>();
			this.SpecialItems = new List<ItemObject>();
			this.StringId = stringId;
			this._name = name;
			this._doorName = doorName;
			this.IsIndoor = isIndoor;
			this.CanBeReserved = canBeReserved;
			this.IsReserved = false;
			this._aiCanEnter = aiCanEnter;
			this._playerCanEnter = playerCanEnter;
			this._playerCanSee = playerCanSee;
			this._aiCanExit = aiCanExit;
			this._ownerComplex = locationComplex;
			this._overriddenName = TextObject.Empty;
			this._overriddenDoorName = TextObject.Empty;
			this._sceneNames = new string[4];
			for (int i = 0; i < 4; i++)
			{
				this._sceneNames[i] = sceneNames[i];
			}
		}

		// Token: 0x06003347 RID: 13127 RVA: 0x000D507C File Offset: 0x000D327C
		public Location(Location location, LocationComplex locationComplex) : this(location.StringId, location.Name, location.DoorName, location.ProsperityMax, location.IsIndoor, location.CanBeReserved, location._playerCanEnter, location._playerCanSee, location._aiCanExit, location._aiCanEnter, location._sceneNames, locationComplex)
		{
		}

		// Token: 0x06003348 RID: 13128 RVA: 0x000D50D4 File Offset: 0x000D32D4
		public void Initialize(Location locationTemplate, LocationComplex ownerComplex)
		{
			this.ProsperityMax = locationTemplate.ProsperityMax;
			this.LocationsOfPassages = new List<Location>();
			this._name = locationTemplate.Name;
			this._doorName = locationTemplate.DoorName;
			this.IsIndoor = locationTemplate.IsIndoor;
			this.CanBeReserved = locationTemplate.CanBeReserved;
			this._aiCanEnter = locationTemplate._aiCanEnter;
			this._playerCanEnter = locationTemplate._playerCanEnter;
			this._playerCanSee = locationTemplate._playerCanSee;
			this._aiCanExit = locationTemplate._aiCanExit;
			this._ownerComplex = ownerComplex;
			this._characterList = new List<LocationCharacter>();
			this._sceneNames = new string[4];
			this.IsInitialized = true;
			for (int i = 0; i < 4; i++)
			{
				this._sceneNames[i] = locationTemplate._sceneNames[i];
			}
		}

		// Token: 0x06003349 RID: 13129 RVA: 0x000D5199 File Offset: 0x000D3399
		public bool CanAIExit(LocationCharacter character)
		{
			if (this._aiCanExitDelegate == null)
			{
				this._aiCanExitDelegate = this.DeserializeDelegate(this._aiCanExit);
			}
			return this._aiCanExitDelegate(character, this);
		}

		// Token: 0x0600334A RID: 13130 RVA: 0x000D51C2 File Offset: 0x000D33C2
		public bool CanAIEnter(LocationCharacter character)
		{
			if (this._aiCanEnterDelegate == null)
			{
				this._aiCanEnterDelegate = this.DeserializeDelegate(this._aiCanEnter);
			}
			return this._aiCanEnterDelegate(character, this);
		}

		// Token: 0x0600334B RID: 13131 RVA: 0x000D51EB File Offset: 0x000D33EB
		public bool CanPlayerEnter()
		{
			if (this._playerCanEnterDelegate == null)
			{
				this._playerCanEnterDelegate = this.DeserializeDelegate(this._playerCanEnter);
			}
			return this._playerCanEnterDelegate(null, this);
		}

		// Token: 0x0600334C RID: 13132 RVA: 0x000D5214 File Offset: 0x000D3414
		public bool CanPlayerSee()
		{
			if (this._playerCanSeeDelegate == null)
			{
				this._playerCanSeeDelegate = this.DeserializeDelegate(this._playerCanSee);
			}
			return this._playerCanSeeDelegate(null, this);
		}

		// Token: 0x0600334D RID: 13133 RVA: 0x000D523D File Offset: 0x000D343D
		public void ReserveLocation(TextObject locationName, TextObject doorName)
		{
			if (this.CanBeReserved)
			{
				this.IsReserved = true;
				this._overriddenName = locationName;
				this._overriddenDoorName = doorName;
			}
		}

		// Token: 0x0600334E RID: 13134 RVA: 0x000D525C File Offset: 0x000D345C
		public void RemoveReservation()
		{
			if (this.CanBeReserved)
			{
				this.IsReserved = false;
				this._overriddenName = TextObject.Empty;
				this._overriddenDoorName = TextObject.Empty;
			}
		}

		// Token: 0x0600334F RID: 13135 RVA: 0x000D5283 File Offset: 0x000D3483
		public void SetOwnerComplex(LocationComplex locationComplex)
		{
			this._ownerComplex = locationComplex;
		}

		// Token: 0x06003350 RID: 13136 RVA: 0x000D528C File Offset: 0x000D348C
		public void AddCharacter(LocationCharacter locationCharacter)
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			if (locationCharacter.Character.IsHero)
			{
				this._ownerComplex.RemoveCharacterIfExists(locationCharacter.Character.HeroObject);
			}
			this._characterList.Add(locationCharacter);
		}

		// Token: 0x06003351 RID: 13137 RVA: 0x000D52DC File Offset: 0x000D34DC
		public void AddLocationCharacters(CreateLocationCharacterDelegate createDelegate, CultureObject culture, LocationCharacter.CharacterRelations relation, int count)
		{
			for (int i = 0; i < count; i++)
			{
				LocationCharacter locationCharacter = createDelegate(culture, relation);
				this.AddCharacter(locationCharacter);
			}
		}

		// Token: 0x06003352 RID: 13138 RVA: 0x000D5306 File Offset: 0x000D3506
		public void AddSpecialItem(ItemObject itemObject)
		{
			this.SpecialItems.Add(itemObject);
		}

		// Token: 0x06003353 RID: 13139 RVA: 0x000D5314 File Offset: 0x000D3514
		public string GetSceneName(int upgradeLevel)
		{
			string text = this._sceneNames[upgradeLevel];
			if (string.IsNullOrEmpty(text))
			{
				text = this._sceneNames[0];
			}
			return text;
		}

		// Token: 0x06003354 RID: 13140 RVA: 0x000D533C File Offset: 0x000D353C
		public void SetSceneName(int upgradeLevel, string sceneName)
		{
			this._sceneNames[upgradeLevel] = sceneName;
		}

		// Token: 0x06003355 RID: 13141 RVA: 0x000D5348 File Offset: 0x000D3548
		public int GetSceneCount()
		{
			int num = 0;
			string[] sceneNames = this._sceneNames;
			for (int i = 0; i < sceneNames.Length; i++)
			{
				if (!string.IsNullOrEmpty(sceneNames[i]))
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x06003356 RID: 13142 RVA: 0x000D537B File Offset: 0x000D357B
		public void RemoveAllHeroCharactersFromPrison()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			this._characterList.RemoveAll((LocationCharacter x) => x.Character.HeroObject != null && x.Character.HeroObject != Hero.MainHero);
		}

		// Token: 0x06003357 RID: 13143 RVA: 0x000D53BB File Offset: 0x000D35BB
		public void RemoveAllCharacters()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			this._characterList.Clear();
		}

		// Token: 0x06003358 RID: 13144 RVA: 0x000D53DB File Offset: 0x000D35DB
		public void RemoveAllCharacters(Predicate<LocationCharacter> predicate)
		{
			this._characterList.RemoveAll(predicate);
		}

		// Token: 0x06003359 RID: 13145 RVA: 0x000D53EA File Offset: 0x000D35EA
		public void RemoveLocationCharacter(LocationCharacter locationCharacter)
		{
			this._characterList.Remove(locationCharacter);
		}

		// Token: 0x0600335A RID: 13146 RVA: 0x000D53FC File Offset: 0x000D35FC
		public void RemoveCharacter(Hero hero)
		{
			LocationCharacter locationCharacter = this._characterList.First((LocationCharacter x) => x.Character.HeroObject == hero);
			this.RemoveLocationCharacter(locationCharacter);
		}

		// Token: 0x0600335B RID: 13147 RVA: 0x000D5435 File Offset: 0x000D3635
		public bool ContainsCharacter(LocationCharacter locationCharacter)
		{
			return this._characterList.Contains(locationCharacter);
		}

		// Token: 0x0600335C RID: 13148 RVA: 0x000D5444 File Offset: 0x000D3644
		public bool ContainsCharacter(Hero hero)
		{
			return this._characterList != null && this._characterList.Any((LocationCharacter x) => x.Character == hero.CharacterObject);
		}

		// Token: 0x0600335D RID: 13149 RVA: 0x000D547F File Offset: 0x000D367F
		public void AddPassageToLocation(Location passageToLocation)
		{
			this.LocationsOfPassages.Add(passageToLocation);
		}

		// Token: 0x0600335E RID: 13150 RVA: 0x000D548D File Offset: 0x000D368D
		public IEnumerable<LocationCharacter> GetCharacterList()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			foreach (LocationCharacter locationCharacter in this._characterList)
			{
				yield return locationCharacter;
			}
			List<LocationCharacter>.Enumerator enumerator = default(List<LocationCharacter>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x0600335F RID: 13151 RVA: 0x000D54A0 File Offset: 0x000D36A0
		public Location GetPassageToLocation(string locationId)
		{
			return this.LocationsOfPassages.FirstOrDefault((Location location) => locationId == location.StringId);
		}

		// Token: 0x06003360 RID: 13152 RVA: 0x000D54D1 File Offset: 0x000D36D1
		public void OnAIChangeLocation(Location previousLocation)
		{
			if (this.IsIndoor && CampaignMission.Current != null && this != CampaignMission.Current.Location && CampaignMission.Current.Mode == MissionMode.Stealth)
			{
				this._playerCanEnterDelegate = new CanUseDoor(LocationComplex.CanNever);
			}
		}

		// Token: 0x06003361 RID: 13153 RVA: 0x000D5510 File Offset: 0x000D3710
		public LocationCharacter GetLocationCharacter(Hero hero)
		{
			return this._characterList.Find((LocationCharacter x) => x.Character == hero.CharacterObject);
		}

		// Token: 0x06003362 RID: 13154 RVA: 0x000D5544 File Offset: 0x000D3744
		public LocationCharacter GetLocationCharacter(IAgentOriginBase agentOrigin)
		{
			foreach (LocationCharacter locationCharacter in this._characterList)
			{
				if (locationCharacter.AgentOrigin == agentOrigin)
				{
					return locationCharacter;
				}
			}
			return null;
		}

		// Token: 0x06003363 RID: 13155 RVA: 0x000D55A0 File Offset: 0x000D37A0
		private CanUseDoor DeserializeDelegate(string text)
		{
			int num = text.LastIndexOf('.');
			string name = (num >= 0) ? text.Substring(0, num) : typeof(LocationComplex).FullName;
			string name2 = text.Substring(num + 1, text.Length - 1 - num);
			CanUseDoor result = null;
			Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
			for (int i = 0; i < assemblies.Length; i++)
			{
				Type type = assemblies[i].GetType(name);
				if (type != null)
				{
					MethodInfo method = type.GetMethod(name2);
					if (method != null)
					{
						result = (Delegate.CreateDelegate(typeof(CanUseDoor), null, method) as CanUseDoor);
						break;
					}
				}
			}
			return result;
		}

		// Token: 0x04001086 RID: 4230
		[SaveableField(40)]
		private TextObject _overriddenName;

		// Token: 0x04001087 RID: 4231
		[SaveableField(50)]
		private TextObject _overriddenDoorName;

		// Token: 0x04001088 RID: 4232
		private List<LocationCharacter> _characterList;

		// Token: 0x04001089 RID: 4233
		private LocationComplex _ownerComplex;

		// Token: 0x0400108B RID: 4235
		private TextObject _name;

		// Token: 0x0400108C RID: 4236
		private TextObject _doorName;

		// Token: 0x0400108F RID: 4239
		public int ProsperityMax;

		// Token: 0x04001090 RID: 4240
		private string[] _sceneNames;

		// Token: 0x04001091 RID: 4241
		private string _aiCanExit;

		// Token: 0x04001092 RID: 4242
		private string _aiCanEnter;

		// Token: 0x04001093 RID: 4243
		private string _playerCanEnter;

		// Token: 0x04001094 RID: 4244
		private string _playerCanSee;

		// Token: 0x04001095 RID: 4245
		private CanUseDoor _aiCanExitDelegate;

		// Token: 0x04001096 RID: 4246
		private CanUseDoor _aiCanEnterDelegate;

		// Token: 0x04001097 RID: 4247
		private CanUseDoor _playerCanEnterDelegate;

		// Token: 0x04001098 RID: 4248
		private CanUseDoor _playerCanSeeDelegate;
	}
}
