using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Workshops
{
	// Token: 0x02000367 RID: 871
	public sealed class WorkshopType : MBObjectBase
	{
		// Token: 0x0600330A RID: 13066 RVA: 0x000D4817 File Offset: 0x000D2A17
		internal static void AutoGeneratedStaticCollectObjectsWorkshopType(object o, List<object> collectedObjects)
		{
			((WorkshopType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600330B RID: 13067 RVA: 0x000D4825 File Offset: 0x000D2A25
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000C80 RID: 3200
		// (get) Token: 0x0600330C RID: 13068 RVA: 0x000D482E File Offset: 0x000D2A2E
		// (set) Token: 0x0600330D RID: 13069 RVA: 0x000D4836 File Offset: 0x000D2A36
		public int EquipmentCost { get; private set; }

		// Token: 0x17000C81 RID: 3201
		// (get) Token: 0x0600330E RID: 13070 RVA: 0x000D483F File Offset: 0x000D2A3F
		// (set) Token: 0x0600330F RID: 13071 RVA: 0x000D4847 File Offset: 0x000D2A47
		public int Frequency { get; private set; }

		// Token: 0x17000C82 RID: 3202
		// (get) Token: 0x06003310 RID: 13072 RVA: 0x000D4850 File Offset: 0x000D2A50
		// (set) Token: 0x06003311 RID: 13073 RVA: 0x000D4858 File Offset: 0x000D2A58
		public TextObject Name { get; private set; }

		// Token: 0x17000C83 RID: 3203
		// (get) Token: 0x06003312 RID: 13074 RVA: 0x000D4861 File Offset: 0x000D2A61
		// (set) Token: 0x06003313 RID: 13075 RVA: 0x000D4869 File Offset: 0x000D2A69
		public TextObject JobName { get; private set; }

		// Token: 0x17000C84 RID: 3204
		// (get) Token: 0x06003314 RID: 13076 RVA: 0x000D4872 File Offset: 0x000D2A72
		// (set) Token: 0x06003315 RID: 13077 RVA: 0x000D487A File Offset: 0x000D2A7A
		public bool IsHidden { get; private set; }

		// Token: 0x17000C85 RID: 3205
		// (get) Token: 0x06003316 RID: 13078 RVA: 0x000D4883 File Offset: 0x000D2A83
		// (set) Token: 0x06003317 RID: 13079 RVA: 0x000D488B File Offset: 0x000D2A8B
		public string SignMeshName { get; private set; }

		// Token: 0x17000C86 RID: 3206
		// (get) Token: 0x06003318 RID: 13080 RVA: 0x000D4894 File Offset: 0x000D2A94
		// (set) Token: 0x06003319 RID: 13081 RVA: 0x000D489C File Offset: 0x000D2A9C
		public string PropMeshName1 { get; private set; }

		// Token: 0x17000C87 RID: 3207
		// (get) Token: 0x0600331A RID: 13082 RVA: 0x000D48A5 File Offset: 0x000D2AA5
		// (set) Token: 0x0600331B RID: 13083 RVA: 0x000D48AD File Offset: 0x000D2AAD
		public string PropMeshName2 { get; private set; }

		// Token: 0x17000C88 RID: 3208
		// (get) Token: 0x0600331C RID: 13084 RVA: 0x000D48B6 File Offset: 0x000D2AB6
		// (set) Token: 0x0600331D RID: 13085 RVA: 0x000D48BE File Offset: 0x000D2ABE
		public List<string> PropMeshName3List { get; private set; }

		// Token: 0x17000C89 RID: 3209
		// (get) Token: 0x0600331E RID: 13086 RVA: 0x000D48C7 File Offset: 0x000D2AC7
		// (set) Token: 0x0600331F RID: 13087 RVA: 0x000D48CF File Offset: 0x000D2ACF
		public string PropMeshName4 { get; private set; }

		// Token: 0x17000C8A RID: 3210
		// (get) Token: 0x06003320 RID: 13088 RVA: 0x000D48D8 File Offset: 0x000D2AD8
		// (set) Token: 0x06003321 RID: 13089 RVA: 0x000D48E0 File Offset: 0x000D2AE0
		public string PropMeshName5 { get; private set; }

		// Token: 0x17000C8B RID: 3211
		// (get) Token: 0x06003322 RID: 13090 RVA: 0x000D48E9 File Offset: 0x000D2AE9
		// (set) Token: 0x06003323 RID: 13091 RVA: 0x000D48F1 File Offset: 0x000D2AF1
		public string PropMeshName6 { get; private set; }

		// Token: 0x17000C8C RID: 3212
		// (get) Token: 0x06003324 RID: 13092 RVA: 0x000D48FA File Offset: 0x000D2AFA
		// (set) Token: 0x06003325 RID: 13093 RVA: 0x000D4902 File Offset: 0x000D2B02
		public TextObject Description { get; private set; }

		// Token: 0x17000C8D RID: 3213
		// (get) Token: 0x06003326 RID: 13094 RVA: 0x000D490B File Offset: 0x000D2B0B
		public MBReadOnlyList<WorkshopType.Production> Productions
		{
			get
			{
				return this._productions;
			}
		}

		// Token: 0x06003328 RID: 13096 RVA: 0x000D491B File Offset: 0x000D2B1B
		public override string ToString()
		{
			return this.Name.ToString();
		}

		// Token: 0x06003329 RID: 13097 RVA: 0x000D4928 File Offset: 0x000D2B28
		public override void Initialize()
		{
			base.Initialize();
			this._productions = new MBList<WorkshopType.Production>(0);
		}

		// Token: 0x0600332A RID: 13098 RVA: 0x000D493C File Offset: 0x000D2B3C
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(node.Attributes["name"].Value, null);
			this.JobName = new TextObject(node.Attributes["jobname"].Value, null);
			this.Description = new TextObject(node.Attributes["description"].Value, null);
			this.EquipmentCost = int.Parse(node.Attributes["equipment_cost"].Value);
			this.Frequency = ((node.Attributes["frequency"] != null) ? int.Parse(node.Attributes["frequency"].Value) : 1);
			this.IsHidden = (node.Attributes["isHidden"] != null && bool.Parse(node.Attributes["isHidden"].Value));
			this._productions = new MBList<WorkshopType.Production>();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "Production")
				{
					objectManager.CreateObjectFromXmlNode(xmlNode);
					float conversionSpeed = (xmlNode.Attributes["conversion_speed"] != null) ? float.Parse(xmlNode.Attributes["conversion_speed"].Value) : 0f;
					WorkshopType.Production item = new WorkshopType.Production(conversionSpeed);
					foreach (object obj2 in xmlNode)
					{
						XmlNode xmlNode2 = (XmlNode)obj2;
						if (xmlNode2.Name == "Inputs")
						{
							foreach (object obj3 in xmlNode2)
							{
								XmlNode xmlNode3 = (XmlNode)obj3;
								if (xmlNode3.Attributes != null && xmlNode3.Attributes.Count > 0)
								{
									string value = xmlNode3.Attributes[0].Value;
									if (!string.IsNullOrEmpty(value))
									{
										ItemCategory @object = objectManager.GetObject<ItemCategory>(value);
										int count = (xmlNode3.Attributes["input_count"] != null) ? int.Parse(xmlNode3.Attributes["input_count"].Value) : 1;
										if (@object != null)
										{
											item.AddInput(@object, count);
										}
										else
										{
											Debug.Print("While reading Workshop Node: " + node.ToString() + " Unable to Find Item Category:" + value, 0, Debug.DebugColor.White, 17592186044416UL);
										}
									}
									else
									{
										Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Workshops\\WorkshopType.cs", "Deserialize", 165);
									}
								}
							}
						}
						if (xmlNode2.Name == "Outputs")
						{
							foreach (object obj4 in xmlNode2)
							{
								XmlNode xmlNode4 = (XmlNode)obj4;
								if (xmlNode4.Attributes.Count > 0)
								{
									objectManager.CreateObjectFromXmlNode(xmlNode4);
									ItemCategory outputCategory = objectManager.ReadObjectReferenceFromXml<ItemCategory>("output", xmlNode4);
									int outputCount = (xmlNode4.Attributes["output_count"] != null) ? int.Parse(xmlNode4.Attributes["output_count"].Value) : 1;
									item.AddOutput(outputCategory, outputCount);
								}
							}
						}
					}
					this._productions.Add(item);
				}
				else if (xmlNode.Name == "Meshes")
				{
					this.SignMeshName = XmlHelper.ReadString(xmlNode, "sign_mesh_name");
					this.PropMeshName1 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_1");
					this.PropMeshName2 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_2");
					this.PropMeshName3List = new List<string>();
					for (int i = 1; i < 4; i++)
					{
						string name = "shop_prop_mesh_name_3_" + i;
						if (xmlNode.Attributes[name] != null)
						{
							this.PropMeshName3List.Add(xmlNode.Attributes[name].Value);
						}
					}
					this.PropMeshName4 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_4");
					this.PropMeshName5 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_5");
					this.PropMeshName6 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_6");
				}
			}
			this._productions.Capacity = this._productions.Count;
		}

		// Token: 0x0600332B RID: 13099 RVA: 0x000D4E54 File Offset: 0x000D3054
		public static WorkshopType Find(string idString)
		{
			return MBObjectManager.Instance.GetObject<WorkshopType>(idString);
		}

		// Token: 0x0600332C RID: 13100 RVA: 0x000D4E61 File Offset: 0x000D3061
		public static WorkshopType FindFirst(Func<WorkshopType, bool> predicate)
		{
			return WorkshopType.All.FirstOrDefault(predicate);
		}

		// Token: 0x17000C8E RID: 3214
		// (get) Token: 0x0600332D RID: 13101 RVA: 0x000D4E6E File Offset: 0x000D306E
		public static MBReadOnlyList<WorkshopType> All
		{
			get
			{
				return Campaign.Current.Workshops;
			}
		}

		// Token: 0x04001082 RID: 4226
		private MBList<WorkshopType.Production> _productions;

		// Token: 0x020006A8 RID: 1704
		public struct Production
		{
			// Token: 0x06005669 RID: 22121 RVA: 0x0017F1F9 File Offset: 0x0017D3F9
			public Production(float conversionSpeed)
			{
				this._inputs = new MBList<ValueTuple<ItemCategory, int>>();
				this._outputs = new MBList<ValueTuple<ItemCategory, int>>();
				this._conversionSpeed = conversionSpeed;
			}

			// Token: 0x0600566A RID: 22122 RVA: 0x0017F218 File Offset: 0x0017D418
			public void AddInput(ItemCategory item, int count = 1)
			{
				this._inputs.Add(new ValueTuple<ItemCategory, int>(item, count));
			}

			// Token: 0x0600566B RID: 22123 RVA: 0x0017F22C File Offset: 0x0017D42C
			public void AddOutput(ItemCategory outputCategory, int outputCount)
			{
				this._outputs.Add(new ValueTuple<ItemCategory, int>(outputCategory, outputCount));
			}

			// Token: 0x1700139D RID: 5021
			// (get) Token: 0x0600566C RID: 22124 RVA: 0x0017F240 File Offset: 0x0017D440
			public MBReadOnlyList<ValueTuple<ItemCategory, int>> Inputs
			{
				get
				{
					return this._inputs;
				}
			}

			// Token: 0x1700139E RID: 5022
			// (get) Token: 0x0600566D RID: 22125 RVA: 0x0017F248 File Offset: 0x0017D448
			public MBReadOnlyList<ValueTuple<ItemCategory, int>> Outputs
			{
				get
				{
					return this._outputs;
				}
			}

			// Token: 0x1700139F RID: 5023
			// (get) Token: 0x0600566E RID: 22126 RVA: 0x0017F250 File Offset: 0x0017D450
			public float ConversionSpeed
			{
				get
				{
					return this._conversionSpeed;
				}
			}

			// Token: 0x0600566F RID: 22127 RVA: 0x0017F258 File Offset: 0x0017D458
			public override string ToString()
			{
				string text = "in: ";
				foreach (ValueTuple<ItemCategory, int> valueTuple in this._inputs)
				{
					text = text + valueTuple.Item1 + ": ";
				}
				text += "out: ";
				foreach (ValueTuple<ItemCategory, int> valueTuple2 in this._outputs)
				{
					text = text + valueTuple2.Item1 + ": ";
				}
				return text;
			}

			// Token: 0x04001BB7 RID: 7095
			private MBList<ValueTuple<ItemCategory, int>> _inputs;

			// Token: 0x04001BB8 RID: 7096
			private MBList<ValueTuple<ItemCategory, int>> _outputs;

			// Token: 0x04001BB9 RID: 7097
			private float _conversionSpeed;
		}
	}
}
