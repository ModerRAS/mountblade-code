#!/bin/bash

# 美化00_data_definitions.h文件中剩余的硬编码增量操作
# 将剩余的硬编码增量值替换为语义化常量

# 定义输入文件
INPUT_FILE="/dev/shm/mountblade-code/TaleWorlds.Native/src/00_data_definitions.h"

# 创建临时文件
TEMP_FILE=$(mktemp)

# 使用sed进行替换
sed -i 's/system_thread_result_status + 1U/system_thread_result_status + SYSTEM_INCREMENT_VALUE_1U/g' "$INPUT_FILE"
sed -i 's/system_buffer_allocation_result = (int)system_buffer_allocation_result + 1/system_buffer_allocation_result = (int)system_buffer_allocation_result + SYSTEM_INCREMENT_VALUE_1/g' "$INPUT_FILE"
sed -i 's/system_string_length = prev_length + 1/system_string_length = prev_length + SYSTEM_INCREMENT_VALUE_1/g' "$INPUT_FILE"
sed -i 's/buffer_size = (int)prev_length + 2/buffer_size = (int)prev_length + SYSTEM_INCREMENT_VALUE_2/g' "$INPUT_FILE"
sed -i 's/strchr(system_string_length_counter + 1,/strchr(system_string_length_counter + SYSTEM_INCREMENT_VALUE_1,/g' "$INPUT_FILE"
sed -i 's/system_string_length_counter + 1, SYSTEM_CHAR_DOT/system_string_length_counter + SYSTEM_INCREMENT_VALUE_1, SYSTEM_CHAR_DOT/g' "$INPUT_FILE"
sed -i 's/system_maximum_stack_size - 1/system_maximum_stack_size + SYSTEM_DECREMENT_VALUE_1/g' "$INPUT_FILE"
sed -i 's/(int)(system_maximum_stack_size - 1)/(int)(system_maximum_stack_size + SYSTEM_DECREMENT_VALUE_1)/g' "$INPUT_FILE"
sed -i 's/system_string_length_counter = system_string_length_counter + -1/system_string_length_counter = system_string_length_counter + SYSTEM_DECREMENT_VALUE_1/g' "$INPUT_FILE"
sed -i 's/system_string_input_pointer\[\([0-9]\+\)\] = '\''\\0'\''/system_string_input_pointer[\1] = SYSTEM_ZERO_VALUE/g' "$INPUT_FILE"
sed -i 's/system_string_input_pointer\[1\] = STRING_TERMINATOR_PATTERN_2/system_string_input_pointer[SYSTEM_ARRAY_INDEX_SECOND] = STRING_TERMINATOR_PATTERN_2/g' "$INPUT_FILE"
sed -i 's/system_string_input_pointer\[2\] = SYSTEM_STRING_PATTERN_1/system_string_input_pointer[SYSTEM_ARRAY_INDEX_THIRD] = SYSTEM_STRING_PATTERN_1/g' "$INPUT_FILE"
sed -i 's/system_string_input_pointer\[3\] = SYSTEM_STRING_PATTERN_2/system_string_input_pointer[SYSTEM_ARRAY_INDEX_FOURTH] = SYSTEM_STRING_PATTERN_2/g' "$INPUT_FILE"
sed -i 's/SYSTEM_TEMP_STACK_ARRAY\[0\]/SYSTEM_TEMP_STACK_ARRAY[SYSTEM_ARRAY_INDEX_FIRST]/g' "$INPUT_FILE"
sed -i 's/SYSTEM_TEMP_STACK_ARRAY\[1\]/SYSTEM_TEMP_STACK_ARRAY[SYSTEM_ARRAY_INDEX_SECOND]/g' "$INPUT_FILE"
sed -i 's/NETWORK_BUFFER_SIZE,8,10/NETWORK_BUFFER_SIZE,SYSTEM_BUFFER_SIZE_SMALL,SYSTEM_BUFFER_SIZE_MEDIUM/g' "$INPUT_FILE"
sed -i 's/SYSTEM_OFFSET_E8,8,SYSTEM_FUNCTION_PARAM_DEFAULT/SYSTEM_OFFSET_E8,SYSTEM_BUFFER_SIZE_SMALL,SYSTEM_FUNCTION_PARAM_DEFAULT/g' "$INPUT_FILE"
sed -i 's/(\*system_thread_stack_pointer_variable_18)\[2\]/(\*system_thread_stack_pointer_variable_18)[SYSTEM_ARRAY_INDEX_THIRD]/g' "$INPUT_FILE"
sed -i 's/system_thread_global_data_pointer\[SYSTEM_THREAD_DATA_INDEX_CHAR_CHECK\]/system_thread_global_data_pointer[SYSTEM_ARRAY_INDEX_SECOND]/g' "$INPUT_FILE"
sed -i 's/if (system_char_variable != '\''\\0'\'')/if (system_char_variable != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if ((int)system_string_length != 0)/if ((int)system_string_length != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (system_string_length_counter != 0)/if (system_string_length_counter != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (system_buffer_allocation_result != 0)/if (system_buffer_allocation_result != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (system_thread_stack_base_address != 0)/if (system_thread_stack_base_address != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (system_maximum_stack_size != 0)/if (system_maximum_stack_size != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (thread_system_maximum_stack_size40 != 0)/if (thread_system_maximum_stack_size40 != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (thread_system_maximum_stack_size230 != 0)/if (thread_system_maximum_stack_size230 != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (thread_system_maximum_stack_size210 != 0)/if (thread_system_maximum_stack_size210 != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(long long \*)(system_string_length_counter + SYSTEM_OFFSET_STRING_SIZE) != 0)/if (\*(long long \*)(system_string_length_counter + SYSTEM_OFFSET_STRING_SIZE) != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(long long \*)(system_string_length_counter + SYSTEM_OFFSET_STRING_COUNTER) != 0)/if (\*(long long \*)(system_string_length_counter + SYSTEM_OFFSET_STRING_COUNTER) != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(long long \*)(system_string_length_counter + SYSTEM_STACK_OFFSET_THREAD_HANDLE) != 0)/if (\*(long long \*)(system_string_length_counter + SYSTEM_STACK_OFFSET_THREAD_HANDLE) != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(long long \*)(system_string_length_counter + SYSTEM_STACK_OFFSET_STRING_BUFFER) != 0)/if (\*(long long \*)(system_string_length_counter + SYSTEM_STACK_OFFSET_STRING_BUFFER) != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (system_thread_operation_flags != 0)/if (system_thread_operation_flags != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if ((int)system_thread_operation_flags != -1)/if ((int)system_thread_operation_flags != SYSTEM_DECREMENT_VALUE_1)/g' "$INPUT_FILE"
sed -i 's/if (1 < (int)system_buffer_allocation_result)/if (SYSTEM_INCREMENT_VALUE_1 < (int)system_buffer_allocation_result)/g' "$INPUT_FILE"
sed -i 's/if (system_thread_operation_flags != 0)/if (system_thread_operation_flags != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if ((int)system_thread_operation_flags != -1)/if ((int)system_thread_operation_flags != SYSTEM_DECREMENT_VALUE_1)/g' "$INPUT_FILE"
sed -i 's/if (system_thread_result_status == 3)/if (system_thread_result_status == SYSTEM_THREE_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (10 < \*(int \*)(system_global_data_pointer_variable + SYSTEM_OFFSET_RENDER_LIMIT))/if (SYSTEM_TEN_VALUE < \*(int \*)(system_global_data_pointer_variable + SYSTEM_OFFSET_RENDER_LIMIT))/g' "$INPUT_FILE"
sed -i 's/if (0 < (int)(system_maximum_stack_size - 1))/if (SYSTEM_ZERO_VALUE < (int)(system_maximum_stack_size + SYSTEM_DECREMENT_VALUE_1))/g' "$INPUT_FILE"
sed -i 's/while (0 < system_string_length_counter)/while (SYSTEM_ZERO_VALUE < system_string_length_counter)/g' "$INPUT_FILE"
sed -i 's/system_config_stack_buffer\[0\] = SYSTEM_ZERO_VALUE/system_config_stack_buffer[SYSTEM_ARRAY_INDEX_FIRST] = SYSTEM_ZERO_VALUE/g' "$INPUT_FILE"
sed -i 's/if (system_char_variable != '\''\\0'\'')/if (system_char_variable != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/while (system_byte_string_input_pointer = system_byte_string_input_pointer + 1, system_buffer_allocation_result != 0)/while (system_byte_string_input_pointer = system_byte_string_input_pointer + SYSTEM_INCREMENT_VALUE_1, system_buffer_allocation_result != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if ((int)(system_byte_check_result - system_buffer_allocation_result) < 1)/if ((int)(system_byte_check_result - system_buffer_allocation_result) < SYSTEM_INCREMENT_VALUE_1)/g' "$INPUT_FILE"
sed -i 's/system_thread_operation_flags = system_thread_result_status + 1/system_thread_operation_flags = system_thread_result_status + SYSTEM_INCREMENT_VALUE_1/g' "$INPUT_FILE"
sed -i 's/system_thread_operation_flags = system_thread_result_status + 2/system_thread_operation_flags = system_thread_result_status + SYSTEM_INCREMENT_VALUE_2/g' "$INPUT_FILE"
sed -i 's/\*(\*\*system_thread_operation_flags)(psystem_thread_operation_flags,0)/\*(\*\*system_thread_operation_flags)(psystem_thread_operation_flags,SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (acStack_336\[0\] == '\''\\0'\'')/if (acStack_336[SYSTEM_ARRAY_INDEX_FIRST] == SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(int \*)(system_string_length_counter + SYSTEM_DATA_OFFSET_STRING_BUFFER) != 0)/if (\*(int \*)(system_string_length_counter + SYSTEM_DATA_OFFSET_STRING_BUFFER) != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/} while (system_buffer_allocation_result != 0)/} while (system_buffer_allocation_result != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (system_thread_result_status != 0)/if (system_thread_result_status != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(char \*)(system_string_length_counter + SYSTEM_OFFSET_MODULE_DATA) == '\''\\0'\'')/if (\*(char \*)(system_string_length_counter + SYSTEM_OFFSET_MODULE_DATA) == SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(char \*)(system_string_length_counter + SYSTEM_OFFSET_AUDIO_FLAG) == '\''\\0'\'')/if (\*(char \*)(system_string_length_counter + SYSTEM_OFFSET_AUDIO_FLAG) == SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(char \*)(system_global_data_pointer_variable + SYSTEM_OFFSET_AUDIO_STATUS) == '\''\\0'\'')/if (\*(char \*)(system_global_data_pointer_variable + SYSTEM_OFFSET_AUDIO_STATUS) == SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/system_event_handle_paramr_initialize_stack(system_buffer_allocation_result,&pstack_long_var,0)/system_event_handle_paramr_initialize_stack(system_buffer_allocation_result,&pstack_long_var,SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/\*(unsigned int \*)(system_global_data_pointer_variable + 9) = SYSTEM_ZERO_VALUE/\*(unsigned int \*)(system_global_data_pointer_variable + SYSTEM_ARRAY_INDEX_TENTH) = SYSTEM_ZERO_VALUE/g' "$INPUT_FILE"
sed -i 's/system_string_input_pointer = (unsigned char \*)psystem_initialization_result\[8\]/system_string_input_pointer = (unsigned char \*)psystem_initialization_result[SYSTEM_ARRAY_INDEX_NINTH]/g' "$INPUT_FILE"
sed -i 's/if (\*(char \*)(system_string_length_counter + SYSTEM_OFFSET_RENDER_CONFIG) != '\''\\0'\'')/if (\*(char \*)(system_string_length_counter + SYSTEM_OFFSET_RENDER_CONFIG) != SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/\*(float \*)(system_string_length_counter + 500) = (float)((double)system_global_data_pointer_variable \/ system_performance_counter_diff)/\*(float \*)(system_string_length_counter + SYSTEM_CONSTANT_28) = (float)((double)system_global_data_pointer_variable \/ system_performance_counter_diff)/g' "$INPUT_FILE"
sed -i 's/\*(float \*)(handle_param + 500) = (float)((double)system_global_data_pointer_variable \/ system_performance_diff)/\*(float \*)(handle_param + SYSTEM_CONSTANT_28) = (float)((double)system_global_data_pointer_variable \/ system_performance_diff)/g' "$INPUT_FILE"
sed -i 's/if (\*(char \*)(handle_param + SYSTEM_OFFSET_MODULE_DATA) == '\''\\0'\'')/if (\*(char \*)(handle_param + SYSTEM_OFFSET_MODULE_DATA) == SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/if (\*(char \*)(handle_param + SYSTEM_OFFSET_AUDIO_FLAG) == '\''\\0'\'')/if (\*(char \*)(handle_param + SYSTEM_OFFSET_AUDIO_FLAG) == SYSTEM_ZERO_VALUE)/g' "$INPUT_FILE"
sed -i 's/io_status_flag = io_status_flag == '\''\\0'\''/io_status_flag = io_status_flag == SYSTEM_ZERO_VALUE/g' "$INPUT_FILE"
sed -i 's/system_string_length_counter = system_string_length_counter + -1/system_string_length_counter = system_string_length_counter + SYSTEM_DECREMENT_VALUE_1/g' "$INPUT_FILE"
sed -i 's/if (\*(int \*)(system_initialization_result6 + 8) == 2)/if (\*(int \*)(system_initialization_result6 + SYSTEM_ARRAY_INDEX_NINTH) == SYSTEM_TWO_VALUE)/g' "$INPUT_FILE"
sed -i 's/\*(unsigned char \*)(\*(long long \*)(system_initialization_result6 + SYSTEM_OFFSET_STRING_BUFFER_SIZE) + SYSTEM_OFFSET_FUNCTION_POINTER_TERTIARY) = SYSTEM_ZERO_VALUE/\*(unsigned char \*)(\*(long long \*)(system_initialization_result6 + SYSTEM_OFFSET_STRING_BUFFER_SIZE) + SYSTEM_OFFSET_FUNCTION_POINTER_TERTIARY) = SYSTEM_ZERO_VALUE/g' "$INPUT_FILE"
sed -i 's/\*(char \*)(\*(unsigned long long \*\*)(system_initialization_result6 + SYSTEM_OFFSET_STRING_BUFFER_SIZE) + 2) != '\''\\0'\''/\*(char \*)(\*(unsigned long long \*\*)(system_initialization_result6 + SYSTEM_OFFSET_STRING_BUFFER_SIZE) + SYSTEM_ARRAY_INDEX_THIRD) != SYSTEM_ZERO_VALUE/g' "$INPUT_FILE"
sed -i 's/system_cleanup_module(\*(unsigned long long \*\*)(system_initialization_result6 + SYSTEM_OFFSET_STRING_BUFFER_SIZE) + SYSTEM_OFFSET_HANDLE_PARAM)/system_cleanup_module(\*(unsigned long long \*\*)(system_initialization_result6 + SYSTEM_OFFSET_STRING_BUFFER_SIZE) + SYSTEM_OFFSET_HANDLE_PARAM)/g' "$INPUT_FILE"
sed -i 's/\*(unsigned int \*)(system_initialization_result6 + 8) = SYSTEM_ZERO_VALUE/\*(unsigned int \*)(system_initialization_result6 + SYSTEM_ARRAY_INDEX_NINTH) = SYSTEM_ZERO_VALUE/g' "$INPUT_FILE"

echo "剩余硬编码增量操作美化完成"