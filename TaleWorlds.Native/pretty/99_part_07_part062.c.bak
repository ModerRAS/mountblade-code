#include "TaleWorlds.Native.Split.h"
#include "include/global_constants.h"

// 99_part_07_part062.c - 3 个函数

// 函数: void FUN_1804d5bb0(int64_t param_1)
void FUN_1804d5bb0(int64_t param_1)

{
  int *piVar1;
  int *piVar2;
  uint uVar3;
  int64_t lVar4;
  int64_t lVar5;
  uint64_t *puVar6;
  int64_t *plVar7;
  bool bVar8;
  int64_t lVar9;
  int64_t lVar10;
  uint *puVar11;
  int32_t *puVar12;
  int iVar13;
  int64_t *plVar14;
  int64_t *plVar15;
  uint64_t uVar16;
  uint64_t uVar17;
  uint64_t uStackX_8;
  uint64_t uStack_38;
  uint uStack_30;
  int32_t uStack_2c;
  
  if (((*(int64_t *)(param_1 + 0x2bd8) == 0) && (*(int64_t *)(param_1 + 0x2b78) == 0)) &&
     (*(int64_t *)(param_1 + 0x2ba8) == 0)) {
    bVar8 = false;
  }
  else {
    bVar8 = true;
  }
  lVar10 = param_1 + 0x2bb8;
  for (lVar9 = *(int64_t *)(param_1 + 0x2bc0); lVar9 != lVar10; lVar9 = func_0x00018066bd70(lVar9))
  {
    lVar4 = *(int64_t *)(lVar9 + 0x20);
    lVar5 = *(int64_t *)(lVar4 + 0x20);
    if (lVar5 != 0) {
      FUN_1803982f0(lVar5 + 0x607e0,lVar4);
      FUN_180398640(lVar5 + 0x607e0,lVar4);
    }
  }
  puVar6 = *(uint64_t **)(param_1 + 0x2bc8);
  if (puVar6 != (uint64_t *)0x0) {
    uStackX_8 = puVar6;
    FUN_18017b400(lVar10,*puVar6);
    if ((int64_t *)puVar6[4] != (int64_t *)0x0) {
      (**(code **)(*(int64_t *)puVar6[4] + 0x38))();
    }
                    // WARNING: Subroutine does not return
    CoreEngine_MemoryPoolManager(puVar6);
  }
  *(int64_t *)lVar10 = lVar10;
  *(int64_t *)(param_1 + 0x2bc0) = lVar10;
  *(uint64_t *)(param_1 + 0x2bc8) = 0;
  *(int8_t *)(param_1 + 0x2bd0) = 0;
  *(uint64_t *)(param_1 + 0x2bd8) = 0;
  uStackX_8 = (uint64_t *)0x0;
  for (lVar10 = *(int64_t *)(param_1 + 0x2b60); lVar10 != param_1 + 0x2b58;
      lVar10 = func_0x00018066bd70(lVar10)) {
    uStack_38 = *(int64_t *)(lVar10 + 0x20);
    uStack_30 = *(uint *)(lVar10 + 0x28);
    uStack_2c = *(int32_t *)(lVar10 + 0x2c);
    FUN_1804d3d10(param_1,&uStack_38);
  }
  FUN_1800572d0(param_1 + 0x2b58);
  for (lVar10 = *(int64_t *)(param_1 + 0x2b90); lVar10 != param_1 + 0x2b88;
      lVar10 = func_0x00018066bd70(lVar10)) {
    uStack_38 = *(int64_t *)(lVar10 + 0x20);
    uStack_30 = *(uint *)(lVar10 + 0x28);
    uStack_2c = *(int32_t *)(lVar10 + 0x2c);
    FUN_1804d3ed0(param_1,&uStack_38);
  }
  FUN_1800572d0(param_1 + 0x2b88);
  if (bVar8) {
    piVar1 = (int *)(param_1 + 0x610);
    FUN_1804a7e10(piVar1);
    plVar7 = *(int64_t **)(param_1 + 0x2c98);
    plVar15 = (int64_t *)*plVar7;
    plVar14 = plVar7;
    if (plVar15 == (int64_t *)0x0) {
      plVar14 = plVar7 + 1;
      plVar15 = (int64_t *)*plVar14;
      while (plVar15 == (int64_t *)0x0) {
        plVar14 = plVar14 + 1;
        plVar15 = (int64_t *)*plVar14;
      }
    }
    if (plVar15 != (int64_t *)plVar7[*(int64_t *)(param_1 + 0x2ca0)]) {
      do {
        lVar10 = *plVar15;
        if (*(int64_t *)(lVar10 + 0x940) == 0) {
          if ((*(int64_t *)(param_1 + 0x628) - *(int64_t *)(param_1 + 0x620) & 0xfffffffffffffffcU
              ) == 0) {
            FUN_1804dc7a0(piVar1);
          }
          puVar11 = (uint *)(*(int64_t *)(param_1 + 0x628) + -4);
          uVar3 = *puVar11;
          *(uint **)(param_1 + 0x628) = puVar11;
          iVar13 = *(int *)(param_1 + 0x614);
          if (*(int *)(param_1 + 0x614) <= (int)uVar3) {
            iVar13 = uVar3 + 1;
          }
          *(int *)(param_1 + 0x614) = iVar13;
          lVar9 = (int64_t)((int)uVar3 >> 10) * 8;
          piVar2 = (int *)(*(int64_t *)(*(int64_t *)(param_1 + 0x640) + lVar9) +
                          (int64_t)(int)(*(uint *)(param_1 + 0x660) & uVar3) * 0xc);
          iVar13 = *piVar1;
          *piVar1 = iVar13 + 1;
          *piVar2 = iVar13;
          piVar2[1] = uVar3;
          if (piVar2 + 2 != (int *)0x0) {
            piVar2[2] = 0;
          }
          *(int *)(*(int64_t *)(*(int64_t *)(param_1 + 0x640) + lVar9) + 8 +
                  (int64_t)(int)(*(uint *)(param_1 + 0x660) & uVar3) * 0xc) = (int)plVar15[2];
          lVar10 = *(int64_t *)(lVar10 + 0x948);
          if (lVar10 == 0) {
            *(int32_t *)
             (*(int64_t *)
               (*(int64_t *)(param_1 + 0x2c68) + (int64_t)((int)*(uint *)(plVar15 + 2) >> 10) * 8)
              + 0x10 + (int64_t)(int)(*(uint *)(param_1 + 0x2c88) & *(uint *)(plVar15 + 2)) * 0x68)
                 = 0xffffffff;
          }
          else {
            uStack_30 = *(uint *)(lVar10 + 0x938);
            uVar16 = (((((uint64_t)(uStack_30 & 0xff) ^ 0xcbf29ce484222325) * 0x100000001b3 ^
                       (uint64_t)(uStack_30 >> 8 & 0xff)) * 0x100000001b3 ^
                      (uint64_t)(uStack_30 >> 0x10 & 0xff)) * 0x100000001b3 ^
                     (uint64_t)(uStack_30 >> 0x18)) * 0x100000001b3;
            uVar17 = uVar16 % (uint64_t)*(uint *)(param_1 + 0x2ca0);
            for (puVar12 = *(int32_t **)(*(int64_t *)(param_1 + 0x2c98) + uVar17 * 8);
                uStack_38 = lVar10, puVar12 != (int32_t *)0x0;
                puVar12 = *(int32_t **)(puVar12 + 6)) {
              if (uStack_30 == puVar12[2]) {
                if (puVar12 != (int32_t *)0x0) goto LAB_1804d5f74;
                break;
              }
            }
            FUN_18066c220(param_1 + 0x2cb0,&uStackX_8,(uint64_t)*(uint *)(param_1 + 0x2ca0),
                          *(int32_t *)(param_1 + 0x2ca8),1);
            puVar12 = (int32_t *)
                      CoreMemoryPoolAllocator(system_memory_pool_ptr,0x20,*(int8_t *)(param_1 + 0x2cbc));
            *puVar12 = (int32_t)uStack_38;
            puVar12[1] = uStack_38._4_4_;
            puVar12[2] = uStack_30;
            puVar12[3] = uStack_2c;
            puVar12[4] = 0;
            *(uint64_t *)(puVar12 + 6) = 0;
            if ((char)uStackX_8 != '\0') {
              uVar17 = uVar16 % (uint64_t)uStackX_8._4_4_;
              FUN_1804ddf60(param_1 + 0x2c90,uStackX_8._4_4_);
            }
            *(uint64_t *)(puVar12 + 6) =
                 *(uint64_t *)(*(int64_t *)(param_1 + 0x2c98) + uVar17 * 8);
            *(int32_t **)(*(int64_t *)(param_1 + 0x2c98) + uVar17 * 8) = puVar12;
            *(int64_t *)(param_1 + 0x2ca8) = *(int64_t *)(param_1 + 0x2ca8) + 1;
LAB_1804d5f74:
            *(int32_t *)
             (*(int64_t *)
               (*(int64_t *)(param_1 + 0x2c68) + (int64_t)((int)*(uint *)(plVar15 + 2) >> 10) * 8)
              + 0x10 + (int64_t)(int)(*(uint *)(param_1 + 0x2c88) & *(uint *)(plVar15 + 2)) * 0x68)
                 = puVar12[4];
          }
        }
        plVar15 = (int64_t *)plVar15[3];
        while (plVar15 == (int64_t *)0x0) {
          plVar14 = plVar14 + 1;
          plVar15 = (int64_t *)*plVar14;
        }
      } while (plVar15 !=
               *(int64_t **)(*(int64_t *)(param_1 + 0x2c98) + *(int64_t *)(param_1 + 0x2ca0) * 8)
              );
    }
  }
  return;
}



// WARNING: Type propagation algorithm not settling
// WARNING: Globals starting with '_' overlap smaller symbols at the same address




// 函数: void FUN_1804d6050(uint64_t **param_1,uint64_t ***param_2,int32_t param_3)
void FUN_1804d6050(uint64_t **param_1,uint64_t ***param_2,int32_t param_3)

{
  uint *puVar1;
  uint uVar2;
  uint uVar3;
  int64_t *plVar4;
  uint *puVar5;
  uint64_t uVar6;
  uint64_t uVar7;
  uint64_t uVar8;
  uint64_t *puVar9;
  int32_t uVar10;
  uint64_t *puVar11;
  int64_t lVar12;
  int64_t lVar13;
  uint *puVar14;
  int64_t *plVar15;
  uint64_t *puVar16;
  int *piVar17;
  uint64_t *puVar18;
  int iVar19;
  uint64_t *puVar20;
  int32_t uVar21;
  uint64_t ***pppuStackX_10;
  int32_t auStackX_18 [4];
  uint64_t *puStack_f8;
  uint64_t *puStack_f0;
  uint64_t *puStack_e8;
  int32_t uStack_e0;
  uint64_t **ppuStack_d8;
  uint64_t uStack_d0;
  void *puStack_c8;
  code *pcStack_c0;
  uint64_t **ppuStack_b8;
  int iStack_b0;
  int32_t uStack_ac;
  void *puStack_a8;
  void *puStack_a0;
  int iStack_98;
  int32_t uStack_94;
  int32_t *puStack_90;
  void *puStack_88;
  code *pcStack_80;
  uint64_t uStack_78;
  int32_t *puStack_70;
  void *puStack_68;
  void *puStack_60;
  uint64_t uStack_58;
  
  uStack_58 = 0xfffffffffffffffe;
  pppuStackX_10 = param_2;
  auStackX_18[0] = param_3;
  FUN_1804d5bb0();
  if ((((param_2[99] != (uint64_t **)0x0) && (*(char *)((int64_t)param_2 + 0x2a61) != '\0')) &&
      (*(char *)((int64_t)param_2 + 0x2a62) != '\0')) && (*(int *)(system_system_data_memory + 0xaf0) != 0)) {
    (*(code *)(*param_2[99])[8])();
  }
  puStack_f8 = (uint64_t *)0x0;
  puStack_f0 = (uint64_t *)0x0;
  puVar20 = (uint64_t *)0x0;
  puStack_e8 = (uint64_t *)0x0;
  uStack_e0 = 3;
  plVar4 = param_1[0x593];
  puVar16 = (uint64_t *)*plVar4;
  plVar15 = plVar4;
  if (puVar16 == (uint64_t *)0x0) {
    plVar15 = plVar4 + 1;
    puVar16 = (uint64_t *)*plVar15;
    while (puVar16 == (uint64_t *)0x0) {
      plVar15 = plVar15 + 1;
      puVar16 = (uint64_t *)*plVar15;
    }
  }
  if (puVar16 != (uint64_t *)plVar4[(int64_t)param_1[0x594]]) {
    do {
      uVar6 = *puVar16;
      uVar7 = puVar16[1];
      puStack_c8 = (void *)CONCAT44(puStack_c8._4_4_,*(int32_t *)(puVar16 + 2));
      if (puStack_f0 < puStack_e8) {
        *puStack_f0 = uVar6;
        puStack_f0[1] = uVar7;
        puStack_f0[2] = puStack_c8;
        puVar11 = puStack_f0;
      }
      else {
        lVar12 = ((int64_t)puStack_f0 - (int64_t)puStack_f8) / 0x18;
        if (lVar12 == 0) {
          lVar12 = 1;
LAB_1804d6192:
          puVar11 = (uint64_t *)CoreMemoryPoolAllocator(system_memory_pool_ptr,lVar12 * 0x18,(int8_t)uStack_e0);
          puVar9 = puStack_f8;
          puVar18 = puVar11;
        }
        else {
          lVar12 = lVar12 * 2;
          puVar11 = puVar20;
          puVar9 = puStack_f8;
          puVar18 = puVar20;
          if (lVar12 != 0) goto LAB_1804d6192;
        }
        for (; puVar9 != puStack_f0; puVar9 = puVar9 + 3) {
          uVar8 = puVar9[1];
          *puVar11 = *puVar9;
          puVar11[1] = uVar8;
          puVar11[2] = puVar9[2];
          puVar11 = puVar11 + 3;
        }
        *puVar11 = uVar6;
        puVar11[1] = uVar7;
        puVar11[2] = puStack_c8;
        if (puStack_f8 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
          CoreEngine_MemoryPoolManager();
        }
        puStack_e8 = puVar18 + lVar12 * 3;
        puStack_f8 = puVar18;
      }
      puStack_f0 = puVar11 + 3;
      puVar16 = (uint64_t *)puVar16[3];
      while (puVar16 == (uint64_t *)0x0) {
        plVar15 = plVar15 + 1;
        puVar16 = (uint64_t *)*plVar15;
      }
      param_2 = pppuStackX_10;
    } while (puVar16 != (uint64_t *)param_1[0x593][(int64_t)param_1[0x594]]);
  }
  pppuStackX_10 = &ppuStack_b8;
  ppuStack_d8 = &puStack_f8;
  puStack_a8 = &unknown_var_9488_ptr;
  puStack_a0 = &unknown_var_9472_ptr;
  uStack_d0._0_4_ = (int)param_1;
  iVar19 = (int)uStack_d0;
  uStack_d0._4_4_ = (int32_t)((uint64_t)param_1 >> 0x20);
  uVar10 = uStack_d0._4_4_;
  iStack_b0 = (int)uStack_d0;
  uStack_ac = uStack_d0._4_4_;
  uStack_d0 = param_1;
  ppuStack_b8 = ppuStack_d8;
  FUN_18015b810((int64_t)puStack_f0 - (int64_t)puStack_f8,0,
                ((int64_t)puStack_f0 - (int64_t)puStack_f8) / 0x18,0x10,0xffffffffffffffff,
                &ppuStack_b8);
  if (puStack_f8 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    CoreEngine_MemoryPoolManager();
  }
  if (((param_2[99] != (uint64_t **)0x0) && (*(char *)((int64_t)param_2 + 0x2a61) != '\0')) &&
     ((*(char *)((int64_t)param_2 + 0x2a62) != '\0' && (*(int *)(system_system_data_memory + 0xaf0) != 0)))) {
    (*(code *)(*param_2[99])[8])();
  }
  pppuStackX_10 = (uint64_t ***)&iStack_98;
  uStack_d0 = (uint64_t **)auStackX_18;
  puStack_88 = &unknown_var_9408_ptr;
  pcStack_80 = FUN_1804df1a0;
  iStack_98 = iVar19;
  uStack_94 = uVar10;
  ppuStack_d8 = param_1;
  puStack_90 = (int32_t *)uStack_d0;
  uVar21 = FUN_18015b810(iVar19,0,*(int32_t *)((int64_t)param_1 + 0x2acc),0x10,
                         0xffffffffffffffff,&iStack_98);
  if (((param_2[99] != (uint64_t **)0x0) && (*(char *)((int64_t)param_2 + 0x2a61) != '\0')) &&
     ((*(char *)((int64_t)param_2 + 0x2a62) != '\0' && (*(int *)(system_system_data_memory + 0xaf0) != 0)))) {
    uVar21 = (*(code *)(*param_2[99])[8])();
  }
  if (*(char *)((int64_t)param_1 + 0x2b51) != '\0') {
    pppuStackX_10 = &ppuStack_d8;
    puStack_c8 = &unknown_var_9008_ptr;
    pcStack_c0 = FUN_1804df080;
    ppuStack_d8 = param_1;
    FUN_18015b810(uVar21,0,*(int32_t *)((int64_t)param_1 + 0x2acc),0x10,0xffffffffffffffff,
                  &ppuStack_d8);
  }
  if ((((param_2[99] != (uint64_t **)0x0) && (*(char *)((int64_t)param_2 + 0x2a61) != '\0')) &&
      (*(char *)((int64_t)param_2 + 0x2a62) != '\0')) && (*(int *)(system_system_data_memory + 0xaf0) != 0)) {
    (*(code *)(*param_2[99])[8])();
  }
  LOCK();
  *(int32_t *)(param_1 + 0xd8) = 0;
  UNLOCK();
  pppuStackX_10 = (uint64_t ***)&uStack_78;
  uStack_d0 = (uint64_t **)auStackX_18;
  puStack_68 = &unknown_var_8720_ptr;
  puStack_60 = &unknown_var_8704_ptr;
  uStack_78._0_4_ = iVar19;
  uStack_78._4_4_ = uVar10;
  ppuStack_d8 = param_1;
  puStack_70 = (int32_t *)uStack_d0;
  FUN_18015b810(pppuStackX_10,0,*(int32_t *)((int64_t)param_1 + 0x5bc),0x32,0xffffffffffffffff,
                &uStack_78);
  do {
    iVar19 = (int)puVar20;
    if ((uint64_t)*(uint *)(param_1 + 0xd8) <= (uint64_t)(int64_t)iVar19) {
      return;
    }
    uVar2 = *(uint *)((int64_t)param_1[((uint64_t)puVar20 >> 6) + 0xd9] +
                     (uint64_t)(uint)(iVar19 + (int)((uint64_t)puVar20 >> 6) * -0x40) * 4);
    if ((int)uVar2 < *(int *)((int64_t)param_1 + 0x5bc)) {
      lVar12 = (int64_t)(int)(*(uint *)(param_1 + 0xc1) & uVar2) * 0x28;
      if ((*(int *)(param_1[0xbd][(int)uVar2 >> 10] + lVar12) != -1) &&
         (puVar14 = (uint *)(param_1[0xbd][(int)uVar2 >> 10] + 8 + lVar12), puVar14 != (uint *)0x0))
      {
        uVar3 = *puVar14;
        lVar12 = *(int64_t *)
                  (param_1[0x55f][(int)uVar3 >> 10] + 8 +
                  (int64_t)(int)(*(uint *)(param_1 + 0x563) & uVar3) * 0xd8);
        if ((char)puVar14[1] == -1) {
          FUN_1802ee610(lVar12,*(uint64_t *)(puVar14 + 4));
        }
        else {
          FUN_1803004f0(*(uint64_t *)(lVar12 + 0x260),(char)puVar14[1],
                        *(uint64_t *)(puVar14 + 4));
        }
        lVar12 = param_1[0x55f][(int)uVar3 >> 10];
        lVar13 = (int64_t)(int)(*(uint *)(param_1 + 0x563) & uVar3) * 0xd8;
        for (puVar14 = *(uint **)(lVar12 + 0x70 + lVar13);
            (puVar14 != *(uint **)(lVar12 + 0x78 + lVar13) && (*puVar14 != uVar2));
            puVar14 = puVar14 + 1) {
        }
        puVar5 = *(uint **)(lVar12 + lVar13 + 0x78);
        puVar1 = puVar14 + 1;
        if (puVar1 < puVar5) {
                    // WARNING: Subroutine does not return
          memmove(puVar14,puVar1,(int64_t)puVar5 - (int64_t)puVar1);
        }
        *(uint **)(lVar12 + lVar13 + 0x78) = puVar5 + -1;
        pppuStackX_10 = (uint64_t ***)CONCAT44(pppuStackX_10._4_4_,uVar2);
        piVar17 = (int *)(param_1[0xbd][(int)uVar2 >> 10] +
                         (int64_t)(int)(*(uint *)(param_1 + 0xc1) & uVar2) * 0x28);
        if ((uVar2 != 0xffffffff) && (*piVar17 != -1)) {
          FUN_1800571e0(param_1 + 0xb9,&pppuStackX_10);
          pppuStackX_10 = (uint64_t ***)(piVar17 + 2);
          if (*(int64_t **)(piVar17 + 6) != (int64_t *)0x0) {
            (**(code **)(**(int64_t **)(piVar17 + 6) + 0x38))();
          }
          if (*(int64_t **)(piVar17 + 4) != (int64_t *)0x0) {
            (**(code **)(**(int64_t **)(piVar17 + 4) + 0x38))();
          }
          *piVar17 = -1;
        }
      }
    }
    puVar20 = (uint64_t *)(uint64_t)(iVar19 + 1);
  } while( true );
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address




// 函数: void FUN_1804d6660(uint64_t *param_1,int param_2,int param_3)
void FUN_1804d6660(uint64_t *param_1,int param_2,int param_3)

{
  uint64_t *puVar1;
  uint uVar2;
  int64_t lVar3;
  int64_t lVar4;
  uint *puVar5;
  float fVar6;
  float fVar7;
  float fVar8;
  float fVar9;
  float fVar10;
  float fVar11;
  float fVar12;
  float fVar13;
  float fVar14;
  float fVar15;
  float fVar16;
  float fVar17;
  float fVar18;
  float fVar19;
  float fVar20;
  int64_t lVar21;
  uint64_t uVar22;
  uint64_t uVar23;
  uint64_t uVar24;
  uint64_t uVar25;
  uint64_t uVar26;
  uint64_t uVar27;
  uint64_t uVar28;
  int64_t lVar29;
  int64_t lVar30;
  int64_t lVar31;
  int iVar32;
  int64_t lVar33;
  int64_t lVar34;
  uint64_t uVar35;
  int64_t lVar36;
  int64_t lVar37;
  int64_t lVar38;
  int64_t lVar39;
  int8_t auStack_1f8 [32];
  float fStack_1d8;
  float fStack_1d4;
  float fStack_1d0;
  int32_t uStack_1cc;
  int64_t lStack_1c8;
  int64_t lStack_1c0;
  uint64_t uStack_1b8;
  uint64_t uStack_1b0;
  float fStack_1a8;
  float fStack_1a4;
  float fStack_1a0;
  int32_t uStack_19c;
  float fStack_198;
  float fStack_194;
  float fStack_190;
  int32_t uStack_18c;
  uint64_t uStack_168;
  uint64_t uStack_160;
  float fStack_158;
  float fStack_154;
  float fStack_150;
  uint uStack_14c;
  float fStack_148;
  float fStack_144;
  float fStack_140;
  int32_t uStack_13c;
  float fStack_138;
  float fStack_134;
  float fStack_130;
  int32_t uStack_12c;
  float fStack_128;
  float fStack_124;
  float fStack_120;
  int32_t uStack_11c;
  float fStack_118;
  float fStack_114;
  float fStack_110;
  float fStack_10c;
  float fStack_108;
  float fStack_104;
  float fStack_100;
  float fStack_fc;
  float fStack_f8;
  float fStack_f4;
  float fStack_f0;
  float fStack_ec;
  float fStack_e8;
  float fStack_e4;
  float fStack_e0;
  float fStack_dc;
  float fStack_d8;
  float fStack_d4;
  float fStack_d0;
  int32_t uStack_cc;
  float fStack_c8;
  float fStack_c4;
  float fStack_c0;
  int32_t uStack_bc;
  float fStack_b8;
  float fStack_b4;
  float fStack_b0;
  int32_t uStack_ac;
  float fStack_a8;
  float fStack_a4;
  float fStack_a0;
  uint uStack_9c;
  uint64_t uStack_98;
  uint64_t uStack_90;
  float fStack_88;
  float fStack_84;
  float fStack_80;
  uint uStack_7c;
  uint64_t uStack_78;
  
  uStack_78 = GET_SECURITY_COOKIE() ^ (uint64_t)auStack_1f8;
  lVar29 = (int64_t)param_2;
  if (lVar29 < param_3) {
    lVar38 = lVar29 * 0x18;
    lStack_1c0 = param_3 - lVar29;
    do {
      lVar29 = param_1[1];
      iVar32 = 0;
      uVar2 = *(uint *)(*(int64_t *)*param_1 + 0x10 + lVar38);
      lVar21 = *(int64_t *)(*(int64_t *)*param_1 + lVar38);
      lVar39 = (int64_t)(int)(*(uint *)(lVar29 + 0x2c88) & uVar2) * 0x68;
      lVar34 = *(int64_t *)(*(int64_t *)(lVar29 + 0x2c68) + (int64_t)((int)uVar2 >> 10) * 8);
      uVar2 = *(uint *)(lVar34 + 0x14 + lVar39);
      lVar33 = (int64_t)(int)(*(uint *)(lVar29 + 0x2b18) & uVar2) * 0xd8;
      lVar37 = *(int64_t *)(*(int64_t *)(lVar29 + 11000) + (int64_t)((int)uVar2 >> 10) * 8);
      lVar31 = *(int64_t *)(lVar34 + 0x20 + lVar39);
      if (*(int64_t *)(lVar34 + 0x28 + lVar39) - lVar31 >> 2 != 0) {
        lVar29 = 0;
        do {
          lVar3 = param_1[1];
          lVar36 = (int64_t)(int)(*(uint *)(lVar3 + 0x2b18) & *(uint *)(lVar31 + lVar29)) * 0xd8;
          lVar31 = *(int64_t *)
                    (*(int64_t *)(lVar3 + 11000) +
                    (int64_t)((int)*(uint *)(lVar31 + lVar29) >> 10) * 8);
          lVar4 = *(int64_t *)(lVar31 + 8 + lVar36);
          if (lVar4 != 0) {
            uVar22 = *(uint64_t *)(lVar4 + 0x78);
            uVar2 = *(uint *)(lVar31 + 0x18 + lVar36);
            uVar23 = *(uint64_t *)(lVar4 + 0x80);
            uVar24 = *(uint64_t *)(lVar4 + 0x88);
            uVar25 = *(uint64_t *)(lVar4 + 0x90);
            uVar26 = *(uint64_t *)(lVar4 + 0x98);
            uVar27 = *(uint64_t *)(lVar4 + 0xa0);
            uVar28 = *(uint64_t *)(lVar4 + 0xa8);
            lVar30 = (int64_t)(int)(*(uint *)(lVar3 + 0x4a8) & uVar2);
            lVar3 = *(int64_t *)(*(int64_t *)(lVar3 + 0x488) + (int64_t)((int)uVar2 >> 10) * 8);
            puVar1 = (uint64_t *)(lVar3 + 8 + lVar30 * 0x48);
            *puVar1 = *(uint64_t *)(lVar4 + 0x70);
            puVar1[1] = uVar22;
            puVar1 = (uint64_t *)(lVar3 + 0x18 + lVar30 * 0x48);
            *puVar1 = uVar23;
            puVar1[1] = uVar24;
            puVar1 = (uint64_t *)(lVar3 + 0x28 + lVar30 * 0x48);
            *puVar1 = uVar25;
            puVar1[1] = uVar26;
            puVar1 = (uint64_t *)(lVar3 + 0x38 + lVar30 * 0x48);
            *puVar1 = uVar27;
            puVar1[1] = uVar28;
            *(bool *)(lVar31 + 0x10 + lVar36) =
                 (*(byte *)(*(int64_t *)(lVar31 + 8 + lVar36) + 0x2e8) & 0xb) == 0xb;
          }
          lVar31 = *(int64_t *)(lVar34 + 0x20 + lVar39);
          iVar32 = iVar32 + 1;
          lVar29 = lVar29 + 4;
        } while ((uint64_t)(int64_t)iVar32 <
                 (uint64_t)(*(int64_t *)(lVar34 + 0x28 + lVar39) - lVar31 >> 2));
        lVar29 = param_1[1];
      }
      uVar2 = *(uint *)(lVar37 + 0x18 + lVar33);
      lVar34 = *(int64_t *)(lVar21 + 0x8a8);
      uVar22 = *(uint64_t *)(lVar34 + 0x78);
      uVar23 = *(uint64_t *)(lVar34 + 0x80);
      uVar24 = *(uint64_t *)(lVar34 + 0x88);
      uVar25 = *(uint64_t *)(lVar34 + 0x90);
      uVar26 = *(uint64_t *)(lVar34 + 0x98);
      uVar27 = *(uint64_t *)(lVar34 + 0xa0);
      uVar28 = *(uint64_t *)(lVar34 + 0xa8);
      lVar31 = (int64_t)(int)(*(uint *)(lVar29 + 0x4a8) & uVar2);
      lVar29 = *(int64_t *)(*(int64_t *)(lVar29 + 0x488) + (int64_t)((int)uVar2 >> 10) * 8);
      puVar1 = (uint64_t *)(lVar29 + 8 + lVar31 * 0x48);
      *puVar1 = *(uint64_t *)(lVar34 + 0x70);
      puVar1[1] = uVar22;
      puVar1 = (uint64_t *)(lVar29 + 0x18 + lVar31 * 0x48);
      *puVar1 = uVar23;
      puVar1[1] = uVar24;
      puVar1 = (uint64_t *)(lVar29 + 0x28 + lVar31 * 0x48);
      *puVar1 = uVar25;
      puVar1[1] = uVar26;
      puVar1 = (uint64_t *)(lVar29 + 0x38 + lVar31 * 0x48);
      *puVar1 = uVar27;
      puVar1[1] = uVar28;
      fStack_194 = *(float *)(lVar37 + 0x94 + lVar33);
      lVar29 = *(int64_t *)(*(int64_t *)(lVar21 + 0x8a8) + 0x260);
      uStack_1cc = *(int32_t *)(lVar29 + 0x234);
      puVar5 = *(uint **)(lVar29 + 0x18);
      uStack_1b8 = *(uint64_t *)(lVar29 + 0x218);
      uStack_19c = *(int32_t *)(lVar29 + 0x224);
      uStack_1b0 = *(uint64_t *)(lVar29 + 0x220);
      fStack_198 = *(float *)(lVar29 + 0x228) + fStack_194;
      fStack_1d0 = *(float *)(lVar29 + 0x230) + fStack_194;
      fStack_1a8 = *(float *)(lVar29 + 0x218) - fStack_194;
      fStack_1a4 = *(float *)(lVar29 + 0x21c) - fStack_194;
      fStack_1a0 = *(float *)(lVar29 + 0x220) - fStack_194;
      fStack_194 = *(float *)(lVar29 + 0x22c) + fStack_194;
      _fStack_1d8 = CONCAT44(fStack_194,fStack_198);
      do {
        LOCK();
        uVar2 = *puVar5;
        *puVar5 = *puVar5 | 1;
        UNLOCK();
      } while ((uVar2 & 1) != 0);
      uStack_168 = *(uint64_t *)(puVar5 + 1);
      uStack_160 = *(uint64_t *)(puVar5 + 3);
      fVar6 = (float)puVar5[5];
      fVar7 = (float)puVar5[6];
      fVar8 = (float)puVar5[7];
      uVar2 = puVar5[8];
      *puVar5 = 0;
      lStack_1c8 = lVar37;
      fStack_190 = fStack_1d0;
      uStack_18c = uStack_1cc;
      fStack_158 = fVar6;
      fStack_154 = fVar7;
      fStack_150 = fVar8;
      uStack_14c = uVar2;
      uStack_98 = uStack_168;
      uStack_90 = uStack_160;
      fStack_88 = fVar6;
      fStack_84 = fVar7;
      fStack_80 = fVar8;
      uStack_7c = uVar2;
      FUN_1800b9f60(&fStack_1a8);
      lVar29 = param_1[1];
      uVar35 = (uint64_t)*(int *)(lVar37 + 0x20 + lVar33);
      lVar34 = *(int64_t *)(lVar21 + 0x8a8);
      FUN_18063b5f0(&fStack_148,&uStack_168);
      fVar9 = *(float *)(lVar34 + 0x70);
      fVar10 = *(float *)(lVar34 + 0x74);
      fVar11 = *(float *)(lVar34 + 0x78);
      fVar12 = *(float *)(lVar34 + 0x7c);
      fVar13 = *(float *)(lVar34 + 0x80);
      fVar14 = *(float *)(lVar34 + 0x84);
      fVar15 = *(float *)(lVar34 + 0x88);
      fVar16 = *(float *)(lVar34 + 0x8c);
      fVar17 = *(float *)(lVar34 + 0x90);
      fVar18 = *(float *)(lVar34 + 0x94);
      fVar19 = *(float *)(lVar34 + 0x98);
      fVar20 = *(float *)(lVar34 + 0x9c);
      fStack_d8 = fStack_148;
      fStack_d4 = fStack_144;
      fStack_d0 = fStack_140;
      uStack_cc = uStack_13c;
      fStack_c8 = fStack_138;
      fStack_c4 = fStack_134;
      fStack_c0 = fStack_130;
      uStack_bc = uStack_12c;
      fStack_b8 = fStack_128;
      fStack_b4 = fStack_124;
      fStack_b0 = fStack_120;
      uStack_ac = uStack_11c;
      fStack_118 = fStack_144 * fVar13 + fStack_148 * fVar9 + fStack_140 * fVar17;
      fStack_114 = fStack_144 * fVar14 + fStack_148 * fVar10 + fStack_140 * fVar18;
      fStack_110 = fStack_144 * fVar15 + fStack_148 * fVar11 + fStack_140 * fVar19;
      fStack_10c = fStack_144 * fVar16 + fStack_148 * fVar12 + fStack_140 * fVar20;
      fStack_108 = fStack_134 * fVar13 + fStack_138 * fVar9 + fStack_130 * fVar17;
      fStack_104 = fStack_134 * fVar14 + fStack_138 * fVar10 + fStack_130 * fVar18;
      fStack_100 = fStack_134 * fVar15 + fStack_138 * fVar11 + fStack_130 * fVar19;
      fStack_fc = fStack_134 * fVar16 + fStack_138 * fVar12 + fStack_130 * fVar20;
      fStack_f8 = fStack_124 * fVar13 + fStack_128 * fVar9 + fStack_120 * fVar17;
      fStack_f4 = fStack_124 * fVar14 + fStack_128 * fVar10 + fStack_120 * fVar18;
      fStack_f0 = fStack_124 * fVar15 + fStack_128 * fVar11 + fStack_120 * fVar19;
      fStack_ec = fStack_124 * fVar16 + fStack_128 * fVar12 + fStack_120 * fVar20;
      fStack_e8 = fVar7 * fVar13 + fVar6 * fVar9 + fVar8 * fVar17 + *(float *)(lVar34 + 0xa0);
      fStack_e4 = fVar7 * fVar14 + fVar6 * fVar10 + fVar8 * fVar18 + *(float *)(lVar34 + 0xa4);
      fStack_e0 = fVar7 * fVar15 + fVar6 * fVar11 + fVar8 * fVar19 + *(float *)(lVar34 + 0xa8);
      fStack_dc = fVar7 * fVar16 + fVar6 * fVar12 + fVar8 * fVar20 + *(float *)(lVar34 + 0xac);
      fStack_a8 = fVar6;
      fStack_a4 = fVar7;
      fStack_a0 = fVar8;
      uStack_9c = uVar2;
      FUN_18063ad30(((int64_t)*(int *)(lVar29 + 0x500) & uVar35) * 0xc0 +
                    *(int64_t *)(*(int64_t *)(lVar29 + 0x4e0) + (int64_t)((int)uVar35 >> 10) * 8)
                    + 8,&fStack_1a8,&fStack_118);
      lVar38 = lVar38 + 0x18;
      lStack_1c0 = lStack_1c0 + -1;
      *(bool *)(lStack_1c8 + 0x10 + lVar33) =
           (*(byte *)(*(int64_t *)(lVar21 + 0x8a8) + 0x2e8) & 0xb) == 0xb;
    } while (lStack_1c0 != 0);
    lStack_1c0 = 0;
  }
                    // WARNING: Subroutine does not return
  FUN_1808fc050(uStack_78 ^ (uint64_t)auStack_1f8);
}






