#include "TaleWorlds.Native.Split.h"
#include "include/global_constants.h"

// 99_part_01_part027.c - 15 个函数

// 函数: void FUN_1800b9995(void)
void FUN_1800b9995(void)

{
  uint64_t uVar1;
  double dVar2;
  uint64_t uVar3;
  int64_t lVar4;
  int64_t lVar5;
  uint64_t *unaff_RBP;
  uint64_t *unaff_RSI;
  int64_t lVar6;
  uint64_t *in_R9;
  uint64_t *puVar7;
  int64_t in_R11;
  int64_t lVar8;
  bool bVar9;
  
  puVar7 = unaff_RBP;
  if (unaff_RBP < unaff_RSI) {
    do {
      if ((double)in_R9[1] < (double)puVar7[1]) {
        uVar1 = *puVar7;
        dVar2 = (double)puVar7[1];
        lVar4 = 0;
        lVar6 = 2;
        uVar3 = in_R9[1];
        *puVar7 = *in_R9;
        puVar7[1] = uVar3;
        bVar9 = in_R11 == 2;
        lVar5 = lVar4;
        if (2 < in_R11) {
          do {
            lVar4 = lVar6 + -1;
            if ((double)in_R9[lVar6 * 2 + 1] < (double)in_R9[lVar6 * 2 + -1] ||
                (double)in_R9[lVar6 * 2 + 1] == (double)in_R9[lVar6 * 2 + -1]) {
              lVar4 = lVar6;
            }
            lVar6 = lVar4 * 2 + 2;
            uVar3 = (in_R9 + lVar4 * 2)[1];
            in_R9[lVar5 * 2] = in_R9[lVar4 * 2];
            (in_R9 + lVar5 * 2)[1] = uVar3;
            bVar9 = lVar6 == in_R11;
            lVar5 = lVar4;
          } while (lVar6 < in_R11);
        }
        if (bVar9) {
          uVar3 = (in_R9 + lVar6 * 2 + -2)[1];
          in_R9[lVar4 * 2] = in_R9[lVar6 * 2 + -2];
          (in_R9 + lVar4 * 2)[1] = uVar3;
          lVar4 = lVar6 + -1;
        }
        while ((0 < lVar4 && (lVar6 = lVar4 + -1 >> 1, dVar2 < (double)in_R9[lVar6 * 2 + 1]))) {
          uVar3 = (in_R9 + lVar6 * 2)[1];
          in_R9[lVar4 * 2] = in_R9[lVar6 * 2];
          (in_R9 + lVar4 * 2)[1] = uVar3;
          lVar4 = lVar6;
        }
        in_R9[lVar4 * 2] = uVar1;
        (in_R9 + lVar4 * 2)[1] = dVar2;
      }
      puVar7 = puVar7 + 2;
    } while (puVar7 < unaff_RSI);
  }
  if (1 < in_R11) {
    puVar7 = unaff_RBP + -2;
    do {
      uVar1 = *puVar7;
      dVar2 = (double)puVar7[1];
      lVar8 = in_R11 + -1;
      lVar4 = 0;
      uVar3 = in_R9[1];
      lVar6 = 2;
      *puVar7 = *in_R9;
      puVar7[1] = uVar3;
      bVar9 = lVar8 == 2;
      lVar5 = lVar4;
      if (2 < lVar8) {
        do {
          lVar4 = lVar6 + -1;
          if ((double)in_R9[lVar6 * 2 + 1] < (double)in_R9[lVar6 * 2 + -1] ||
              (double)in_R9[lVar6 * 2 + 1] == (double)in_R9[lVar6 * 2 + -1]) {
            lVar4 = lVar6;
          }
          lVar6 = lVar4 * 2 + 2;
          uVar3 = (in_R9 + lVar4 * 2)[1];
          in_R9[lVar5 * 2] = in_R9[lVar4 * 2];
          (in_R9 + lVar5 * 2)[1] = uVar3;
          bVar9 = lVar6 == lVar8;
          lVar5 = lVar4;
        } while (lVar6 < lVar8);
      }
      if (bVar9) {
        uVar3 = (in_R9 + lVar6 * 2 + -2)[1];
        in_R9[lVar4 * 2] = in_R9[lVar6 * 2 + -2];
        (in_R9 + lVar4 * 2)[1] = uVar3;
        lVar4 = lVar6 + -1;
      }
      while ((0 < lVar4 && (lVar6 = lVar4 + -1 >> 1, dVar2 < (double)in_R9[lVar6 * 2 + 1]))) {
        uVar3 = (in_R9 + lVar6 * 2)[1];
        in_R9[lVar4 * 2] = in_R9[lVar6 * 2];
        (in_R9 + lVar4 * 2)[1] = uVar3;
        lVar4 = lVar6;
      }
      puVar7 = puVar7 + -2;
      in_R11 = (int64_t)puVar7 + (0x10 - (int64_t)in_R9) >> 4;
      in_R9[lVar4 * 2] = uVar1;
      (in_R9 + lVar4 * 2)[1] = dVar2;
    } while (1 < in_R11);
  }
  return;
}






// 函数: void FUN_1800b9a8e(void)
void FUN_1800b9a8e(void)

{
  uint64_t uVar1;
  double dVar2;
  uint64_t uVar3;
  int64_t lVar4;
  int64_t lVar5;
  int64_t unaff_RBP;
  int64_t lVar6;
  uint64_t *in_R9;
  uint64_t *puVar7;
  int64_t in_R11;
  int64_t lVar8;
  bool bVar9;
  
  puVar7 = (uint64_t *)(unaff_RBP + -0x10);
  do {
    uVar1 = *puVar7;
    dVar2 = (double)puVar7[1];
    lVar8 = in_R11 + -1;
    lVar4 = 0;
    uVar3 = in_R9[1];
    lVar6 = 2;
    *puVar7 = *in_R9;
    puVar7[1] = uVar3;
    bVar9 = lVar8 == 2;
    lVar5 = lVar4;
    if (2 < lVar8) {
      do {
        lVar4 = lVar6 + -1;
        if ((double)in_R9[lVar6 * 2 + 1] < (double)in_R9[lVar6 * 2 + -1] ||
            (double)in_R9[lVar6 * 2 + 1] == (double)in_R9[lVar6 * 2 + -1]) {
          lVar4 = lVar6;
        }
        lVar6 = lVar4 * 2 + 2;
        uVar3 = (in_R9 + lVar4 * 2)[1];
        in_R9[lVar5 * 2] = in_R9[lVar4 * 2];
        (in_R9 + lVar5 * 2)[1] = uVar3;
        bVar9 = lVar6 == lVar8;
        lVar5 = lVar4;
      } while (lVar6 < lVar8);
    }
    if (bVar9) {
      uVar3 = (in_R9 + lVar6 * 2 + -2)[1];
      in_R9[lVar4 * 2] = in_R9[lVar6 * 2 + -2];
      (in_R9 + lVar4 * 2)[1] = uVar3;
      lVar4 = lVar6 + -1;
    }
    while ((0 < lVar4 && (lVar6 = lVar4 + -1 >> 1, dVar2 < (double)in_R9[lVar6 * 2 + 1]))) {
      uVar3 = (in_R9 + lVar6 * 2)[1];
      in_R9[lVar4 * 2] = in_R9[lVar6 * 2];
      (in_R9 + lVar4 * 2)[1] = uVar3;
      lVar4 = lVar6;
    }
    puVar7 = puVar7 + -2;
    in_R11 = (int64_t)puVar7 + (0x10 - (int64_t)in_R9) >> 4;
    in_R9[lVar4 * 2] = uVar1;
    (in_R9 + lVar4 * 2)[1] = dVar2;
  } while (1 < in_R11);
  return;
}






// 函数: void FUN_1800b9b80(uint64_t *param_1,uint64_t *param_2,uint64_t *param_3,int8_t param_4)
void FUN_1800b9b80(uint64_t *param_1,uint64_t *param_2,uint64_t *param_3,int8_t param_4)

{
  uint64_t uVar1;
  uint64_t uVar2;
  int64_t lVar3;
  int64_t lVar4;
  int64_t lVar5;
  uint64_t *puVar6;
  int64_t lVar7;
  int64_t lVar8;
  int64_t lVar9;
  bool bVar10;
  uint64_t uStack_28;
  uint64_t uStack_20;
  
  lVar5 = (int64_t)param_2 - (int64_t)param_1 >> 4;
  if (1 < lVar5) {
    lVar8 = (lVar5 + -2 >> 1) + 1;
    puVar6 = param_1 + lVar8 * 2;
    lVar9 = lVar8 * 2 + 2;
    do {
      uVar1 = puVar6[-2];
      uVar2 = puVar6[-1];
      lVar8 = lVar8 + -1;
      puVar6 = puVar6 + -2;
      lVar9 = lVar9 + -2;
      lVar7 = lVar8;
      lVar4 = lVar9;
      while (lVar4 < lVar5) {
        lVar3 = lVar4 + -1;
        if (*(float *)(param_1 + lVar4 * 2 + 1) < *(float *)(param_1 + lVar4 * 2 + -1) ||
            *(float *)(param_1 + lVar4 * 2 + 1) == *(float *)(param_1 + lVar4 * 2 + -1)) {
          lVar3 = lVar4;
        }
        param_1[lVar7 * 2] = param_1[lVar3 * 2];
        *(int32_t *)(param_1 + lVar7 * 2 + 1) = *(int32_t *)(param_1 + lVar3 * 2 + 1);
        lVar7 = lVar3;
        lVar4 = lVar3 * 2 + 2;
      }
      if (lVar4 == lVar5) {
        param_1[lVar7 * 2] = param_1[lVar4 * 2 + -2];
        *(int32_t *)(param_1 + lVar7 * 2 + 1) = *(int32_t *)(param_1 + lVar4 * 2 + -1);
        lVar7 = lVar4 + -1;
      }
      uStack_20._0_4_ = (float)uVar2;
      while ((lVar8 < lVar7 &&
             (lVar4 = lVar7 + -1 >> 1, (float)uStack_20 < *(float *)(param_1 + lVar4 * 2 + 1)))) {
        param_1[lVar7 * 2] = param_1[lVar4 * 2];
        *(int32_t *)(param_1 + lVar7 * 2 + 1) = *(int32_t *)(param_1 + lVar4 * 2 + 1);
        lVar7 = lVar4;
      }
      *(float *)(param_1 + lVar7 * 2 + 1) = (float)uStack_20;
      param_1[lVar7 * 2] = uVar1;
    } while (lVar8 != 0);
  }
  puVar6 = param_2;
  if (param_2 < param_3) {
    do {
      if (*(float *)(param_1 + 1) < *(float *)(puVar6 + 1)) {
        uStack_28 = *puVar6;
        uStack_20 = puVar6[1];
        *puVar6 = *param_1;
        *(int32_t *)(puVar6 + 1) = *(int32_t *)(param_1 + 1);
        FUN_1800b9e60(param_1,0,lVar5,0,&uStack_28,param_4);
      }
      puVar6 = puVar6 + 2;
    } while (puVar6 < param_3);
  }
  if (1 < lVar5) {
    param_2 = param_2 + -2;
    do {
      uVar1 = *param_2;
      uVar2 = param_2[1];
      lVar5 = lVar5 + -1;
      lVar9 = 0;
      *param_2 = *param_1;
      lVar8 = 2;
      *(int32_t *)(param_2 + 1) = *(int32_t *)(param_1 + 1);
      bVar10 = lVar5 == 2;
      lVar7 = lVar9;
      if (2 < lVar5) {
        do {
          lVar9 = lVar8 + -1;
          if (*(float *)(param_1 + lVar8 * 2 + 1) < *(float *)(param_1 + lVar8 * 2 + -1) ||
              *(float *)(param_1 + lVar8 * 2 + 1) == *(float *)(param_1 + lVar8 * 2 + -1)) {
            lVar9 = lVar8;
          }
          lVar8 = lVar9 * 2 + 2;
          param_1[lVar7 * 2] = param_1[lVar9 * 2];
          *(int32_t *)(param_1 + lVar7 * 2 + 1) = *(int32_t *)(param_1 + lVar9 * 2 + 1);
          bVar10 = lVar8 == lVar5;
          lVar7 = lVar9;
        } while (lVar8 < lVar5);
      }
      if (bVar10) {
        param_1[lVar9 * 2] = param_1[lVar8 * 2 + -2];
        *(int32_t *)(param_1 + lVar9 * 2 + 1) = *(int32_t *)(param_1 + lVar8 * 2 + -1);
        lVar9 = lVar8 + -1;
      }
      uStack_20._0_4_ = (float)uVar2;
      while ((0 < lVar9 &&
             (lVar5 = lVar9 + -1 >> 1, (float)uStack_20 < *(float *)(param_1 + lVar5 * 2 + 1)))) {
        param_1[lVar9 * 2] = param_1[lVar5 * 2];
        *(int32_t *)(param_1 + lVar9 * 2 + 1) = *(int32_t *)(param_1 + lVar5 * 2 + 1);
        lVar9 = lVar5;
      }
      param_2 = param_2 + -2;
      param_1[lVar9 * 2] = uVar1;
      *(float *)(param_1 + lVar9 * 2 + 1) = (float)uStack_20;
      lVar5 = (0x10 - (int64_t)param_1) + (int64_t)param_2 >> 4;
    } while (1 < lVar5);
  }
  return;
}






// 函数: void FUN_1800b9e60(int64_t param_1,int64_t param_2,int64_t param_3,int64_t param_4,
void FUN_1800b9e60(int64_t param_1,int64_t param_2,int64_t param_3,int64_t param_4,
                  uint64_t *param_5)

{
  float *pfVar1;
  float fVar2;
  int64_t lVar3;
  int64_t lVar4;
  int64_t lVar5;
  
  lVar4 = param_4 * 2;
  while (lVar3 = lVar4 + 2, lVar3 < param_3) {
    fVar2 = *(float *)(param_1 + 8 + lVar3 * 0x10);
    pfVar1 = (float *)(param_1 + -8 + lVar3 * 0x10);
    lVar5 = lVar4 + 1;
    if (fVar2 < *pfVar1 || fVar2 == *pfVar1) {
      lVar5 = lVar3;
    }
    *(uint64_t *)(param_1 + param_4 * 0x10) = *(uint64_t *)(param_1 + lVar5 * 0x10);
    *(int32_t *)(param_1 + 8 + param_4 * 0x10) = *(int32_t *)(param_1 + 8 + lVar5 * 0x10);
    param_4 = lVar5;
    lVar4 = lVar5 * 2;
  }
  if (lVar3 == param_3) {
    *(uint64_t *)(param_1 + param_4 * 0x10) = *(uint64_t *)(param_1 + -0x10 + lVar3 * 0x10);
    *(int32_t *)(param_1 + 8 + param_4 * 0x10) = *(int32_t *)(param_1 + -8 + lVar3 * 0x10);
    param_4 = lVar4 + 1;
  }
  while ((param_2 < param_4 &&
         (lVar4 = param_4 + -1 >> 1,
         *(float *)(param_5 + 1) < *(float *)(param_1 + 8 + lVar4 * 0x10)))) {
    *(uint64_t *)(param_1 + param_4 * 0x10) = *(uint64_t *)(param_1 + lVar4 * 0x10);
    *(int32_t *)(param_1 + 8 + param_4 * 0x10) = *(int32_t *)(param_1 + 8 + lVar4 * 0x10);
    param_4 = lVar4;
  }
  *(uint64_t *)(param_1 + param_4 * 0x10) = *param_5;
  *(int32_t *)(param_1 + 8 + param_4 * 0x10) = *(int32_t *)(param_5 + 1);
  return;
}






// 函数: void FUN_1800b9f60(float *param_1)
void FUN_1800b9f60(float *param_1)

{
  float fVar1;
  float fVar2;
  
  fVar2 = param_1[4];
  if (*param_1 <= fVar2) {
    fVar1 = (fVar2 + *param_1) * 0.5;
    param_1[8] = fVar1;
    param_1[9] = (param_1[5] + param_1[1]) * 0.5;
    param_1[10] = (param_1[6] + param_1[2]) * 0.5;
    param_1[0xb] = 3.4028235e+38;
    fVar2 = fVar2 - fVar1;
    param_1[0xc] = SQRT((param_1[5] - param_1[9]) * (param_1[5] - param_1[9]) + fVar2 * fVar2 +
                        (param_1[6] - param_1[10]) * (param_1[6] - param_1[10]));
    return;
  }
  param_1[0xc] = 0.0;
  param_1[0] = 0.0;
  param_1[1] = 0.0;
  param_1[2] = 0.0;
  param_1[3] = 0.0;
  param_1[4] = 0.0;
  param_1[5] = 0.0;
  param_1[6] = 0.0;
  param_1[7] = 0.0;
  param_1[8] = 0.0;
  param_1[9] = 0.0;
  param_1[10] = 0.0;
  param_1[0xb] = 0.0;
  return;
}



int64_t * FUN_1800ba050(int64_t param_1,int64_t *param_2)

{
  int64_t lVar1;
  int64_t *plVar2;
  int64_t *plVar3;
  int64_t lVar4;
  int64_t *plVar5;
  
  plVar3 = *(int64_t **)(param_1 + 8);
  if ((param_2 + 1 < plVar3) &&
     (lVar4 = (int64_t)plVar3 - (int64_t)(param_2 + 1) >> 3, plVar5 = param_2, 0 < lVar4)) {
    do {
      plVar3 = plVar5 + 1;
      lVar1 = *plVar3;
      *plVar3 = 0;
      plVar2 = (int64_t *)*plVar5;
      *plVar5 = lVar1;
      if (plVar2 != (int64_t *)0x0) {
        (**(code **)(*plVar2 + 0x38))();
      }
      lVar4 = lVar4 + -1;
      plVar5 = plVar3;
    } while (0 < lVar4);
    plVar3 = *(int64_t **)(param_1 + 8);
  }
  *(int64_t **)(param_1 + 8) = plVar3 + -1;
  plVar3 = (int64_t *)plVar3[-1];
  if (plVar3 != (int64_t *)0x0) {
    (**(code **)(*plVar3 + 0x38))();
  }
  return param_2;
}






// 函数: void FUN_1800ba100(int64_t param_1)
void FUN_1800ba100(int64_t param_1)

{
  uint64_t uVar1;
  int64_t lVar2;
  int64_t lVar3;
  uint64_t uVar4;
  
  uVar1 = *(uint64_t *)(param_1 + 0x10);
  uVar4 = 0;
  lVar2 = *(int64_t *)(param_1 + 8);
  if (uVar1 == 0) {
    *(uint64_t *)(param_1 + 0x18) = 0;
  }
  else {
    do {
      lVar3 = *(int64_t *)(lVar2 + uVar4 * 8);
      if (lVar3 != 0) {
                    // WARNING: Subroutine does not return
        CoreEngine_MemoryPoolManager(lVar3);
      }
      *(uint64_t *)(lVar2 + uVar4 * 8) = 0;
      uVar4 = uVar4 + 1;
    } while (uVar4 < uVar1);
    *(uint64_t *)(param_1 + 0x18) = 0;
  }
  return;
}






// 函数: void FUN_1800ba129(void)
void FUN_1800ba129(void)

{
  int64_t lVar1;
  int64_t unaff_RBP;
  uint64_t unaff_RSI;
  uint64_t unaff_RDI;
  int64_t unaff_R14;
  uint64_t unaff_R15;
  
  do {
    lVar1 = *(int64_t *)(unaff_R14 + unaff_RDI * 8);
    if (lVar1 != 0) {
                    // WARNING: Subroutine does not return
      CoreEngine_MemoryPoolManager(lVar1);
    }
    *(uint64_t *)(unaff_R14 + unaff_RDI * 8) = unaff_R15;
    unaff_RDI = unaff_RDI + 1;
  } while (unaff_RDI < unaff_RSI);
  *(uint64_t *)(unaff_RBP + 0x18) = unaff_R15;
  return;
}






// 函数: void FUN_1800ba168(int64_t param_1)
void FUN_1800ba168(int64_t param_1)

{
  uint64_t unaff_R15;
  
  *(uint64_t *)(param_1 + 0x18) = unaff_R15;
  return;
}






// 函数: void FUN_1800ba180(int64_t param_1)
void FUN_1800ba180(int64_t param_1)

{
  int *piVar1;
  uint64_t *puVar2;
  int64_t lVar3;
  uint64_t uVar4;
  
  FUN_1800ba100();
  if ((1 < *(uint64_t *)(param_1 + 0x10)) &&
     (puVar2 = *(uint64_t **)(param_1 + 8), puVar2 != (uint64_t *)0x0)) {
    uVar4 = (uint64_t)puVar2 & 0xffffffffffc00000;
    if (uVar4 != 0) {
      lVar3 = uVar4 + 0x80 + ((int64_t)puVar2 - uVar4 >> 0x10) * 0x50;
      lVar3 = lVar3 - (uint64_t)*(uint *)(lVar3 + 4);
      if ((*(void ***)(uVar4 + 0x70) == &ExceptionList) && (*(char *)(lVar3 + 0xe) == '\0')) {
        *puVar2 = *(uint64_t *)(lVar3 + 0x20);
        *(uint64_t **)(lVar3 + 0x20) = puVar2;
        piVar1 = (int *)(lVar3 + 0x18);
        *piVar1 = *piVar1 + -1;
        if (*piVar1 == 0) {
          FUN_18064d630();
          return;
        }
      }
      else {
        func_0x00018064e870(uVar4,CONCAT71(0xff000000,*(void ***)(uVar4 + 0x70) == &ExceptionList),
                            puVar2,uVar4,0xfffffffffffffffe);
      }
    }
    return;
  }
  return;
}






// 函数: void FUN_1800ba1b0(int64_t param_1)
void FUN_1800ba1b0(int64_t param_1)

{
  int *piVar1;
  uint64_t *puVar2;
  int64_t lVar3;
  uint64_t uVar4;
  
  FUN_1800ba100();
  if ((1 < *(uint64_t *)(param_1 + 0x10)) &&
     (puVar2 = *(uint64_t **)(param_1 + 8), puVar2 != (uint64_t *)0x0)) {
    uVar4 = (uint64_t)puVar2 & 0xffffffffffc00000;
    if (uVar4 != 0) {
      lVar3 = uVar4 + 0x80 + ((int64_t)puVar2 - uVar4 >> 0x10) * 0x50;
      lVar3 = lVar3 - (uint64_t)*(uint *)(lVar3 + 4);
      if ((*(void ***)(uVar4 + 0x70) == &ExceptionList) && (*(char *)(lVar3 + 0xe) == '\0')) {
        *puVar2 = *(uint64_t *)(lVar3 + 0x20);
        *(uint64_t **)(lVar3 + 0x20) = puVar2;
        piVar1 = (int *)(lVar3 + 0x18);
        *piVar1 = *piVar1 + -1;
        if (*piVar1 == 0) {
          FUN_18064d630();
          return;
        }
      }
      else {
        func_0x00018064e870(uVar4,CONCAT71(0xff000000,*(void ***)(uVar4 + 0x70) == &ExceptionList),
                            puVar2,uVar4,0xfffffffffffffffe);
      }
    }
    return;
  }
  return;
}






// 函数: void FUN_1800ba1f0(int64_t param_1)
void FUN_1800ba1f0(int64_t param_1)

{
  int *piVar1;
  uint64_t *puVar2;
  int64_t lVar3;
  uint64_t uVar4;
  
  FUN_1800ba100();
  if ((1 < *(uint64_t *)(param_1 + 0x10)) &&
     (puVar2 = *(uint64_t **)(param_1 + 8), puVar2 != (uint64_t *)0x0)) {
    uVar4 = (uint64_t)puVar2 & 0xffffffffffc00000;
    if (uVar4 != 0) {
      lVar3 = uVar4 + 0x80 + ((int64_t)puVar2 - uVar4 >> 0x10) * 0x50;
      lVar3 = lVar3 - (uint64_t)*(uint *)(lVar3 + 4);
      if ((*(void ***)(uVar4 + 0x70) == &ExceptionList) && (*(char *)(lVar3 + 0xe) == '\0')) {
        *puVar2 = *(uint64_t *)(lVar3 + 0x20);
        *(uint64_t **)(lVar3 + 0x20) = puVar2;
        piVar1 = (int *)(lVar3 + 0x18);
        *piVar1 = *piVar1 + -1;
        if (*piVar1 == 0) {
          FUN_18064d630();
          return;
        }
      }
      else {
        func_0x00018064e870(uVar4,CONCAT71(0xff000000,*(void ***)(uVar4 + 0x70) == &ExceptionList),
                            puVar2,uVar4,0xfffffffffffffffe);
      }
    }
    return;
  }
  return;
}



int64_t FUN_1800ba230(int64_t param_1)

{
  *(int32_t *)(param_1 + 0x20) = 0x3f800000;
  *(int32_t *)(param_1 + 0x24) = 0x40000000;
  *(int32_t *)(param_1 + 0x2c) = 3;
  *(uint64_t *)(param_1 + 0x10) = 1;
  *(void **)(param_1 + 8) = &system_data_0000;
  *(uint64_t *)(param_1 + 0x18) = 0;
  *(int32_t *)(param_1 + 0x28) = 0;
  FUN_1806279c0(param_1 + 0x30);
  return param_1;
}






// 函数: void FUN_1800ba290(int64_t *param_1)
void FUN_1800ba290(int64_t *param_1)

{
  int64_t *plVar1;
  int iVar2;
  int64_t *plVar3;
  
  iVar2 = _Mtx_lock(param_1 + 8);
  if (iVar2 != 0) {
    __Throw_C_error_std__YAXH_Z(iVar2);
  }
  plVar1 = (int64_t *)param_1[1];
  plVar3 = (int64_t *)*param_1;
  if (plVar3 != plVar1) {
    do {
      if ((int64_t *)*plVar3 != (int64_t *)0x0) {
        (**(code **)(*(int64_t *)*plVar3 + 0x38))();
      }
      plVar3 = plVar3 + 1;
    } while (plVar3 != plVar1);
    plVar3 = (int64_t *)*param_1;
  }
  param_1[1] = (int64_t)plVar3;
  param_1[5] = param_1[4];
  *(int8_t *)(param_1 + 0x12) = 0;
  iVar2 = _Mtx_unlock(param_1 + 8);
  if (iVar2 != 0) {
    __Throw_C_error_std__YAXH_Z(iVar2);
  }
  return;
}



int64_t FUN_1800ba340(int64_t param_1,uint64_t param_2,uint64_t param_3,uint64_t param_4)

{
  uint64_t uVar1;
  
  uVar1 = 0xfffffffffffffffe;
  if (*(int64_t **)(param_1 + 0xe8) != (int64_t *)0x0) {
    (**(code **)(**(int64_t **)(param_1 + 0xe8) + 0x38))();
  }
  FUN_180049470(param_1);
  if ((param_2 & 1) != 0) {
    free(param_1,0x100,param_3,param_4,uVar1);
  }
  return param_1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address




// 函数: void FUN_1800ba4b0(uint64_t param_1)
void FUN_1800ba4b0(uint64_t param_1)

{
  int8_t auStack_6d8 [48];
  int32_t uStack_6a8;
  uint64_t uStack_6a0;
  uint64_t uStack_698;
  int8_t auStack_248 [560];
  uint64_t uStack_18;
  
  uStack_6a0 = 0xfffffffffffffffe;
  uStack_18 = GET_SECURITY_COOKIE() ^ (uint64_t)auStack_6d8;
  uStack_6a8 = 0;
  uStack_698 = param_1;
                    // WARNING: Subroutine does not return
  memset(auStack_248,0,0x230);
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address




// 函数: void FUN_1800ba6f0(uint64_t param_1)
void FUN_1800ba6f0(uint64_t param_1)

{
  short *psVar1;
  int iVar2;
  uint64_t uVar3;
  int16_t *puVar4;
  int64_t lVar5;
  short *psVar6;
  int8_t auStack_3f8 [32];
  int8_t *puStack_3d8;
  int32_t uStack_3d0;
  uint64_t uStack_3c8;
  uint64_t uStack_3c0;
  void *puStack_3b8;
  uint64_t uStack_3b0;
  int32_t uStack_3a8;
  uint64_t uStack_3a0;
  int32_t uStack_398;
  uint64_t uStack_390;
  uint64_t uStack_388;
  short sStack_37a;
  short asStack_378 [8];
  short asStack_368 [272];
  int8_t auStack_148 [288];
  uint64_t uStack_28;
  
  uStack_390 = 0xfffffffffffffffe;
  uStack_28 = GET_SECURITY_COOKIE() ^ (uint64_t)auStack_3f8;
  uStack_398 = 0;
  uStack_388 = param_1;
  iVar2 = GetModuleFileNameW(0,asStack_378,0x118);
  if (iVar2 == 0) {
    FUN_180627160(&unknown_var_8696_ptr);
    uVar3 = FUN_180628ca0();
    FUN_180627ae0(param_1,uVar3);
    uStack_398 = 1;
                    // WARNING: Subroutine does not return
    FUN_1808fc050(uStack_28 ^ (uint64_t)auStack_3f8);
  }
  puVar4 = (int16_t *)wcsrchr(asStack_378,0x5c);
  if (puVar4 == (int16_t *)0x0) {
    puVar4 = (int16_t *)wcsrchr(asStack_378,0x5c);
    if (puVar4 != (int16_t *)0x0) goto LAB_1800ba7a0;
  }
  else {
LAB_1800ba7a0:
    *puVar4 = 0;
  }
  lVar5 = wcsrchr(asStack_378,0x5c);
  if (lVar5 == 0) {
    lVar5 = wcsrchr(asStack_378,0x5c);
    if (lVar5 == 0) goto LAB_1800ba7cd;
  }
  *(int16_t *)(lVar5 + 2) = 0;
LAB_1800ba7cd:
  psVar1 = &sStack_37a;
  do {
    psVar6 = psVar1;
    psVar1 = psVar6 + 1;
  } while (*psVar1 != 0);
  psVar1[0] = 0x4d;
  psVar1[1] = 0x6f;
  psVar6[3] = 100;
  psVar6[4] = 0x75;
  psVar6[5] = 0x6c;
  psVar6[6] = 0x65;
  psVar6[7] = 0x73;
  psVar6[8] = 0x2f;
  psVar6[9] = 0;
  puStack_3b8 = &system_data_buffer_ptr;
  uStack_3a0 = 0;
  uStack_3b0 = 0;
  uStack_3a8 = 0;
  uStack_3c0 = 0;
  uStack_3c8 = 0;
  uStack_3d0 = 0x118;
  puStack_3d8 = auStack_148;
  iVar2 = WideCharToMultiByte(0xfde9,0,asStack_378,0xffffffff);
  CoreMemoryPoolProcessor(&puStack_3b8,iVar2);
                    // WARNING: Subroutine does not return
  memcpy(uStack_3b0,auStack_148,(int64_t)iVar2);
}



uint64_t
FUN_1800ba940(uint64_t param_1,uint64_t param_2,uint64_t param_3,uint64_t param_4)

{
  FUN_1800ba4b0(param_1,&unknown_var_8752_ptr,param_3,param_4,0,0xfffffffffffffffe);
  return param_1;
}



uint64_t
FUN_1800ba980(uint64_t param_1,uint64_t param_2,uint64_t param_3,uint64_t param_4)

{
  FUN_1800ba4b0(param_1,&unknown_var_8824_ptr,param_3,param_4,0,0xfffffffffffffffe);
  return param_1;
}



uint64_t
FUN_1800ba9c0(uint64_t param_1,uint64_t param_2,uint64_t param_3,uint64_t param_4)

{
  FUN_1800ba4b0(param_1,&unknown_var_8792_ptr,param_3,param_4,0,0xfffffffffffffffe);
  return param_1;
}



uint64_t
FUN_1800baa00(uint64_t param_1,uint64_t param_2,uint64_t param_3,uint64_t param_4)

{
  FUN_1800ba4b0(param_1,&unknown_var_8872_ptr,param_3,param_4,0,0xfffffffffffffffe);
  return param_1;
}



uint64_t
FUN_1800baa40(uint64_t param_1,uint64_t param_2,uint64_t param_3,uint64_t param_4)

{
  FUN_1800ba4b0(param_1,&unknown_var_8848_ptr,param_3,param_4,0,0xfffffffffffffffe);
  return param_1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address




// 函数: void FUN_1800baa80(uint64_t *param_1)
void FUN_1800baa80(uint64_t *param_1)

{
  int iVar1;
  int32_t *puVar2;
  uint64_t *puVar3;
  int8_t auStack_298 [32];
  int8_t *puStack_278;
  int32_t uStack_268;
  uint64_t uStack_260;
  uint64_t *puStack_258;
  int8_t auStack_248 [560];
  uint64_t uStack_18;
  
  uStack_260 = 0xfffffffffffffffe;
  uStack_18 = GET_SECURITY_COOKIE() ^ (uint64_t)auStack_298;
  uStack_268 = 0;
  puStack_278 = auStack_248;
  puStack_258 = param_1;
  SHGetFolderPathW(0,0x23,0,0);
  *param_1 = &system_state_ptr;
  param_1[1] = 0;
  *(int32_t *)(param_1 + 2) = 0;
  *param_1 = &system_data_buffer_ptr;
  param_1[3] = 0;
  param_1[1] = 0;
  *(int32_t *)(param_1 + 2) = 0;
  uStack_268 = 1;
  FUN_180628e80(param_1,auStack_248);
  iVar1 = *(int *)(param_1 + 2);
  CoreMemoryPoolProcessor(param_1,iVar1 + 1);
  *(int16_t *)((uint64_t)*(uint *)(param_1 + 2) + param_1[1]) = 0x2f;
  *(int *)(param_1 + 2) = iVar1 + 1;
  CoreMemoryPoolProcessor(param_1,iVar1 + 0x1e);
  puVar2 = (int32_t *)((uint64_t)*(uint *)(param_1 + 2) + param_1[1]);
  *puVar2 = 0x6e756f4d;
  puVar2[1] = 0x6e612074;
  puVar2[2] = 0x6c422064;
  puVar2[3] = 0x20656461;
  *(uint64_t *)(puVar2 + 4) = 0x656e6e6142204949;
  puVar2[6] = 0x726f6c72;
  *(int16_t *)(puVar2 + 7) = 100;
  *(int *)(param_1 + 2) = iVar1 + 0x1e;
  CoreMemoryPoolProcessor(param_1,iVar1 + 0x27);
  puVar3 = (uint64_t *)((uint64_t)*(uint *)(param_1 + 2) + param_1[1]);
  *puVar3 = 0x737265646168532f;
  *(int16_t *)(puVar3 + 1) = 0x2f;
  *(int *)(param_1 + 2) = iVar1 + 0x27;
  if (system_data_8d40 == '\0') {



