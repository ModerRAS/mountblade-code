#include "TaleWorlds.Native.Split.h"
#include "include/global_constants.h"

// 99_part_04_part052.c - 1 个函数

// 函数: void FUN_1802b7360(int64_t *param_1,float param_2)
void FUN_1802b7360(int64_t *param_1,float param_2)

{
  int64_t *plVar1;
  int *piVar2;
  float fVar3;
  float fVar4;
  float fVar5;
  float fVar6;
  float fVar7;
  float fVar8;
  float fVar9;
  float fVar10;
  short sVar11;
  int iVar12;
  int iVar13;
  float *pfVar14;
  uint64_t uVar15;
  uint64_t *puVar16;
  uint uVar17;
  uint uVar18;
  uint uVar19;
  int64_t lVar20;
  uint64_t *puVar21;
  int64_t lVar22;
  uint64_t uVar23;
  int64_t lVar24;
  int iVar25;
  uint64_t unaff_RBP;
  uint64_t unaff_RDI;
  int64_t lVar26;
  uint64_t *puVar27;
  int64_t lVar28;
  uint64_t uVar29;
  uint64_t *puVar30;
  uint64_t uVar31;
  uint64_t unaff_R14;
  int64_t lVar32;
  uint64_t uVar33;
  float fVar34;
  int32_t uVar35;
  float fVar36;
  float fVar37;
  float fVar38;
  float fVar39;
  float fVar40;
  float fVar41;
  float fVar42;
  float fVar43;
  float fVar44;
  float fVar45;
  float fVar46;
  float fVar47;
  float fVar48;
  float fVar49;
  float fVar50;
  float fVar51;
  float fVar52;
  float fVar53;
  float fVar54;
  
  lVar26 = param_1[0xc];
  plVar1 = param_1 + 0xb;
  lVar24 = *plVar1;
  lVar32 = param_1[9];
  lVar28 = *param_1;
  fVar34 = param_2 * param_2;
  uVar33 = (lVar26 - lVar24) / 0x70;
  iVar25 = (int)uVar33;
  uVar35 = func_0x0001802b6b90(lVar32 + 0xb20,*(float *)(lVar28 + 0x3044) * 0.041666668);
  if (*(char *)((int64_t)param_1 + 0xa1) == '\0') {
    fVar48 = *(float *)(lVar32 + 0xfa4);
    fVar54 = *(float *)(lVar32 + 0xfa8);
    fVar46 = *(float *)(lVar32 + 4000);
    fVar52 = fVar48 * *(float *)(param_1 + 0x18) + *(float *)(param_1 + 0x16) * fVar46 +
             fVar54 * *(float *)(param_1 + 0x1a);
    fVar53 = fVar48 * *(float *)((int64_t)param_1 + 0xc4) +
             *(float *)((int64_t)param_1 + 0xb4) * fVar46 +
             fVar54 * *(float *)((int64_t)param_1 + 0xd4);
    fVar54 = fVar48 * *(float *)(param_1 + 0x19) + *(float *)(param_1 + 0x17) * fVar46 +
             fVar54 * *(float *)(param_1 + 0x1b);
    fVar46 = *(float *)(lVar32 + 0xf90);
    fVar47 = *(float *)(lVar32 + 0xf94);
    fVar48 = *(float *)(lVar32 + 0xf98);
  }
  else {
    fVar52 = *(float *)(lVar32 + 4000);
    fVar53 = *(float *)(lVar32 + 0xfa4);
    fVar54 = *(float *)(lVar32 + 0xfa8);
    fVar48 = *(float *)(lVar32 + 0xf94);
    fVar3 = *(float *)(lVar32 + 0xf90);
    fVar42 = *(float *)(lVar32 + 0xf98);
    fVar46 = *(float *)((int64_t)param_1 + 0xb4) * fVar48 + *(float *)(param_1 + 0x16) * fVar3 +
             *(float *)(param_1 + 0x17) * fVar42;
    fVar47 = *(float *)((int64_t)param_1 + 0xc4) * fVar48 + *(float *)(param_1 + 0x18) * fVar3 +
             *(float *)(param_1 + 0x19) * fVar42;
    fVar48 = *(float *)((int64_t)param_1 + 0xd4) * fVar48 + *(float *)(param_1 + 0x1a) * fVar3 +
             *(float *)(param_1 + 0x1b) * fVar42;
  }
  pfVar14 = *(float **)(lVar28 + 0x81f0);
  fVar3 = pfVar14[3];
  fVar42 = ABS(*(float *)((int64_t)param_1 + 0xe4) + *(float *)(param_1 + 0x1c)) * 8.0 +
           (float)system_error_code * 8e-05;
  uVar17 = (uint)fVar42;
  uVar18 = uVar17 & 0x800000ff;
  if ((int)uVar18 < 0) {
    uVar18 = (uVar18 - 1 | 0xffffff00) + 1;
  }
  uVar19 = uVar18 + 1 & 0x800000ff;
  if ((int)uVar19 < 0) {
    uVar19 = (uVar19 - 1 | 0xffffff00) + 1;
  }
  fVar4 = pfVar14[1];
  uVar23 = 0;
  fVar5 = pfVar14[2];
  lVar32 = (int64_t)iVar25;
  fVar42 = ((*(float *)(&unknown_var_5296_ptr + (int64_t)(int)uVar19 * 4) -
            *(float *)(&unknown_var_5296_ptr + (int64_t)(int)uVar18 * 4)) * (fVar42 - (float)(int)uVar17)
           + *(float *)(&unknown_var_5296_ptr + (int64_t)(int)uVar18 * 4)) * *pfVar14 + 1.0;
  if (0 < iVar25) {
    lVar26 = lVar32 * 0x70;
    uVar29 = uVar23;
    uVar31 = uVar23;
    do {
      lVar24 = *plVar1;
      *(int32_t *)(uVar23 + 0x5c + lVar24) = uVar35;
      lVar28 = param_1[9];
      fVar44 = fVar3 * fVar5 * fVar42;
      fVar36 = (float)func_0x0001802b6b90(lVar28 + 0xa68,*(int32_t *)(uVar23 + 0x24 + lVar24));
      fVar41 = *(float *)(uVar23 + 0xc + lVar24);
      fVar40 = *(float *)(uVar23 + 0x1c + lVar24);
      fVar50 = fVar3 * fVar4 * fVar42 * fVar36 * *(float *)(uVar23 + 0x40 + lVar24) + fVar52 +
               fVar46;
      fVar51 = fVar44 * fVar36 * *(float *)(uVar23 + 0x40 + lVar24) + fVar53 + fVar47;
      fVar44 = fVar48 + fVar54;
      fVar36 = (float)func_0x0001802b6b90(lVar28 + 0x340);
      fVar36 = fVar36 * *(float *)(uVar23 + 0x48 + lVar24);
      if (1.0 <= fVar36) {
        fVar36 = 1.0;
      }
      fVar37 = (float)func_0x0001802b6b90(lVar28 + 0x3f8);
      fVar37 = fVar37 * *(float *)(lVar28 + 0x3f4);
      lVar22 = *(int64_t *)(lVar28 + 0x100);
      fVar6 = *(float *)(uVar23 + lVar24);
      fVar7 = *(float *)(uVar23 + 4 + lVar24);
      fVar8 = *(float *)(uVar23 + 8 + lVar24);
      fVar37 = fVar37 * fVar37;
      fVar37 = fVar37 * fVar37;
      fVar43 = fVar36 * fVar36 * fVar36 * fVar36;
      fVar36 = *(float *)(uVar23 + 0x10 + lVar24);
      fVar49 = 1.0 - fVar43 * fVar43;
      fVar43 = *(float *)(uVar23 + 0x14 + lVar24);
      fVar9 = *(float *)(uVar23 + 0x18 + lVar24);
      fVar45 = fVar8;
      fVar39 = fVar7;
      fVar10 = fVar6;
      if (lVar22 != 0) {
        fVar10 = *(float *)(lVar28 + 0xcc);
        fVar38 = (float)func_0x0001802b6b90(lVar28 + 0x118);
        fVar38 = fVar38 * *(float *)(uVar23 + 0x4c + lVar24);
        fVar44 = 1.0 - fVar10;
        iVar25 = *(int *)(lVar22 + 0xc0);
        iVar12 = *(int *)(lVar22 + 0xbc);
        iVar13 = *(int *)(lVar22 + 0xb8);
        lVar20 = (int64_t)
                 (((((iVar25 + (int)((float)iVar25 *
                                    ((fVar8 - *(float *)(param_1 + 0x1d)) *
                                     *(float *)(lVar28 + 0xe0) + *(float *)(lVar28 + 0xf0))) %
                               iVar25) % iVar25) * iVar12 +
                   (iVar12 + (int)((float)iVar12 *
                                  ((fVar7 - *(float *)((int64_t)param_1 + 0xe4)) *
                                   *(float *)(lVar28 + 0xdc) + *(float *)(lVar28 + 0xec))) % iVar12)
                   % iVar12) * iVar13 +
                  (iVar13 + (int)((float)iVar13 *
                                 ((fVar6 - *(float *)(param_1 + 0x1c)) * *(float *)(lVar28 + 0xd8) +
                                 *(float *)(lVar28 + 0xe8))) % iVar13) % iVar13) * 3);
        lVar28 = *(int64_t *)(lVar22 + 0xb0);
        fVar45 = fVar38 * *(float *)(lVar28 + 8 + lVar20 * 4);
        fVar39 = fVar38 * *(float *)(lVar28 + 4 + lVar20 * 4);
        fVar38 = fVar38 * *(float *)(lVar28 + lVar20 * 4);
        fVar51 = fVar39 * fVar44 + fVar51;
        fVar50 = fVar38 * fVar44 + fVar50;
        fVar44 = fVar45 * fVar44 + fVar48 + fVar54;
        fVar45 = ((fVar8 - fVar45 * param_2 * fVar49) - fVar8) * fVar10 + fVar8;
        fVar39 = ((fVar7 - fVar39 * param_2 * fVar49) - fVar7) * fVar10 + fVar7;
        fVar10 = ((fVar6 - fVar38 * param_2 * fVar49) - fVar6) * fVar10 + fVar6;
      }
      *(float *)(uVar23 + 0x10 + lVar24) = fVar10;
      *(float *)(uVar23 + 0x14 + lVar24) = fVar39;
      *(float *)(uVar23 + 0x18 + lVar24) = fVar45;
      *(float *)(uVar23 + lVar24) = fVar49 * (fVar6 - fVar36) + fVar6 + fVar50 * fVar34;
      *(float *)(uVar23 + 4 + lVar24) = fVar49 * (fVar7 - fVar43) + fVar7 + fVar51 * fVar34;
      *(float *)(uVar23 + 8 + lVar24) = fVar49 * (fVar8 - fVar9) + fVar8 + fVar44 * fVar34;
      fVar44 = *(float *)(uVar23 + 0xc + lVar24);
      *(float *)(uVar23 + 0x1c + lVar24) = fVar44;
      *(float *)(uVar23 + 0xc + lVar24) = (1.0 - fVar37 * fVar37) * (fVar41 - fVar40) + fVar44;
      lVar28 = param_1[9];
      fVar40 = (float)func_0x0001802b6b90(lVar28 + 0x618,*(int32_t *)(uVar23 + 0x24 + lVar24));
      fVar41 = *(float *)(uVar23 + 0x28 + lVar24);
      if (*(int *)(lVar28 + 0x6c) == 0) {
        fVar40 = fVar40 * fVar41;
      }
      else {
        fVar40 = fVar40 + fVar41;
      }
      *(float *)(uVar23 + 0x2c + lVar24) = fVar40;
      fVar41 = param_2 / *(float *)(uVar23 + 0x20 + lVar24) + *(float *)(uVar23 + 0x24 + lVar24);
      *(float *)(uVar23 + 0x24 + lVar24) = fVar41;
      if (1.0 < fVar41) {
        sVar11 = *(short *)(uVar23 + 0x30 + lVar24);
        if (sVar11 != -1) {
          piVar2 = (int *)(param_1[0x26] + (int64_t)sVar11 * 0xc);
          *piVar2 = *piVar2 + -1;
        }
        uVar33 = (uint64_t)((int)uVar33 - 1);
        lVar32 = lVar32 + -1;
        lVar26 = lVar26 + -0x70;
        if (param_1[0x1e] != 0) {
          FUN_1802b0ad0(param_1[0x1e],(int64_t)(int)uVar29 * 0x70 + *plVar1);
          lVar24 = param_1[0x1e];
          lVar22 = *(int64_t *)(lVar24 + 0x38) - *(int64_t *)(lVar24 + 0x30);
          lVar28 = lVar22 >> 0x3f;
          if (lVar22 / 0x88 + lVar28 != lVar28) {
            FUN_1802b09d0(lVar24,*(int32_t *)(uVar23 + 0x58 + *plVar1));
          }
        }
        lVar24 = *plVar1;
        *(int32_t *)(lVar24 + uVar23) = *(int32_t *)(lVar24 + lVar26);
        *(int32_t *)(lVar24 + 4 + uVar23) = *(int32_t *)(lVar24 + 4 + lVar26);
        *(int32_t *)(lVar24 + 8 + uVar23) = *(int32_t *)(lVar24 + 8 + lVar26);
        *(int32_t *)(lVar24 + 0xc + uVar23) = *(int32_t *)(lVar24 + 0xc + lVar26);
        *(int32_t *)(lVar24 + 0x10 + uVar23) = *(int32_t *)(lVar24 + 0x10 + lVar26);
        *(int32_t *)(lVar24 + 0x14 + uVar23) = *(int32_t *)(lVar24 + 0x14 + lVar26);
        *(int32_t *)(lVar24 + 0x18 + uVar23) = *(int32_t *)(lVar24 + 0x18 + lVar26);
        *(int32_t *)(lVar24 + 0x1c + uVar23) = *(int32_t *)(lVar24 + 0x1c + lVar26);
        *(int32_t *)(lVar24 + 0x20 + uVar23) = *(int32_t *)(lVar24 + 0x20 + lVar26);
        *(int32_t *)(lVar24 + 0x24 + uVar23) = *(int32_t *)(lVar24 + 0x24 + lVar26);
        *(int32_t *)(lVar24 + 0x28 + uVar23) = *(int32_t *)(lVar24 + 0x28 + lVar26);
        *(int32_t *)(lVar24 + 0x2c + uVar23) = *(int32_t *)(lVar24 + 0x2c + lVar26);
        *(int16_t *)(lVar24 + 0x30 + uVar23) = *(int16_t *)(lVar24 + 0x30 + lVar26);
        *(int16_t *)(lVar24 + 0x32 + uVar23) = *(int16_t *)(lVar24 + 0x32 + lVar26);
        *(int32_t *)(lVar24 + 0x34 + uVar23) = *(int32_t *)(lVar24 + 0x34 + lVar26);
        *(int32_t *)(lVar24 + 0x38 + uVar23) = *(int32_t *)(lVar24 + 0x38 + lVar26);
        *(int32_t *)(lVar24 + 0x3c + uVar23) = *(int32_t *)(lVar24 + 0x3c + lVar26);
        *(int32_t *)(lVar24 + 0x40 + uVar23) = *(int32_t *)(lVar24 + 0x40 + lVar26);
        *(int32_t *)(lVar24 + 0x44 + uVar23) = *(int32_t *)(lVar24 + 0x44 + lVar26);
        *(int32_t *)(lVar24 + 0x48 + uVar23) = *(int32_t *)(lVar24 + 0x48 + lVar26);
        *(int32_t *)(lVar24 + 0x4c + uVar23) = *(int32_t *)(lVar24 + 0x4c + lVar26);
        *(int16_t *)(lVar24 + 0x50 + uVar23) = *(int16_t *)(lVar24 + 0x50 + lVar26);
        *(int16_t *)(lVar24 + 0x52 + uVar23) = *(int16_t *)(lVar24 + 0x52 + lVar26);
        *(int8_t *)(lVar24 + 0x54 + uVar23) = *(int8_t *)(lVar24 + 0x54 + lVar26);
        *(int8_t *)(lVar24 + 0x55 + uVar23) = *(int8_t *)(lVar24 + 0x55 + lVar26);
        *(int8_t *)(lVar24 + 0x56 + uVar23) = *(int8_t *)(lVar24 + 0x56 + lVar26);
        *(int8_t *)(lVar24 + 0x57 + uVar23) = *(int8_t *)(lVar24 + 0x57 + lVar26);
        *(int32_t *)(lVar24 + 0x58 + uVar23) = *(int32_t *)(lVar24 + 0x58 + lVar26);
        *(int32_t *)(lVar24 + 0x5c + uVar23) = *(int32_t *)(lVar24 + 0x5c + lVar26);
        *(int32_t *)(lVar24 + 0x60 + uVar23) = *(int32_t *)(lVar24 + 0x60 + lVar26);
        *(int32_t *)(lVar24 + 100 + uVar23) = *(int32_t *)(lVar24 + 100 + lVar26);
        *(int32_t *)(lVar24 + 0x68 + uVar23) = *(int32_t *)(lVar24 + 0x68 + lVar26);
        *(int32_t *)(lVar24 + 0x6c + uVar23) = *(int32_t *)(lVar24 + 0x6c + lVar26);
      }
      else {
        uVar29 = (uint64_t)((int)uVar29 + 1);
        uVar31 = uVar31 + 1;
        uVar23 = uVar23 + 0x70;
      }
      iVar25 = (int)uVar33;
    } while ((int64_t)uVar31 < lVar32);
    lVar26 = param_1[0xc];
    lVar24 = *plVar1;
  }
  uVar23 = (uint64_t)iVar25;
  uVar33 = (lVar26 - lVar24) / 0x70;
  if (uVar23 <= uVar33) {
    param_1[0xc] = uVar23 * 0x70 + lVar24;
    return;
  }
  uVar23 = uVar23 - uVar33;
  puVar27 = (uint64_t *)param_1[0xc];
  if (uVar23 <= (uint64_t)((param_1[0xd] - (int64_t)puVar27) / 0x70)) {
    if (uVar23 != 0) {
                    // WARNING: Subroutine does not return
      memset(puVar27,0,0x70,0x4924924924924925,unaff_R14,unaff_RDI,unaff_RBP);
    }
    param_1[0xc] = (int64_t)puVar27;
    return;
  }
  puVar21 = (uint64_t *)*plVar1;
  lVar26 = ((int64_t)puVar27 - (int64_t)puVar21) / 0x70;
  uVar33 = lVar26 * 2;
  if (lVar26 == 0) {
    uVar33 = 1;
  }
  if (uVar33 < lVar26 + uVar23) {
    uVar33 = lVar26 + uVar23;
  }
  if (uVar33 == 0) {
    puVar16 = (uint64_t *)0x0;
    puVar30 = puVar16;
  }
  else {
    puVar16 = (uint64_t *)FUN_18062b420(system_memory_pool_ptr,uVar33 * 0x70,(char)param_1[0xe]);
    puVar21 = (uint64_t *)*plVar1;
    puVar27 = (uint64_t *)param_1[0xc];
    puVar30 = puVar16;
  }
  for (; puVar21 != puVar27; puVar21 = puVar21 + 0xe) {
    uVar15 = puVar21[1];
    *puVar16 = *puVar21;
    puVar16[1] = uVar15;
    uVar15 = puVar21[3];
    puVar16[2] = puVar21[2];
    puVar16[3] = uVar15;
    uVar15 = puVar21[5];
    puVar16[4] = puVar21[4];
    puVar16[5] = uVar15;
    uVar15 = puVar21[7];
    puVar16[6] = puVar21[6];
    puVar16[7] = uVar15;
    uVar15 = puVar21[9];
    puVar16[8] = puVar21[8];
    puVar16[9] = uVar15;
    uVar15 = puVar21[0xb];
    puVar16[10] = puVar21[10];
    puVar16[0xb] = uVar15;
    uVar15 = puVar21[0xd];
    puVar16[0xc] = puVar21[0xc];
    puVar16[0xd] = uVar15;
    puVar16 = puVar16 + 0xe;
  }
  if (uVar23 != 0) {
                    // WARNING: Subroutine does not return
    memset(puVar16,0,0x70);
  }
  if (*plVar1 != 0) {
                    // WARNING: Subroutine does not return
    CoreEngine_MemoryPoolManager();
  }
  *plVar1 = (int64_t)puVar30;
  param_1[0xd] = (int64_t)(puVar30 + uVar33 * 0xe);
  param_1[0xc] = (int64_t)puVar16;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address




