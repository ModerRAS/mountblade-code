#include "TaleWorlds.Native.Split.h"

// 02_core_engine_part219.c - 核心引擎模块第219部分
// 包含8个函数，主要涉及引擎初始化、内存管理和资源清理

// 函数: 空函数，可能用于初始化或占位
void 初始化空占位函数(void)

{
  return;
}



// WARNING: 全局变量以'_'开头的可能与较小符号在同一地址重叠

// 函数: 初始化引擎核心组件
uint64_t * 初始化引擎核心(uint64_t *引擎上下文,longlong 配置标志)

{
  longlong *临时指针1;
  int8_t 临时字节1;
  int 临时整数1;
  int32_t 临时无符号整数1;
  uint64_t 临时无符号长整数1;
  int32_t *临时无符号整数指针1;
  longlong *临时指针2;
  uint 临时无符号整数2;
  uint 循环计数器;
  void *临时未定义指针1;
  uint64_t *临时未定义指针2;
  int32_t 栈变量数组1[2];
  int 栈变量整数1;
  longlong *栈变量指针1;
  longlong *栈变量指针2;
  int8_t 栈变量字节数组1[8];
  uint64_t 栈变量无符号长整数1;
  longlong *栈变量指针3;
  char 栈变量字符1;
  char 栈变量字符2;
  char 栈变量字符3;
  int32_t 栈变量无符号整数1;
  int32_t 栈变量无符号整数2;
  uint64_t 栈变量无符号长整数2;
  int32_t 栈变量无符号整数3;
  int32_t 栈变量无符号整数4;
  longlong *栈变量指针4;
  longlong *栈变量指针5;
  longlong *栈变量指针6;
  longlong *栈变量指针7;
  longlong *栈变量指针8;
  longlong *栈变量指针9;
  longlong *栈变量指针10;
  longlong *栈变量指针11;
  longlong *栈变量指针12;
  uint64_t 栈变量无符号长整数3;
  longlong *栈变量指针13;
  int32_t 栈变量无符号整数5;
  int32_t 栈变量无符号整数6;
  int32_t 栈变量无符号整数7;
  int32_t 栈变量无符号整数8;
  uint64_t 栈变量无符号长整数4;
  uint64_t 栈变量无符号长整数5;
  uint64_t 栈变量无符号长整数6;
  int32_t 栈变量无符号整数9;
  int32_t 栈变量无符号整数10;
  int32_t 栈变量无符号整数11;
  int32_t 栈变量无符号整数12;
  int32_t 栈变量无符号整数13;
  int32_t 栈变量无符号整数14;
  int32_t 栈变量无符号整数15;
  int32_t 栈变量无符号整数16;
  int32_t 栈变量无符号整数17;
  int32_t 栈变量无符号整数18;
  int32_t 栈变量无符号整数19;
  int32_t 栈变量无符号整数20;
  int32_t 栈变量无符号整数21;
  int32_t 栈变量无符号整数22;
  int32_t 栈变量无符号整数23;
  int32_t 栈变量无符号整数24;
  int32_t 栈变量无符号整数25;
  int32_t 栈变量无符号整数26;
  int32_t 栈变量无符号整数27;
  int32_t 栈变量无符号整数28;
  int32_t 栈变量无符号整数29;
  int32_t 栈变量无符号整数30;
  int32_t 栈变量无符号整数31;
  int32_t 栈变量无符号整数32;
  int32_t 栈变量无符号整数33;
  int32_t 栈变量无符号整数34;
  int32_t 栈变量无符号整数35;
  int32_t 栈变量无符号整数36;
  int32_t 栈变量无符号整数37;
  int32_t 栈变量无符号整数38;
  int32_t 栈变量无符号整数39;
  
  栈变量无符号长整数3 = 0xfffffffffffffffe;
  *引擎上下文 = &引擎初始化数据1;
  *引擎上下文 = &引擎初始化数据2;
  循环计数器 = 0;
  *(int32_t *)(引擎上下文 + 1) = 0;
  *引擎上下文 = &引擎初始化数据3;
  引擎上下文[8] = 0;
  *(int16_t *)(引擎上下文 + 3) = 0x100;
  *(int8_t *)((longlong)引擎上下文 + 0x1a) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x1c) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x24) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x2c) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x34) = 0;
  栈变量指针5 = (longlong *)引擎上下文[8];
  引擎上下文[8] = 0;
  if (栈变量指针5 != (longlong *)0x0) {
    (**(code **)(*栈变量指针5 + 0x38))();
  }
  *(int32_t *)(引擎上下文 + 6) = 0;
  *(int32_t *)(引擎上下文 + 10) = 100;
  临时无符号长整数1 = 分配内存池(内存池基地址,400,3);
  引擎上下文[0xb] = 临时无符号长整数1;
  引擎上下文[0xc] = 0;
  *(int32_t *)(引擎上下文 + 0xd) = 0;
  引擎上下文[0xe] = 0;
  引擎上下文[0xf] = 0;
  引擎上下文[0x10] = 0;
  *(int32_t *)(引擎上下文 + 0x11) = 3;
  引擎上下文[0x12] = 0;
  *(int32_t *)(引擎上下文 + 0x1a) = 0x3f800000;
  *(uint64_t *)((longlong)引擎上下文 + 0xd4) = 0x40000000;
  *(int32_t *)((longlong)引擎上下文 + 0xdc) = 3;
  引擎上下文[0x18] = 1;
  引擎上下文[0x17] = &全局配置数据1;
  引擎上下文[0x19] = 0;
  *(int32_t *)(引擎上下文 + 0x1b) = 0;
  引擎上下文[0x1c] = 0;
  引擎上下文[0x1d] = 0;
  引擎上下文[0x1e] = 0;
  *(int32_t *)(引擎上下文 + 0x1f) = 3;
  引擎上下文[0x22] = 0;
  引擎上下文[0x23] = _guard_check_icall;
  _Mtx_init_in_situ(引擎上下文 + 0x24,2);
  引擎上下文[0x2f] = 0;
  引擎上下文[0x30] = 0;
  引擎上下文[0x31] = 0;
  引擎上下文[0x32] = 0;
  *(int32_t *)(引擎上下文 + 0x33) = 3;
  引擎上下文[0x3d] = 0;
  引擎上下文[0x3e] = 0;
  引擎上下文[0x3f] = 0;
  *(int32_t *)(引擎上下文 + 0x40) = 3;
  引擎上下文[0x41] = 0;
  引擎上下文[0x42] = 0;
  引擎上下文[0x43] = 0;
  临时未定义指针2 = 引擎上下文 + 0x44;
  引擎上下文[0x47] = 0;
  *(int32_t *)(引擎上下文 + 0x49) = 3;
  *临时未定义指针2 = 临时未定义指针2;
  引擎上下文[0x45] = 临时未定义指针2;
  引擎上下文[0x46] = 0;
  *(int8_t *)(引擎上下文 + 0x47) = 0;
  引擎上下文[0x48] = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x1dc) = 0;
  *(int16_t *)(引擎上下文 + 0x3b) = 1;
  *(int32_t *)((longlong)引擎上下文 + 0x1d4) = 0;
  *(int8_t *)(引擎上下文 + 0x4a) = 1;
  *(int8_t *)(引擎上下文 + 0x2e) = 1;
  引擎上下文[0x55] = 0;
  *(int8_t *)((longlong)引擎上下文 + 0x2c4) = 0;
  *(int32_t *)(引擎上下文 + 0x57) = 0;
  引擎上下文[0x5a] = 0;
  引擎上下文[0x5b] = 0;
  引擎上下文[0x5c] = 0;
  *(int32_t *)(引擎上下文 + 0x5d) = 3;
  初始化数据结构(引擎上下文 + 0x5e,8,4,&释放函数指针1,清理函数指针1);
  引擎上下文[100] = 0;
  引擎上下文[0x6c] = 0;
  引擎上下文[0x6d] = 0;
  引擎上下文[0x6e] = 0;
  *(int32_t *)(引擎上下文 + 0x6f) = 3;
  引擎上下文[0x71] = 0;
  引擎上下文[0x72] = 0;
  引擎上下文[0x73] = 0;
  引擎上下文[0x74] = 0;
  引擎上下文[0x77] = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x484) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x454) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x45c) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x464) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x46c) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x474) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x47c) = 0;
  临时指针2 = 引擎上下文 + 0x91;
  *临时指针2 = (longlong)&引擎初始化数据4;
  引擎上下文[0x92] = 0;
  *(int32_t *)(引擎上下文 + 0x93) = 0;
  *临时指针2 = (longlong)&引擎初始化数据5;
  引擎上下文[0x94] = 0;
  引擎上下文[0x92] = 0;
  *(int32_t *)(引擎上下文 + 0x93) = 0;
  *(int32_t *)(引擎上下文 + 0x9a) = 0;
  引擎上下文[0x9b] = &引擎初始化数据4;
  引擎上下文[0x9c] = 0;
  *(int32_t *)(引擎上下文 + 0x9d) = 0;
  引擎上下文[0x9b] = &引擎初始化数据5;
  引擎上下文[0x9e] = 0;
  引擎上下文[0x9c] = 0;
  *(int32_t *)(引擎上下文 + 0x9d) = 0;
  引擎上下文[0xa0] = &引擎初始化数据4;
  引擎上下文[0xa1] = 0;
  *(int32_t *)(引擎上下文 + 0xa2) = 0;
  引擎上下文[0xa0] = &引擎初始化数据5;
  引擎上下文[0xa3] = 0;
  引擎上下文[0xa1] = 0;
  *(int32_t *)(引擎上下文 + 0xa2) = 0;
  引擎上下文[0xa4] = &引擎初始化数据4;
  引擎上下文[0xa5] = 0;
  *(int32_t *)(引擎上下文 + 0xa6) = 0;
  引擎上下文[0xa4] = &引擎初始化数据5;
  引擎上下文[0xa7] = 0;
  引擎上下文[0xa5] = 0;
  *(int32_t *)(引擎上下文 + 0xa6) = 0;
  引擎上下文[0xa8] = 0;
  引擎上下文[0xa9] = 0;
  引擎上下文[0xaa] = 0;
  *(int32_t *)(引擎上下文 + 0xab) = 3;
  初始化图形资源(引擎上下文 + 0xae);
  引擎上下文[0x4ce] = 0;
  _Cnd_init_in_situ(引擎上下文 + 0x4cf);
  _Mtx_init_in_situ(引擎上下文 + 0x4d8,2);
  *(int8_t *)(引擎上下文 + 0x4e2) = 0;
  _Cnd_init_in_situ(引擎上下文 + 0x4e3);
  _Mtx_init_in_situ(引擎上下文 + 0x4ec,2);
  *(int8_t *)(引擎上下文 + 0x4f6) = 0;
  引擎上下文[0x4f9] = &引擎初始化数据4;
  引擎上下文[0x4fa] = 0;
  *(int32_t *)(引擎上下文 + 0x4fb) = 0;
  引擎上下文[0x4f9] = &引擎初始化数据5;
  引擎上下文[0x4fc] = 0;
  引擎上下文[0x4fa] = 0;
  *(int32_t *)(引擎上下文 + 0x4fb) = 0;
  引擎上下文[0x4fd] = 0;
  引擎上下文[0x4fe] = 0;
  引擎上下文[0x4ff] = 0;
  引擎上下文[0x500] = 0;
  *(int32_t *)(引擎上下文 + 0x501) = 0xc;
  引擎上下文[0x502] = 0;
  引擎上下文[0x503] = 0;
  引擎上下文[0x504] = 0;
  *(int32_t *)(引擎上下文 + 0x505) = 0xc;
  引擎上下文[0x50a] = 0;
  引擎上下文[0x50b] = _guard_check_icall;
  *(int32_t *)((longlong)引擎上下文 + 0x286c) = 0;
  引擎上下文[0x50e] = 0;
  引擎上下文[0x50f] = 0;
  引擎上下文[0x510] = 0;
  *(int32_t *)(引擎上下文 + 0x511) = 3;
  引擎上下文[0x512] = &引擎初始化数据4;
  引擎上下文[0x513] = 0;
  *(int32_t *)(引擎上下文 + 0x514) = 0;
  引擎上下文[0x512] = &引擎初始化数据5;
  引擎上下文[0x515] = 0;
  引擎上下文[0x513] = 0;
  *(int32_t *)(引擎上下文 + 0x514) = 0;
  引擎上下文[0x519] = 0;
  引擎上下文[0x51a] = 0;
  引擎上下文[0x51b] = 0;
  引擎上下文[0x51c] = 0;
  引擎上下文[0x51d] = 0;
  引擎上下文[0x51e] = 0;
  *(int16_t *)(引擎上下文 + 0x520) = 0;
  栈变量无符号整数10 = 0;
  栈变量无符号整数11 = 0;
  栈变量无符号整数12 = 0;
  栈变量无符号整数13 = 0x3f800000;
  栈变量无符号整数14 = 0;
  栈变量无符号整数15 = 0;
  栈变量无符号整数16 = 0x3f800000;
  栈变量无符号整数17 = 0;
  栈变量无符号整数18 = 0;
  栈变量无符号整数19 = 0x3f800000;
  栈变量无符号整数20 = 0;
  栈变量无符号整数21 = 0;
  栈变量无符号整数22 = 0x3f800000;
  栈变量无符号整数23 = 0;
  栈变量无符号整数24 = 0;
  栈变量无符号整数25 = 0;
  栈变量无符号整数26 = 0x3f800000;
  栈变量无符号整数27 = 0;
  栈变量无符号整数28 = 0;
  栈变量无符号整数29 = 0;
  栈变量无符号整数30 = 0;
  栈变量无符号整数31 = 0;
  栈变量无符号整数32 = 0x3f800000;
  栈变量无符号整数33 = 0;
  栈变量无符号整数34 = 0;
  栈变量无符号整数35 = 0;
  栈变量无符号整数36 = 0;
  栈变量无符号整数37 = 0x3f800000;
  栈变量无符号整数38 = 0;
  栈变量无符号整数39 = 0;
  *(int32_t *)(引擎上下文 + 0x524) = 0x3f800000;
  *(int32_t *)((longlong)引擎上下文 + 0x2924) = 0;
  *(int32_t *)(引擎上下文 + 0x525) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x292c) = 0;
  *(int32_t *)(引擎上下文 + 0x526) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x2934) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x527) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x293c) = 0;
  *(int32_t *)(引擎上下文 + 0x528) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x2944) = 0;
  *(int32_t *)(引擎上下文 + 0x529) = 0x3f800000;
  *(int32_t *)((longlong)引擎上下文 + 0x294c) = 0;
  *(int32_t *)(引擎上下文 + 0x52a) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x2954) = 0;
  *(int32_t *)(引擎上下文 + 0x52b) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x295c) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x52c) = 0x1010101;
  *(int32_t *)((longlong)引擎上下文 + 0x2964) = 0x101;
  *(int8_t *)(引擎上下文 + 0x52d) = 0;
  引擎上下文[0x52e] = 0;
  引擎上下文[0x52f] = 0;
  引擎上下文[0x530] = 0;
  *(int32_t *)(引擎上下文 + 0x531) = 3;
  引擎上下文[0x534] = 0;
  引擎上下文[0x535] = 0;
  引擎上下文[0x533] = 引擎上下文;
  引擎上下文[0x536] = 0;
  引擎上下文[0x537] = 0;
  引擎上下文[0x538] = 0;
  *(int32_t *)(引擎上下文 + 0x539) = 3;
  引擎上下文[0x53a] = 0;
  引擎上下文[0x53b] = 0;
  引擎上下文[0x53c] = 0;
  *(int32_t *)(引擎上下文 + 0x53d) = 3;
  引擎上下文[0x53e] = 0;
  引擎上下文[0x53f] = 0;
  引擎上下文[0x540] = 0;
  *(int32_t *)(引擎上下文 + 0x541) = 3;
  _Mtx_init_in_situ(引擎上下文 + 0x542,2);
  初始化渲染系统(引擎上下文 + 0x54d);
  *(uint64_t *)((longlong)引擎上下文 + 0x3004) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x300c) = 0;
  初始化音频系统(引擎上下文 + 0x603);
  初始化音频系统(引擎上下文 + 0x66d);
  初始化物理系统(引擎上下文 + 0x6d6);
  引擎上下文[0x7ce] = 0;
  引擎上下文[1999] = 0;
  引擎上下文[2000] = 0;
  *(int32_t *)(引擎上下文 + 0x7d1) = 3;
  *(uint64_t *)((longlong)引擎上下文 + 0x3eb4) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x3ebc) = 0;
  引擎上下文[0x7da] = &引擎初始化数据4;
  引擎上下文[0x7db] = 0;
  *(int32_t *)(引擎上下文 + 0x7dc) = 0;
  引擎上下文[0x7da] = &引擎初始化数据5;
  引擎上下文[0x7dd] = 0;
  引擎上下文[0x7db] = 0;
  *(int32_t *)(引擎上下文 + 0x7dc) = 0;
  锁定();
  *(int32_t *)(引擎上下文 + 0x7ed) = 0;
  解锁();
  临时无符号整数2 = 循环计数器;
  do {
    引擎上下文[(longlong)(int)临时无符号整数2 + 0x7ee] = 0;
    锁定();
    *(int8_t *)((longlong)引擎上下文 + (longlong)(int)临时无符号整数2 + 0x3fb0) = 1;
    解锁();
    临时无符号整数2 = 临时无符号整数2 + 1;
  } while (临时无符号整数2 < 8);
  初始化数据结构(引擎上下文 + 0x7f7,0x908,2,&初始化函数指针1,初始化函数指针2);
  *(int32_t *)(引擎上下文 + 0xa39) = 0;
  锁定();
  *(int32_t *)(引擎上下文 + 0xa3a) = 0;
  解锁();
  临时无符号整数2 = 循环计数器;
  do {
    引擎上下文[(longlong)(int)临时无符号整数2 + 0xa3b] = 0;
    锁定();
    *(int8_t *)((longlong)引擎上下文 + (longlong)(int)临时无符号整数2 + 23000) = 1;
    解锁();
    临时无符号整数2 = 临时无符号整数2 + 1;
  } while (临时无符号整数2 < 0x100);
  锁定();
  *(int32_t *)(引擎上下文 + 0xb5b) = 0;
  解锁();
  do {
    引擎上下文[(longlong)(int)循环计数器 + 0xb5c] = 0;
    锁定();
    *(int8_t *)((longlong)引擎上下文 + (longlong)(int)循环计数器 + 0x5b20) = 1;
    解锁();
    循环计数器 = 循环计数器 + 1;
  } while (循环计数器 < 8);
  引擎上下文[0xb65] = 0;
  引擎上下文[0xb66] = 0;
  引擎上下文[0xb67] = 0;
  *(int32_t *)(引擎上下文 + 0xb68) = 3;
  _Mtx_init_in_situ(引擎上下文 + 0xb69,2);
  引擎上下文[0xb75] = 0;
  引擎上下文[0xb76] = 0;
  引擎上下文[0xb77] = 0;
  *(int32_t *)(引擎上下文 + 0xb78) = 3;
  引擎上下文[0xb7b] = 0;
  引擎上下文[0xb7c] = 0;
  引擎上下文[0xb7d] = 0;
  引擎上下文[0xb7f] = 0;
  引擎上下文[0xb80] = 0;
  引擎上下文[0xb81] = 0;
  *(int32_t *)(引擎上下文 + 0xb82) = 3;
  引擎上下文[0xb85] = 0;
  引擎上下文[0xb86] = 0;
  引擎上下文[0xb87] = 0;
  _Mtx_init_in_situ(引擎上下文 + 0xb89,2);
  引擎上下文[0xb93] = 0;
  引擎上下文[0xb94] = 0;
  引擎上下文[0xb95] = 0;
  *(int32_t *)(引擎上下文 + 0xb96) = 3;
  初始化数据结构(引擎上下文 + 0xb97,0x2408,1,&初始化函数指针3,初始化函数指针4);
  *(int32_t *)(引擎上下文 + 0x1018) = 0;
  _Mtx_init_in_situ(引擎上下文 + 0x1019,2);
  引擎上下文[0x1023] = 0;
  引擎上下文[0x1024] = 0;
  引擎上下文[0x1025] = 0;
  *(int32_t *)(引擎上下文 + 0x1026) = 3;
  引擎上下文[0x1027] = 0;
  引擎上下文[0x1028] = 0;
  引擎上下文[0x1029] = 0;
  *(int32_t *)(引擎上下文 + 0x102a) = 3;
  引擎上下文[0x102b] = 0;
  引擎上下文[0x102c] = 0;
  引擎上下文[0x102d] = 0;
  *(int32_t *)(引擎上下文 + 0x102e) = 3;
  引擎上下文[0x102f] = 0;
  引擎上下文[0x1030] = 0;
  引擎上下文[0x1031] = 0;
  *(int32_t *)(引擎上下文 + 0x1032) = 3;
  引擎上下文[0x1036] = 0;
  引擎上下文[0x1037] = 0;
  引擎上下文[0x1038] = 0;
  *(int32_t *)(引擎上下文 + 0x1039) = 3;
  引擎上下文[0x103a] = &引擎初始化数据4;
  引擎上下文[0x103b] = 0;
  *(int32_t *)(引擎上下文 + 0x103c) = 0;
  引擎上下文[0x103a] = &引擎初始化数据5;
  引擎上下文[0x103d] = 0;
  引擎上下文[0x103b] = 0;
  *(int32_t *)(引擎上下文 + 0x103c) = 0;
  引擎上下文[0x103f] = 0;
  引擎上下文[0x1040] = 0;
  引擎上下文[0x1041] = 0;
  引擎上下文[0x1042] = 0;
  引擎上下文[0x1043] = 0;
  引擎上下文[0x1044] = 0;
  初始化输入系统(引擎上下文 + 0x1045);
  初始化窗口系统();
  引擎上下文[0xc0e2] = 0;
  引擎上下文[0xc0e3] = 0;
  引擎上下文[0xc0e4] = 0;
  *(int32_t *)(引擎上下文 + 0xc0e5) = 3;
  引擎上下文[0xc0e8] = &引擎初始化数据4;
  引擎上下文[0xc0e9] = 0;
  *(int32_t *)(引擎上下文 + 0xc0ea) = 0;
  引擎上下文[0xc0e8] = &引擎初始化数据5;
  引擎上下文[0xc0eb] = 0;
  引擎上下文[0xc0e9] = 0;
  *(int32_t *)(引擎上下文 + 0xc0ea) = 0;
  引擎上下文[0xc0ec] = &引擎初始化数据4;
  引擎上下文[0xc0ed] = 0;
  *(int32_t *)(引擎上下文 + 0xc0ee) = 0;
  引擎上下文[0xc0ec] = &引擎初始化数据5;
  引擎上下文[0xc0ef] = 0;
  引擎上下文[0xc0ed] = 0;
  *(int32_t *)(引擎上下文 + 0xc0ee) = 0;
  引擎上下文[0xc0f0] = &引擎初始化数据4;
  引擎上下文[0xc0f1] = 0;
  *(int32_t *)(引擎上下文 + 0xc0f2) = 0;
  引擎上下文[0xc0f0] = &引擎初始化数据5;
  引擎上下文[0xc0f3] = 0;
  引擎上下文[0xc0f1] = 0;
  *(int32_t *)(引擎上下文 + 0xc0f2) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x607d4) = 0x3dcccccd;
  *(int32_t *)(引擎上下文 + 0xc0fb) = 0x47c35000;
  初始化渲染上下文(引擎上下文 + 0xc0fc,引擎上下文,*(int8_t *)(配置标志 + 0x28));
  引擎上下文[0xc11c] = 0;
  引擎上下文[0xc11d] = _guard_check_icall;
  初始化渲染设备(引擎上下文 + 0xc11e);
  引擎上下文[0xc169] = &引擎初始化数据4;
  引擎上下文[0xc16a] = 0;
  *(int32_t *)(引擎上下文 + 0xc16b) = 0;
  引擎上下文[0xc169] = &引擎初始化数据5;
  引擎上下文[0xc16c] = 0;
  引擎上下文[0xc16a] = 0;
  *(int32_t *)(引擎上下文 + 0xc16b) = 0;
  引擎上下文[0xc16d] = 0;
  引擎上下文[0xc16e] = 0;
  临时未定义指针2 = 引擎上下文 + 0xc173;
  引擎上下文[0xc176] = 0;
  *(int32_t *)(引擎上下文 + 0xc178) = 3;
  *临时未定义指针2 = 临时未定义指针2;
  引擎上下文[0xc174] = 临时未定义指针2;
  引擎上下文[0xc175] = 0;
  *(int8_t *)(引擎上下文 + 0xc176) = 0;
  引擎上下文[0xc177] = 0;
  引擎上下文[0xc179] = 0;
  引擎上下文[0xc17a] = 0;
  引擎上下文[0xc17b] = 0;
  *(int32_t *)(引擎上下文 + 0xc17c) = 3;
  引擎上下文[0xc17d] = 0;
  引擎上下文[0xc17e] = 0;
  引擎上下文[0xc17f] = 0;
  *(int32_t *)(引擎上下文 + 0xc180) = 3;
  引擎上下文[0xc181] = 0;
  引擎上下文[0xc184] = 0;
  引擎上下文[0xc185] = 0;
  引擎上下文[0xc186] = 0;
  *(int32_t *)(引擎上下文 + 0xc187) = 3;
  引擎上下文[0xc18a] = 0;
  引擎上下文[0xc18b] = 0;
  引擎上下文[0xc18d] = 0;
  引擎上下文[0xc189] = 引擎上下文;
  *(int8_t *)((longlong)引擎上下文 + 0x60c1c) = 0;
  *(int8_t *)(引擎上下文 + 0xc18c) = 1;
  *(int32_t *)((longlong)引擎上下文 + 0x60c64) = 0;
  引擎上下文[0xc188] = 0xffffffffffffffff;
  引擎上下文[0xc182] = 0;
  *(int32_t *)(引擎上下文 + 0xc183) = 0;
  引擎上下文[0xc18e] = 0;
  引擎上下文[0xc18f] = 0;
  引擎上下文[0xc190] = 0;
  引擎上下文[0xc191] = 0;
  引擎上下文[0xc192] = 0;
  引擎上下文[0xc193] = 0;
  引擎上下文[0xc194] = 0;
  引擎上下文[0xc195] = 0;
  _Mtx_init_in_situ(引擎上下文 + 0xc197,2);
  引擎上下文[0xc1a2] = 0;
  引擎上下文[0xc1a3] = 0;
  引擎上下文[0xc1a4] = 0;
  *(int32_t *)(引擎上下文 + 0xc1a5) = 3;
  *(int8_t *)(引擎上下文 + 0x522) = 0;
  引擎上下文[0x523] = 0;
  临时无符号长整数1 = 分配内存池(内存池基地址,0xb60,8,3);
  临时无符号长整数1 = 初始化内存管理器(临时无符号长整数1,引擎上下文);
  引擎上下文[0x4c] = 临时无符号长整数1;
  *(int8_t *)(引擎上下文 + 9) = 0;
  引擎上下文[0x4b] = 0;
  *(int8_t *)(引擎上下文 + 0x59) = 0;
  *(int16_t *)(引擎上下文 + 0x4f7) = 1;
  *(int16_t *)(引擎上下文 + 0xc172) = 0;
  *(int8_t *)(引擎上下文 + 0x50d) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x2a64) = 0;
  引擎上下文[0x14] = 0xffffffffffffffff;
  *(int8_t *)(引擎上下文 + 0x15) = 0;
  *(int32_t *)(引擎上下文 + 0x62) = 0;
  *(int8_t *)(引擎上下文 + 0xc0e6) = 1;
  if ((code *)引擎上下文[0xc11c] != (code *)0x0) {
    (*(code *)引擎上下文[0xc11c])(引擎上下文 + 0xc11a,0,0);
  }
  引擎上下文[0xc11c] = 0;
  引擎上下文[0xc11d] = _guard_check_icall;
  *(int8_t *)(引擎上下文 + 0xc1a1) = 0;
  *(int8_t *)(引擎上下文 + 0xc0fa) = 0;
  *(int8_t *)((longlong)引擎上下文 + 0xa9) = 0;
  *(int8_t *)(引擎上下文 + 0x1033) = 1;
  栈变量指针6 = (longlong *)引擎上下文[100];
  引擎上下文[100] = 0;
  if (栈变量指针6 != (longlong *)0x0) {
    (**(code **)(*栈变量指针6 + 0x38))();
  }
  引擎上下文[0x70] = 0;
  引擎上下文[0x75] = 0;
  引擎上下文[0x65] = 0;
  引擎上下文[0x66] = 0;
  *(int8_t *)((longlong)引擎上下文 + 0x3f62) = 1;
  *(int32_t *)((longlong)引擎上下文 + 0x28b4) = 0;
  *(int8_t *)(引擎上下文 + 0x517) = 0;
  *(int8_t *)(引擎上下文 + 0x506) = 1;
  *(int8_t *)(引擎上下文 + 0xac) = 0;
  if (*(int *)(系统配置基地址 + 0x340) != 0) {
    临时整数1 = (**(code **)(渲染配置地址 + 0xf8))();
    栈变量整数1 = 临时整数1;
    if ((临时整数1 != 0) && (渲染初始化地址 != 0)) {
      (**(code **)(渲染初始化地址 + 0x30))(临时整数1);
    }
    if ((*(int *)((longlong)引擎上下文 + 0x286c) != 0) && (渲染初始化地址 != 0)) {
      (**(code **)(渲染初始化地址 + 0x18))();
    }
    *(int *)((longlong)引擎上下文 + 0x286c) = 临时整数1;
  }
  引擎上下文[0x507] = 0;
  if ((code *)引擎上下文[0x50a] != (code *)0x0) {
    (*(code *)引擎上下文[0x50a])(引擎上下文 + 0x508,0,0);
  }
  引擎上下文[0x50a] = 0;
  引擎上下文[0x50b] = _guard_check_icall;
  引擎上下文[0x50c] = 0;
  引擎上下文[0x518] = 0;
  引擎上下文[0x66c] = 0;
  *(int32_t *)(引擎上下文 + 1) = 0;
  *(int8_t *)((longlong)引擎上下文 + 0x28b9) = 0;
  *(int8_t *)((longlong)引擎上下文 + 0x315) = *(int8_t *)(配置标志 + 0x26);
  if (*(char *)(配置标志 + 0x27) != '\0') {
    *(int8_t *)(引擎上下文 + 0x520) = 1;
  }
  *(int32_t *)(引擎上下文 + 0x4f8) = 1;
  *(int32_t *)((longlong)引擎上下文 + 0x3e94) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x7d3) = 0x3f800000;
  *(int32_t *)((longlong)引擎上下文 + 0x3e9c) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x7d4) = 0x3f800000;
  *(int32_t *)((longlong)引擎上下文 + 0x3ea4) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x7d5) = 0x3f800000;
  *(int32_t *)((longlong)引擎上下文 + 0x3eac) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x7d6) = 0x3f800000;
  *(int8_t *)(引擎上下文 + 0x7de) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x3ecc) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x7d9) = 0x40a00000;
  *(int32_t *)(引擎上下文 + 0x7e7) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x3f3c) = 0;
  *(int32_t *)(引擎上下文 + 0x7e8) = 0x3f000000;
  *(int32_t *)((longlong)引擎上下文 + 0x3f44) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x7e9) = 0x3f800000;
  栈变量指针7 = (longlong *)引擎上下文[0x1041];
  引擎上下文[0x1041] = 0;
  if (栈变量指针7 != (longlong *)0x0) {
    (**(code **)(*栈变量指针7 + 0x38))(栈变量指针7,0x3f800000);
  }
  *(int32_t *)(引擎上下文 + 0xc171) = 0;
  *(int8_t *)(引擎上下文 + 0x600) = 0;
  临时未定义指针1 = &默认配置数据1;
  if (*(void **)(配置标志 + 8) != (void *)0x0) {
    临时未定义指针1 = *(void **)(配置标志 + 8);
  }
  (**(code **)(引擎上下文[0x9b] + 0x10))(引擎上下文 + 0x9b,临时未定义指针1);
  *(int32_t *)((longlong)引擎上下文 + 0x5b9c) = 0;
  *(int32_t *)(引擎上下文 + 0xb73) = *(int32_t *)(配置标志 + 0x20);
  *(int8_t *)(引擎上下文 + 0xb74) = 0;
  引擎上下文[0x521] = 0;
  *(int16_t *)(引擎上下文 + 0xb88) = 0x101;
  *(int8_t *)(引擎上下文 + 0xb7e) = 1;
  *(int8_t *)((longlong)引擎上下文 + 0x5c42) = 1;
  引擎上下文[0x79] = 0x3f800000;
  引擎上下文[0x7a] = 0;
  引擎上下文[0x7b] = 0x3f80000000000000;
  引擎上下文[0x7c] = 0;
  引擎上下文[0x7d] = 0;
  引擎上下文[0x7e] = 0x3f800000;
  引擎上下文[0x7f] = 0;
  引擎上下文[0x80] = 0x3f80000000000000;
  引擎上下文[0x81] = 0x3f800000;
  引擎上下文[0x82] = 0;
  引擎上下文[0x83] = 0x3f80000000000000;
  引擎上下文[0x84] = 0;
  引擎上下文[0x85] = 0;
  引擎上下文[0x86] = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x87) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x43c) = 0;
  *(int32_t *)(引擎上下文 + 0x88) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x444) = 0x3f800000;
  *(int8_t *)((longlong)引擎上下文 + 0x562) = 0;
  引擎上下文[0x7cc] = 0;
  引擎上下文[0x7cd] = 0x3f80000000000000;
  锁定();
  *(int32_t *)((longlong)引擎上下文 + 0x3f4c) = 0;
  解锁();
  *(int32_t *)(引擎上下文 + 0x7ea) = 0;
  *(int32_t *)(引擎上下文 + 0x516) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x60b8c) = *(int32_t *)(系统配置基地址 + 0x3b4);
  *(int8_t *)((longlong)引擎上下文 + 0x2869) = 1;
  *(int8_t *)((longlong)引擎上下文 + 0x3f61) = 0;
  栈变量指针8 = (longlong *)引擎上下文[0x103f];
  引擎上下文[0x103f] = 0;
  if (栈变量指针8 != (longlong *)0x0) {
    (**(code **)(*栈变量指针8 + 0x38))();
  }
  *(int32_t *)((longlong)引擎上下文 + 0x5ba4) = 0x3f800000;
  引擎上下文[0xc16d] = 0xc3800000c3800000;
  引擎上下文[0xc16e] = 0x4380000043800000;
  *(uint64_t *)((longlong)引擎上下文 + 0x3eb4) = 0;
  *(uint64_t *)((longlong)引擎上下文 + 0x3ebc) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x3ec4) = 0xc2c80000;
  (**(code **)(引擎上下文[0x7da] + 0x10))(引擎上下文 + 0x7da,&引擎初始化数据6);
  *(int8_t *)((longlong)引擎上下文 + 0x561) = 0;
  *(int16_t *)(引擎上下文 + 0x9f) = 0x101;
  *(int8_t *)((longlong)引擎上下文 + 0x314) = 1;
  *(int32_t *)((longlong)引擎上下文 + 0x4b4) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x97) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x95) = 0x42480000;
  *(int32_t *)((longlong)引擎上下文 + 0x4ac) = 0x3f800000;
  *(int32_t *)((longlong)引擎上下文 + 0x4cc) = 0x3f800000;
  *(int32_t *)(引擎上下文 + 0x96) = 0x3f800000;
  *(uint64_t *)((longlong)引擎上下文 + 0x4bc) = 0xffffffffffffffff;
  *(int32_t *)((longlong)引擎上下文 + 0x4c4) = 0xffffffff;
  (**(code **)(*临时指针2 + 0x10))(临时指针2,&默认配置数据1);
  *(int8_t *)(引擎上下文 + 0x99) = 1;
  *(int32_t *)((longlong)引擎上下文 + 0x27bc) = 0x3f800000;
  if ((*(char *)(配置标志 + 0x24) == '\0') || (*(int *)(渲染配置地址 + 0x540) != 0)) {
    临时字节1 = 0;
  }
  else {
    临时字节1 = 1;
  }
  *(int8_t *)((longlong)引擎上下文 + 0x563) = 临时字节1;
  *(int8_t *)((longlong)引擎上下文 + 0x564) = *(int8_t *)(配置标志 + 0x25);
  *(int32_t *)(引擎上下文 + 0xad) = *(int32_t *)(配置标志 + 0x2c);
  引擎上下文[99] = 0;
  *(int8_t *)((longlong)引擎上下文 + 0x2a61) = 1;
  引擎上下文[0xc170] = 0;
  引擎上下文[0x89] = 0;
  栈变量指针9 = (longlong *)引擎上下文[0x1042];
  引擎上下文[0x1042] = 0;
  if (栈变量指针9 != (longlong *)0x0) {
    (**(code **)(*栈变量指针9 + 0x38))();
  }
  *(int32_t *)(引擎上下文 + 0x1044) = 0x3f800000;
  *(int8_t *)(引擎上下文 + 0x54c) = 0;
  *(int16_t *)((longlong)引擎上下文 + 0x2a62) = 1;
  引擎上下文[0x5f2] = 引擎上下文;
  *(int32_t *)(引擎上下文 + 0x7eb) = 0;
  *(float *)((longlong)引擎上下文 + 0x3f5c) = *(float *)(系统配置基地址 + 0x388) * 2000.0;
  *(int32_t *)((longlong)引擎上下文 + 0x3f54) = 0;
  *(int8_t *)(引擎上下文 + 0x7ec) = 1;
  *(int32_t *)(引擎上下文 + 0x6d5) = 0xffffffff;
  临时无符号整数1 = _Thrd_id();
  *(int32_t *)(引擎上下文 + 0x9a) = 临时无符号整数1;
  引擎上下文[0x532] = 引擎上下文;
  初始化引擎组件(引擎上下文);
  临时无符号整数指针1 = (int32_t *)分配内存池(内存池基地址,0x10,4,3);
  *(uint64_t *)(临时无符号整数指针1 + 1) = 0x3f800000;
  临时无符号整数指针1[3] = 0x3f800000;
  *临时无符号整数指针1 = 0x3f800000;
  引擎上下文[0x103e] = 临时无符号整数指针1;
  初始化线程同步(引擎上下文 + 0x4cf,0);
  *(int32_t *)(引擎上下文 + 0x76) = 0;
  *(int32_t *)((longlong)引擎上下文 + 0x3b4) = 0xffffffff;
  *(int8_t *)(引擎上下文 + 0xc0e7) = 0;
  *(int8_t *)(引擎上下文 + 0xc0f4) = 0;
  临时无符号长整数1 = 分配内存池(内存池基地址,0x3d0,8,3);
  临时指针2 = (longlong *)初始化场景管理器(临时无符号长整数1);
  if (临时指针2 != (longlong *)0x0) {
    栈变量指针10 = 临时指针2;
    (**(code **)(*临时指针2 + 0x28))(临时指针2);
  }
  栈变量指针10 = (longlong *)引擎上下文[0x4fd];
  引擎上下文[0x4fd] = 临时指针2;
  if (栈变量指针10 != (longlong *)0x0) {
    (**(code **)(*栈变量指针10 + 0x38))();
  }
  临时无符号长整数1 = 分配内存池(内存池基地址,0x300,0x10,3);
  临时指针2 = (longlong *)初始化渲染管线(临时无符号长整数1,1);
  栈变量指针13 = 临时指针2;
  if (临时指针2 != (longlong *)0x0) {
    (**(code **)(*临时指针2 + 0x28))(临时指针2);
  }
  临时无符号整数2 = 0;
  栈变量指针1 = (longlong *)0x0;
  栈变量指针2 = (longlong *)0x0;
  栈变量指针3 = (longlong *)0x0;
  栈变量无符号长整数2 = 0;
  栈变量字节数组1[0] = 0;
  初始化渲染队列(&栈变量指针1,临时指针2,0);
  栈变量数组1[0] = 0xffffffff;
  栈变量无符号整数1 = 0x3f800000;
  栈变量无符号整数2 = 0x3f800000;
  栈变量无符号长整数3 = 0;
  栈变量无符号整数3 = 0x40000000;
  栈变量无符号整数4 = 0x40000000;
  栈变量无符号整数5 = 0xbf800000;
  栈变量无符号整数6 = 0xbf800000;
  栈变量无符号整数7 = 0;
  栈变量无符号整数8 = 0x7f7fffff;
  配置渲染参数(&栈变量指针1,&栈变量无符号整数5,&栈变量无符号整数3,&栈变量无符号长整数3,&栈变量无符号整数1,栈变量数组1);
  if ((栈变量指针1 != (longlong *)0x0) && (栈变量指针2 != (longlong *)0x0)) {
    if (栈变量字符3 != '\0') {
      激活渲染特性();
    }
    应用渲染设置(栈变量字节数组1);
    if (栈变量字符1 != '\0') {
      清理渲染资源(栈变量指针1);
    }
    if (栈变量字符2 != '\0') {
      清理渲染资源(栈变量指针1);
    }
    临时指针1 = 栈变量指针2;
    栈变量指针11 = 栈变量指针2;
    栈变量指针2 = (longlong *)0x0;
    if (临时指针1 != (longlong *)0x0) {
      (**(code **)(*临时指针1 + 0x38))();
    }
  }
  临时无符号整数1 = 应用渲染设置(栈变量字节数组1);
  if (栈变量指针3 != (longlong *)0x0) {
    临时无符号整数1 = (**(code **)(*栈变量指针3 + 0x38))();
  }
  if (栈变量指针2 != (longlong *)0x0) {
    临时无符号整数1 = (**(code **)(*栈变量指针2 + 0x38))();
  }
  if (栈变量指针1 != (longlong *)0x0) {
    临时无符号整数1 = (**(code **)(*栈变量指针1 + 0x38))();
  }
  临时无符号长整数1 = 创建渲染对象(临时无符号整数1,&栈变量指针12,&引擎初始化数据7,0);
  添加到渲染管线(临时指针2,临时无符号长整数1);
  if (栈变量指针12 != (longlong *)0x0) {
    (**(code **)(*栈变量指针12 + 0x38))();
  }
  *(int8_t *)((longlong)临时指针2 + 0xff) = 0;
  临时无符号长整数1 = 引擎上下文[0x4fd];
  栈变量指针4 = 临时指针2;
  (**(code **)(*临时指针2 + 0x28))(临时指针2);
  初始化渲染资源(临时无符号长整数1,0,&栈变量指针4,1);
  栈变量无符号长整数4 = 0;
  栈变量无符号长整数5 = 0;
  栈变量无符号长整数6 = 0;
  栈变量无符号整数9 = 3;
  临时未定义指针2 = 引擎上下文 + 0xc061;
  do {
    if (*(int *)(临时未定义指针2 + 2) != 0) {
      初始化渲染通道(引擎上下文 + 0xc060,临时未定义指针2);
    }
    临时无符号整数2 = 临时无符号整数2 + 1;
    临时未定义指针2 = 临时未定义指针2 + 4;
  } while (临时无符号整数2 < 0x20);
  清理临时资源(&栈变量无符号长整数4);
  临时无符号长整数1 = 分配内存池(内存池基地址,0x2f0,0x10,3);
  临时无符号长整数1 = 初始化着色器系统(临时无符号长整数1,4);
  初始化着色器管理(引擎上下文 + 0x12,临时无符号长整数1);
  引擎上下文[0x13] = 0;
  完成引擎初始化(引擎上下文);
  if (*(char *)((longlong)引擎上下文 + 0x564) != '\0') {
    启动引擎主循环(引擎上下文);
  }
  引擎上下文[0x78] = 0;
  *(int8_t *)(引擎上下文 + 2) = 0;
  引擎上下文[0x6b] = 0;
  *(int32_t *)(引擎上下文 + 0x8a) = *(int32_t *)(系统配置基地址 + 0xe0);
  (**(code **)(*临时指针2 + 0x38))(临时指针2);
  return 引擎上下文;
}



// 函数: 释放引擎资源
uint64_t 释放引擎资源(uint64_t 资源句柄,ulonglong 释放标志)

{
  清理引擎内部资源();
  if ((释放标志 & 1) != 0) {
    free(资源句柄,0x60d30);
  }
  return 资源句柄;
}



// 函数: 清理引擎数据结构
void 清理引擎数据结构(longlong 引擎实例)

{
  longlong 资源索引;
  uint64_t *资源指针;
  ulonglong 资源数量;
  ulonglong 循环索引;
  
  资源数量 = *(ulonglong *)(引擎实例 + 0x10);
  资源索引 = *(longlong *)(引擎实例 + 8);
  循环索引 = 0;
  if (资源数量 != 0) {
    do {
      资源指针 = *(uint64_t **)(资源索引 + 循环索引 * 8);
      if (资源指针 != (uint64_t *)0x0) {
        *资源指针 = &引擎初始化数据4;
                    // WARNING: Subroutine does not return
        触发错误处理();
      }
      *(uint64_t *)(资源索引 + 循环索引 * 8) = 0;
      循环索引 = 循环索引 + 1;
    } while (循环索引 < 资源数量);
    资源数量 = *(ulonglong *)(引擎实例 + 0x10);
  }
  *(uint64_t *)(引擎实例 + 0x18) = 0;
  if ((1 < 资源数量) && (*(longlong *)(引擎实例 + 8) != 0)) {
                    // WARNING: Subroutine does not return
    触发错误处理();
  }
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address



// 函数: 释放引擎组件
void 释放引擎组件(longlong 引擎实例)

{
  longlong *组件指针;
  uint64_t *资源指针;
  longlong 组件句柄;
  longlong *临时栈指针1;
  longlong **临时栈指针2;
  
  组件句柄 = 全局配置地址2;
  组件指针 = *(longlong **)(引擎实例 + 8);
  if ((组件指针 != (longlong *)0x0) && (全局配置地址2 != 0)) {
    临时栈指针2 = &临时栈指针1;
    临时栈指针1 = 组件指针;
    (**(code **)(*组件指针 + 0x28))();
    清理组件资源(组件句柄,&临时栈指针1,0);
  }
  资源指针 = *(uint64_t **)(引擎实例 + 0x10);
  if (资源指针 != (uint64_t *)0x0) {
    组件句柄 = __RTCastToVoid(资源指针);
    (**(code **)*资源指针)(资源指针,0);
    if (组件句柄 != 0) {
                    // WARNING: Subroutine does not return
      触发错误处理(组件句柄);
    }
  }
  *(uint64_t *)(引擎实例 + 0x10) = 0;
  组件指针 = *(longlong **)(引擎实例 + 8);
  if (组件指针 != (longlong *)0x0) {
    (**(code **)(*组件指针 + 0x38))();
  }
  return;
}



// 函数: 重置引擎状态
void 重置引擎状态(longlong 引擎实例)

{
  *(uint64_t *)(引擎实例 + 0x40) = &引擎初始化数据5;
  if (*(longlong *)(引擎实例 + 0x48) != 0) {
                    // WARNING: Subroutine does not return
    触发错误处理();
  }
  *(uint64_t *)(引擎实例 + 0x48) = 0;
  *(int32_t *)(引擎实例 + 0x58) = 0;
  *(uint64_t *)(引擎实例 + 0x40) = &引擎初始化数据4;
  return;
}



// 函数: 初始化引擎资源管理器
void 初始化引擎资源管理器(longlong 引擎实例)

{
  uint64_t 临时变量;
  
  临时变量 = 0xfffffffffffffffe;
  清理资源缓存(引擎实例 + 0x1218);
  初始化资源分配器(引擎实例,0x908,2,清理资源缓存,临时变量);
  return;
}



// 函数: 重置引擎配置
uint64_t * 重置引擎配置(uint64_t *配置指针)

{
  *配置指针 = 0;
  配置指针[1] = 0;
  配置指针[2] = 0;
  *(int32_t *)(配置指针 + 3) = 3;
  配置指针[6] = 0;
  配置指针[7] = 0;
  配置指针[8] = 0;
  return 配置指针;
}



// 函数: 清理引擎缓存
void 清理引擎缓存(uint64_t 引擎实例)

{
  初始化资源分配器(引擎实例,0x2408,1,初始化函数指针4,0xfffffffffffffffe);
  return;
}



// 函数: 销毁引擎实例
void 销毁引擎实例(longlong 引擎实例)

{
  if (*(longlong *)(引擎实例 + 0xb0) != 0) {
                    // WARNING: Subroutine does not return
    触发错误处理();
  }
  if (*(longlong *)(引擎实例 + 0x90) != 0) {
                    // WARNING: Subroutine does not return
    触发错误处理();
  }
  _Mtx_destroy_in_situ();
  初始化数据结构(引擎实例 + 0x30,8,2,清理函数指针1);
  if (*(longlong **)(引擎实例 + 0x20) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(引擎实例 + 0x20) + 0x38))();
  }
  if (*(longlong **)(引擎实例 + 0x18) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(引擎实例 + 0x18) + 0x38))();
  }
  if (*(longlong **)(引擎实例 + 0x10) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(引擎实例 + 0x10) + 0x38))();
  }
  return;
}



// 函数: 释放引擎内存
void 释放引擎内存(longlong 引擎实例)

{
  初始化资源分配器(引擎实例 + 8,0x20,0x20,内存释放函数,0xfffffffffffffffe);
  return;
}


