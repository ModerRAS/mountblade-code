#include "TaleWorlds.Native.Split.h"

// 01_initialization.c - 初始化系统代码（已美化变量名和函数名）
// 美化内容：
// - 将SystemFunctionxxxxx函数替换为语义化名称如InitializeAudioSystem、InitializeVideoSystem等
// - 将通用变量名如auVar1、bVar31等替换为语义化名称如audio_data_buffer、system_initialization_flag等
// - 将指针变量名如pppppppuVar1替换为语义化名称如system_pointer_chain等
// - 将bVar13-50、audio_buffer_temp-47、resource_process_pointer、pauVar35-42等变量替换为语义化名称如module_initialization_flag、system_validation_flag等
// - 将SystemFunction_xx_xx函数替换为语义化名称如InitializeSystemDataNode15、InitializeSystemModule1等
// - 将系统初始化相关函数按功能分类为数据节点初始化、模块初始化、系统配置等
// - 将剩余的SystemFunction函数名替换为语义化名称如GetSystemPointerData、InitializeAudioHardware、HandleSystemException等
// - 将栈变量名如fStack_b8、uStack0000000000000030等替换为语义化名称如init_float_stack_b8、init_uint_stack_30等
// - 保持代码语义不变，仅提高可读性和维护性
// - 将系统节点标识符十六进制常量替换为语义化名称如SYSTEM_NODE_ID_AUDIO_PROCESSOR_1等
// void InitializeGameData(void)

// 地址常量定义
#define AUDIO_SYSTEM_BASE_ADDR 0x180c91700
#define INPUT_SYSTEM_BASE_ADDR 0x180c91800
#define MUTEX_SYSTEM_ADDR 0x180c91910
#define MAIN_MUTEX_ADDR 0x180c91970
#define CONDITION_VARIABLE_ADDR 0x180c91240
#define SYSTEM_CLEANUP_ADDR 0x180c911a0
#define GRAPHICS_DATA_ADDR GRAPHICS_DATA_START_ADDR
#define GRAPHICS_DATA_END_ADDR 0x180c8ea70
#define RENDER_DATA_ADDR RENDER_DATA_START_ADDR
#define MAX_SEMAPHORE_COUNT 0x7fffffff
#define INVALID_HANDLE_VALUE 0xfffffffffffffffe

// 系统互斥锁地址常量
#define INPUT_MUTEX_ADDR 0x180c966f0
#define NETWORK_MUTEX_ADDR 0x180c96740
#define DATABASE_MUTEX_ADDR 0x180c96690
#define NETWORK_SYSTEM_MUTEX_ADDR 0x180c962c0
#define NETWORK_SYSTEM_INIT_ADDR_1 0x180c96248
#define NETWORK_SYSTEM_INIT_ADDR_2 0x180c96298
#define AUDIO_SYSTEM_INIT_ADDR 0x180d49d50

// 数据区域地址常量
#define GRAPHICS_DATA_START_ADDR 0x180c8aa70
#define GRAPHICS_DATA_END_ADDR 0x180c8ea71
#define RENDER_DATA_START_ADDR 0x180c8eb70

// 数据结构常量定义
#define SYSTEM_NODE_HEADER_SIZE 8
#define NODE_INITIALIZED_OFFSET 0
#define SYSTEM_DATA_COMPARE_SIZE 8
#define FLOAT_ARRAY_SIZE 0x40
#define FLOAT_ARRAY_ELEMENT_SIZE 0x40

// 系统节点标识符常量定义
#define SYSTEM_NODE_ID_AUDIO_PROCESSOR_1 SYSTEM_NODE_ID_AUDIO_PROCESSOR_1
#define SYSTEM_NODE_ID_AUDIO_PROCESSOR_2 SYSTEM_NODE_ID_AUDIO_PROCESSOR_2
#define SYSTEM_NODE_ID_VIDEO_DECODER_1 SYSTEM_NODE_ID_VIDEO_DECODER_1
#define SYSTEM_NODE_ID_VIDEO_DECODER_2 SYSTEM_NODE_ID_VIDEO_DECODER_2
#define SYSTEM_NODE_ID_GRAPHICS_RENDERER_1 SYSTEM_NODE_ID_GRAPHICS_RENDERER_1
#define SYSTEM_NODE_ID_GRAPHICS_RENDERER_2 SYSTEM_NODE_ID_GRAPHICS_RENDERER_2
#define SYSTEM_NODE_ID_INPUT_HANDLER_1 SYSTEM_NODE_ID_INPUT_HANDLER_1
#define SYSTEM_NODE_ID_INPUT_HANDLER_2 SYSTEM_NODE_ID_INPUT_HANDLER_2
#define SYSTEM_NODE_ID_NETWORK_MANAGER_1 SYSTEM_NODE_ID_NETWORK_MANAGER_1
#define SYSTEM_NODE_ID_NETWORK_MANAGER_2 SYSTEM_NODE_ID_NETWORK_MANAGER_2
#define SYSTEM_NODE_ID_MEMORY_CONTROLLER_1 SYSTEM_NODE_ID_MEMORY_CONTROLLER_1
#define SYSTEM_NODE_ID_MEMORY_CONTROLLER_2 SYSTEM_NODE_ID_MEMORY_CONTROLLER_2
#define SYSTEM_NODE_ID_FILE_SYSTEM_1 SYSTEM_NODE_ID_FILE_SYSTEM_1
#define SYSTEM_NODE_ID_FILE_SYSTEM_2 SYSTEM_NODE_ID_FILE_SYSTEM_2
#define SYSTEM_NODE_ID_SECURITY_MODULE_1 SYSTEM_NODE_ID_SECURITY_MODULE_1
#define SYSTEM_NODE_ID_SECURITY_MODULE_2 SYSTEM_NODE_ID_SECURITY_MODULE_2
#define SYSTEM_NODE_ID_THREAD_SCHEDULER_1 SYSTEM_NODE_ID_THREAD_SCHEDULER_1
#define SYSTEM_NODE_ID_THREAD_SCHEDULER_2 SYSTEM_NODE_ID_THREAD_SCHEDULER_2
#define SYSTEM_NODE_ID_CONFIG_SYSTEM_1 SYSTEM_NODE_ID_CONFIG_SYSTEM_1
#define SYSTEM_NODE_ID_CONFIG_SYSTEM_2 SYSTEM_NODE_ID_CONFIG_SYSTEM_2
#define SYSTEM_NODE_ID_RESOURCE_MANAGER_1 SYSTEM_NODE_ID_RESOURCE_MANAGER_1
#define SYSTEM_NODE_ID_RESOURCE_MANAGER_2 SYSTEM_NODE_ID_RESOURCE_MANAGER_2
#define SYSTEM_NODE_ID_EVENT_HANDLER_1 SYSTEM_NODE_ID_EVENT_HANDLER_1
#define SYSTEM_NODE_ID_EVENT_HANDLER_2 SYSTEM_NODE_ID_EVENT_HANDLER_2
#define SYSTEM_NODE_ID_DATABASE_SYSTEM_1 SYSTEM_NODE_ID_DATABASE_SYSTEM_1
#define SYSTEM_NODE_ID_DATABASE_SYSTEM_2 SYSTEM_NODE_ID_DATABASE_SYSTEM_2
#define SYSTEM_NODE_ID_PHYSICS_ENGINE_1 SYSTEM_NODE_ID_PHYSICS_ENGINE_1
#define SYSTEM_NODE_ID_PHYSICS_ENGINE_2 SYSTEM_NODE_ID_PHYSICS_ENGINE_2
#define SYSTEM_NODE_ID_AUDIO_ENGINE_1 SYSTEM_NODE_ID_AUDIO_ENGINE_1
#define SYSTEM_NODE_ID_AUDIO_ENGINE_2 SYSTEM_NODE_ID_AUDIO_ENGINE_2
#define SYSTEM_NODE_ID_VIDEO_ENGINE_1 SYSTEM_NODE_ID_VIDEO_ENGINE_1
#define SYSTEM_NODE_ID_VIDEO_ENGINE_2 SYSTEM_NODE_ID_VIDEO_ENGINE_2
#define SYSTEM_NODE_ID_CORE_ENGINE_1 SYSTEM_NODE_ID_CORE_ENGINE_1
#define SYSTEM_NODE_ID_CORE_ENGINE_2 SYSTEM_NODE_ID_CORE_ENGINE_2
#define SYSTEM_NODE_ID_RENDER_ENGINE_1 SYSTEM_NODE_ID_RENDER_ENGINE_1
#define SYSTEM_NODE_ID_RENDER_ENGINE_2 SYSTEM_NODE_ID_RENDER_ENGINE_2
#define SYSTEM_NODE_ID_NETWORK_ENGINE_1 SYSTEM_NODE_ID_NETWORK_ENGINE_1
#define SYSTEM_NODE_ID_NETWORK_ENGINE_2 SYSTEM_NODE_ID_NETWORK_ENGINE_2
#define SYSTEM_NODE_ID_IO_ENGINE_1 SYSTEM_NODE_ID_IO_ENGINE_1
#define SYSTEM_NODE_ID_IO_ENGINE_2 SYSTEM_NODE_ID_IO_ENGINE_2
#define SYSTEM_NODE_ID_DATA_ENGINE_1 SYSTEM_NODE_ID_DATA_ENGINE_1
#define SYSTEM_NODE_ID_DATA_ENGINE_2 SYSTEM_NODE_ID_DATA_ENGINE_2
#define SYSTEM_NODE_ID_UTIL_ENGINE_1 SYSTEM_NODE_ID_UTIL_ENGINE_1
#define SYSTEM_NODE_ID_UTIL_ENGINE_2 SYSTEM_NODE_ID_UTIL_ENGINE_2
#define SYSTEM_NODE_ID_UI_ENGINE_1 SYSTEM_NODE_ID_UI_ENGINE_1
#define SYSTEM_NODE_ID_UI_ENGINE_2 SYSTEM_NODE_ID_UI_ENGINE_2

// 模块类型常量定义
#define MODULE_TYPE_AUDIO_INIT 0xb
#define MODULE_TYPE_VIDEO_INIT 0x9
#define MODULE_TYPE_INPUT_INIT 0x9
#define MODULE_TYPE_NETWORK_INIT 0xb
#define MODULE_TYPE_CONFIG_INIT 0xc
#define MODULE_TYPE_FONT_INIT 0xe
#define MODULE_TYPE_SHADER_INIT 0x1c
#define MODULE_TYPE_PHYSICS_INIT 0x15
#define MODULE_TYPE_UI_INIT 0x16
#define MODULE_TYPE_SECURITY_INIT 0x1a
#define MODULE_TYPE_AUTHENTICATION_INIT 0x13
#define MODULE_TYPE_RESOURCE_INIT 0xd
#define MODULE_TYPE_TEXTURE_INIT 0xb
#define MODULE_TYPE_STRING_MANAGER_INIT 0x1c

void InitializeGameData(void);

void* g_game_data_structure;

void* g_game_padding_data_1;

void* g_game_config_data;

void* g_game_padding_data_2;

void* g_game_state_data;

void* g_game_padding_data_3;

void* g_game_memory_data;

void* g_game_padding_data_4;

void* g_game_render_data;

void* g_game_padding_data_5;

void* g_game_audio_data;

void* g_game_padding_data_6;

void* g_game_network_data;

void* g_game_padding_data_7;

void* g_game_input_data;
// function_ptr InitializeGameEngine;

void* InitializeGameEngine;

void* g_engine_padding_data_1;

void* g_engine_config_data;

void* g_engine_padding_data_2;

void* g_engine_state_data;

void* g_engine_memory_pool;

void* g_engine_render_context;

void* g_engine_audio_context;
// function_ptr InitializeGraphicsEngine;

void* InitializeGraphicsEngine;

void* g_graphics_config;
// function_ptr InitializeAudioEngine;

void* InitializeAudioEngine;

void* g_audio_config;
// function_ptr InitializeInputEngine;

void* InitializeInputEngine;

void* g_input_system;
// function_ptr InitializeNetworkEngine;

void* InitializeNetworkEngine;

void* g_network_socket;

void* g_network_buffer;

void* g_network_config;

void* g_network_state;

void* g_network_timeout;

void* g_network_connection;

void* g_network_buffer_size;

void* g_network_packet;

void* InitializeSubSystemEngine;

void* g_system_padding_data;

void* g_system_memory_pool;

uint64_t g_system_flags;
void* g_system_state;

void* g_system_config;

void* g_system_error;

void* g_system_debug;
// 系统资源初始化函数
void* InitializeSystemResources;

void* g_global_game_data_cache;
// 核心组件初始化函数
void InitializeCoreComponents(void);
// 内存管理器设置函数
void SetupMemoryManager(void);

void** g_system_startup_data;

void* g_engine_context;

void* g_resource_manager_main;

void* g_memory_pool_main;

void* g_graphics_context_main;

void* _guard_check_icall;
// 系统安全检查函数
void* SystemSecurityCheck;
// 引擎初始化完成函数
void CompleteEngineInitialization(void);

void* g_system_heap;

void* g_module_registry;

void* g_service_manager;

void* g_event_system;

void* g_message_queue;

void* g_thread_pool;

void* g_task_scheduler;

void* g_file_system;

void* g_config_manager;

void* g_graphics_driver;

void* g_audio_driver;

void* g_input_driver_system;

void* g_network_driver_system;

void* g_resource_manager;

void* g_memory_manager;

void* g_global_scene_data;

void* g_global_texture_data;

void* g_static_zero_pointer;

void* g_global_shader_data;

void* g_static_init_data;

void* g_global_render_data;

void* g_static_render_buffer;

void* g_global_audio_buffer;

void* g_static_audio_cache;

void* g_static_input_buffer;

void* g_global_input_data;

void* g_global_network_data;

void* g_global_physics_data;

void* g_global_animation_data;

int g_initialization_status;
longlong g_system_memory_size;
void* g_global_ui_data;
// function_ptr g_function_initialize_game;

void InitializeGameFramework;

void* g_global_save_data;

void* g_global_load_data;

void* g_static_temp_buffer;

void* g_global_debug_data;

void* g_global_log_data;

void* g_global_system_registry;

void* g_global_module_loader;

void* g_global_service_locator;

void* g_global_resource_cache;

void* g_static_memory_pool;

void* g_global_texture_cache;

void* g_global_shader_cache;

void* g_global_mesh_cache;

void* g_global_animation_cache;

void* g_global_audio_cache;

void* g_global_font_cache;

void* g_global_ui_cache;

void* g_static_config_data;

void* g_global_engine_state;

void* g_global_render_state;

void* g_global_physics_state;

void* g_global_audio_state;

void* g_global_input_state;

void* g_global_network_state;

void* g_global_ui_state;

void* g_global_game_state;

void* g_global_scene_state;

void* g_global_entity_state;

void* g_global_camera_state;

void* g_global_lighting_state;

void* g_global_particle_state;

void* g_global_effect_state;

void* g_static_thread_pool;

void* g_static_task_queue;

char g_system_initialized_flag;

char g_engine_ready_flag;
char g_graphics_initialized_flag;
char g_audio_initialized_flag;
void* g_global_memory_allocator;

void* g_global_file_system;

void* g_global_config_system;

void* g_global_debug_system;

void* g_global_logging_system;

void* g_static_profiler_data;

void* g_global_performance_monitor;

void* g_global_memory_tracker;

void* g_global_resource_monitor;

void* g_global_network_manager;

void* g_global_audio_manager;

void* g_global_input_manager;

void* g_global_render_manager;

void* g_global_physics_manager;

void* g_global_entity_manager;

void* g_global_scene_manager;

void* g_global_ui_manager;

void* g_global_system_context;

void* g_global_engine_context;

void* g_global_resource_pool;

void* g_global_memory_pool;

void* g_global_ai_system;

void* g_static_config_buffer;

void* g_static_temp_buffer;

void* g_global_physics_system;

void* g_global_render_system;

longlong g_global_system_memory_base;
void* g_static_zero_buffer;

void* g_global_input_system;

void* g_global_scene_manager;

ulonglong g_global_long_000001c8;

ulonglong g_global_long_000001d0;
ulonglong g_global_long_000001d8;
uint64_t g_system_flag_1;
uint64_t g_system_flag_2;
uint64_t g_system_flag_3;
longlong g_global_system_memory_size;
uint8_t g_system_audio_initialized;
void* g_global_entity_manager;

void* g_global_component_manager;

void* g_global_game_manager;

void* g_global_font_manager;

char g_system_status_flag;
void* g_global_save_manager;

void* g_global_load_manager;

void* g_global_config_manager;

void* g_global_touch_manager;

uint8_t g_system_video_initialized;
void* g_global_settings_manager;

void* g_global_options_manager;

void* g_global_navigation_manager;

void* g_global_controls_manager;

char g_system_status_flag;
void* g_global_task_manager;

void* g_global_schedule_manager;

void* g_global_equipment_manager;

void* g_global_keybind_manager;

void* g_global_display_manager;

void* g_global_graphics_manager;

void* g_global_level_manager;

void* g_global_quest_manager;

void* g_global_audio_manager;

char g_system_status_flag;

void* g_static_system_manager;

void* g_global_sound_manager;

void* g_static_music_manager;

void* g_global_player_manager;

void* g_global_effect_manager;

void* g_global_input_manager;

void* g_global_network_manager;

void* g_global_texture_manager;

void* g_global_price_manager;

void* g_global_shader_manager;

void* g_global_render_context;

void* g_global_display_config;

void* g_global_graphics_state;

void* g_global_viewport_config;

void* g_global_frame_buffer;

void* g_global_reserved_buffer_large;

void* g_global_depth_buffer;

void* g_global_storage_system;

void* g_global_reserved_buffer_small;

void* g_global_weapon_system;

void* g_global_stencil_buffer;

void* g_global_render_target;

void* g_global_vertex_buffer;

void* g_global_index_buffer;

void* g_global_uniform_buffer;
// function_ptr g_function_create_texture;

void* g_function_create_texture;

void* g_global_temp_buffer_98;

void* g_global_storage_buffer;

void* g_global_texture_buffer;

void* g_static_render_target;

void* g_global_temp_buffer_140;

void* g_static_frame_buffer;
// function_ptr g_function_load_shader;

void* g_function_load_shader;

void* g_global_shader_buffer;
// function_ptr g_function_compile_shader;

void* g_function_compile_shader;
// function_ptr g_function_link_program;

void* g_function_link_program;
// function_ptr g_function_validate_program;

void* g_function_validate_program;

void* g_global_data_1800e7f50;

void* g_global_data_1800e7f80;

void* g_global_data_1800e7fb0;

void* g_global_data_1800e7fe0;

void* g_global_data_1800e8020;

void* g_global_data_1801b9b60;
// function_ptr g_function_create_buffer;

void* g_function_create_buffer;

void* g_global_high_memory_data;

void* g_global_high_memory_data;

void* g_global_high_memory_data;

void* g_global_high_memory_data;

char g_system_video_initialized;

void* g_global_high_memory_data;

void* g_global_high_memory_data;

void* g_static_data_18098c090;

void* g_global_high_memory_data;

void* g_global_high_memory_data;

void* g_global_high_memory_data;

void* g_global_high_memory_data;

void* g_static_data_180d49288;

void* g_static_data_180d49290;

void* g_static_data_180d49298;

void* g_static_data_180d492a0;

void* g_static_data_180d492a8;

void* g_static_data_180d492e8;

void* g_static_data_180d492f0;

void* g_static_data_180d492f8;

void* g_static_data_180d49300;

void* g_static_data_180d49340;

void* g_static_data_180d49348;

void* g_static_data_180d49350;

void* g_static_data_180d49358;

void* g_static_data_180d49398;

void* g_static_data_180d493a0;

void* g_static_data_180d493a8;

void* g_static_data_180d493b0;

void* g_global_data_180941ab0;

void* g_static_data_180a06990;

void* g_static_data_180a06998;

void* g_static_data_180a069a0;

void* g_static_data_180a069a8;

void* g_global_data_18014f7f0;
// function_ptr g_function_allocate_memory;

void* g_function_allocate_memory;
// function_ptr g_function_free_memory;

void* g_function_free_memory;

void* g_global_data_180a08fd0;

void* g_global_data_180a09008;

void* g_global_data_180a09048;

void* g_global_data_180a09078;

void* g_global_data_180a090c0;

void* g_global_data_180a090e8;

void* g_global_data_180a09118;

void* g_global_data_180a09140;

void* g_global_data_180a094b0;

void* g_global_data_180a094e8;

void* g_global_data_180a09520;

void* g_global_data_180a09548;

void* g_global_data_180a09578;

void* g_global_data_180a095b0;

void* g_global_data_180a095d0;

void* g_global_data_180a095f0;

void* g_global_data_180a09198;

void* g_global_data_180a09220;

void* g_global_data_180a09158;

void* g_global_data_180a091c8;

void* g_global_data_180a091f0;

void* g_global_data_180a09280;

void* g_global_data_180a09248;

void* g_global_data_180a193d8;

void* g_global_data_180a19458;

void* g_global_data_180a09420;

void* g_global_data_180946958;

void* g_static_data_180a089b0;

void* g_global_data_1800830b0;

void* g_global_data_1800830c0;

void* g_global_data_180083130;
// function_ptr g_function_reallocate_memory;

void* g_function_reallocate_memory;

void* g_global_data_180a0c9a0;

void* g_global_data_180a0cb40;

void* g_global_data_180a0c808;

void* g_global_data_180a0c9b0;

void* g_global_data_180a0c7d8;

void* g_global_data_180a0c7f0;

void* g_global_data_180a0c508;
// function_ptr g_function_copy_memory;

void* g_function_copy_memory;
// function_ptr g_function_fill_memory;

void* g_function_fill_memory;
// function_ptr g_function_compare_memory;

void* g_function_compare_memory;
// function_ptr g_function_find_memory;

void* g_function_find_memory;

void* g_global_data_180a13ad0;

void* g_static_data_180a0ba58;

void* g_static_data_180a0d580;

void* g_global_data_180a13aa8;

void* g_global_data_180a13ab8;

void* g_global_data_180a13ae8;

void* g_global_data_180a13bb8;

void* g_global_data_180a13b30;

void* g_global_data_180a13b70;

void* g_static_data_180a13c30;

void* g_global_data_180a03108;

void* g_global_data_180a13c08;

void* g_global_data_180a13c48;

void* g_global_data_180a12ea0;

void* g_static_data_180a1388c;

void* g_global_data_180a13c2c;

void* g_global_data_180a13c70;

void* g_global_data_180a13c88;

void* g_global_data_180a13c94;

void* g_global_data_180a13ca0;

void* g_global_data_180a13cac;

void* g_global_data_180239520;
// function_ptr g_function_lock_memory;

void* g_function_lock_memory;

void* g_global_data_180a172e0;

void* g_global_data_180a17308;

void* g_global_data_180a17398;

void* g_global_data_180a173f0;

void* g_global_data_180a17400;

void* g_global_data_1802a11b8;

char g_system_flag_char;

char g_system_data_ready;
void* g_global_data_1802a1b10;

void* g_global_data_180a17770;

void* g_global_data_180a17798;

void* g_global_data_180a177c8;

void* g_global_data_180a177f0;

uint8_t g_system_data_ready;

void* g_global_data_1802a1d4c;

void* g_static_data_180bf5c18;

void* g_static_data_180bf5c28;

void* g_global_data_180a02b03;

void* g_global_data_180a17818;

void* g_global_data_180a27cb0;

uint32_t g_config_screen_width;
uint32_t g_config_screen_dimension;
uint32_t g_config_screen_dimension;
void* g_static_data_180c8ecd0;

char g_system_data_status;

void* g_global_data_18042d5d0;

void* g_global_data_180a17830;

void* g_global_data_180a17880;

void* g_static_data_180c8ecb0;

void* g_static_data_180c8eca8;

void* g_global_data_180a178bc;

void* g_global_data_180a178f8;

void* g_global_data_180a17900;

void* g_global_data_180a17a18;

void* g_global_data_180a17a68;

char g_system_data_status;
void* g_global_data_180a178c8;

void* g_global_data_180a178f0;

void* g_global_data_180a17910;

void* g_global_data_180a17940;

void* g_global_data_180a17960;

void* g_global_data_180a17980;

void* g_global_data_180a179a8;

char g_system_data_status;

void* g_global_data_180a179d0;

void* g_global_data_180a17a38;

void* g_global_data_180a17ab0;

void* g_global_data_180a17b38;

void* g_global_data_180a06428;

void* g_global_data_180a06438;

void* g_global_data_180a17b78;

void* g_global_data_180a17b88;

void* g_global_data_180a17b98;

void* g_global_data_180a17ba0;

void* g_global_data_180a17bb0;

void* g_global_data_180a17bc0;

void* g_global_data_180a17bd8;

void* g_global_data_180a17be8;

void* g_global_data_180a17bf8;

void* g_global_data_180a17d90;

void* g_global_data_180a17c48;

void* g_global_data_180a17c60;

void* g_global_data_180a17c80;

void* g_global_data_180a17c90;

void* g_global_data_180a17cb8;

void* g_global_data_180a17cc8;

void* g_global_data_180a17cd8;

void* g_global_data_180a17d00;

void* g_global_data_180a17d28;

void* g_global_data_180a17d50;

void* g_global_data_180a17da8;

void* g_global_data_180a17e18;

void* g_global_data_180a18648;

void* g_global_data_180a17e68;

void* g_global_data_180a17e78;

void* g_global_data_180a17ea8;

void* g_global_data_180a17eb0;

void* g_global_data_180a17ec0;

void* g_global_data_180a17f00;

void* g_global_data_180a17f58;

void* g_global_data_180a17f90;

void* g_static_data_180a09dc0;

void* g_global_data_180a17fe0;

void* g_global_data_180a15728;

void* g_global_data_180a15748;

void* g_global_data_180a17fe8;

void* g_global_data_180a157f0;

void* g_global_data_180a15828;

void* g_global_data_180a15830;

void* g_global_data_180a18010;

void* g_global_data_180a157a8;

void* g_global_data_180a157c8;

void* g_global_data_180a04c44;

void* g_global_data_180a06420;

void* g_global_data_180a15750;

void* g_static_data_180a157e0;

void* g_static_data_180a157e4;

void* g_global_data_180a157e8;

void* g_global_data_180a157f4;

void* g_global_data_180a157fc;

void* g_global_data_180a18048;

void* g_global_data_180a18590;

void* g_global_data_180a18050;

void* g_global_data_180a18060;

void* g_global_data_180a18088;

void* g_global_data_180a18098;

void* g_global_data_180a180d0;

void* g_global_data_180a18038;

void* g_global_data_180a18528;

void* g_global_data_180a18120;

void* g_static_data_180d48db0;

void* g_static_data_180d48db8;

void* g_static_data_180d48dc0;

void* g_static_data_180d48dc8;

void* g_static_data_180d48dd0;
// function_ptr g_function_protect_memory;

void* g_function_protect_memory;

void* g_global_data_180a25980;

void* g_static_data_180bfc170;

void* g_global_data_180a258e0;

void* g_global_data_180a258ec;

void* g_global_data_180a258f8;

void* g_global_data_180a259c0;

void* g_global_data_180a259c8;

void* g_global_data_180a259e0;

void* g_global_data_180a25a10;

void* g_static_data_180a0af70;

void* g_global_data_180a25998;

void* g_global_data_180a259a8;

void* g_global_data_180a25a74;

void* g_global_data_180a25a28;

void* g_global_data_180a25a80;

void* g_global_data_180a25a98;

void* g_static_data_180c92498;

void* g_global_data_180a25a50;

void* g_global_data_180a25a60;

void* g_global_data_180a25aa0;

void* g_global_data_180a25ab0;

void* g_global_data_180a25ae8;

void* g_global_data_180a25af0;

void* g_global_data_180a25b00;

void* g_global_system_data;

void* g_global_system_data;

void* g_global_system_data;

void* g_global_system_data;

void* g_global_system_data;

void* g_global_data_180a25b40;

void* g_global_data_180a25b48;

void* g_global_data_180a25b60;

void* g_global_data_180a25b6c;

void* g_global_data_180a25b80;

void* g_global_data_180a25b88;

void* g_global_data_180a25bc8;

void* g_global_data_180a25bd4;

void* g_global_data_180a25be0;

void* g_global_data_180a25c58;

void* g_global_data_180a25c84;

void* g_global_data_180a25c90;

void* g_global_data_180a2b468;

void* g_global_data_180a25c04;

void* g_global_data_180a25c10;

void* g_global_data_180a25c20;

void* g_global_data_180a25ca0;

void* g_global_data_180a25cdc;

void* g_global_data_180a0dcf8;

void* g_global_data_180a25bfc;

void* g_global_data_180a25ce8;

void* g_global_data_180a25cf8;

void* g_static_data_180a25d28;

void* g_static_data_180a0209c;

void* g_static_data_180a022f0;

void* g_static_data_180a02320;

void* g_global_data_180a25ca8;

void* g_static_data_180a25cb4;

void* g_global_data_180a25cc0;

void* g_global_data_180a25cd0;

void* g_global_data_180a25d78;

void* g_global_data_180a25d90;

void* g_global_data_180a25d98;

void* g_global_data_180a25da8;

void* g_static_data_180a02030;

void* g_static_data_180a0206c;

void* g_static_data_180a02080;

void* g_global_data_180a25e58;

void* g_global_data_180a25e70;

void* g_global_data_180a25e80;

void* g_global_data_180a25e90;

void* g_global_data_180a25ebc;

void* g_global_data_180a25ec4;

void* g_global_data_180a25ed0;

void* g_global_data_180a25ee0;

void* g_global_data_180a25ef0;

void* g_global_data_180a25ef8;

void* g_global_data_180a25900;

void* g_global_data_180a25ad0;

void* g_global_data_180a25a6c;
// function_ptr g_function_unlock_memory;

void* g_function_unlock_memory;
// 数据结构初始化函数 - 原名：InitializeSystemStateManager

void InitializeSystemData(void)

{
  char isInitialized;
  uint64_t *rootNode;
  int compareResult;
  longlong *dataPointer;
  longlong allocationSize;
  uint64_t *currentNode;
  uint64_t *previousNode;
  uint64_t *nextNode;
  uint64_t *newNode;
  code *initializationFunction;

  dataPointer = (longlong *)GetSystemDataBase();
  rootNode = (uint64_t *)*dataPointer;
  isInitialized = *(char *)((longlong)rootNode[1] + NODE_INITIALIZED_OFFSET);
  initializationFunction = InitializeGameData;
  previousNode = rootNode;
  currentNode = (uint64_t *)rootNode[1];
  while (isInitialized == '\0') {
    compareResult = memcmp(currentNode + 4,&gameDataDefaultPattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compareResult < 0) {
      nextNode = (uint64_t *)currentNode[2];
      currentNode = previousNode;
    }
    else {
      nextNode = (uint64_t *)*currentNode;
    }
    previousNode = currentNode;
    currentNode = nextNode;
    isInitialized = *(char *)((longlong)nextNode + NODE_INITIALIZED_OFFSET);
  }
  if ((previousNode == rootNode) || (compareResult = memcmp(&gameDataDefaultPattern,previousNode + 4,SYSTEM_DATA_COMPARE_SIZE), compareResult < 0)) {
    allocationSize = AllocateNodeMemory(dataPointer);
    InsertSystemNode(dataPointer,&newNode,previousNode,allocationSize + SYSTEM_NODE_HEADER_SIZE,allocationSize);
    previousNode = newNode;
  }
  previousNode[6] = dataNodeSignaturePrimary;
  previousNode[7] = dataNodeSignatureSecondary;
  previousNode[8] = &defaultInitializationFunction;
  previousNode[9] = 0;
  previousNode[10] = initializationFunction;
  return;
}
// 初始化系统数据结构
void InitializeCoreSystemData(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern1,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern1,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_2;
  node_previous[8] = &systemNode1;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// 初始化链表节点
void InitializeSystemListNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern2,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern2,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_DECODER_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_DECODER_2;
  node_previous[8] = &systemNode2;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// 初始化内存节点函数
void InitializeMemoryNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern3,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern3,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_1;
  node_previous[7] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_2;
  node_previous[8] = &systemNode3;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// 初始化缓冲区节点
void InitializeBufferNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern4,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern4,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_INPUT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_INPUT_HANDLER_2;
  node_previous[8] = &systemNode4;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// 初始化资源节点
void InitializeResourceNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern5,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern5,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_MANAGER_2;
  node_previous[8] = &systemNode5;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// 初始化资源节点（简化版）
void InitializeResourceNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern6,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern6,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_1;
  node_previous[7] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeRenderNode(void)

void InitializeRenderNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_FILE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_FILE_SYSTEM_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAudioNode(void)

void InitializeAudioNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_audio_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_SECURITY_MODULE_1;
  node_previous[7] = SYSTEM_NODE_ID_SECURITY_MODULE_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeNetworkNode(void)

void InitializeNetworkNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_THREAD_SCHEDULER_1;
  node_previous[7] = SYSTEM_NODE_ID_THREAD_SCHEDULER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

// 初始化引擎基础数据结构
int InitializeEngineBaseStructures(void)

{
  longlong initialization_result;

  // 初始化引擎基础数据结构指针
  g_engine_data_pointer = 0;
  g_memory_base_address = 0;
  g_reserved_memory_1 = 0;
  g_render_context_state = 3;
  g_audio_context_state = 0;
  g_system_state_1 = 0;
  g_reserved_memory_2 = 0;
  g_system_state_2 = 3;
  g_resource_pool_pointer = &resourcePoolPointer;
  g_resource_pool_size = 0;
  g_memory_pool_state = 0;
  g_memory_pool_size = 0;
// 初始化引擎状态函数
void InitializeEngineState_18002d150(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern10,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern10,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATABASE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_DATABASE_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}

// 初始化音频系统
int InitializeAudioSystem(void)

{
  longlong init_result;

  initialize_system_component(AUDIO_SYSTEM_BASE_ADDR,SYSTEM_NODE_HEADER_SIZE,8,initialize_audio_subsystem,initialize_graphics_subsystem);
  init_result = execute_system_init(&g_graphics_config_data);
  return (init_result != 0) - 1;
}

// 初始化输入系统
int InitializeInputSystem(void)

{
  longlong init_result;

  initialize_system_component(INPUT_SYSTEM_BASE_ADDR,SYSTEM_NODE_HEADER_SIZE,8,initialize_input_subsystem,initialize_graphics_subsystem);
  init_result = execute_system_init(&g_audio_config_data);
  return (init_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

// 初始化系统信号量
int InitializeSystemSemaphore(void)

{
  longlong semaphore_result;

  g_input_system_handle = CreateSemaphoreW(0,1,MAX_SEMAPHORE_COUNT,0,INVALID_HANDLE_VALUE);
  semaphore_result = execute_system_init(get_semaphore_init_function);
  return (semaphore_result != 0) - 1;
}
// 初始化渲染系统函数
void InitializeRenderingSystem_18002d320(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_input_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern11,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern11,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// 初始化音频系统函数
void InitializeAudioSystem_18002d420(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_network_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern12,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern12,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}

// 初始化互斥锁
int InitializeMutex(uint64_t mutex_address,uint64_t mutex_type,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong mutex_result;

  _Mtx_init_in_situ(MUTEX_SYSTEM_ADDR,2,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  mutex_result = execute_system_init(get_mutex_init_function);
  return (mutex_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeConfigData(void)
void InitializeConfigData(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_AUDIO_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_1,systemParam_,INVALID_HANDLE_VALUE);
  g_system_semaphore_ptr = create_system_object(&thread_parameter_ptr);
  return;
}
// 初始化网络系统函数
void InitializeNetworkSystem_18002d5e0(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_system_phase1(void)

void initialize_system_phase1(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_system_phase2(void)

void initialize_system_phase2(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void initialize_system_phase3(void)

void initialize_system_phase3(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_system_phase4(void)

void initialize_system_phase4(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void initialize_system_phase5(void)

void initialize_system_phase5(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void initialize_system_phase6(void)

void initialize_system_phase6(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void initialize_system_phase7(void)

void initialize_system_phase7(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_4;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern20,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern20,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_PHYSICS_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_PHYSICS_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_system_phase8(void)

void initialize_system_phase8(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_system_phase9(void)

void initialize_system_phase9(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_input_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern11,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern11,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_system_phase10(void)

void initialize_system_phase10(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_network_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern12,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern12,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_graphics_phase1(void)

void initialize_graphics_phase1(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern10,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern10,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATABASE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_DATABASE_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void initialize_graphics_phase2(void)

void initialize_graphics_phase2(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_6;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern22,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern22,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RESOURCE_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_RESOURCE_MANAGER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void initialize_graphics_phase3(void)

void initialize_graphics_phase3(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_7;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern23,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern23,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_EVENT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_EVENT_HANDLER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeSystemDataPtr(void)

{
  longlong long_result;
  uint64_t systemParam_;

  g_system_ptr_1 = &g_system_data_nodeconfig;
  g_system_ptr_2 = &g_system_ptr_3;
// void CreateSystemObjectThread1(void)

void CreateSystemObjectThread1(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_NETWORK_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_2,systemParam_,INVALID_HANDLE_VALUE);
  g_system_ptr_4 = create_system_object(&thread_parameter_ptr);
  return;
}
// void InitializeDataNode(void)

void InitializeDataNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeResourceNode(void)

void InitializeResourceNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeMemoryNode(void)

void InitializeMemoryNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeThreadNode(void)

void InitializeThreadNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeConfigNode(void)

void InitializeConfigNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeStateNode(void)

void InitializeStateNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeBufferNode(void)

void InitializeBufferNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeCacheNode(void)

void InitializeCacheNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializePoolNode(void)

void InitializePoolNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeQueueNode(void)

void InitializeQueueNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeStackNode(void)

void InitializeStackNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemListNode(void)

void InitializeSystemListNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeTreeNode(void)

void InitializeTreeNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeGraphNode(void)

void InitializeGraphNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeMapNode(void)

void InitializeMapNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSetNode(void)

void InitializeSetNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeArrayNode(void)

void InitializeArrayNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeVectorNode(void)

void InitializeVectorNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeMatrixNode(void)

void InitializeMatrixNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeHashNode(void)

void InitializeHashNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeTableNode(void)

void InitializeTableNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeRecordNode(void)

void InitializeRecordNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeFieldNode(void)

void InitializeFieldNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern10,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern10,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATABASE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_DATABASE_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAttributeNode(void)

void InitializeAttributeNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializePropertyNode(void)

void InitializePropertyNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeMethodNode(void)

void InitializeMethodNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeEventNode(void)

void InitializeEventNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeDelegateNode(void)

void InitializeDelegateNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeCallbackNode(void)

void InitializeCallbackNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeHandlerNode(void)

void InitializeHandlerNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeListenerNode(void)

void InitializeListenerNode(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeObserverNode(void)
void InitializeObserverNode(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_STRING_MANAGER_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_3,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_1 = create_system_object(&thread_parameter_ptr); // 原始名称: systemCoreData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeThreadConfig1(void)

{
  longlong long_result;
  uint64_t systemParam_;

  _g_thread_config_1 = &g_system_core_data_ptr; // 美化名称: systemCoreData
  _g_thread_config_2 = &g_system_configuration_data_ptr; // 美化名称: systemConfigurationData
// void InitializeSystemObject1(void)

void InitializeSystemObject1(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_input_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern11,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern11,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject2(void)

void InitializeSystemObject2(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_network_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern12,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern12,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject3(void)

void InitializeSystemObject3(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_input_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern11,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern11,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject4(void)

void InitializeSystemObject4(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_network_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern12,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern12,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject5(void)

void InitializeSystemObject5(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject6(void)

void InitializeSystemObject6(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject7(void)

void InitializeSystemObject7(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemObject8(void)

void InitializeSystemObject8(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject9(void)

void InitializeSystemObject9(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemObject10(void)

void InitializeSystemObject10(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeSystemObject11(void)

void InitializeSystemObject11(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemObject12(void)
void InitializeSystemObject12(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_NETWORK_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_4,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_2 = create_system_object(&thread_parameter_ptr); // 原始名称: systemStatusData
  return;
}
// void InitializeThreadConfig2(void)

void InitializeThreadConfig2(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject13(void)

void InitializeSystemObject13(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject14(void)

void InitializeSystemObject14(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemObject15(void)

void InitializeSystemObject15(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemObject16(void)

void InitializeSystemObject16(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemObject17(void)

void InitializeSystemObject17(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeSystemObject18(void)

void InitializeSystemObject18(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemObject19(void)
void InitializeSystemObject19(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_AUTHENTICATION_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_5,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_3 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeThreadConfig3(void)

{
  longlong long_result;
  uint64_t systemParam_;

  _g_thread_config_3 = &g_system_core_data_ptr; // 美化名称: systemCoreData
  _g_thread_config_4 = &g_system_configuration_data_ptr; // 美化名称: systemConfigurationData
// void InitializeSystemObject20(void)

void InitializeSystemObject20(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_UI_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_6,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_4 = create_system_object(&thread_parameter_ptr); // 原始名称: systemCoreData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemObject21(void)
void InitializeSystemObject21(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_SHADER_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_7,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_5 = create_system_object(&thread_parameter_ptr); // 原始名称: systemStatusData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemObject22(void)
void InitializeSystemObject22(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_CONFIG_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_6 = create_system_object(&thread_parameter_ptr); // 原始名称: systemConfigurationData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemObject23(void)
void InitializeSystemObject23(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_AUDIO_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_system_data_variable0,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_7 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemObject24(void)
void InitializeSystemObject24(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x13;
  strcpy_s(system_local_buffer_88,0x80,&g_init_string_9,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_8 = create_system_object(&thread_parameter_ptr); // 原始名称: systemCoreData
  return;
}
// void InitializeSystemObject25(void)

void InitializeSystemObject25(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_6;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern22,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern22,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RESOURCE_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_RESOURCE_MANAGER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void EnableInputDevice(void)

void EnableInputDevice(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_7;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern23,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern23,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_EVENT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_EVENT_HANDLER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void DisableInputDevice(void)

void DisableInputDevice(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeNetworkSystem(void)

void InitializeNetworkSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void CreateNetworkSocket(void)

void CreateNetworkSocket(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void DestroyNetworkSocket(void)

void DestroyNetworkSocket(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void ConnectNetworkSocket(void)

void ConnectNetworkSocket(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void DisconnectNetworkSocket(void)

void DisconnectNetworkSocket(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void SendNetworkData(void)

void SendNetworkData(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void ReceiveNetworkData(void)

void ReceiveNetworkData(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void GetNetworkStatus(void)

void GetNetworkStatus(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void SetNetworkTimeout(void)

void SetNetworkTimeout(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void FlushNetworkBuffer(void)

void FlushNetworkBuffer(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule18(void)

void InitializeSystemModule18(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule19(void)

void InitializeSystemModule19(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeSystemModule20(void)

void InitializeSystemModule20(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeMathLookupTables(void)

void InitializeMathLookupTables(void)

{
  ulonglong arrayIndex;
  float *tablePointer;
  int compare_result;
  ulonglong tableSize;
  uint nextIndex;
  ulonglong loopCounter;
  int maxIterations;
  float *dataPointer;
  float calculatedValue;

  dataPointer = (float *)GRAPHICS_DATA_START_ADDR;
  loopCounter = 0;
  maxIterations = -3;
  tableSize = loopCounter;
  do {
    if (0 < (longlong)tableSize) {
      compare_result = -3;
      arrayIndex = loopCounter;
      tablePointer = dataPointer;
      do {
        calculatedValue = 0.0;
        if (-1 < (longlong)arrayIndex) {
          if ((longlong)arrayIndex < 3) {
            calculatedValue = 0.75;
          }
          else {
            calculatedValue = 1.0 - (float)compare_result / (float)maxIterations;
            calculatedValue = SQRT(calculatedValue) * calculatedValue;
          }
        }
        *tablePointer = calculatedValue;
        compare_result = compare_result + 1;
        tablePointer = tablePointer + 1;
        arrayIndex = arrayIndex + 1;
      } while ((longlong)arrayIndex < (longlong)tableSize);
    }
    maxIterations = maxIterations + 1;
    tableSize = tableSize + 1;
    dataPointer = dataPointer + 0x40;
  } while ((longlong)dataPointer < GRAPHICS_DATA_END_ADDR);
  dataPointer = (float *)RENDER_DATA_START_ADDR;
  do {
    nextIndex = (int)loopCounter + 1;
    *dataPointer = 1.0 / SQRT((float)loopCounter) + 1.0 / SQRT((float)loopCounter);
    dataPointer = dataPointer + 1;
    loopCounter = (ulonglong)nextIndex;
  } while (nextIndex < 0x40);
  return;
}
// void InitializeAudioSubsystem(void)

void InitializeAudioSubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeVideoSubsystem(void)

void InitializeVideoSubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_4;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern20,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern20,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_PHYSICS_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_PHYSICS_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeInputSubsystem(void)

void InitializeInputSubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_input_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern11,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern11,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeNetworkSystem(void)

void InitializeNetworkSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_network_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern12,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern12,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeConfigSubsystem(void)

void InitializeConfigSubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeFontSubsystem(void)

void InitializeFontSubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeShaderSubsystem(void)

void InitializeShaderSubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializePhysicsSubsystem(void)

void InitializePhysicsSubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeUISubsystem(void)

void InitializeUISubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSecuritySubsystem(void)

void InitializeSecuritySubsystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void ProcessSystemStringData(void)

void ProcessSystemStringData(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void ValidateSystemConfiguration(void)

void ValidateSystemConfiguration(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_6;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern22,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern22,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RESOURCE_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_RESOURCE_MANAGER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemTimer(void)

void InitializeSystemTimer(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_7;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern23,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern23,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_EVENT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_EVENT_HANDLER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemLogger(void)

void InitializeSystemLogger(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemProfiler(void)

void InitializeSystemProfiler(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeAudioSystem(void)

void InitializeAudioSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeVideoSystem(void)

void InitializeVideoSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeInputSystem(void)

void InitializeInputSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeNetworkSystem(void)

void InitializeNetworkSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeConfigSystem(void)

void InitializeConfigSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule42(void)

void InitializeSystemModule42(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_4;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern20,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern20,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_PHYSICS_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_PHYSICS_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule43(void)

void InitializeSystemModule43(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule44(void)

void InitializeSystemModule44(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_6;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern22,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern22,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RESOURCE_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_RESOURCE_MANAGER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule45(void)

void InitializeSystemModule45(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_7;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern23,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern23,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_EVENT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_EVENT_HANDLER_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule46(void)

void InitializeSystemModule46(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern10,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern10,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATABASE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_DATABASE_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void UtilityModule1(void)

void UtilityModule1(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void UtilityModule2(void)

void UtilityModule2(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void UtilityModule3(void)

void UtilityModule3(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void UtilityModule4(void)

void UtilityModule4(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void UtilityModule5(void)

void UtilityModule5(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void UtilityModule6(void)

void UtilityModule6(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void UtilityModule7(void)

void UtilityModule7(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void UtilityModule8(void)
void UtilityModule8(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_CONFIG_INIT;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_9 = create_system_object(&thread_parameter_ptr); // 原始名称: systemStatusData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeInputSystem(void)

{
  longlong long_result;
  uint64_t systemParam_;

  systemConfigData_1 = &g_system_data_main; // 原始名称: systemCoreData
  systemConfigData_2 = &g_system_configuration_data_ptr; // 原始名称: systemConfigurationData
// void InitializeFontSystem(void)

void InitializeFontSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x16;
  strcpy_s(system_local_buffer_88,0x80,&g_system_data_variable0,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_10 = create_system_object(&thread_parameter_ptr); // 原始名称: systemConfigurationData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void UtilityModule10(void)
void UtilityModule10(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x16;
  strcpy_s(system_local_buffer_88,0x80,&g_system_configuration_data_ptr,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_11 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// void InitializeShaderSystem(void)

void InitializeShaderSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializePhysicsSystem(void)

void InitializePhysicsSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void ProcessGraphicsTexture(void)

void ProcessGraphicsTexture(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeUISystem(void)

void InitializeUISystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSecuritySystem(void)

void InitializeSecuritySystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAuthenticationSystem(void)

void InitializeAuthenticationSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeResourceSystem(void)

void InitializeResourceSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeTextureSystem(void)

void InitializeTextureSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern10,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern10,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATABASE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_DATABASE_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeStringManager(void)
void InitializeStringManager(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x1c;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_12 = create_system_object(&thread_parameter_ptr); // 原始名称: systemConfigurationData
  return;
}
// void InitializeSystemTimer(void)

void InitializeSystemTimer(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = GetSystemFunctionPointer;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&gameDataDefaultPattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&gameDataDefaultPattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = dataNodeSignaturePrimary;
  node_previous[7] = dataNodeSignatureSecondary;
  node_previous[8] = &defaultInitializationFunction;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemLogger(void)

void InitializeSystemLogger(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern1,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern1,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_2;
  node_previous[8] = &systemNode1;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemProfiler(void)

void InitializeSystemProfiler(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern2,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern2,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_DECODER_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_DECODER_2;
  node_previous[8] = &systemNode2;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAudioSystem(void)

void InitializeAudioSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern3,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern3,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_1;
  node_previous[7] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_2;
  node_previous[8] = &systemNode3;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeVideoSystem(void)

void InitializeVideoSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern4,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern4,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_INPUT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_INPUT_HANDLER_2;
  node_previous[8] = &systemNode4;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeInputSystem(void)

void InitializeInputSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern5,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern5,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_MANAGER_2;
  node_previous[8] = &systemNode5;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeNetworkSystem(void)

void InitializeNetworkSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern6,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern6,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_1;
  node_previous[7] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeConfigSystem(void)

void InitializeConfigSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_FILE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_FILE_SYSTEM_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAudioSystem(void)

void InitializeAudioSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_audio_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_SECURITY_MODULE_1;
  node_previous[7] = SYSTEM_NODE_ID_SECURITY_MODULE_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeVideoSystem(void)

void InitializeVideoSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_THREAD_SCHEDULER_1;
  node_previous[7] = SYSTEM_NODE_ID_THREAD_SCHEDULER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeInputSystem(void)

void InitializeInputSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeNetworkSystem(void)
void InitializeNetworkSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_UI_INIT;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_13 = create_system_object(&thread_parameter_ptr); // 原始名称: systemConfigurationData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeConfigSystem(void)
void InitializeConfigSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_STRING_MANAGER_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_14 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeFontSystem(void)
void InitializeFontSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_NETWORK_INIT;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_15 = create_system_object(&thread_parameter_ptr); // 原始名称: systemCoreData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeShaderSystem(void)
void InitializeShaderSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0xd;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_16 = create_system_object(&thread_parameter_ptr); // 原始名称: systemStatusData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializePhysicsSystem(void)
void InitializePhysicsSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x1c;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_17 = create_system_object(&thread_parameter_ptr); // 原始名称: systemConfigurationData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void UtilityModule33(void)
void UtilityModule33(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x15;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_18 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeUISystem(void)
void InitializeUISystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0xe;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_19 = create_system_object(&thread_parameter_ptr); // 原始名称: systemCoreData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSecuritySystem(void)
void InitializeSecuritySystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x1a;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_20 = create_system_object(&thread_parameter_ptr); // 原始名称: systemStatusData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAuthenticationSystem(void)
void InitializeAuthenticationSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x13;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_21 = create_system_object(&thread_parameter_ptr); // 原始名称: systemCoreData
  return;
}
// void InitializeResourceSystem(void)

void InitializeResourceSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeTextureSystem(void)

void InitializeTextureSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeStringManagerSystem(void)

void InitializeStringManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeMemoryManagerSystem(void)

void InitializeMemoryManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeThreadManagerSystem(void)

void InitializeThreadManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeEventSystem(void)

void InitializeEventSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeFilesystemSystem(void)

void InitializeFilesystemSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeDatabaseSystem(void)

void InitializeDatabaseSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void SetupGraphicsDevice(void)

void SetupGraphicsDevice(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeGraphicsSystem(void)

void InitializeGraphicsSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAudioManagerSystem(void)

void InitializeAudioManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeNetworkManagerSystem(void)

void InitializeNetworkManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeInputManagerSystem(void)

void InitializeInputManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeGraphicsMemory(void)

void InitializeGraphicsMemory(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeRenderSystem(void)

void InitializeRenderSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeGameSystem(void)

void InitializeGameSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemDataNode15(void)

void InitializeSystemDataNode15(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void ConfigureGraphicsShader(void)

void ConfigureGraphicsShader(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemDataNode17(void)

void InitializeSystemDataNode17(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeNetworkMutex(void)

void InitializeNetworkMutex(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeShaderSystem(void)

void InitializeShaderSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode18(void)

void InitializeSystemDataNode18(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemDataNode19(void)

void InitializeSystemDataNode19(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule58(void)

void InitializeSystemModule58(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule40(void)

void InitializeSystemModule40(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemDataNode22(void)

void InitializeSystemDataNode22(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode23(void)

void InitializeSystemDataNode23(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeSystemDataNode24(void)

void InitializeSystemDataNode24(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode25(void)

void InitializeSystemDataNode25(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = GetSystemFunctionPointer;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&gameDataDefaultPattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&gameDataDefaultPattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = dataNodeSignaturePrimary;
  node_previous[7] = dataNodeSignatureSecondary;
  node_previous[8] = &defaultInitializationFunction;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void ConfigureGraphicsParameters(void)

void ConfigureGraphicsParameters(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern1,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern1,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_2;
  node_previous[8] = &systemNode1;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSecuritySystem(void)

void InitializeSecuritySystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern2,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern2,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_DECODER_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_DECODER_2;
  node_previous[8] = &systemNode2;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode26(void)

void InitializeSystemDataNode26(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern3,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern3,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_1;
  node_previous[7] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_2;
  node_previous[8] = &systemNode3;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule41(void)

void InitializeSystemModule41(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern4,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern4,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_INPUT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_INPUT_HANDLER_2;
  node_previous[8] = &systemNode4;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode28(void)

void InitializeSystemDataNode28(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern5,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern5,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_MANAGER_2;
  node_previous[8] = &systemNode5;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode29(void)

void InitializeSystemDataNode29(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern6,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern6,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_1;
  node_previous[7] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeFontSystem(void)

void InitializeFontSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_FILE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_FILE_SYSTEM_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode30(void)

void InitializeSystemDataNode30(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_audio_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_SECURITY_MODULE_1;
  node_previous[7] = SYSTEM_NODE_ID_SECURITY_MODULE_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemDataNode31(void)

void InitializeSystemDataNode31(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_THREAD_SCHEDULER_1;
  node_previous[7] = SYSTEM_NODE_ID_THREAD_SCHEDULER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode32(void)
void InitializeSystemDataNode32(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x16;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_22 = create_system_object(&thread_parameter_ptr); // 原始名称: systemConfigurationData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeSystemModule38(void)

{
  longlong long_result;
  uint64_t systemParam_;

  _g_thread_config_5 = &g_system_core_data_ptr; // 美化名称: systemCoreData
  _g_thread_config_6 = &g_system_configuration_data_ptr; // 美化名称: systemConfigurationData
// void InitializeSystemDataNode25(void)

void InitializeSystemDataNode25(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = GetSystemFunctionPointer;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&gameDataDefaultPattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&gameDataDefaultPattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = dataNodeSignaturePrimary;
  node_previous[7] = dataNodeSignatureSecondary;
  node_previous[8] = &defaultInitializationFunction;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void ConfigureGraphicsParameters(void)

void ConfigureGraphicsParameters(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern1,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern1,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_2;
  node_previous[8] = &systemNode1;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSecuritySystem(void)

void InitializeSecuritySystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern2,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern2,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_DECODER_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_DECODER_2;
  node_previous[8] = &systemNode2;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode26(void)

void InitializeSystemDataNode26(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern3,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern3,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_1;
  node_previous[7] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_2;
  node_previous[8] = &systemNode3;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule41(void)

void InitializeSystemModule41(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern4,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern4,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_INPUT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_INPUT_HANDLER_2;
  node_previous[8] = &systemNode4;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode28(void)

void InitializeSystemDataNode28(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern5,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern5,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_MANAGER_2;
  node_previous[8] = &systemNode5;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode29(void)

void InitializeSystemDataNode29(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern6,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern6,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_1;
  node_previous[7] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeFontSystem(void)

void InitializeFontSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_FILE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_FILE_SYSTEM_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode30(void)

void InitializeSystemDataNode30(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_audio_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_SECURITY_MODULE_1;
  node_previous[7] = SYSTEM_NODE_ID_SECURITY_MODULE_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemDataNode31(void)

void InitializeSystemDataNode31(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_THREAD_SCHEDULER_1;
  node_previous[7] = SYSTEM_NODE_ID_THREAD_SCHEDULER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode32(void)
void InitializeSystemDataNode32(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x12;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_23 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule38(void)
void InitializeSystemModule38(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_STRING_MANAGER_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_24 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// void ConfigureSystemHandles(void)

void ConfigureSystemHandles(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void SetupSystemMemory(void)

void SetupSystemMemory(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemResources(void)

void InitializeSystemResources(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeInputMutex(void)

void InitializeInputMutex(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void ConfigureSystemParameters(void)

void ConfigureSystemParameters(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemComponents(void)

void InitializeSystemComponents(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void SetupSystemServices(void)

void SetupSystemServices(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int ConfigureSystemSettings(void)

{
  longlong long_result;
  uint64_t systemParam_;

  _g_thread_parameter_1 = &g_thread_parameter_ptr; // 原始名称: systemCoreData
  _g_thread_parameter_2 = &g_system_configuration_data_ptr; // 原始名称: systemConfigurationData
// void InitializeSystemProfiler(void)

void InitializeSystemProfiler(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeAudioSystem(void)

void InitializeAudioSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeVideoSystem(void)

void InitializeVideoSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeInputSystem(void)

void InitializeInputSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeNetworkSystem(void)

void InitializeNetworkSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeConfigSystem(void)

void InitializeConfigSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAudioSystem(void)

void InitializeAudioSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeVideoSystem(void)

void InitializeVideoSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeInputSystem(void)

void InitializeInputSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeNetworkSystem(void)

void InitializeNetworkSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule1(void)

void InitializeSystemModule1(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule2(void)

void InitializeSystemModule2(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule3(void)

void InitializeSystemModule3(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule4(void)

void InitializeSystemModule4(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeSystemModule59(void)

void InitializeSystemModule59(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule6(void)
void InitializeSystemModule6(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x1b;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_25 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}

int InitializeSystemModule21(void)

{
  longlong long_result;

  EngineFunction_42_4();
  long_result = execute_system_init(InitializeCoreSystem);
  return (long_result != 0) - 1;
}

int GetSystemFunctionPointer(void)

{
  longlong long_result;
  uint8_t localBuffer_X8 [32];

  localBuffer_X8[0] = 1;
  EngineFunction_61_6(&g_system_data_variable0,localBuffer_X8);
  long_result = execute_system_init(InitializeMemoryManager);
  return (long_result != 0) - 1;
}

int InitializeUISystem(void)

{
  longlong long_result;
  uint8_t localBuffer_X8 [32];

  localBuffer_X8[0] = 0;
  EngineFunction_61_6(&g_system_data_variable0,localBuffer_X8);
  long_result = execute_system_init(InitializeProcessManager);
  return (long_result != 0) - 1;
}

int InitializeSystemModule27(void)

{
  longlong long_result;

  long_result = execute_system_init(InitializeThreadManager);
  return (long_result != 0) - 1;
}

int InitializeSystemModule18(void)

{
  longlong long_result;

  InitializeAudioSystem(AUDIO_SYSTEM_INIT_ADDR);
  long_result = execute_system_init(InitializeSecurityManager);
  return (long_result != 0) - 1;
}
// void InitializeSystemDataNode17(void)

void InitializeSystemDataNode17(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = GetSystemFunctionPointer;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&gameDataDefaultPattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&gameDataDefaultPattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = dataNodeSignaturePrimary;
  node_previous[7] = dataNodeSignatureSecondary;
  node_previous[8] = &defaultInitializationFunction;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeNetworkMutex(void)

void InitializeNetworkMutex(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern1,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern1,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_2;
  node_previous[8] = &systemNode1;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeShaderSystem(void)

void InitializeShaderSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern2,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern2,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_DECODER_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_DECODER_2;
  node_previous[8] = &systemNode2;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeFontSystem(void)

void InitializeFontSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern3,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern3,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_1;
  node_previous[7] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_2;
  node_previous[8] = &systemNode3;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule9(void)

void InitializeSystemModule9(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern4,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern4,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_INPUT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_INPUT_HANDLER_2;
  node_previous[8] = &systemNode4;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule38(void)

void InitializeSystemModule38(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern5,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern5,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_MANAGER_2;
  node_previous[8] = &systemNode5;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule10(void)

void InitializeSystemModule10(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern6,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern6,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_1;
  node_previous[7] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void GetSystemFunctionPointer(void)

void GetSystemFunctionPointer(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_FILE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_FILE_SYSTEM_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule44(void)

void InitializeSystemModule44(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_audio_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_SECURITY_MODULE_1;
  node_previous[7] = SYSTEM_NODE_ID_SECURITY_MODULE_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule36(void)

void InitializeSystemModule36(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_THREAD_SCHEDULER_1;
  node_previous[7] = SYSTEM_NODE_ID_THREAD_SCHEDULER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAudioMutex(void)
void InitializeAudioMutex(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = SYSTEM_DATA_COMPARE_SIZE;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  _g_network_system_object_1 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemComponents(void)
void InitializeSystemComponents(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  module_type_id = MODULE_TYPE_SHADER_INIT;
  strcpy_s(system_local_buffer_88,0x80,&g_system_data_variable0,systemParam_,INVALID_HANDLE_VALUE);
  _g_network_system_object_2 = create_system_object(&thread_parameter_ptr); // 原始名称: systemCoreData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule3(void)
void InitializeSystemModule3(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = NODE_INITIALIZED_OFFSET;
  strcpy_s(system_local_buffer_88,0x80,&g_system_configuration_data_ptr,systemParam_,INVALID_HANDLE_VALUE);
  _g_network_system_object_3 = create_system_object(&thread_parameter_ptr); // 原始名称: systemStatusData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_67_2(void)
void SystemFunction_67_2(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x14;
  strcpy_s(system_local_buffer_88,0x80,&g_system_data_variable0,systemParam_,INVALID_HANDLE_VALUE);
  _g_network_system_object_4 = create_system_object(&thread_parameter_ptr); // 原始名称: systemConfigurationData
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeSystemDataNode32(void)

{
  longlong long_result;
  uint64_t systemParam_;

  _g_network_system_config_1 = &g_system_data_main; // 原始名称: systemConfigurationData
  _g_network_system_config_2 = &g_system_data_variable0; // 原始名称: systemCoreData
// void InitializeSystemModule59(void)

void InitializeSystemModule59(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x46c54bc98fc3fc2a;
  node_previous[7] = 0x727b256e3af32585;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule6(void)

void InitializeSystemModule6(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x41ffd0b76c1e136f;
  node_previous[7] = 0x25db30365f277abb;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule42(void)

void InitializeSystemModule42(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = GetSystemFunctionPointer;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&gameDataDefaultPattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&gameDataDefaultPattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = dataNodeSignaturePrimary;
  node_previous[7] = dataNodeSignatureSecondary;
  node_previous[8] = &defaultInitializationFunction;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule35(void)

void InitializeSystemModule35(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern1,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern1,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_2;
  node_previous[8] = &systemNode1;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule13(void)

void InitializeSystemModule13(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern2,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern2,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_DECODER_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_DECODER_2;
  node_previous[8] = &systemNode2;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule14(void)

void InitializeSystemModule14(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern3,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern3,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_1;
  node_previous[7] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_2;
  node_previous[8] = &systemNode3;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void ProcessSystemData(void)

void ProcessSystemData(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern4,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern4,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_INPUT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_INPUT_HANDLER_2;
  node_previous[8] = &systemNode4;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule37(void)

void InitializeSystemModule37(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern5,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern5,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_MANAGER_2;
  node_previous[8] = &systemNode5;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule16(void)

void InitializeSystemModule16(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern6,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern6,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_1;
  node_previous[7] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule17(void)

void InitializeSystemModule17(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_FILE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_FILE_SYSTEM_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule18(void)

void InitializeSystemModule18(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_audio_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_SECURITY_MODULE_1;
  node_previous[7] = SYSTEM_NODE_ID_SECURITY_MODULE_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule19(void)

void InitializeSystemModule19(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_THREAD_SCHEDULER_1;
  node_previous[7] = SYSTEM_NODE_ID_THREAD_SCHEDULER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeGraphicsMemory(void)

void InitializeGraphicsMemory(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x46c54bc98fc3fc2a;
  node_previous[7] = 0x727b256e3af32585;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeRenderSystem(void)

void InitializeRenderSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x41ffd0b76c1e136f;
  node_previous[7] = 0x25db30365f277abb;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeAuthenticationSystem(void)

void InitializeAuthenticationSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_5;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern21,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern21,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CONFIG_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_CONFIG_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule39(void)

void InitializeSystemModule39(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_4;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern20,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern20,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_PHYSICS_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_PHYSICS_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule21(void)

void InitializeSystemModule21(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_input_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern11,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern11,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule43(void)

void InitializeSystemModule43(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_network_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern12,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern12,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule23(void)

void InitializeSystemModule23(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule24(void)

void InitializeSystemModule24(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemDataNode18(void)

void InitializeSystemDataNode18(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode19(void)

void InitializeSystemDataNode19(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule58(void)

void InitializeSystemModule58(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule40(void)

void InitializeSystemModule40(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeSystemDataNode22(void)

void InitializeSystemDataNode22(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode23(void)

void InitializeSystemDataNode23(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern10,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern10,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATABASE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_DATABASE_SYSTEM_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode24(void)

void InitializeSystemDataNode24(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x46c54bc98fc3fc2a;
  node_previous[7] = 0x727b256e3af32585;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemDataNode25(void)

void InitializeSystemDataNode25(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x41ffd0b76c1e136f;
  node_previous[7] = 0x25db30365f277abb;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int ConfigureGraphicsParameters(void)

{
  longlong long_result;

  initialize_system_component(&g_system_memory_data,8,5,&g_subsystem_init_function,InitializeNetworkSystem);
  initialize_system_component(NETWORK_SYSTEM_INIT_ADDR_1,8,5,&g_subsystem_init_function,InitializeNetworkSystem);
  initialize_system_component(NETWORK_SYSTEM_INIT_ADDR_2,8,5,&g_subsystem_init_function,InitializeNetworkSystem);
  _Mtx_init_in_situ(NETWORK_SYSTEM_MUTEX_ADDR,2);
  _g_network_state_1 = 0; // 原始名称: systemCoreData
  g_network_buffer_size = 0;
  _g_network_state_2 = 0; // 原始名称: systemCoreData
  _g_network_config_1 = 3; // 原始名称: systemConfigurationData
  g_network_socket_handle = 0;
  g_network_packet_data = 0;
  g_network_buffer_data = 0;
  g_network_config_data = 3;
  g_network_state_data = 0;
  uRam0000000180c96358 = 0;
  g_network_timeout_value = 0;
  g_network_connection_data = 3;
  EngineFunction_11_2();
  long_result = execute_system_init(&g_system_reserved_data);
  return (long_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeSystemDataNode32(void)

{
  longlong long_result;
  uint64_t systemParam_;

  g_system_state_ptr = &g_system_data_main;
  g_system_config_ptr = &g_system_debug_data;
// void InitializeSystemModule59(void)

void InitializeSystemModule59(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x46c54bc98fc3fc2a;
  node_previous[7] = 0x727b256e3af32585;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule6(void)

void InitializeSystemModule6(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x41ffd0b76c1e136f;
  node_previous[7] = 0x25db30365f277abb;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeStringManagerSystem(void)

void InitializeStringManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x46c54bc98fc3fc2a;
  node_previous[7] = 0x727b256e3af32585;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeMemoryManagerSystem(void)

void InitializeMemoryManagerSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x41ffd0b76c1e136f;
  node_previous[7] = 0x25db30365f277abb;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeThreadManagerSystem(void)
void InitializeThreadManagerSystem(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0xd;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  g_system_object_26 = create_system_object(&thread_parameter_ptr); // 原始名称: g_system_data_variablec
  return;
}

int InitializeAudioMutex(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;

  _Mtx_init_in_situ(DATABASE_MUTEX_ADDR,2,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  long_result = execute_system_init(InitializeFileSystem);
  return (long_result != 0) - 1;
}
// void InitializeResourceSystem(void)

void InitializeResourceSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x46c54bc98fc3fc2a;
  node_previous[7] = 0x727b256e3af32585;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeTextureSystem(void)

void InitializeTextureSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_data_variable0,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_data_variable0,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = 0x41ffd0b76c1e136f;
  node_previous[7] = 0x25db30365f277abb;
  node_previous[8] = &globalSystemVariable;
  node_previous[9] = 2;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeStringManager(void)

void InitializeStringManager(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_input_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern11,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern11,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule25(void)

void InitializeSystemModule25(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_network_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern12,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern12,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 3;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule26(void)

void InitializeSystemModule26(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_1;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern13,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern13,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_CORE_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_CORE_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 1;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule27(void)

void InitializeSystemModule27(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_2;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern14,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern14,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_RENDER_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_RENDER_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 4;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule45(void)

void InitializeSystemModule45(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern15,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern15,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule29(void)

void InitializeSystemModule29(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_resource_init_function_3;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern16,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern16,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_IO_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_IO_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializePhysicsSystem(void)

void InitializePhysicsSystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern17,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern17,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_DATA_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_DATA_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule30(void)

void InitializeSystemModule30(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  void *pflag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pflag_initialized = &g_flag_initialized;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern18,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern18,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UTIL_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UTIL_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = pflag_initialized;
  return;
}
// void InitializeSystemModule31(void)

void InitializeSystemModule31(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern19,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern19,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_UI_ENGINE_1;
  node_previous[7] = SYSTEM_NODE_ID_UI_ENGINE_2;
  node_previous[8] = &g_system_data_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void ConfigureSystemHandles(void)

void ConfigureSystemHandles(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = GetSystemFunctionPointer;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&gameDataDefaultPattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&gameDataDefaultPattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = dataNodeSignaturePrimary;
  node_previous[7] = dataNodeSignatureSecondary;
  node_previous[8] = &defaultInitializationFunction;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void SetupSystemMemory(void)

void SetupSystemMemory(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern1,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern1,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_1;
  node_previous[7] = SYSTEM_NODE_ID_AUDIO_PROCESSOR_2;
  node_previous[8] = &systemNode1;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemResources(void)

void InitializeSystemResources(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern2,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern2,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_VIDEO_DECODER_1;
  node_previous[7] = SYSTEM_NODE_ID_VIDEO_DECODER_2;
  node_previous[8] = &systemNode2;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeInputMutex(void)

void InitializeInputMutex(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern3,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern3,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_1;
  node_previous[7] = SYSTEM_NODE_ID_GRAPHICS_RENDERER_2;
  node_previous[8] = &systemNode3;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void ConfigureSystemParameters(void)

void ConfigureSystemParameters(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern4,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern4,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_INPUT_HANDLER_1;
  node_previous[7] = SYSTEM_NODE_ID_INPUT_HANDLER_2;
  node_previous[8] = &systemNode4;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemComponents(void)

void InitializeSystemComponents(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern5,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern5,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_NETWORK_MANAGER_1;
  node_previous[7] = SYSTEM_NODE_ID_NETWORK_MANAGER_2;
  node_previous[8] = &systemNode5;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void SetupSystemServices(void)

void SetupSystemServices(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&systemDataPattern6,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&systemDataPattern6,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_1;
  node_previous[7] = SYSTEM_NODE_ID_MEMORY_CONTROLLER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 3;
  node_previous[10] = flag_initialized;
  return;
}
// void ConfigureSystemSettings(void)

void ConfigureSystemSettings(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_FILE_SYSTEM_1;
  node_previous[7] = SYSTEM_NODE_ID_FILE_SYSTEM_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = flag_initialized;
  return;
}
// void InitializeSystemModule32(void)

void InitializeSystemModule32(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  code *pcstack_var;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  pcstack_var = get_audio_init_function;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_SECURITY_MODULE_1;
  node_previous[7] = SYSTEM_NODE_ID_SECURITY_MODULE_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 0;
  node_previous[10] = pcstack_var;
  return;
}
// void InitializeSystemModule33(void)

void InitializeSystemModule33(void)

{
  char is_initialized;
  uint64_t *node_root;
  int compare_result;
  longlong *ptr_data;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *node_new;
  uint64_t flag_initialized;

  ptr_data = (longlong *)GetSystemPointerData();
  node_root = (uint64_t *)*ptr_data;
  is_initialized = *(char *)((longlong)node_root[1] + NODE_INITIALIZED_OFFSET);
  flag_initialized = 0;
  node_previous = node_root;
  node_current = (uint64_t *)node_root[1];
  while (is_initialized == '\0') {
    compare_result = memcmp(node_current + 4,&g_system_compare_pattern,SYSTEM_DATA_COMPARE_SIZE);
    if (compare_result < 0) {
      node_next = (uint64_t *)node_current[2];
      node_current = node_previous;
    }
    else {
      node_next = (uint64_t *)*node_current;
    }
    node_previous = node_current;
    node_current = node_next;
    is_initialized = *(char *)((longlong)node_next + NODE_INITIALIZED_OFFSET);
  }
  if ((node_previous == node_root) || (compare_result = memcmp(&g_system_compare_pattern,node_previous + 4,SYSTEM_DATA_COMPARE_SIZE), compare_result < 0)) {
    allocation_size = CalculateAllocationSize(ptr_data);
    AllocateSystemMemory(ptr_data,&node_new,node_previous,allocation_size + SYSTEM_NODE_HEADER_SIZE,allocation_size);
    node_previous = node_new;
  }
  node_previous[6] = SYSTEM_NODE_ID_THREAD_SCHEDULER_1;
  node_previous[7] = SYSTEM_NODE_ID_THREAD_SCHEDULER_2;
  node_previous[8] = &g_system_node;
  node_previous[9] = 1;
  node_previous[10] = flag_initialized;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule34(void)
void InitializeSystemModule34(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x1b;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  g_system_data_variablec = create_system_object(&thread_parameter_ptr);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule35(void)
void InitializeSystemModule35(void)

{
  systemConfigurationData = GetCurrentProcess();
  return;
}

int InitializeMemoryManagerSystem(void)

{
  longlong long_result;

  InitializeInputSystem();
  long_result = execute_system_init(&g_system_call_1);
  return (long_result != 0) - 1;
}

int InitializeInputMutex(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;

  _Mtx_init_in_situ(INPUT_MUTEX_ADDR,2,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  long_result = execute_system_init(InitializeDatabaseSystem);
  return (long_result != 0) - 1;
}

int InitializeNetworkMutex(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;

  _Mtx_init_in_situ(NETWORK_MUTEX_ADDR,2,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  long_result = execute_system_init(InitializeCacheSystem);
  return (long_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeSystemModule36(void)

{
  longlong long_result;

  systemConfigurationData = 3;
  systemCoreData = &g_system_data_variable0;
  systemConfigurationData = &g_system_data_variable0;
  systemCoreData = 0;
  systemConfigurationData = 0;
  systemCoreData = 0;
  long_result = execute_system_init(InitializeLogSystem);
  return (long_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemResources(void)
void InitializeSystemResources(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = SYSTEM_DATA_COMPARE_SIZE;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  systemCoreData = create_system_object(&thread_parameter_ptr);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

// 初始化线程本地存储
uint64_t InitializeThreadLocalStorage(void)

{
  longlong threadLocalStorageBase;
  int *storage_ptr;

  threadLocalStorageBase = *(longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8);
  *(uint64_t *)(threadLocalStorageBase + 0x18) = &globalSystemPointerData;
  *(uint64_t *)(threadLocalStorageBase + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint32_t *)(threadLocalStorageBase + 0x28) = 0;
  *(uint64_t *)(threadLocalStorageBase + 0x18) = &resourcePoolPointer;
  *(uint64_t *)(threadLocalStorageBase + 0x30) = 0;
  *(uint64_t *)(threadLocalStorageBase + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint32_t *)(threadLocalStorageBase + 0x28) = 0;
  threadLocalStorageBase = *(longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8);
  storage_ptr = *(int **)(threadLocalStorageBase + 0x50);
  if (storage_ptr == (int *)0x0) {
    storage_ptr = (int *)(threadLocalStorageBase + 0x60);
  }
  else {
    if (*storage_ptr != 0x1e) goto LAB_1808fd14a;
    storage_ptr = (int *)malloc(SYSTEM_DATA_COMPARE_SIZE0);
    free(0);
    if (storage_ptr == (int *)0x0) {
      return 0xffffffff;
    }
    *(uint64_t *)(storage_ptr + 2) = *(uint64_t *)(threadLocalStorageBase + 0x50);
  }
  *storage_ptr = 0;
  *(int **)(threadLocalStorageBase + 0x50) = storage_ptr;
LAB_1808fd14a:
  *(code **)(storage_ptr + (longlong)*storage_ptr * 2 + 4) = InitializeErrorHandler;
  *storage_ptr = *storage_ptr + 1;
  return 0;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// 清理线程本地存储
void CleanupThreadLocalStorage(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x17;
  strcpy_s(system_local_buffer_88,0x80,&g_system_global_variable8,systemParam_,INVALID_HANDLE_VALUE);
  systemStatusData = create_system_object(&thread_parameter_ptr);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureGraphicsParameters(void)
void ConfigureGraphicsParameters(void)

{
  uint64_t systemParam_;
  void *thread_parameter_ptr;
  uint8_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint8_t system_local_buffer_88 [136];

  thread_parameter_ptr = &g_thread_parameter_ptr;
  system_buffer_ptr_98 = system_local_buffer_88;
  system_local_buffer_88[0] = 0;
  uintStack_90 = 0x11;
  strcpy_s(system_local_buffer_88,0x80,&globalSystemVariable,systemParam_,INVALID_HANDLE_VALUE);
  systemConfigurationData = create_system_object(&thread_parameter_ptr);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeRenderSystem(void)

{
  longlong long_result;

  systemConfigurationData = 3;
  systemCoreData = &g_system_data_variable0;
  systemConfigurationData = &g_system_data_variable0;
  systemCoreData = 0;
  systemConfigurationData = 0;
  systemCoreData = 0;
  long_result = execute_system_init(InitializeConfigurationSystem);
  return (long_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeSystemModule37(void)

{
  longlong long_result;
  int int_result;

  systemCoreData = SYSTEM_DATA_COMPARE_SIZE0;
  int_result = 0;
  do {
    InitializeSystemModule(int_result,0x4000000000000000,0xffff7fff,0);
    int_result = int_result + 1;
  } while (int_result < 0xd);
  *(uint *)(systemCoreData + 0x330) = *(uint *)(systemCoreData + 0x330) | 4;
  systemStatusData = 0xffffffff;
  long_result = execute_system_init(&g_system_call_2);
  return (long_result != 0) - 1;
}

int InitializeAuthenticationSystem(void)

{
  longlong long_result;

  InitializeAudioHardware(0x180c0c340);
  long_result = execute_system_init(&g_system_call_3);
  return (long_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule38(void)
void InitializeSystemModule38(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(0);
  systemCoreData = 0x180be14a8;
  if (int_result != 0) {
    systemCoreData = 0x180be14c0;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializePhysicsSystem(void)
void InitializePhysicsSystem(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(1);
  if (int_result != 0) {
    systemConfigurationData = 0x180be15c0;
    return;
  }
  int_result = GetSystemModuleStatus(0);
  systemConfigurationData = 0x180be14e0;
  if (int_result != 0) {
    systemConfigurationData = 0x180be1550;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ValidateSystemConfiguration(void)
void ValidateSystemConfiguration(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(0);
  systemCoreData = 0x180be1c00;
  if (int_result != 0) {
    systemCoreData = 0x180be1c08;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule39(void)
void InitializeSystemModule39(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(0);
  systemCoreData = 0x180be23a0;
  if (int_result != 0) {
    systemCoreData = 0x180be23c0;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule40(void)
void InitializeSystemModule40(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(0);
  systemCoreData = 0x180be2ad8;
  if (int_result != 0) {
    systemCoreData = 0x180be2af8;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule41(void)
void InitializeSystemModule41(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(0);
  systemCoreData = 0x180be4710;
  if (int_result != 0) {
    systemCoreData = 0x180be4728;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void UtilityModule216(void)
void UtilityModule216(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(1);
  if (int_result != 0) {
    systemConfigurationData = 0x180be6078;
    return;
  }
  int_result = GetSystemModuleStatus(0);
  systemConfigurationData = 0x180be6068;
  if (int_result != 0) {
    systemConfigurationData = 0x180be6070;
  }
  return;
}

int InitializeSystemModule33(void)

{
  uint64_t *ptr_uint_var;
  longlong long_result;

  ptr_uint_var = (uint64_t *)0x180c35590;
  long_result = SYSTEM_DATA_COMPARE_SIZE;
  do {
    InitializeNetworkSystem(ptr_uint_var);
    *ptr_uint_var = &globalPointerData1;
    ptr_uint_var = ptr_uint_var + 0x2b;
    long_result = long_result + -1;
  } while (long_result != 0);
  long_result = execute_system_init(&g_system_call_4);
  return (long_result != 0) - 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeInputSystem(void)
void InitializeInputSystem(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(0);
  systemConfigurationData = 0x180bebac8;
  if (int_result != 0) {
    systemConfigurationData = 0x180bebad8;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule42(void)
void InitializeSystemModule42(void)

{
  int int_result;

  int_result = GetSystemModuleStatus(3);
  if (int_result != 0) {
    systemCoreData = 0x180bebc10;
    return;
  }
  int_result = GetSystemModuleStatus(2);
  if (int_result != 0) {
    systemCoreData = 0x180bebbb0;
    return;
  }
  int_result = GetSystemModuleStatus(0);
  systemCoreData = 0x180bebaf0;
  if (int_result != 0) {
    systemCoreData = 0x180bebb50;
  }
  return;
}

int InitializeSystemModule43(void)

{
  longlong long_result;

  InitializeSystemData(0x180c4f510);
  long_result = execute_system_init(&g_system_call_5);
  return (long_result != 0) - 1;
}

int InitializeSystemModule44(void)

{
  longlong long_result;

  _Mtx_init_in_situ(0x180c82170,2);
  long_result = execute_system_init(&g_system_call_6);
  return (long_result != 0) - 1;
}

void InitializeMainSystemDLL(uint64_t handleIdentifier)

{
  uint64_t aflag_initialized [2];

                    // 0x43d20  31  InitializeMainSystemDLL
// void InitializeSystemModule45(longlong handleIdentifier)

void InitializeSystemModule45(longlong handleIdentifier)

{
  longlong long_result;
  longlong *long_ptr;
  char char_var;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializePhysicsSystem();
  g_system_counter_1 = g_system_counter_1 + 1; // 原始名称: systemStatusData
  InitializeSystemModule46();
  if (systemInitializationObject != (longlong *)0x0) { // 原始名称: systemInitializationObject
    if ((void *)*systemInitializationObject == &g_system_vtable_1) { // 原始名称: systemInitializationObject, globalSystemVariable
      char_var = (char)systemInitializationObject[2] != '\0'; // 原始名称: systemInitializationObject
    }
    else {
      char_var = (**(code **)((void *)*systemInitializationObject + 0x68))(); // 原始名称: systemInitializationObject
    }
    if (char_var == '\0') goto LAB_180043e47;
  }
  long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,0xc0,8,3,uint_result); // 原始名称: systemMemoryPool
  stack_long_ptr = long_ptr;
  ConfigureSystemHandles(long_ptr);
  *long_ptr = (longlong)&globalSystemVariable;
  long_ptr[3] = -4;
  pstack_long_ptr = (longlong **)long_ptr;
  (**(code **)(*long_ptr + 0x28))(long_ptr);
  pstack_long_ptr = (longlong **)systemInitializationObject; // 原始名称: systemInitializationObject
  if (systemInitializationObject != (longlong *)0x0) {
    long_result = *systemInitializationObject;
    systemInitializationObject = long_ptr;
    (**(code **)(long_result + 0x38))();
    long_ptr = systemInitializationObject;
  }
  systemInitializationObject = long_ptr;
  if ((void *)*systemInitializationObject == &globalSystemVariable) {
    if (g_system_handle_1 != 0) {
      InitializePhysicsSystem();
    }
  }
  else {
    (**(code **)((void *)*systemInitializationObject + 0x60))();
  }
  long_ptr = systemInitializationObject;
  stack_long_ptr = systemInitializationObject;
  systemInitializationObject = (longlong *)0x0;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
LAB_180043e47:
  InitializeSystemDataNode18(*(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE));
  if (*(char *)(g_system_base_1 + 0x1ed) != '\0') {
    long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,0x28,8,3);
    *long_ptr = (longlong)&globalSystemVariable;
    *long_ptr = (longlong)&globalSystemVariable;
    *(uint32_t *)(long_ptr + 1) = 0;
    *long_ptr = (longlong)&globalSystemOutputData;
    LOCK();
    *(uint8_t *)(long_ptr + 2) = 0;
    UNLOCK();
    long_ptr[3] = -1;
    *long_ptr = (longlong)&globalSystemInputData;
    long_ptr[4] = 0x180c91060;
    stack_long_ptr = long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
    uint_result = systemConfigurationData;
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
    InitializeSystemDataNode29(uint_result,&stack_long_ptr);
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  return;
}

uint64_t *
InitializeSystemModule14(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemInputData;
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x28,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeSystemModule47(void)

void InitializeSystemModule47(void)

{
                    // WARNING: Subroutine does not return
  InitializeSystemCore();
}
// void ValidateSystemConfiguration(uint64_t *handleIdentifier)

void ValidateSystemConfiguration(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void UtilityModule231(void)
void UtilityModule231(void)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong long_result;
  int int_result;
  uint64_t uint_result;
  longlong *long_ptr;
  uint8_t system_local_buffer_248 [32];
  void *system_buffer_ptr_228;
  void *system_buffer_ptr_220;
  void *system_buffer_ptr_218;
  longlong *stack_long_ptr;
  uint32_t uintStack_200;
  void *system_buffer_ptr_1f8;
  void *system_buffer_ptr_1f0;
  uint32_t uintStack_1e8;
  ulonglong uintStack_1e0;
  void *system_buffer_ptr_1d8;
  void *system_buffer_ptr_1d0;
  uint32_t uintStack_1c8;
  ulonglong uintStack_1c0;
  void *system_buffer_ptr_1b8;
  longlong longStack_1b0;
  uint32_t uintStack_1a0;
  uint64_t uintStack_198;
  longlong *stack_long_ptr;
  void *system_buffer_ptr_188;
  void *system_buffer_ptr_180;
  uint32_t uintStack_178;
  undefined system_local_buffer_170 [32];
  longlong **apstack_long_ptr [3];
  uint8_t system_local_buffer_138 [272];
  ulonglong uintStack_28;

  uintStack_198 = INVALID_HANDLE_VALUE;
  uintStack_28 = systemConfigurationData ^ (ulonglong)system_local_buffer_248;
  uintStack_200 = 0;
  if (*(char *)(g_system_context_1 + 0x18) == '\0') {
    ProcessSystemData(&bufferPtr_1b8system_buffer_ptr_1b8);
    (**(code **)(**(longlong **)(g_system_base_1 + 0x2b0) + 0x98))
              (*(longlong **)(g_system_base_1 + 0x2b0),&bufferPtr_1b8system_buffer_ptr_1b8);
    InitializeSystemModule24();
    long_result = g_system_context_1;
    uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3);
    long_ptr = (longlong *)InitializeSystemModule41(uint_result,8,long_result);
    stack_long_ptr = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    *(uint32_t *)(long_ptr + 0xd) = 0xbb80073;
    ptr_uint_var = *(uint64_t **)(long_result + 400);
    ptr_char_var = *(code **)*ptr_uint_var;
    apstack_long_ptr[0] = &stack_long_ptr;
    stack_long_ptr = long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
    (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
    (**(code **)(*long_ptr + 0x38))(long_ptr);
    InitializeUISystem();
    system_buffer_ptr_1d8 = &resourcePoolPointer;
    uintStack_1c0 = 0;
    system_buffer_ptr_1d0 = (void *)0x0;
    uintStack_1c8 = 0;
    system_buffer_ptr_1f8 = &resourcePoolPointer;
    uintStack_1e0 = 0;
    system_buffer_ptr_1f0 = (void *)0x0;
    uintStack_1e8 = 0;
    stack_long_ptr = (longlong *)CONCAT44(stack_long_ptr._4_4_,SYSTEM_DATA_COMPARE_SIZE);
    int_result = GetComputerNameA(apstack_long_ptr,&stack_long_ptr);
    if (int_result == 0) {
      InitializeResourcePool(&resourcePoolItem1);
    }
    else {
      if (0xf < ((ulonglong)stack_long_ptr & 0xffffffff)) goto LAB_180044db8;
      *(uint8_t *)((longlong)apstack_long_ptr + ((ulonglong)stack_long_ptr & 0xffffffff)) = 0;
      (**(code **)(system_buffer_ptr_1d8 + SYSTEM_DATA_COMPARE_SIZE))(&bufferPtr_1d8system_buffer_ptr_1d8,apstack_long_ptr);
    }
    stack_long_ptr = (longlong *)CONCAT44(stack_long_ptr._4_4_,SYSTEM_DATA_COMPARE_SIZE1);
    int_result = GetUserNameA(system_local_buffer_138,&stack_long_ptr);
    if (int_result == 0) {
      InitializeResourcePool(&resourcePoolItem2);
    }
    else {
      if (SYSTEM_DATA_COMPARE_SIZE0 < ((ulonglong)stack_long_ptr & 0xffffffff)) {
        ValidateSystemIntegrity();
LAB_180044db8:
        ValidateSystemIntegrity();
        ptr_char_var = (code *)swi(3);
        (*ptr_char_var)();
        return;
      }
      system_local_buffer_138[(ulonglong)stack_long_ptr & 0xffffffff] = 0;
      (**(code **)(system_buffer_ptr_1f8 + SYSTEM_DATA_COMPARE_SIZE))(&bufferPtr_1f8system_buffer_ptr_1f8,system_local_buffer_138);
    }
    system_buffer_ptr_218 = &g_system_data_variable3;
    if (system_buffer_ptr_1f0 != (void *)0x0) {
      system_buffer_ptr_218 = bufferPtr_1f0;
    }
    system_buffer_ptr_220 = &g_system_data_variable3;
    if (system_buffer_ptr_1d0 != (void *)0x0) {
      system_buffer_ptr_220 = bufferPtr_1d0;
    }
    system_buffer_ptr_228 = &g_system_data_init;
    InitializeEventSystem(g_system_context_1,5,0xffffffffffffffff,4);
    system_buffer_ptr_188 = &g_system_data_main;
    system_buffer_ptr_180 = system_local_buffer_170;
    uintStack_178 = 0;
    system_local_buffer_170[0] = 0;
    uintStack_200 = 2;
    InitializeSystemModule17(&bufferPtr_18system_buffer_ptr_188,&globalSystemVariable,0x130a7);
    system_buffer_ptr_220 = &g_system_data_variable3;
    if (system_buffer_ptr_180 != (void *)0x0) {
      system_buffer_ptr_220 = bufferPtr_180;
    }
    system_buffer_ptr_228 = &g_system_data_state;
    InitializeEventSystem(g_system_context_1,5,0xffffffffffffffff,4);
    uintStack_200 = 0;
    system_buffer_ptr_188 = &globalSystemPointerData;
    system_buffer_ptr_1f8 = &resourcePoolPointer;
    if (system_buffer_ptr_1f0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_1f0 = (void *)0x0;
    uintStack_1e0 = uintStack_1e0 & 0xffffffff00000000;
    system_buffer_ptr_1f8 = &globalSystemPointerData;
    system_buffer_ptr_1d8 = &resourcePoolPointer;
    if (system_buffer_ptr_1d0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_1d0 = (void *)0x0;
    uintStack_1c0 = uintStack_1c0 & 0xffffffff00000000;
    system_buffer_ptr_1d8 = &globalSystemPointerData;
    system_buffer_ptr_1b8 = &resourcePoolPointer;
    if (longStack_1b0 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_1b0 = 0;
    uintStack_1a0 = 0;
    system_buffer_ptr_1b8 = &globalSystemPointerData;
  }
  uintStack_200 = 0;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_28 ^ (ulonglong)system_local_buffer_248);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeFontSystem(uint64_t handleIdentifier,longlong resourceIdentifier)
void InitializeFontSystem(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  longlong **ptr_ptr_long_var;
  int int_result;
  uint uint_result;
  uint32_t uint_result;
  uint64_t uint_result;
  longlong *long_ptr;
  longlong long_result;
  uint64_t *node_next;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint8_t *ptr_uint_var;
  char *pis_initialized2;
  void *ptr_uint_var;
  ulonglong uint_result;
  uint uint_result;
  char is_initialized6;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong lstack_var;
  void *system_buffer_ptr_b8;
  void *system_buffer_ptr_b0;
  uint32_t uintStack_a0;
  void *system_buffer_ptr_98;
  longlong longStack_90;
  uint uintStack_88;
  void *system_buffer_ptr_78;
  void *system_buffer_ptr_70;
  uint32_t uintStack_60;
  uint64_t uintStack_58;
  longlong **pstack_long_ptr;
  longlong *stack_long_ptr;

  uintStack_58 = INVALID_HANDLE_VALUE;
  uint_result = InitializeSystemModule47();
  InitializeInputSystem();
  long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,0x68,8,3);
  ptr_ptr_long_var = (longlong **)(long_ptr + 1);
  stack_long_ptr = long_ptr;
  pstack_long_ptr = ptr_ptr_long_var;
  _Mtx_init_in_situ(ptr_ptr_long_var,2);
  long_ptr[0xb] = 0;
  long_ptr[0xc] = 0;
  *(uint16_t *)long_ptr = 0;
  systemCoreData = long_ptr;
  if ((char)*long_ptr != '\0') goto LAB_180044faf;
  pstack_long_ptr = ptr_ptr_long_var;
  int_result = _Mtx_lock(ptr_ptr_long_var);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  SymSetOptions(SYSTEM_NODE_HEADER_SIZE17);
  SetupSystemBuffers(&bufferPtr_b8system_buffer_ptr_b8);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_b0 != (void *)0x0) {
    ptr_uint_var = bufferPtr_b0;
  }
  SymSetSearchPath(systemConfigurationData,ptr_uint_var);
  long_result = long_ptr[0xb];
  if (long_result == 0) {
    long_result = LoadLibraryA(&g_resource_pool_name);
    long_ptr[0xb] = long_result;
    if (long_result != 0) goto LAB_180044ee3;
    system_buffer_ptr_b8 = &resourcePoolPointer;
    if (system_buffer_ptr_b0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  else {
LAB_180044ee3:
    if (long_ptr[0xc] == 0) {
      long_result = GetProcAddress(long_result,&g_resource_pool_func);
      long_ptr[0xc] = long_result;
      if (long_result == 0) {
        system_buffer_ptr_b8 = &resourcePoolPointer;
        if (system_buffer_ptr_b0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        goto LAB_180044f8f;
      }
    }
    ptr_uint_var = &g_system_data_variable3;
    if (system_buffer_ptr_b0 != (void *)0x0) {
      ptr_uint_var = bufferPtr_b0;
    }
    int_result = SymInitialize(systemConfigurationData,ptr_uint_var,1);
    if (int_result == 0) {
      system_buffer_ptr_b8 = &resourcePoolPointer;
      if (system_buffer_ptr_b0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
    }
    else {
      *(char *)long_ptr = '\x01';
      system_buffer_ptr_b8 = &resourcePoolPointer;
      if (system_buffer_ptr_b0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
    }
  }
LAB_180044f8f:
  uintStack_a0 = 0;
  system_buffer_ptr_b0 = (void *)0x0;
  system_buffer_ptr_b8 = &globalSystemPointerData;
  int_result = _Mtx_unlock(ptr_ptr_long_var);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
LAB_180044faf:
  node_next = (uint64_t *)AllocateSystemMemory(systemMemoryPool,8,8,3);
  *node_next = 0;
  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,8,8,3);
  *node_next = &g_system_data_link;
  *ptr_uint_var = &systemNextData;
  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE,8,3);
  ptr_uint_var = (uint8_t *)AllocateSystemMemory(systemMemoryPool,1,1,3);
  *ptr_uint_var = 0;
  ptr_uint_var[2] = ptr_uint_var;
  systemConfigurationData = ptr_uint_var;
  *ptr_uint_var = ptr_uint_var;
  ptr_uint_var[1] = node_next;
  ptr_uint_var[3] = uint_result;
  uint_result = AllocateSystemMemory(systemMemoryPool,NODE_INITIALIZED_OFFSET8,8,3);
  systemConfigurationData = LoadSystemConfiguration(uint_result);
  uint_result = AllocateSystemMemory(systemMemoryPool,0xa8,8,3);
  systemCoreData = InitializeSystemCore(uint_result);
  AllocateSystemMemory(systemMemoryPool,1,1,3);
  int_result = QueryPerformanceFrequency(&pstack_long_ptr);
  if (int_result == 0) {
    CreateResourcePoolHeader(&resourcePoolHeader);
  }
  systemCoreData = 1.0 / (double)(longlong)pstack_long_ptr;
  timeBeginPeriod(1);
  QueryPerformanceCounter(&lstack_var);
  if (g_system_data_variable2 != '\0') {
    systemConfigurationData = systemConfigurationData + (lstack_var - systemConfigurationData);
  }
  systemConfigurationData = 0;
  systemCoreData = lstack_var;
// void InitializeUISystem(void)

void InitializeUISystem(void)

{
  uint64_t uint_result;
  uint32_t uint_result;
  uint64_t *ptr_uint_var;
  uint64_t systemParam_;
  void *system_buffer_ptr_68;
  uint64_t *system_buffer_ptr_60;
  uint32_t uintStack_58;
  uint64_t uintStack_50;

  system_buffer_ptr_68 = &resourcePoolPointer;
  uintStack_50 = 0;
  system_buffer_ptr_60 = (uint64_t *)0x0;
  uintStack_58 = 0;
  ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13,systemParam_,INVALID_HANDLE_VALUE);
  *(uint8_t *)ptr_uint_var = 0;
  system_buffer_ptr_60 = ptr_uint_var;
  uint_result = ValidateResourceAllocation(ptr_uint_var);
  uintStack_50 = CONCAT44(uintStack_50._4_4_,uint_result);
  *ptr_uint_var = 0x72657472617453;
  uintStack_58 = 7;
  uint_result = GetCurrentThread();
  InitializeResourceData(uint_result,&bufferPtr_68system_buffer_ptr_68);
  system_buffer_ptr_68 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

// 获取游戏初始化状态
uint32_t get_game_initialization_status(void)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong **ptr_ptr_long_var;
  uint32_t uint_result;
  int int_result;
  longlong ****ptr_ptr_ptr_ptr_long_var;
  uint64_t uint_result;
  longlong ****ptr_ptr_ptr_ptr_long_var;
  longlong ***ptr_ptr_ptr_long_var;
  longlong long_result;
  char is_initialized1;
  longlong ****pppstack_long_ptr;
  longlong ***ppstack_long_ptr;
  longlong **pstack_long_ptr;
  longlong ***ppstack_long_ptr;
  uint64_t uint_result;
  longlong *****ptr_ptr_ptr_ptr_ptr_long_var3;
  longlong ****ptr_ptr_ptr_ptr_long_var4;

  uint_result = INVALID_HANDLE_VALUE;
  if (systemInitializationObject != (uint64_t *)0x0) {
    while( true ) {
      if ((void *)*systemInitializationObject == &globalSystemVariable) {
        is_initialized1 = *(char *)(systemInitializationObject + 2) != '\0';
      }
      else {
        is_initialized1 = (**(code **)((void *)*systemInitializationObject + 0x68))();
      }
      if (is_initialized1 != '\0') break;
      Sleep(1);
    }
  }
  ptr_ptr_ptr_ptr_long_var = (longlong ****)AllocateSystemMemory(systemMemoryPool,0xc0,8,3,uint_result);
  pppstack_long_ptr = ptr_ptr_ptr_ptr_long_var;
  ConfigureSystemHandles(ptr_ptr_ptr_ptr_long_var);
  *ptr_ptr_ptr_ptr_long_var = (longlong ***)&g_system_global_variable8;
  ppstack_long_ptr = (longlong ***)ptr_ptr_ptr_ptr_long_var;
  (*(code *)(*ptr_ptr_ptr_ptr_long_var)[5])(ptr_ptr_ptr_ptr_long_var);
  long_result = systemConfigurationData;
  ptr_ptr_ptr_ptr_ptr_long_var3 = &pppstack_long_ptr;
  pppstack_long_ptr = ptr_ptr_ptr_ptr_long_var;
  (*(code *)(*ptr_ptr_ptr_ptr_long_var)[5])(ptr_ptr_ptr_ptr_long_var);
  InitializeSystemDataNode29(long_result,&pppstack_long_ptr);
  while( true ) {
    if (*ptr_ptr_ptr_ptr_long_var == (longlong ***)&g_system_global_variable8) {
      is_initialized1 = *(char *)(ptr_ptr_ptr_ptr_long_var + 2) != '\0';
    }
    else {
      is_initialized1 = (*(code *)(*ptr_ptr_ptr_ptr_long_var)[0xd])(ptr_ptr_ptr_ptr_long_var);
    }
    if (is_initialized1 != '\0') break;
    Sleep(1);
  }
  InitializeGraphicsMemory();
  long_result = g_system_context_1;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3);
  ptr_ptr_ptr_ptr_long_var = (longlong ****)InitializeSystemModule41(uint_result,2,long_result);
  ptr_ptr_ptr_ptr_long_var4 = ptr_ptr_ptr_ptr_long_var;
  if (ptr_ptr_ptr_ptr_long_var != (longlong ****)0x0) {
    (*(code *)(*ptr_ptr_ptr_ptr_long_var)[5])(ptr_ptr_ptr_ptr_long_var);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pppstack_long_ptr = &ppstack_long_ptr;
  ppstack_long_ptr = (longlong ***)ptr_ptr_ptr_ptr_long_var;
  if (ptr_ptr_ptr_ptr_long_var != (longlong ****)0x0) {
    (*(code *)(*ptr_ptr_ptr_ptr_long_var)[5])(ptr_ptr_ptr_ptr_long_var);
  }
  (*ptr_char_var)(ptr_uint_var,&ppstack_long_ptr);
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3,uint_result,ptr_ptr_ptr_ptr_ptr_long_var3,ptr_ptr_ptr_ptr_long_var4);
  ptr_ptr_ptr_long_var = (longlong ***)InitializeSystemModule41(uint_result,0,long_result);
  if (ptr_ptr_ptr_long_var != (longlong ***)0x0) {
    (*(code *)(*ptr_ptr_ptr_long_var)[5])(ptr_ptr_ptr_long_var);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pppstack_long_ptr = (longlong ****)&pstack_long_ptr;
  pstack_long_ptr = (longlong **)ptr_ptr_ptr_long_var;
  if (ptr_ptr_ptr_long_var != (longlong ***)0x0) {
    (*(code *)(*ptr_ptr_ptr_long_var)[5])(ptr_ptr_ptr_long_var);
  }
  (*ptr_char_var)(ptr_uint_var,&pstack_long_ptr);
  ProcessGameData(*(uint64_t *)(long_result + 400));
  if (ptr_ptr_ptr_long_var != (longlong ***)0x0) {
    (*(code *)(*ptr_ptr_ptr_long_var)[7])(ptr_ptr_ptr_long_var);
  }
  if (ptr_ptr_ptr_ptr_long_var != (longlong ****)0x0) {
    (*(code *)(*ptr_ptr_ptr_ptr_long_var)[7])(ptr_ptr_ptr_ptr_long_var);
  }
  ptr_ptr_ptr_ptr_long_var4 = systemCoreData;
  *(uint8_t *)(systemCoreData[1] + 0x80) = 1;
  while( true ) {
    ptr_ptr_long_var = *ptr_ptr_ptr_ptr_long_var4[1];
    if (ptr_ptr_long_var == (longlong **)&g_system_global_variable8) {
      is_initialized1 = *(char *)(ptr_ptr_ptr_ptr_long_var4[1] + 2) != '\0';
    }
    else {
      is_initialized1 = (*(code *)ptr_ptr_long_var[0xd])();
    }
    ptr_ptr_ptr_ptr_long_var = systemCoreData;
    if (is_initialized1 != '\0') break;
    Sleep(1);
  }
  pppstack_long_ptr = systemCoreData;
  if (systemCoreData != (longlong ****)0x0) {
    long_result = __RTCastToVoid(systemCoreData);
    *ptr_ptr_ptr_ptr_long_var = (longlong ***)&globalSystemVariable;
    PostQueuedCompletionStatus(ptr_ptr_ptr_ptr_long_var[0x42686],0,0xffffffffffffffff);
    CloseHandle(ptr_ptr_ptr_ptr_long_var[0x42686]);
    ppstack_long_ptr = (longlong ***)(ptr_ptr_ptr_ptr_long_var + 0x42687);
    if ((longlong ***)*ppstack_long_ptr != (longlong ***)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    ppstack_long_ptr = (longlong ***)(ptr_ptr_ptr_ptr_long_var + 0x4267c);
    _Mtx_destroy_in_situ();
    ppstack_long_ptr = (longlong ***)(ptr_ptr_ptr_ptr_long_var + 0x40070);
    _Mtx_destroy_in_situ();
    InitializePhysicsSystem(ptr_ptr_ptr_ptr_long_var);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
  }
  ptr_ptr_ptr_ptr_long_var4 = g_system_handle_1;
  long_result = systemConfigurationData;
  systemCoreData = (longlong ****)0x0;
  if (systemConfigurationData != 0) {
    InitializeDatabaseSystem(systemConfigurationData);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  systemConfigurationData = 0;
  *(uint32_t *)(g_system_handle_1 + 0x2d) = 2;
  pppstack_long_ptr = ptr_ptr_ptr_ptr_long_var4;
  if (ptr_ptr_ptr_ptr_long_var4 == (longlong ****)0x0) {
    g_system_handle_1 = (longlong ****)0x0;
    WaitForSingleObject(inputSystemData,0xffffffff);
    do {
      int_result = ReleaseSemaphore(inputSystemData,1);
    } while (int_result == 0);
    uint_result = __acrt_iob_func(1);
    fflush(uint_result);
    uint_result = __acrt_iob_func(2);
    fflush(uint_result);
    uint_result = systemStatusData;
    (*(code *)(*ptr_ptr_ptr_ptr_long_var)[7])(ptr_ptr_ptr_ptr_long_var);
    return uint_result;
  }
  ProcessSystemStringData(ptr_ptr_ptr_ptr_long_var4 + 0x1e);
  ProcessSystemStringData(ptr_ptr_ptr_ptr_long_var4 + 0xf);
  ProcessSystemStringData(ptr_ptr_ptr_ptr_long_var4);
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_ptr_ptr_ptr_long_var4);
}

void InitializeMainSystem(uint64_t handleIdentifier)

{
  uint64_t aflag_initialized [2];

                    // 0x45a00  27  InitializeMainSystem
// void InitializeNetworkSystem(longlong *handleIdentifier)

void InitializeNetworkSystem(longlong *handleIdentifier)

{
  if ((longlong *)*handleIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*handleIdentifier + 0x38))();
  }
  return;
}
// void GetSystemFunctionPointer(longlong handleIdentifier,longlong resourceIdentifier)

void GetSystemFunctionPointer(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(resourceIdentifier + long_result) != '\0');
  if ((int)long_result < SYSTEM_DATA_COMPARE_SIZE00) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x000180045b59. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),SYSTEM_DATA_COMPARE_SIZE00);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,SYSTEM_DATA_COMPARE_SIZE00,resourceIdentifier);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}
// void InitializeSystemModule18(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

void InitializeSystemModule18(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  if (systemConfig + 1 < SYSTEM_DATA_COMPARE_SIZE00) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint8_t **)(handleIdentifier + 8),resourceIdentifier,(longlong)systemConfig);
  }
  **(uint8_t **)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void InitializeSystemModule48(void)

void InitializeSystemModule48(void)

{
                    // WARNING: Subroutine does not return
  memcpy();
}
// void InitializeSystemModule49(uint8_t *handleIdentifier)

void InitializeSystemModule49(uint8_t *handleIdentifier)

{
  longlong system_RDI;

  *handleIdentifier = 0;
  *(uint32_t *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void InitializeSystemModule43(void)

void InitializeSystemModule43(void)

{
                    // WARNING: Subroutine does not return
  InitializeSystemCore();
}

uint64_t *
InitializeSystemModule29(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,SYSTEM_DATA_COMPARE_SIZE18,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}

// 初始化IO完成端口
uint64_t * initialize_io_completion_port(uint64_t *port_handle,uint config_flags)

{
  *handleIdentifier = &globalSystemVariable;
  PostQueuedCompletionStatus(handleIdentifier[0x42686],0,0xffffffffffffffff,0,INVALID_HANDLE_VALUE);
  CloseHandle(handleIdentifier[0x42686]);
  if (handleIdentifier[0x42687] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  _Mtx_destroy_in_situ();
  _Mtx_destroy_in_situ();
  InitializePhysicsSystem(handleIdentifier);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x213458);
  }
  return handleIdentifier;
}

void _guard_check_icall(void)

{
  return;
}

uint64_t *
SystemFunction_36_8(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x418,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void ProcessSystemStringData(longlong handleIdentifier,longlong resourceIdentifier)

void ProcessSystemStringData(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(resourceIdentifier + long_result) != '\0');
  if ((int)long_result < 0x400) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x000180045f19. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),0x400);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,0x400,resourceIdentifier);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}
// void InitializeSystemDataNode31(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

void InitializeSystemDataNode31(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  if (systemConfig + 1 < 0x400) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint8_t **)(handleIdentifier + 8),resourceIdentifier,(longlong)systemConfig);
  }
  **(uint8_t **)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void InitializeSystemModule51(void)

void InitializeSystemModule51(void)

{
                    // WARNING: Subroutine does not return
  memcpy();
}
// void InitializeSystemModule52(uint8_t *handleIdentifier)

void InitializeSystemModule52(uint8_t *handleIdentifier)

{
  longlong system_RDI;

  *handleIdentifier = 0;
  *(uint32_t *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeRenderSystem(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void InitializeRenderSystem(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint8_t localBuffer_498 [32];
  uint64_t uintStack_478;
  void *system_buffer_ptr_468;
  uint8_t *system_buffer_ptr_460;
  uint32_t uintStack_458;
  uint8_t localBuffer_450 [1032];
  ulonglong uintStack_48;

  uintStack_478 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_498;
  system_buffer_ptr_468 = &g_system_data_info;
  system_buffer_ptr_460 = localBuffer_450;
  uintStack_458 = 0;
  localBuffer_450[0] = 0;
  long_result = strstr(*(uint64_t *)(handleIdentifier + 8));
  if (long_result != 0) {
    long_result = -1;
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    do {
      long_result = long_result + 1;
    } while (*(char *)(long_result + systemConfig) != '\0');
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_460,*(longlong *)(handleIdentifier + 8),long_result - *(longlong *)(handleIdentifier + 8));
  }
  system_buffer_ptr_468 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_498);
}
// void InitializeSystemDataNode26(uint64_t *handleIdentifier,uint32_t resourceIdentifier)

void InitializeSystemDataNode26(uint64_t *handleIdentifier,uint32_t resourceIdentifier)

{
  int int_result;

  do {
    int_result = ReleaseSemaphore(*handleIdentifier,resourceIdentifier,0);
  } while (int_result == 0);
  return;
}
// void InitializeResourceSystem(uint64_t *handleIdentifier)

void InitializeResourceSystem(uint64_t *handleIdentifier)

{
  int int_result;

  if (*(char *)(handleIdentifier + 1) != '\0') {
    int_result = _Mtx_unlock(*handleIdentifier);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
  }
  return;
}

uint64_t SetupGraphicsDevice(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  char is_initialized;
  int int_result;
  longlong long_result;
  uint64_t uint_result;
  uint8_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  long_result = handleIdentifier + 0x48;
  int_result = _Mtx_lock();
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  uint_result = 1;
  if (*(char *)(handleIdentifier + 0x98) != '\x01') {
    is_initialized = *(char *)(handleIdentifier + 0x98);
    while (is_initialized == '\0') {
      int_result = _Cnd_wait(handleIdentifier,long_result,systemConfig,systemFlags,uint_result,long_result,uint_result);
      if (int_result != 0) {
        __Throw_C_error_std__YAXH_Z(int_result);
      }
      is_initialized = *(char *)(handleIdentifier + 0x98);
    }
  }
  *(uint8_t *)(handleIdentifier + 0x98) = 0;
  int_result = _Mtx_unlock(long_result);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return 1;
}

longlong InitializeSystemModule6(uint32_t *handleIdentifier,uint32_t *resourceIdentifier)

{
  uint32_t uint_result;
  char char_var;
  void *ptr_uint_var;

  if (*(longlong *)(handleIdentifier + 0x18) != 0) {
    char_var = (**(code **)(handleIdentifier + 0x1a))(resourceIdentifier,handleIdentifier + 0x14);
    if (char_var == '\0') {
      if (g_system_data_variable0 == '\0') {
        ptr_uint_var = &g_system_data_variable3;
        if (*(void **)(handleIdentifier + 4) != (void *)0x0) {
          ptr_uint_var = *(void **)(handleIdentifier + 4);
        }
        ProcessSystemDataHeader(&g_system_data_config,ptr_uint_var);
      }
      *handleIdentifier = handleIdentifier[0x12];
      return (ulonglong)(uint3)((uint)handleIdentifier[0x12] >> 8) << 8;
    }
  }
  uint_result = *resourceIdentifier;
  *handleIdentifier = uint_result;
  return CONCAT71((uint7)(uint3)((uint)uint_result >> 8),1);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureGraphicsShader(uint64_t handleIdentifier,uint32_t resourceIdentifier)
void ConfigureGraphicsShader(uint64_t handleIdentifier,uint32_t resourceIdentifier)

{
  longlong long_result;
  char char_var;
  void *ptr_uint_var;
  uint32_t localBuffer_X10 [6];

  long_result = systemCoreData;
  if ((*(longlong *)(systemCoreData + 0x22f0) != 0) &&
     (localBuffer_X10[0] = resourceIdentifier, char_var = (**(code **)(systemCoreData + 0x22f8))(localBuffer_X10),
     resourceIdentifier = localBuffer_X10[0], char_var == '\0')) {
    if (g_system_data_variable0 == '\0') {
      ptr_uint_var = &g_system_data_variable3;
      if (*(void **)(long_result + 0x22a0) != (void *)0x0) {
        ptr_uint_var = *(void **)(long_result + 0x22a0);
      }
      ProcessSystemDataHeader(&g_system_data_config,ptr_uint_var);
    }
    *(uint32_t *)(long_result + 0x2290) = *(uint32_t *)(long_result + 0x22d8);
    return;
  }
  *(uint32_t *)(long_result + 0x2290) = resourceIdentifier;
  return;
}

uint64_t *
InitializeSystemModule42(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x38,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeSystemResources(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeSystemResources(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(resourceIdentifier + long_result) != '\0');
  if ((int)long_result < SYSTEM_NODE_HEADER_SIZE) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x0001800463b7. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),SYSTEM_NODE_HEADER_SIZE);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,SYSTEM_NODE_HEADER_SIZE,resourceIdentifier);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}
// void InitializeSystemDataNode23(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

void InitializeSystemDataNode23(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  if (systemConfig + 1 < SYSTEM_NODE_HEADER_SIZE) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint8_t **)(handleIdentifier + 8),resourceIdentifier,(longlong)systemConfig);
  }
  **(uint8_t **)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void InitializeSystemModule50(void)

void InitializeSystemModule50(void)

{
                    // WARNING: Subroutine does not return
  memcpy();
}
// void InitializeSystemModule53(uint8_t *handleIdentifier)

void InitializeSystemModule53(uint8_t *handleIdentifier)

{
  longlong system_RDI;

  *handleIdentifier = 0;
  *(uint32_t *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}

uint64_t * InitializeInputMutex(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_data_main;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule36(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void InitializeSystemModule36(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint8_t localBuffer_a8 [32];
  uint64_t uintStack_88;
  void *system_buffer_ptr_80;
  uint8_t *system_buffer_ptr_78;
  uint32_t uintStack_70;
  uint8_t localBuffer_68 [32];
  ulonglong uintStack_48;

  uintStack_88 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_a8;
  system_buffer_ptr_80 = &g_system_data_main;
  system_buffer_ptr_78 = localBuffer_68;
  uintStack_70 = 0;
  localBuffer_68[0] = 0;
  long_result = strstr(*(uint64_t *)(handleIdentifier + 8));
  if (long_result != 0) {
    long_result = -1;
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    do {
      long_result = long_result + 1;
    } while (*(char *)(long_result + systemConfig) != '\0');
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_78,*(longlong *)(handleIdentifier + 8),long_result - *(longlong *)(handleIdentifier + 8));
  }
  system_buffer_ptr_80 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_a8);
}

uint64_t * UtilityModule259(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x18);
  }
  return handleIdentifier;
}
// void InitializeSystemModule47(uint64_t *handleIdentifier)

void InitializeSystemModule47(uint64_t *handleIdentifier)

{
  int int_result;

  int_result = _Mtx_unlock(*handleIdentifier);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void InitializeSystemDataNode18(longlong handleIdentifier)

void InitializeSystemDataNode18(longlong handleIdentifier)

{
  int int_result;

  int_result = _Mtx_lock(handleIdentifier + 0x48);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  *(uint8_t *)(handleIdentifier + 0x98) = 1;
  int_result = _Cnd_broadcast(handleIdentifier);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  int_result = _Mtx_unlock(handleIdentifier + 0x48);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void ProcessEngineData(uint64_t *handleIdentifier)

void ProcessEngineData(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  return;
}

uint64_t *
InitializeRenderSystem(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,SYSTEM_NODE_HEADER_SIZE,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeStringManager(longlong *handleIdentifier)

void InitializeStringManager(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + SYSTEM_DATA_COMPARE_SIZE0) {
    InitializeSystemModule42(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule37(longlong *handleIdentifier)

void InitializeSystemModule37(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;

  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 5) {
    *node_root = &resourcePoolPointer;
    if (node_root[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    node_root[1] = 0;
    *(uint32_t *)(node_root + 3) = 0;
    *node_root = &globalSystemPointerData;
  }
  if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// void InitializeDatabaseSystem(ulonglong *handleIdentifier)

void InitializeDatabaseSystem(ulonglong *handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  node_root = (uint64_t *)*handleIdentifier;
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeGameSystem(longlong handleIdentifier,longlong resourceIdentifier)

{
  uint64_t ***ptr_ptr_ptr_uint_var;
  longlong long_result;
  void *ptr_uint_var;
  longlong long_result;
  int int_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  uint64_t ****ptr_ptr_ptr_ptr_uint_var;
  uint64_t ***pppustack_var;
  uint64_t *system_buffer_ptr_138;
  longlong longStack_130;
  uint32_t uintStack_128;
  uint64_t uintStack_120;
  uint64_t uintStack_118;
  uint64_t uintStack_110;
  uint64_t uintStack_108;
  uint64_t uintStack_100;
  uint64_t uintStack_f8;
  uint64_t uintStack_f0;
  uint64_t uintStack_e8;
  uint64_t uintStack_e0;
  uint64_t uintStack_d8;
  uint64_t uintStack_d0;
  uint64_t uintStack_c8;
  uint64_t uintStack_c0;
  uint64_t uintStack_b8;
  uint64_t uintStack_b0;
  uint64_t uintStack_a8;
  uint64_t uintStack_a0;
  uint64_t uintStack_98;
  uint64_t uintStack_90;
  uint64_t uintStack_88;
  uint64_t uintStack_80;
  uint64_t uintStack_78;
  uint64_t uintStack_70;
  uint64_t ***ppbufferPtr_68;
  uint64_t ***ppbufferPtr_60;
  uint64_t uintStack_58;
  uint64_t uintStack_50;
  uint64_t uintStack_48;
  uint32_t uintStack_40;
  uint64_t uintStack_38;

  uintStack_38 = INVALID_HANDLE_VALUE;
  long_result = 0;
  system_buffer_ptr_138 = (uint64_t *)&resourcePoolPointer;
  uintStack_120 = 0;
  longStack_130 = 0;
  uintStack_128 = 0;
  uintStack_108 = 0;
  uintStack_100 = 0;
  uintStack_f8 = 0;
  uintStack_f0 = 0;
  uintStack_e8 = 0;
  uintStack_e0 = 0;
  uintStack_d8 = 0;
  uintStack_d0 = 0;
  uintStack_c8 = 0;
  uintStack_40 = 3;
  uintStack_58 = 0;
  uintStack_50 = 0;
  uintStack_48 = 0;
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  pppustack_var = &ppbufferPtr_68;
  ppsystem_buffer_ptr_68 = &ppbufferPtr_68;
  ppsystem_buffer_ptr_60 = &ppbufferPtr_68;
  ConfigureSystemData(&bufferPtr_138system_buffer_ptr_138,ptr_uint_var);
  uintStack_118 = 0;
  uintStack_110 = 0;
  uintStack_c0 = 0;
  uintStack_b8 = 0;
  uintStack_b0 = 0;
  uintStack_a8 = 0;
  uintStack_a0 = 0;
  uintStack_98 = 0;
  uintStack_90 = 0;
  uintStack_88 = 0;
  uintStack_80 = 0;
  uintStack_78 = 0;
  uintStack_70 = 0;
  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (uint_result < *(ulonglong *)(handleIdentifier + 0x18)) {
    *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = uint_result + SYSTEM_DATA_COMPARE_SIZE0;
    InitializeSystemResources(uint_result,&bufferPtr_138system_buffer_ptr_138);
    ptr_ptr_ptr_ptr_uint_var = *(uint64_t *****)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    goto LAB_180046a90;
  }
  long_result = *(longlong *)(handleIdentifier + 8);
  long_result = (longlong)(uint_result - long_result) >> 8;
  if (long_result == 0) {
    long_result = 1;
LAB_1800469fd:
    long_result = AllocateSystemResource(systemMemoryPool,long_result << 8,*(uint8_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE));
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    long_result = *(longlong *)(handleIdentifier + 8);
  }
  else {
    long_result = long_result * 2;
    if (long_result != 0) goto LAB_1800469fd;
  }
  InitializeSystemModule21(&pppustack_var,long_result,uint_result,long_result);
  ptr_ptr_ptr_uint_var = pppustack_var;
  InitializeSystemResources(pppustack_var,&bufferPtr_138system_buffer_ptr_138);
  ptr_ptr_ptr_ptr_uint_var = (uint64_t ****)(ptr_ptr_ptr_uint_var + SYSTEM_NODE_HEADER_SIZE);
  long_result = *(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  if (long_result != long_result) {
    do {
      InitializeSystemModule42(long_result);
      long_result = long_result + SYSTEM_DATA_COMPARE_SIZE0;
    } while (long_result != long_result);
    long_result = *(longlong *)(handleIdentifier + 8);
  }
  if (long_result != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  *(longlong *)(handleIdentifier + 8) = long_result;
  *(uint64_t *****)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = ptr_ptr_ptr_ptr_uint_var;
  *(longlong *)(handleIdentifier + 0x18) = long_result * SYSTEM_DATA_COMPARE_SIZE0 + long_result;
LAB_180046a90:
  int_result = (int)((ulonglong)((longlong)ptr_ptr_ptr_ptr_uint_var - *(longlong *)(handleIdentifier + 8)) >> 8) + -1;
  *(int *)(handleIdentifier + 0x68) = int_result;
  pppustack_var = &ppbufferPtr_68;
  InitializeSystemModule25(&ppnew_var,uintStack_58);
  pppustack_var = (uint64_t ***)&bufferPtr_138system_buffer_ptr_138;
  system_buffer_ptr_138 = (uint64_t *)&resourcePoolPointer;
  if (longStack_130 == 0) {
    return int_result;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule42(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule42(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule25(handleIdentifier + 0x1a,handleIdentifier[0x1c],systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}

ulonglong InitializeSystemModule34(longlong handleIdentifier,longlong resourceIdentifier)

{
  byte *ptr_byte_var;
  int int_result;
  longlong long_result;
  byte *ptr_byte_var;
  int int_result;
  int int_result;
  ulonglong uint_result;
  longlong long_result;
  uint uint_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = (ulonglong)*(int *)(handleIdentifier + 0x68);
  long_result = *(longlong *)(handleIdentifier + 8);
  if (uint_result < (ulonglong)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - long_result >> 8)) {
    int_result = *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    int_result = *(int *)(uint_result * SYSTEM_DATA_COMPARE_SIZE0 + SYSTEM_DATA_COMPARE_SIZE + long_result);
    if (int_result == int_result) {
      if (int_result != 0) {
        ptr_byte_var = *(byte **)(uint_result * SYSTEM_DATA_COMPARE_SIZE0 + 8 + long_result);
        long_result = *(longlong *)(resourceIdentifier + 8) - (longlong)ptr_byte_var;
        do {
          ptr_byte_var = ptr_byte_var + long_result;
          int_result = (uint)*ptr_byte_var - (uint)*ptr_byte_var;
          if (int_result != 0) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (*ptr_byte_var != 0);
      }
    }
    else if (int_result != 0) goto LAB_180046c03;
    if (int_result == 0) {
LAB_180046c90:
      return uint_result & 0xffffffff;
    }
  }
LAB_180046c03:
  uint_result = 0;
  uint_result = *(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - long_result >> 8;
  if (uint_result != 0) {
    int_result = *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    uint_result = uint_result;
    do {
      int_result = *(int *)(uint_result + SYSTEM_DATA_COMPARE_SIZE + long_result);
      int_result = int_result;
      if (int_result == int_result) {
        if (int_result != 0) {
          ptr_byte_var = *(byte **)(uint_result + 8 + long_result);
          long_result = *(longlong *)(resourceIdentifier + 8) - (longlong)ptr_byte_var;
          do {
            ptr_byte_var = ptr_byte_var + long_result;
            int_result = (uint)*ptr_byte_var - (uint)*ptr_byte_var;
            if (int_result != 0) break;
            ptr_byte_var = ptr_byte_var + 1;
          } while (*ptr_byte_var != 0);
        }
LAB_180046c5e:
        if (int_result == 0) {
          *(int *)(handleIdentifier + 0x68) = (int)uint_result;
          goto LAB_180046c90;
        }
      }
      else if (int_result == 0) goto LAB_180046c5e;
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      uint_result = uint_result + SYSTEM_DATA_COMPARE_SIZE0;
    } while ((ulonglong)(longlong)(int)uint_result < uint_result);
  }
  return 0xffffffff;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule23(longlong *handleIdentifier,uint64_t *resourceIdentifier)
void InitializeSystemModule23(longlong *handleIdentifier,uint64_t *resourceIdentifier)

{
  longlong *long_ptr;
  longlong *stack_long_ptr;
  uint64_t *node_new;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  uint32_t uint_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  uint_result = 0;
  stack_long_ptr = handleIdentifier;
  node_new = resourceIdentifier;
  InitializeSystemModule31();
  long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,200,8,3,uint_result,uint_result);
  stack_long_ptr = long_ptr;
  ConfigureSystemHandles(long_ptr);
  *long_ptr = (longlong)&globalSystemVariable;
  long_ptr[0x18] = (longlong)&g_system_func_2;
  stack_long_ptr = long_ptr;
  (**(code **)(*long_ptr + 0x28))(long_ptr);
  uint_result = systemConfigurationData;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = long_ptr;
  (**(code **)(*long_ptr + 0x28))(long_ptr);
  InitializeSystemDataNode29(uint_result,&stack_long_ptr);
  (**(code **)(*long_ptr + 0x38))(long_ptr);
  systemCoreData = (longlong)*(int *)(g_system_base_1 + 0x224);
  InitializeResourceBlock(&g_system_data_variable0,resourceIdentifier);
  *resourceIdentifier = &resourcePoolPointer;
  if (resourceIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[1] = 0;
  *(uint32_t *)(resourceIdentifier + 3) = 0;
  *resourceIdentifier = &globalSystemPointerData;
  return;
}
// WARNING: Removing unreachable block (ram,0x0001800472a0)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializePhysicsSystem(void)
void InitializePhysicsSystem(void)

{
  uint64_t uint_result;
  char char_var;
  int compare_result;
  longlong ***ppptr_data;
  ulonglong uint_result;
  longlong long_result;
  uint64_t *node_previous;
  uint32_t *node_next;
  uint8_t *ptr_uint_var;
  uint32_t uint_result;
  float float_result;
  float float_result;
  uint8_t localBuffer_698 [32];
  longlong longStack_678;
  longlong longStack_670;
  int intStack_668;
  void *system_buffer_ptr_618;
  uint8_t *system_buffer_ptr_610;
  uint uintStack_608;
  ulonglong uintStack_600;
  uint32_t uintStack_5b8;
  longlong ***ppstack_long_ptr;
  longlong **pstack_long_ptr;
  longlong ****pppstack_long_ptr;
  void *system_buffer_ptr_578;
  uint64_t uintStack_570;
  uint32_t uintStack_568;
  uint64_t uintStack_560;
  void *system_buffer_ptr_558;
  longlong longStack_550;
  int intStack_548;
  uint32_t uintStack_540;
  void *system_buffer_ptr_538;
  longlong longStack_530;
  uint32_t uintStack_520;
  longlong ***appstack_long_ptr [2];
  void *system_buffer_ptr_508;
  code *stack_char_ptr;
  uint64_t uintStack_4f8;
  longlong **pstack_long_ptr;
  void *system_buffer_ptr_4e8;
  uint8_t *system_buffer_ptr_4e0;
  uint32_t uintStack_4d8;
  uint8_t localBuffer_4d0 [72];
  void *system_buffer_ptr_488;
  uint8_t *system_buffer_ptr_480;
  uint32_t uintStack_478;
  uint8_t localBuffer_470 [72];
  void *system_buffer_ptr_428;
  uint8_t *system_buffer_ptr_420;
  uint32_t uintStack_418;
  uint8_t localBuffer_410 [72];
  void *system_buffer_ptr_3c8;
  uint8_t *system_buffer_ptr_3c0;
  uint32_t uintStack_3b8;
  uint8_t localBuffer_3b0 [72];
  void *system_buffer_ptr_368;
  uint8_t *system_buffer_ptr_360;
  uint32_t uintStack_358;
  uint8_t localBuffer_350 [72];
  void *system_buffer_ptr_308;
  uint8_t *system_buffer_ptr_300;
  uint32_t uintStack_2f8;
  uint8_t localBuffer_2f0 [648];
  ulonglong uintStack_68;

  uintStack_4f8 = INVALID_HANDLE_VALUE;
  uintStack_68 = systemConfigurationData ^ (ulonglong)localBuffer_698;
  uintStack_5b8 = 0;
  if (*(int *)(g_system_base_1 + 0x224) - systemCoreData < 0xfb) {
                    // WARNING: Subroutine does not return
    InitializeSystemStack(uintStack_68 ^ (ulonglong)localBuffer_698);
  }
  *(uint8_t *)(systemCoreData + 0x39) = 1;
  ppptr_data = (longlong ***)AllocateSystemMemory(systemMemoryPool,200,8,3);
  ppstack_long_ptr = ppptr_data;
  ConfigureSystemHandles(ppptr_data);
  *ppptr_data = (longlong **)&globalSystemVariable;
  ppptr_data[0x18] = (longlong **)&g_system_func_3;
  pstack_long_ptr = (longlong **)ppptr_data;
  (*(code *)(*ppptr_data)[5])(ppptr_data);
  uint_result = systemConfigurationData;
  uintStack_5b8 = 1;
  ppstack_long_ptr = &pstack_long_ptr;
  pstack_long_ptr = (longlong **)ppptr_data;
  (*(code *)(*ppptr_data)[5])(ppptr_data);
  InitializeSystemDataNode29(uint_result,&pstack_long_ptr);
  uintStack_5b8 = 0;
  (*(code *)(*ppptr_data)[7])(ppptr_data);
  ProcessResourceData(&longStack_678,&g_system_data_variable0);
  if (intStack_668 == 0) {
    (**(code **)(longStack_678 + SYSTEM_DATA_COMPARE_SIZE))(&longStack_678,&g_global_config_2);
    char_var = ValidateSystemData(&longStack_678);
    if (char_var == '\0') {
      CleanupSystemData(&longStack_678);
    }
  }
  char_var = ValidateSystemData(&longStack_678);
  if (char_var == '\0') {
    CleanupSystemData(&longStack_678);
  }
  system_buffer_ptr_4e8 = &g_system_core_data_ptr;
  system_buffer_ptr_4e0 = localBuffer_4d0;
  localBuffer_4d0[0] = 0;
  uintStack_4d8 = 0x18;
  strcpy_s(localBuffer_4d0,0x40,&g_global_config_3);
  InitializeNetworkManagerSystem(systemCoreData,&bufferPtr_4e8system_buffer_ptr_4e8,&longStack_678);
  system_buffer_ptr_4e8 = &globalSystemPointerData;
  system_buffer_ptr_488 = &g_system_core_data_ptr;
  system_buffer_ptr_480 = localBuffer_470;
  localBuffer_470[0] = 0;
  uintStack_478 = 0xb;
  strcpy_s(localBuffer_470,0x40,&g_global_config_1);
  InitializeNetworkManagerSystem(systemCoreData,&bufferPtr_48system_buffer_ptr_488,&longStack_678);
  system_buffer_ptr_488 = &globalSystemPointerData;
  system_buffer_ptr_428 = &g_system_core_data_ptr;
  system_buffer_ptr_420 = localBuffer_410;
  localBuffer_410[0] = 0;
  uintStack_418 = 0x18;
  uint_result = strcpy_s(localBuffer_410,0x40,&g_global_config_3);
  systemConfigurationData = (float)InitializeSystemProfiler(uint_result,&bufferPtr_428system_buffer_ptr_428);
  systemConfigurationData = 1.0 / systemConfigurationData;
  system_buffer_ptr_428 = &globalSystemPointerData;
  system_buffer_ptr_3c8 = &g_system_core_data_ptr;
  system_buffer_ptr_3c0 = localBuffer_3b0;
  localBuffer_3b0[0] = 0;
  uintStack_3b8 = 0xb;
  uint_result = strcpy_s(localBuffer_3b0,0x40,&g_global_config_1);
  g_system_data_variablec = (float)InitializeSystemProfiler(uint_result,&bufferPtr_3c8system_buffer_ptr_3c8);
  g_system_data_variablec = 1.0 / g_system_data_variablec;
  system_buffer_ptr_3c8 = &globalSystemPointerData;
  system_buffer_ptr_368 = &g_system_core_data_ptr;
  system_buffer_ptr_360 = localBuffer_350;
  localBuffer_350[0] = 0;
  uintStack_358 = 0xb;
  uint_result = strcpy_s(localBuffer_350,0x40,&g_global_config_1);
  float_result = (float)ConfigureSystemParameters(uint_result,&bufferPtr_368system_buffer_ptr_368);
  system_buffer_ptr_368 = &globalSystemPointerData;
  system_buffer_ptr_308 = &g_system_core_data_ptr;
  system_buffer_ptr_300 = localBuffer_2f0;
  localBuffer_2f0[0] = 0;
  uintStack_2f8 = 0x18;
  uint_result = strcpy_s(localBuffer_2f0,0x40,&g_global_config_3);
  float_result = (float)ConfigureSystemParameters(uint_result,&bufferPtr_30system_buffer_ptr_308);
  system_buffer_ptr_308 = &globalSystemPointerData;
  uint_result = GetSystemStatus();
  if (0 < systemCoreData) {
    CompareSystemData(&g_system_data_variable0,&bufferPtr_558system_buffer_ptr_558,0,systemCoreData + -1);
    intStack_548 = intStack_548 + -1;
    long_result = (longlong)intStack_548;
    compare_result = -1;
    if (-1 < intStack_548) {
      do {
        compare_result = intStack_548;
        if (*(char *)(longStack_550 + long_result) == '/') break;
        intStack_548 = intStack_548 + -1;
        long_result = long_result + -1;
        compare_result = -1;
      } while (-1 < long_result);
    }
    CompareSystemData(&bufferPtr_558system_buffer_ptr_558,&bufferPtr_538system_buffer_ptr_538,compare_result + 1,0xffffffff);
    compare_result = InitializeSystemModule34(&g_system_data_variable0,&bufferPtr_538system_buffer_ptr_538);
    if (compare_result == -1) {
      compare_result = InitializeGameSystem(&g_system_data_variable0,&bufferPtr_538system_buffer_ptr_538);
    }
    long_result = (longlong)compare_result * SYSTEM_DATA_COMPARE_SIZE0;
    ppstack_long_ptr = (longlong ***)(systemConfigurationData + 0x30 + long_result);
    pppstack_long_ptr = appstack_long_ptr;
    system_buffer_ptr_508 = &g_system_func_19;
    stack_char_ptr = InitializeStringManagerSystem;
    appstack_long_ptr[0] = (longlong ***)&ppstack_long_ptr;
    InitializeFontSystem(appstack_long_ptr);
    *(double *)(long_result + 0xa0 + systemConfigurationData) = (double)(1.0 / float_result);
    *(double *)(long_result + 0xb8 + systemConfigurationData) = (double)(1.0 / float_result);
    *(int *)(long_result + 0xb0 + systemConfigurationData) = (int)(longlong)systemConfigurationData;
    *(int *)(long_result + 200 + systemConfigurationData) = (int)(longlong)g_system_data_variablec;
    *(double *)(long_result + SYSTEM_NODE_HEADER_SIZE + systemConfigurationData) = (double)(uint_result >> 0x14);
    system_buffer_ptr_538 = &resourcePoolPointer;
    if (longStack_530 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_530 = 0;
    uintStack_520 = 0;
    system_buffer_ptr_538 = &globalSystemPointerData;
    system_buffer_ptr_558 = &resourcePoolPointer;
    if (longStack_550 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_550 = 0;
    uintStack_540 = 0;
    system_buffer_ptr_558 = &globalSystemPointerData;
  }
  system_buffer_ptr_578 = &resourcePoolPointer;
  uintStack_560 = 0;
  uintStack_570 = 0;
  uintStack_568 = 0;
  system_buffer_ptr_618 = &resourcePoolPointer;
  uintStack_600 = 0;
  system_buffer_ptr_610 = (uint8_t *)0x0;
  uintStack_608 = 0;
  ConfigureSystemParameters(&bufferPtr_618system_buffer_ptr_618,intStack_668);
  if (intStack_668 != 0) {
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_610,longStack_670,intStack_668 + 1);
  }
  if (longStack_670 != 0) {
    uintStack_608 = 0;
    if (system_buffer_ptr_610 != (uint8_t *)0x0) {
      *system_buffer_ptr_610 = 0;
    }
    uintStack_600 = uintStack_600 & 0xffffffff;
  }
  ActivateSharedMemory(&longStack_678,1);
  compare_result = uintStack_608 + 0x11;
  ConfigureSystemParameters(&bufferPtr_618system_buffer_ptr_618,compare_result);
  node_next = (uint32_t *)(system_buffer_ptr_610 + uintStack_608);
  *node_next = 0x69676e65;
  node_next[1] = 0x635f656e;
  node_next[2] = 0x69666e6f;
  node_next[3] = 0x78742e67;
  *(uint16_t *)(node_next + 4) = 0x74;
  uintStack_608 = compare_result;
  node_previous = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x18,8,3);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_610 != (uint8_t *)0x0) {
    ptr_uint_var = bufferPtr_610;
  }
  *node_previous = 0;
  *(uint8_t *)(node_previous + 2) = 0;
  ProcessSystemNode(node_previous,ptr_uint_var,&g_system_data_variablec);
  InitializeTextureSystem(systemCoreData,node_previous);
  if (node_previous[1] != 0) {
    fclose();
    node_previous[1] = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
    if (node_previous[1] != 0) {
      fclose();
      node_previous[1] = 0;
      LOCK();
      systemCoreData = systemCoreData + -1;
      UNLOCK();
    }
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(node_previous);
}

uint64_t *
InitializeSystemModule24(uint64_t *handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = *resourceIdentifier;
  *(uint32_t *)(handleIdentifier + 1) = *(uint32_t *)(resourceIdentifier + 1);
  InitializeInputMutex(handleIdentifier + 2,resourceIdentifier + 2,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  *(uint32_t *)(handleIdentifier + 0x15) = *(uint32_t *)(resourceIdentifier + 0x15);
  *(uint32_t *)((longlong)handleIdentifier + 0xac) = *(uint32_t *)((longlong)resourceIdentifier + 0xac);
  handleIdentifier[0x16] = resourceIdentifier[0x16];
  handleIdentifier[0x17] = resourceIdentifier[0x17];
  handleIdentifier[0x18] = resourceIdentifier[0x18];
  *(uint8_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET) = *(uint8_t *)(resourceIdentifier + NODE_INITIALIZED_OFFSET);
  *(uint8_t *)((longlong)handleIdentifier + 0xc9) = *(uint8_t *)((longlong)resourceIdentifier + 0xc9);
  *(uint8_t *)((longlong)handleIdentifier + 0xca) = *(uint8_t *)((longlong)resourceIdentifier + 0xca);
  *(uint8_t *)((longlong)handleIdentifier + 0xcb) = *(uint8_t *)((longlong)resourceIdentifier + 0xcb);
  *(uint8_t *)((longlong)handleIdentifier + 0xcc) = *(uint8_t *)((longlong)resourceIdentifier + 0xcc);
  return handleIdentifier;
}
// void InitializeSystemModule47(longlong handleIdentifier)

void InitializeSystemModule47(longlong handleIdentifier)

{
  *(void **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = &globalSystemPointerData;
  return;
}
// void InitializeSystemDataNode18(uint64_t *handleIdentifier)

void InitializeSystemDataNode18(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureGraphicsParameters(uint64_t handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig,uint64_t systemFlags)
void ConfigureGraphicsParameters(uint64_t handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig,uint64_t systemFlags)

{
  byte bool_var;
  bool bool_var;
  int compare_result;
  uint64_t *ptr_uint_var;
  uint uint_result;
  byte *ptr_byte_var;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *ptr_uint_var;
  longlong long_result;
  uint64_t ustack_var;

  ustack_var = handleIdentifier;
  compare_result = InitializeSystemModule34(&g_system_data_variable0);
  if (compare_result == -1) {
    compare_result = InitializeGameSystem(&g_system_data_variable0,resourceIdentifier);
  }
  node_previous = (uint64_t *)(systemConfigurationData + 0xd0 + (longlong)compare_result * SYSTEM_DATA_COMPARE_SIZE0);
  ptr_uint_var = node_previous;
  if ((uint64_t *)node_previous[2] != (uint64_t *)0x0) {
    node_next = (uint64_t *)node_previous[2];
    do {
      if (*(int *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        ptr_uint_var = (uint64_t *)node_next[1];
        bool_var = false;
      }
      else {
        if (*(int *)(node_next + 6) == 0) {
          bool_var = true;
        }
        else {
          ptr_byte_var = *(byte **)(systemConfig + 8);
          long_result = node_next[5] - (longlong)ptr_byte_var;
          do {
            uint_result = (uint)ptr_byte_var[long_result];
            compare_result = *ptr_byte_var - uint_result;
            if (*ptr_byte_var != uint_result) break;
            ptr_byte_var = ptr_byte_var + 1;
          } while (uint_result != 0);
          bool_var = 0 < compare_result;
          if (compare_result < 1) {
            ptr_uint_var = (uint64_t *)node_next[1];
            goto LAB_180047f2c;
          }
        }
        ptr_uint_var = (uint64_t *)*node_next;
      }
LAB_180047f2c:
      if (bool_var) {
        node_next = ptr_uint_var;
      }
      ptr_uint_var = node_next;
      node_next = ptr_uint_var;
    } while (ptr_uint_var != (uint64_t *)0x0);
  }
  if (ptr_uint_var != node_previous) {
    if (*(int *)(ptr_uint_var + 6) == 0) goto LAB_180047f93;
    if (*(int *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE) != 0) {
      ptr_byte_var = (byte *)ptr_uint_var[5];
      long_result = *(longlong *)(systemConfig + 8) - (longlong)ptr_byte_var;
      do {
        bool_var = *ptr_byte_var;
        uint_result = (uint)ptr_byte_var[long_result];
        if (bool_var != uint_result) break;
        ptr_byte_var = ptr_byte_var + 1;
      } while (uint_result != 0);
      if ((int)(bool_var - uint_result) < 1) goto LAB_180047f93;
    }
  }
  ptr_uint_var = (uint64_t *)SystemFunction_17_6(node_previous,&ustack_var);
  ptr_uint_var = (uint64_t *)*ptr_uint_var;
LAB_180047f93:
  InitializeResourceBlock(ptr_uint_var + 8,systemConfig);
  ptr_uint_var[0xc] = systemFlags;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule31(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemModule31(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  double double_var;
  char char_var;
  double double_var;
  uint uint_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong long_result;
  uint32_t *node_next;
  void *ptr_uint_var;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  char *pis_initialized4;
  void *ptr_uint_var;
  uint uint_result;
  int int_result;
  void *system_buffer_ptr_c8;
  void *system_buffer_ptr_c0;
  uint uintStack_b8;
  uint64_t uintStack_b0;
  void *system_buffer_ptr_a8;
  char *stack_char_ptr;
  uint32_t uintStack_98;
  ulonglong uintStack_90;
  void *system_buffer_ptr_88;
  char *stack_char_ptr;
  uint32_t uintStack_78;
  ulonglong uintStack_70;

  long_result = g_system_base_1;
  uint_result = 0;
  if (g_system_data_variable0 == '\0') {
    return;
  }
  system_buffer_ptr_c8 = &resourcePoolPointer;
  uintStack_b0 = 0;
  system_buffer_ptr_c0 = (void *)0x0;
  uintStack_b8 = 0;
  uint_result = *(uint *)(g_system_base_1 + 0x180);
  uint_result = (ulonglong)uint_result;
  if (*(longlong *)(g_system_base_1 + 0x178) != 0) {
    ConfigureSystemParameters(&bufferPtr_c8system_buffer_ptr_c8,uint_result,systemConfig,systemFlags,1,INVALID_HANDLE_VALUE);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_c0,*(uint64_t *)(long_result + 0x178),uint_result);
  }
  if (system_buffer_ptr_c0 != (void *)0x0) {
    bufferPtr_c0[uint_result] = 0;
  }
  uintStack_b0 = CONCAT44(*(uint32_t *)(long_result + 0x18c),(uint32_t)uintStack_b0);
  uintStack_b8 = uint_result;
  ConfigureSystemParameters(&bufferPtr_c8system_buffer_ptr_c8,5);
  *(uint32_t *)(system_buffer_ptr_c0 + uintStack_b8) = 0x73676f6c;
  *(uint16_t *)((longlong)(system_buffer_ptr_c0 + uintStack_b8) + 4) = 0x2f;
  uintStack_b8 = 5;
  ConfigureSystemParameters(&bufferPtr_c8system_buffer_ptr_c8,0x18);
  node_next = (uint32_t *)(system_buffer_ptr_c0 + uintStack_b8);
  *node_next = 0x66726570;
  node_next[1] = 0x616d726f;
  node_next[2] = 0x5f65636e;
  node_next[3] = 0x2e676f6c;
  node_next[4] = 0x747874;
  uintStack_b8 = 0x18;
  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x18,8,3);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_c0 != (void *)0x0) {
    ptr_uint_var = bufferPtr_c0;
  }
  *ptr_uint_var = 0;
  *(uint8_t *)(ptr_uint_var + 2) = 0;
  ProcessSystemNode(ptr_uint_var,ptr_uint_var,&g_system_data_variablec);
  uint_result = 0;
  uint_result = uint_result;
  if (systemCoreData - systemConfigurationData >> 8 != 0) {
    do {
      long_result = systemConfigurationData;
      long_result = 0;
      system_buffer_ptr_88 = &resourcePoolPointer;
      uintStack_70 = 0;
      stack_char_ptr = (char *)0x0;
      uintStack_78 = 0;
      ConfigureSystemParameters(&bufferPtr_88system_buffer_ptr_88,*(uint32_t *)(systemConfigurationData + SYSTEM_DATA_COMPARE_SIZE + uint_result));
      int_result = *(int *)(long_result + SYSTEM_DATA_COMPARE_SIZE + uint_result);
      if (int_result != 0) {
                    // WARNING: Subroutine does not return
        memcpy(stack_char_ptr,*(uint64_t *)(long_result + 8 + uint_result),int_result + 1);
      }
      if (*(longlong *)(long_result + 8 + uint_result) != 0) {
        uintStack_78 = 0;
        if (stack_char_ptr != (char *)0x0) {
          *stack_char_ptr = '\0';
        }
        uintStack_70 = uintStack_70 & 0xffffffff;
      }
      char_var = *stack_char_ptr;
      while (char_var != '\0') {
        long_result = strchr(&g_system_data_variable4,(int)stack_char_ptr[long_result]);
        if (long_result != 0) {
          stack_char_ptr[long_result] = '_';
        }
        long_result = long_result + 1;
        char_var = stack_char_ptr[long_result];
      }
      pis_initialized4 = "";
      if (stack_char_ptr != (char *)0x0) {
        pis_initialized4 = stack_char_ptr;
      }
      InitializeSystemModule(ptr_uint_var,&g_global_config_4,pis_initialized4);
      double_var = *(double *)(long_result + 0xa0 + uint_result);
      double_var = (double)*(uint *)(long_result + 0xb0 + uint_result);
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_global_config_5,double_var);
      }
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_global_config_7,double_var);
      }
      double_var = *(double *)(long_result + 0xb8 + uint_result);
      double_var = (double)*(uint *)(long_result + 200 + uint_result);
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_global_config_8,double_var);
      }
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_global_config_9,double_var);
      }
      double_var = *(double *)(long_result + SYSTEM_NODE_HEADER_SIZE + uint_result);
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_global_config_10,double_var);
      }
      double_var = *(double *)(long_result + 0x28 + uint_result);
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_global_config_11,double_var);
      }
      long_result = *(longlong *)(long_result + 0x30 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&g_global_config_12,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x38 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&globalSystemVariable,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x40 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&globalSystemVariable,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x48 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&g_system_global_variable8,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x50 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&globalSystemVariable,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x58 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&g_system_global_variable8,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x60 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&globalSystemVariable,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x68 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&g_system_global_variable8,
                    (double)(float)(double_var * 9.5367431640625e-07));
      long_result = *(longlong *)(long_result + 0x70 + uint_result);
      double_var = (double)long_result;
      if (long_result < 0) {
        double_var = double_var + 1.8446744073709552e+19;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_global_variable4,&g_system_global_variable8,
                    (double)(float)(double_var * 9.5367431640625e-07));
      double_var = *(double *)(long_result + 0x78 + uint_result);
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_system_global_variable8,double_var);
      }
      double_var = *(double *)(long_result + 0x80 + uint_result);
      if (double_var != 0.0) {
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,&g_system_global_variable8,double_var);
      }
      long_result = uint_result + 0xd0 + long_result;
      long_result = *(longlong *)(long_result + 8);
      uint_result = (uint)uint_result;
      while (long_result != long_result) {
        long_result = 0;
        system_buffer_ptr_a8 = &resourcePoolPointer;
        uintStack_90 = 0;
        stack_char_ptr = (char *)0x0;
        uintStack_98 = 0;
        ConfigureSystemParameters(&bufferPtr_a8system_buffer_ptr_a8,*(uint32_t *)(long_result + 0x50));
        if (*(int *)(long_result + 0x50) != 0) {
                    // WARNING: Subroutine does not return
          memcpy(stack_char_ptr,*(uint64_t *)(long_result + 0x48),*(int *)(long_result + 0x50) + 1);
        }
        if (*(longlong *)(long_result + 0x48) != 0) {
          uintStack_98 = 0;
          if (stack_char_ptr != (char *)0x0) {
            *stack_char_ptr = '\0';
          }
          uintStack_90 = uintStack_90 & 0xffffffff;
        }
        char_var = *stack_char_ptr;
        while (char_var != '\0') {
          long_result = strchr(&g_system_data_variable4,(int)stack_char_ptr[long_result]);
          if (long_result != 0) {
            stack_char_ptr[long_result] = '_';
          }
          long_result = long_result + 1;
          char_var = stack_char_ptr[long_result];
        }
        pis_initialized4 = "";
        if (stack_char_ptr != (char *)0x0) {
          pis_initialized4 = stack_char_ptr;
        }
        InitializeSystemModule(ptr_uint_var,&g_global_config_6,pis_initialized4,*(uint64_t *)(long_result + 0x60));
        system_buffer_ptr_a8 = &resourcePoolPointer;
        if (stack_char_ptr != (char *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        stack_char_ptr = (char *)0x0;
        uintStack_90 = uintStack_90 & 0xffffffff00000000;
        system_buffer_ptr_a8 = &globalSystemPointerData;
        long_result = DestroySystemHandle(long_result);
        uint_result = uint_result;
      }
      InitializeSystemModule(ptr_uint_var,&g_system_configuration_data_ptr);
      system_buffer_ptr_88 = &resourcePoolPointer;
      if (stack_char_ptr != (char *)0x0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      stack_char_ptr = (char *)0x0;
      uintStack_70 = uintStack_70 & 0xffffffff00000000;
      system_buffer_ptr_88 = &globalSystemPointerData;
      uint_result = uint_result + 1;
      uint_result = (ulonglong)uint_result;
      uint_result = uint_result + SYSTEM_DATA_COMPARE_SIZE0;
    } while ((ulonglong)(longlong)(int)uint_result < (ulonglong)(systemCoreData - systemConfigurationData >> 8));
  }
  int_result = 0;
  InitializeSystemModule(ptr_uint_var,&g_system_global_variable8);
  if ((g_memory_base_address - systemConfigurationData) / 0x28 != 0) {
    long_result = 0;
    do {
      long_result = systemConfigurationData;
      long_result = 0;
      pis_initialized4 = *(char **)(systemConfigurationData + 8 + long_result);
      char_var = *pis_initialized4;
      while (char_var != '\0') {
        long_result = strchr(&g_system_data_variable4,(int)pis_initialized4[long_result]);
        if (long_result != 0) {
          *(uint8_t *)(long_result + *(longlong *)(long_result + 8 + long_result)) = 0x5f;
        }
        long_result = long_result + 1;
        pis_initialized4 = *(char **)(long_result + 8 + long_result);
        char_var = pis_initialized4[long_result];
      }
      ptr_uint_var = *(void **)(systemConfigurationData + 8 + long_result);
      ptr_uint_var = &g_system_data_variable3;
      if (ptr_uint_var != (void *)0x0) {
        ptr_uint_var = ptr_uint_var;
      }
      InitializeSystemModule(ptr_uint_var,&g_global_config_6,ptr_uint_var,*(uint64_t *)(systemConfigurationData + SYSTEM_NODE_HEADER_SIZE + long_result));
      int_result = int_result + 1;
      long_result = long_result + 0x28;
    } while ((ulonglong)(longlong)int_result < (ulonglong)((g_memory_base_address - systemConfigurationData) / 0x28));
  }
  if (ptr_uint_var[1] != 0) {
    fclose();
    ptr_uint_var[1] = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
    if (ptr_uint_var[1] != 0) {
      fclose();
      ptr_uint_var[1] = 0;
      LOCK();
      systemCoreData = systemCoreData + -1;
      UNLOCK();
    }
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// void InitializeSystemModule40(longlong *handleIdentifier)

void InitializeSystemModule40(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + SYSTEM_DATA_COMPARE_SIZE0) {
    InitializeSystemModule42(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule17(longlong *handleIdentifier)

void InitializeSystemModule17(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;

  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 5) {
    *node_root = &resourcePoolPointer;
    if (node_root[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    node_root[1] = 0;
    *(uint32_t *)(node_root + 3) = 0;
    *node_root = &globalSystemPointerData;
  }
  if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// void InitializeInputSystem(ulonglong *handleIdentifier)

void InitializeInputSystem(ulonglong *handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  node_root = (uint64_t *)*handleIdentifier;
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void UpdateAudioResources(longlong handleIdentifier)
void UpdateAudioResources(longlong handleIdentifier)

{
  if (handleIdentifier != 0) {
    if (*(longlong *)(handleIdentifier + 8) != 0) {
      fclose();
      *(uint64_t *)(handleIdentifier + 8) = 0;
      LOCK();
      systemCoreData = systemCoreData + -1;
      UNLOCK();
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(handleIdentifier);
  }
  return;
}

longlong InitializeSystemResources(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint64_t uint_result;
  uint64_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *ptr_uint_var;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ProcessResourceData();
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = *(uint64_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE);
  *(uint64_t *)(handleIdentifier + 0x28) = *(uint64_t *)(resourceIdentifier + 0x28);
  uint_result = *(uint64_t *)(resourceIdentifier + 0x38);
  *(uint64_t *)(handleIdentifier + 0x30) = *(uint64_t *)(resourceIdentifier + 0x30);
  *(uint64_t *)(handleIdentifier + 0x38) = uint_result;
  uint_result = *(uint64_t *)(resourceIdentifier + 0x48);
  *(uint64_t *)(handleIdentifier + 0x40) = *(uint64_t *)(resourceIdentifier + 0x40);
  *(uint64_t *)(handleIdentifier + 0x48) = uint_result;
  uint_result = *(uint64_t *)(resourceIdentifier + 0x58);
  *(uint64_t *)(handleIdentifier + 0x50) = *(uint64_t *)(resourceIdentifier + 0x50);
  *(uint64_t *)(handleIdentifier + 0x58) = uint_result;
  uint_result = *(uint32_t *)(resourceIdentifier + 100);
  uint_result = *(uint32_t *)(resourceIdentifier + 0x68);
  uint_result = *(uint32_t *)(resourceIdentifier + 0x6c);
  *(uint32_t *)(handleIdentifier + 0x60) = *(uint32_t *)(resourceIdentifier + 0x60);
  *(uint32_t *)(handleIdentifier + 100) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x68) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x6c) = uint_result;
  *(uint64_t *)(handleIdentifier + 0x70) = *(uint64_t *)(resourceIdentifier + 0x70);
  *(uint64_t *)(handleIdentifier + 0x78) = *(uint64_t *)(resourceIdentifier + 0x78);
  *(uint64_t *)(handleIdentifier + 0x80) = *(uint64_t *)(resourceIdentifier + 0x80);
  *(uint64_t *)(handleIdentifier + 0x88) = *(uint64_t *)(resourceIdentifier + 0x88);
  *(uint64_t *)(handleIdentifier + 0x90) = *(uint64_t *)(resourceIdentifier + 0x90);
  *(uint32_t *)(handleIdentifier + 0x98) = *(uint32_t *)(resourceIdentifier + 0x98);
  *(uint32_t *)(handleIdentifier + 0x9c) = *(uint32_t *)(resourceIdentifier + 0x9c);
  *(uint64_t *)(handleIdentifier + 0xa0) = *(uint64_t *)(resourceIdentifier + 0xa0);
  *(uint64_t *)(handleIdentifier + 0xa8) = *(uint64_t *)(resourceIdentifier + 0xa8);
  *(uint32_t *)(handleIdentifier + 0xb0) = *(uint32_t *)(resourceIdentifier + 0xb0);
  *(uint32_t *)(handleIdentifier + 0xb4) = *(uint32_t *)(resourceIdentifier + 0xb4);
  *(uint64_t *)(handleIdentifier + 0xb8) = *(uint64_t *)(resourceIdentifier + 0xb8);
  *(uint64_t *)(handleIdentifier + 0xc0) = *(uint64_t *)(resourceIdentifier + 0xc0);
  *(uint32_t *)(handleIdentifier + 200) = *(uint32_t *)(resourceIdentifier + 200);
  *(uint32_t *)(handleIdentifier + 0xcc) = *(uint32_t *)(resourceIdentifier + 0xcc);
  ptr_uint_var = (uint64_t *)(handleIdentifier + 0xd0);
  *ptr_uint_var = 0;
  *(uint64_t *)(handleIdentifier + 0xd8) = 0;
  *(uint64_t *)(handleIdentifier + 0xe0) = 0;
  *(uint64_t *)(handleIdentifier + 0xe8) = 0;
  *(uint64_t *)(handleIdentifier + 0xf0) = 0;
  *(uint32_t *)(handleIdentifier + 0xf8) = *(uint32_t *)(resourceIdentifier + 0xf8);
  *ptr_uint_var = ptr_uint_var;
  *(uint64_t **)(handleIdentifier + 0xd8) = ptr_uint_var;
  *(uint64_t *)(handleIdentifier + 0xe0) = 0;
  *(uint8_t *)(handleIdentifier + 0xe8) = 0;
  *(uint64_t *)(handleIdentifier + 0xf0) = 0;
  if (*(longlong *)(resourceIdentifier + 0xe0) != 0) {
    ptr_uint_var = (uint64_t *)InitializeSystemDataNode26(ptr_uint_var,*(longlong *)(resourceIdentifier + 0xe0),ptr_uint_var,systemFlags,uint_result)
    ;
    *(uint64_t **)(handleIdentifier + 0xe0) = ptr_uint_var;
    node_next = (uint64_t *)*ptr_uint_var;
    node_previous = ptr_uint_var;
    while (node_current = node_next, node_current != (uint64_t *)0x0) {
      node_previous = node_current;
      node_next = (uint64_t *)*node_current;
    }
    *ptr_uint_var = node_previous;
    ptr_uint_var = (uint64_t *)ptr_uint_var[1];
    while (node_previous = ptr_uint_var, node_previous != (uint64_t *)0x0) {
      ptr_uint_var = node_previous;
      ptr_uint_var = (uint64_t *)node_previous[1];
    }
    *(uint64_t **)(handleIdentifier + 0xd8) = ptr_uint_var;
    *(uint64_t *)(handleIdentifier + 0xf0) = *(uint64_t *)(resourceIdentifier + 0xf0);
  }
  return handleIdentifier;
}

uint64_t InitializeThreadManagerSystem(uint64_t handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeInputManagerSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,200,systemConfig,systemFlags,uint_result);
  }
  return handleIdentifier;
}

uint64_t *
SystemFunction_17_6(longlong *handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,longlong *systemFlags,
             longlong parameter_5)

{
  byte bool_var;
  bool bool_var;
  longlong *long_ptr;
  longlong *ptr_data;
  byte *ptr_byte_var;
  uint uint_result;
  longlong long_result;
  uint64_t uint_result;
  longlong *stack_long_ptr;

  ptr_data = (longlong *)*handleIdentifier;
  if ((systemFlags == ptr_data) || (systemFlags == handleIdentifier)) {
    if ((handleIdentifier[4] != 0) && (*(int *)(parameter_5 + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
      systemFlags = ptr_data;
      if (*(int *)(ptr_data + 6) != 0) {
        ptr_byte_var = *(byte **)(parameter_5 + 8);
        long_result = ptr_data[5] - (longlong)ptr_byte_var;
        do {
          bool_var = *ptr_byte_var;
          uint_result = (uint)ptr_byte_var[long_result];
          if (bool_var != uint_result) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (uint_result != 0);
        if ((int)(bool_var - uint_result) < 1) goto LAB_180048dd7;
      }
LAB_180048db7:
      uint_result = 0;
LAB_180048dba:
      if (systemFlags != (longlong *)0x0) {
        InitializeSystemDataNode19(handleIdentifier,resourceIdentifier,systemFlags,uint_result,parameter_5);
        return resourceIdentifier;
      }
    }
  }
  else {
    ptr_data = (longlong *)DestroySystemHandle(systemFlags);
    if (*(int *)(parameter_5 + SYSTEM_DATA_COMPARE_SIZE) != 0) {
      if ((int)systemFlags[6] != 0) {
        ptr_byte_var = *(byte **)(parameter_5 + 8);
        long_result = systemFlags[5] - (longlong)ptr_byte_var;
        do {
          bool_var = *ptr_byte_var;
          uint_result = (uint)ptr_byte_var[long_result];
          if (bool_var != uint_result) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (uint_result != 0);
        if ((int)(bool_var - uint_result) < 1) goto LAB_180048dd7;
      }
      if ((int)ptr_data[6] != 0) {
        ptr_byte_var = (byte *)ptr_data[5];
        long_result = *(longlong *)(parameter_5 + 8) - (longlong)ptr_byte_var;
        do {
          bool_var = *ptr_byte_var;
          uint_result = (uint)ptr_byte_var[long_result];
          if (bool_var != uint_result) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (uint_result != 0);
        if (0 < (int)(bool_var - uint_result)) {
          if (*systemFlags == 0) goto LAB_180048db7;
          uint_result = 1;
          systemFlags = ptr_data;
          goto LAB_180048dba;
        }
      }
    }
  }
LAB_180048dd7:
  bool_var = true;
  ptr_data = (longlong *)handleIdentifier[2];
  long_ptr = handleIdentifier;
  while (ptr_data != (longlong *)0x0) {
    long_ptr = ptr_data;
    if ((int)ptr_data[6] == 0) {
      bool_var = false;
LAB_180048e00:
      ptr_data = (longlong *)*ptr_data;
    }
    else {
      if (*(int *)(parameter_5 + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        bool_var = true;
      }
      else {
        ptr_byte_var = (byte *)ptr_data[5];
        long_result = *(longlong *)(parameter_5 + 8) - (longlong)ptr_byte_var;
        do {
          bool_var = *ptr_byte_var;
          uint_result = (uint)ptr_byte_var[long_result];
          if (bool_var != uint_result) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (uint_result != 0);
        bool_var = 0 < (int)(bool_var - uint_result);
      }
      if (!bool_var) goto LAB_180048e00;
      ptr_data = (longlong *)ptr_data[1];
    }
  }
  ptr_data = long_ptr;
  if (bool_var) {
    if (long_ptr != (longlong *)handleIdentifier[1]) {
      ptr_data = (longlong *)InitializeSystemHandle(long_ptr);
      goto LAB_180048e20;
    }
  }
  else {
LAB_180048e20:
    if (*(int *)(parameter_5 + SYSTEM_DATA_COMPARE_SIZE) == 0) goto LAB_180048e74;
    if ((int)ptr_data[6] != 0) {
      ptr_byte_var = *(byte **)(parameter_5 + 8);
      long_result = ptr_data[5] - (longlong)ptr_byte_var;
      do {
        bool_var = *ptr_byte_var;
        uint_result = (uint)ptr_byte_var[long_result];
        if (bool_var != uint_result) break;
        ptr_byte_var = ptr_byte_var + 1;
      } while (uint_result != 0);
      if ((int)(bool_var - uint_result) < 1) goto LAB_180048e74;
    }
  }
  InitializeSystemDataNode19(handleIdentifier,&stack_long_ptr,long_ptr,0,parameter_5);
  ptr_data = stack_long_ptr;
LAB_180048e74:
  *resourceIdentifier = ptr_data;
  return resourceIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode19(longlong handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig,uint64_t systemFlags,
void InitializeSystemDataNode19(longlong handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig,uint64_t systemFlags,
                  longlong parameter_5)

{
  byte bool_var;
  byte *ptr_byte_var;
  uint uint_result;
  uint64_t *ptr_uint_var;
  longlong allocation_size;
  uint64_t uint_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  uint_result = 0;
  if (((char)systemFlags != '\0') || (systemConfig == handleIdentifier)) goto LAB_180048f62;
  if (*(int *)(systemConfig + 0x30) != 0) {
    if (*(int *)(parameter_5 + SYSTEM_DATA_COMPARE_SIZE) == 0) goto LAB_180048f62;
    ptr_byte_var = *(byte **)(systemConfig + 0x28);
    allocation_size = *(longlong *)(parameter_5 + 8) - (longlong)ptr_byte_var;
    do {
      bool_var = *ptr_byte_var;
      uint_result = (uint)ptr_byte_var[allocation_size];
      if (bool_var != uint_result) break;
      ptr_byte_var = ptr_byte_var + 1;
    } while (uint_result != 0);
    if (0 < (int)(bool_var - uint_result)) goto LAB_180048f62;
  }
  uint_result = 1;
LAB_180048f62:
  allocation_size = AllocateSystemResource(systemMemoryPool,0x68,*(uint8_t *)(handleIdentifier + 0x28),systemFlags,
                        INVALID_HANDLE_VALUE);
  ProcessResourceData(allocation_size + SYSTEM_NODE_HEADER_SIZE,parameter_5);
  ptr_uint_var = (uint64_t *)(allocation_size + 0x40);
  *(uint64_t *)(allocation_size + 0x50) = 0;
  *(uint64_t *)(allocation_size + 0x58) = 0;
  *(uint64_t *)(allocation_size + 0x60) = 0;
  *ptr_uint_var = &globalSystemPointerData;
  *(uint64_t *)(allocation_size + 0x48) = 0;
  *(uint32_t *)(allocation_size + 0x50) = 0;
  *ptr_uint_var = &resourcePoolPointer;
  *(uint64_t *)(allocation_size + 0x58) = 0;
  *(uint64_t *)(allocation_size + 0x48) = 0;
  *(uint32_t *)(allocation_size + 0x50) = 0;
                    // WARNING: Subroutine does not return
  CreateSystemHandle(allocation_size,systemConfig,handleIdentifier,uint_result,uint_result,ptr_uint_var);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemDataNode26(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  uint64_t *node_root;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)InitializeSystemModule41();
  if (*resourceIdentifier != 0) {
    uint_result = InitializeSystemDataNode26(handleIdentifier,*resourceIdentifier,ptr_uint_var,systemFlags,uint_result);
    *ptr_uint_var = uint_result;
  }
  node_root = ptr_uint_var;
  for (long_ptr = (longlong *)resourceIdentifier[1]; long_ptr != (longlong *)0x0; long_ptr = (longlong *)long_ptr[1]) {
    ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x68,*(uint8_t *)(handleIdentifier + 0x28));
    ProcessResourceData(ptr_uint_var + 4,long_ptr + 4);
    ProcessResourceData(ptr_uint_var + 8,long_ptr + 8);
    ptr_uint_var[0xc] = long_ptr[0xc];
    *ptr_uint_var = 0;
    ptr_uint_var[1] = 0;
    ptr_uint_var[2] = node_root;
    *(char *)(ptr_uint_var + 3) = (char)long_ptr[3];
    node_root[1] = ptr_uint_var;
    if (*long_ptr != 0) {
      uint_result = InitializeSystemDataNode26(handleIdentifier,*long_ptr,ptr_uint_var);
      *ptr_uint_var = uint_result;
    }
    node_root = ptr_uint_var;
  }
  return ptr_uint_var;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemModule41(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = (uint64_t *)
           AllocateSystemResource(systemMemoryPool,0x68,*(uint8_t *)(handleIdentifier + 0x28),systemFlags,
                         INVALID_HANDLE_VALUE);
  ProcessResourceData(ptr_uint_var + 4,resourceIdentifier + SYSTEM_NODE_HEADER_SIZE);
  ProcessResourceData(ptr_uint_var + 8,resourceIdentifier + 0x40);
  ptr_uint_var[0xc] = *(uint64_t *)(resourceIdentifier + 0x60);
  *ptr_uint_var = 0;
  ptr_uint_var[1] = 0;
  ptr_uint_var[2] = systemConfig;
  *(uint8_t *)(ptr_uint_var + 3) = *(uint8_t *)(resourceIdentifier + 0x18);
  return ptr_uint_var;
}

uint64_t *
InitializeSystemModule21(uint64_t *handleIdentifier,longlong *resourceIdentifier,longlong *systemConfig,uint64_t *systemFlags)

{
  longlong *long_ptr;
  longlong *long_ptr;
  uint32_t uint_result;
  longlong long_result;
  longlong *pallocation_size;

  *handleIdentifier = systemFlags;
  if (resourceIdentifier != systemConfig) {
    pallocation_size = resourceIdentifier + 0x1b;
    do {
      *systemFlags = &globalSystemPointerData;
      systemFlags[1] = 0;
      *(uint32_t *)(systemFlags + 2) = 0;
      *systemFlags = &resourcePoolPointer;
      systemFlags[3] = 0;
      systemFlags[1] = 0;
      *(uint32_t *)(systemFlags + 2) = 0;
      *(int *)(systemFlags + 2) = (int)pallocation_size[-NODE_INITIALIZED_OFFSET];
      systemFlags[1] = pallocation_size[-0x1a];
      *(uint32_t *)((longlong)systemFlags + 0x1c) = *(uint32_t *)((longlong)pallocation_size + -0xbc);
      *(int *)(systemFlags + 3) = (int)pallocation_size[-0x18];
      *(uint32_t *)(pallocation_size + -NODE_INITIALIZED_OFFSET) = 0;
      pallocation_size[-0x1a] = 0;
      pallocation_size[-0x18] = 0;
      systemFlags[4] = pallocation_size[-0x17];
      systemFlags[5] = pallocation_size[-0x16];
      long_result = pallocation_size[-0x14];
      systemFlags[6] = pallocation_size[-0x15];
      systemFlags[7] = long_result;
      long_result = pallocation_size[-0x12];
      systemFlags[8] = pallocation_size[-0x13];
      systemFlags[9] = long_result;
      long_result = pallocation_size[-SYSTEM_DATA_COMPARE_SIZE];
      systemFlags[10] = pallocation_size[-0x11];
      systemFlags[0xb] = long_result;
      long_result = pallocation_size[-0xe];
      systemFlags[0xc] = pallocation_size[-0xf];
      systemFlags[0xd] = long_result;
      systemFlags[0xe] = pallocation_size[-0xd];
      systemFlags[0xf] = pallocation_size[-0xc];
      systemFlags[SYSTEM_DATA_COMPARE_SIZE] = pallocation_size[-0xb];
      systemFlags[0x11] = pallocation_size[-10];
      systemFlags[0x12] = pallocation_size[-9];
      *(int *)(systemFlags + 0x13) = (int)pallocation_size[-8];
      *(uint32_t *)((longlong)systemFlags + 0x9c) = *(uint32_t *)((longlong)pallocation_size + -0x3c);
      systemFlags[0x14] = pallocation_size[-7];
      systemFlags[0x15] = pallocation_size[-6];
      *(int *)(systemFlags + 0x16) = (int)pallocation_size[-5];
      *(uint32_t *)((longlong)systemFlags + 0xb4) = *(uint32_t *)((longlong)pallocation_size + -0x24);
      systemFlags[0x17] = pallocation_size[-4];
      systemFlags[0x18] = pallocation_size[-3];
      *(int *)(systemFlags + NODE_INITIALIZED_OFFSET) = (int)pallocation_size[-2];
      *(uint32_t *)((longlong)systemFlags + 0xcc) = *(uint32_t *)((longlong)pallocation_size + -0xc);
      long_ptr = systemFlags + 0x1a;
      *long_ptr = 0;
      systemFlags[0x1b] = 0;
      systemFlags[0x1c] = 0;
      systemFlags[0x1d] = 0;
      systemFlags[0x1e] = 0;
      *(int *)(systemFlags + 0x1f) = (int)pallocation_size[4];
      *long_ptr = (longlong)long_ptr;
      systemFlags[0x1b] = long_ptr;
      systemFlags[0x1c] = 0;
      *(uint8_t *)(systemFlags + 0x1d) = 0;
      systemFlags[0x1e] = 0;
      systemFlags[0x1e] = pallocation_size[3];
      pallocation_size[3] = 0;
      uint_result = *(uint32_t *)(systemFlags + 0x1f);
      *(int *)(systemFlags + 0x1f) = (int)pallocation_size[4];
      *(uint32_t *)(pallocation_size + 4) = uint_result;
      if (systemFlags[0x1c] == 0) {
        if (pallocation_size[1] != 0) {
          long_ptr = pallocation_size + -1;
          *long_ptr = *long_ptr;
          systemFlags[0x1b] = *pallocation_size;
          long_result = pallocation_size[1];
          systemFlags[0x1c] = long_result;
          *(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) = long_ptr;
          *long_ptr = (longlong)long_ptr;
          *pallocation_size = (longlong)long_ptr;
          pallocation_size[1] = 0;
        }
      }
      else if (pallocation_size[1] == 0) {
        pallocation_size[-1] = *long_ptr;
        *pallocation_size = systemFlags[0x1b];
        long_result = systemFlags[0x1c];
        pallocation_size[1] = long_result;
        *(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) = pallocation_size + -1;
        *long_ptr = (longlong)long_ptr;
        systemFlags[0x1b] = long_ptr;
        systemFlags[0x1c] = 0;
      }
      else {
        long_result = *long_ptr;
        long_ptr = pallocation_size + -1;
        *long_ptr = *long_ptr;
        *long_ptr = long_result;
        long_result = systemFlags[0x1b];
        systemFlags[0x1b] = *pallocation_size;
        *pallocation_size = long_result;
        long_result = systemFlags[0x1c];
        systemFlags[0x1c] = pallocation_size[1];
        pallocation_size[1] = long_result;
        *(longlong **)(systemFlags[0x1c] + SYSTEM_DATA_COMPARE_SIZE) = long_ptr;
        *(longlong **)(pallocation_size[1] + SYSTEM_DATA_COMPARE_SIZE) = long_ptr;
      }
      systemFlags = systemFlags + SYSTEM_NODE_HEADER_SIZE;
      *handleIdentifier = systemFlags;
      long_ptr = pallocation_size + 5;
      pallocation_size = pallocation_size + SYSTEM_NODE_HEADER_SIZE;
    } while (long_ptr != systemConfig);
  }
  return handleIdentifier;
}
// void InitializeInputManagerSystem(uint64_t *handleIdentifier)

void InitializeInputManagerSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  _Mtx_destroy_in_situ();
  _Cnd_destroy_in_situ(handleIdentifier + 4);
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  return;
}

uint64_t InitializeSystemModule2(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeInputManagerSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xc0);
  }
  return handleIdentifier;
}
// void ProcessInputEvents(longlong handleIdentifier,uint8_t resourceIdentifier)

void ProcessInputEvents(longlong handleIdentifier,uint8_t resourceIdentifier)

{
  int int_result;

  int_result = _Mtx_lock(handleIdentifier + 0x48);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  *(uint8_t *)(handleIdentifier + 0x98) = resourceIdentifier;
  int_result = _Mtx_unlock(handleIdentifier + 0x48);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule46(uint64_t handleIdentifier,uint64_t *resourceIdentifier,longlong *systemConfig)
void InitializeSystemModule46(uint64_t handleIdentifier,uint64_t *resourceIdentifier,longlong *systemConfig)

{
  int int_result;
  uint uint_result;
  longlong long_result;
  uint8_t localBuffer_58 [32];
  longlong longStack_38;
  int intStack_30;
  ulonglong uintStack_28;

  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_58;
  if (*systemConfig < 1) {
    longStack_38 = 0;
    intStack_30 = 0;
  }
  else {
    long_result = _Xtime_get_ticks();
    long_result = (long_result + *systemConfig * 10) * 100;
    longStack_38 = long_result / 1000000000;
    intStack_30 = (int)long_result + (int)longStack_38 * -1000000000;
  }
  int_result = _Mtx_current_owns(*resourceIdentifier);
  if (int_result == 0) {
    __Throw_Cpp_error_std__YAXH_Z(4);
  }
  uint_result = _Cnd_timedwait(handleIdentifier,*resourceIdentifier,&longStack_38);
  if ((uint_result & 0xfffffffd) != 0) {
    __Throw_C_error_std__YAXH_Z(uint_result);
  }
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_28 ^ (ulonglong)localBuffer_58);
}

uint8_t InitializeSystemDataNode19(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint8_t uint_result;
  int int_result;
  uint64_t ustack_var;
  uint64_t uint_result;
  longlong longStack_20;
  char cStack_18;

  uint_result = INVALID_HANDLE_VALUE;
  longStack_20 = handleIdentifier + 0x48;
  cStack_18 = 0;
  int_result = _Mtx_lock();
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  cStack_18 = '\x01';
  if (*(char *)(handleIdentifier + 0x98) == '\x01') {
    uint_result = 1;
  }
  else {
    ustack_var = 1;
    InitializeSystemModule46(handleIdentifier,&longStack_20,&ustack_var,systemFlags,uint_result);
    uint_result = *(uint8_t *)(handleIdentifier + 0x98);
  }
  *(uint8_t *)(handleIdentifier + 0x98) = 0;
  if (cStack_18 != '\0') {
    int_result = _Mtx_unlock(longStack_20);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
  }
  return uint_result;
}
// void InitializeGameSystem(void)

void InitializeGameSystem(void)

{
  _Cnd_destroy_in_situ();
  return;
}
// void InitializeSystemTimer(void)

void InitializeSystemTimer(void)

{
  _Cnd_destroy_in_situ();
  return;
}
// void InitializeSystemModule58(void)

void InitializeSystemModule58(void)

{
  _Mtx_destroy_in_situ();
  return;
}
// void InitializePhysicsSystem(void)

void InitializePhysicsSystem(void)

{
  _Mtx_destroy_in_situ();
  return;
}
// void InitializeSystemModule59(uint64_t handleIdentifier)

void InitializeSystemModule59(uint64_t handleIdentifier)

{
  _Mtx_destroy_in_situ();
  _Cnd_destroy_in_situ(handleIdentifier);
  return;
}

uint64_t *
ConfigureSystemHandles(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *handleIdentifier = &globalSystemOutputData;
  LOCK();
  *(uint8_t *)(handleIdentifier + 2) = 0;
  UNLOCK();
  handleIdentifier[3] = 0xffffffffffffffff;
  *handleIdentifier = &globalSystemVariable;
  _Cnd_init_in_situ(handleIdentifier + 4);
  _Mtx_init_in_situ(handleIdentifier + 0xd,2,systemConfig,systemFlags,uint_result);
  *(uint8_t *)(handleIdentifier + 0x17) = 0;
  return handleIdentifier;
}

uint64_t *
ProcessGraphicsTexture(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x98,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeTextureSystem(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

void InitializeTextureSystem(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  if (systemConfig + 1 < 0x80) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint8_t **)(handleIdentifier + 8),resourceIdentifier,(longlong)systemConfig);
  }
  **(uint8_t **)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void InitializeSystemModule56(void)

void InitializeSystemModule56(void)

{
                    // WARNING: Subroutine does not return
  memcpy();
}
// void InitializeSystemModule57(uint8_t *handleIdentifier)

void InitializeSystemModule57(uint8_t *handleIdentifier)

{
  longlong system_RDI;

  *handleIdentifier = 0;
  *(uint32_t *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}

uint64_t * ConfigureGraphicsShader(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_thread_parameter_ptr;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeInputSystem(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void InitializeInputSystem(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint8_t localBuffer_118 [32];
  uint64_t uintStack_f8;
  void *system_buffer_ptr_e8;
  uint8_t *system_buffer_ptr_e0;
  uint32_t uintStack_d8;
  uint8_t localBuffer_d0 [136];
  ulonglong uintStack_48;

  uintStack_f8 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_118;
  system_buffer_ptr_e8 = &g_thread_parameter_ptr;
  system_buffer_ptr_e0 = localBuffer_d0;
  uintStack_d8 = 0;
  localBuffer_d0[0] = 0;
  long_result = strstr(*(uint64_t *)(handleIdentifier + 8));
  if (long_result != 0) {
    long_result = -1;
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    do {
      long_result = long_result + 1;
    } while (*(char *)(long_result + systemConfig) != '\0');
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_e0,*(longlong *)(handleIdentifier + 8),long_result - *(longlong *)(handleIdentifier + 8));
  }
  system_buffer_ptr_e8 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_118);
}

uint64_t *
InitializeInputMutex(uint64_t *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  void *ptr_uint_var;

  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_thread_parameter_ptr;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  *(uint32_t *)(handleIdentifier + 2) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  strcpy_s(handleIdentifier[1],0x80,ptr_uint_var,systemFlags,INVALID_HANDLE_VALUE);
  return handleIdentifier;
}

uint64_t *
InitializeSystemDataNode24(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x58,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeSystemModule13(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeSystemModule13(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(resourceIdentifier + long_result) != '\0');
  if ((int)long_result < 0x40) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x000180049c27. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),0x40);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,0x40,resourceIdentifier);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}
// void InitializeShaderSystem(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

void InitializeShaderSystem(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  if (systemConfig + 1 < 0x40) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint8_t **)(handleIdentifier + 8),resourceIdentifier,(longlong)systemConfig);
  }
  **(uint8_t **)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void InitializeSystemModule54(void)

void InitializeSystemModule54(void)

{
                    // WARNING: Subroutine does not return
  memcpy();
}
// void InitializeSystemModule55(uint8_t *handleIdentifier)

void InitializeSystemModule55(uint8_t *handleIdentifier)

{
  longlong system_RDI;

  *handleIdentifier = 0;
  *(uint32_t *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}

uint64_t * InitializeResourceSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_core_data_ptr;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_36_8(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void SystemFunction_36_8(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint8_t localBuffer_d8 [32];
  uint64_t uintStack_b8;
  void *system_buffer_ptr_a8;
  uint8_t *thread_parameter_ptr;
  uint32_t uintStack_98;
  uint8_t localBuffer_90 [72];
  ulonglong uintStack_48;

  uintStack_b8 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_d8;
  system_buffer_ptr_a8 = &g_system_core_data_ptr;
  thread_parameter_ptr = localBuffer_90;
  uintStack_98 = 0;
  localBuffer_90[0] = 0;
  long_result = strstr(*(uint64_t *)(handleIdentifier + 8));
  if (long_result != 0) {
    long_result = -1;
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    do {
      long_result = long_result + 1;
    } while (*(char *)(long_result + systemConfig) != '\0');
                    // WARNING: Subroutine does not return
    memcpy(thread_parameter_ptr,*(longlong *)(handleIdentifier + 8),long_result - *(longlong *)(handleIdentifier + 8));
  }
  system_buffer_ptr_a8 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_d8);
}

uint64_t *
InitializeSecuritySystem(uint64_t *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;

  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_core_data_ptr;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  if (resourceIdentifier != 0) {
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    *(int *)(handleIdentifier + 2) = (int)long_result;
    strcpy_s(handleIdentifier[1],0x40,resourceIdentifier,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void ConfigureSystemSettings(uint64_t *handleIdentifier)

void ConfigureSystemSettings(uint64_t *handleIdentifier)

{
  handleIdentifier[4] = &resourcePoolPointer;
  if (handleIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 7) = 0;
  handleIdentifier[4] = &globalSystemPointerData;
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSystemModule25(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule25(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier == (uint64_t *)0x0) {
    return;
  }
  InitializeSystemModule25(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  resourceIdentifier[8] = &resourcePoolPointer;
  if (resourceIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[9] = 0;
  *(uint32_t *)(resourceIdentifier + 0xb) = 0;
  resourceIdentifier[8] = &globalSystemPointerData;
  resourceIdentifier[4] = &resourcePoolPointer;
  if (resourceIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[5] = 0;
  *(uint32_t *)(resourceIdentifier + 7) = 0;
  resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(resourceIdentifier);
}
// void InitializeSystemModule41(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule41(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule25(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule26(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule26(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule25(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void SetupSystemMemory(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void SetupSystemMemory(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule25(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule33(uint64_t *handleIdentifier)

void InitializeSystemModule33(uint64_t *handleIdentifier)

{
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSystemDataNode22(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeSystemDataNode22(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(resourceIdentifier + long_result) != '\0');
  if ((int)long_result < 0x80) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x00018004a1b9. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),0x80);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,0x80,resourceIdentifier);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}
// void InitializeSystemResources(void)

void InitializeSystemResources(void)

{
  _Mtx_destroy_in_situ();
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t SystemFunction_64_8(longlong handleIdentifier,uint32_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  uint64_t uint_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  uint_result = AllocateSystemResource(systemMemoryPool,resourceIdentifier,3,systemFlags,INVALID_HANDLE_VALUE);
  int_result = _Mtx_lock(handleIdentifier + 0x28);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  node_current = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (node_current < *(uint64_t **)(handleIdentifier + 0x18)) {
    *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = node_current + 1;
    *node_current = uint_result;
    goto LAB_18004a322;
  }
  ptr_uint_var = *(uint64_t **)(handleIdentifier + 8);
  long_result = (longlong)node_current - (longlong)ptr_uint_var >> 3;
  if (long_result == 0) {
    long_result = 1;
LAB_18004a2b9:
    ptr_uint_var = (uint64_t *)
             AllocateSystemResource(systemMemoryPool,long_result * 8,*(uint8_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE),systemFlags,uint_result);
    node_current = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    ptr_uint_var = *(uint64_t **)(handleIdentifier + 8);
  }
  else {
    long_result = long_result * 2;
    if (long_result != 0) goto LAB_18004a2b9;
    ptr_uint_var = (uint64_t *)0x0;
  }
  if (ptr_uint_var != node_current) {
                    // WARNING: Subroutine does not return
    memmove(ptr_uint_var,ptr_uint_var,(longlong)node_current - (longlong)ptr_uint_var);
  }
  *ptr_uint_var = uint_result;
  if (*(longlong *)(handleIdentifier + 8) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t **)(handleIdentifier + 8) = ptr_uint_var;
  *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = ptr_uint_var + 1;
  *(uint64_t **)(handleIdentifier + 0x18) = ptr_uint_var + long_result;
LAB_18004a322:
  int_result = _Mtx_unlock(handleIdentifier + 0x28);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return uint_result;
}
// void InitializeVideoSystem(uint64_t *handleIdentifier)

void InitializeVideoSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  _Mtx_destroy_in_situ();
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &g_system_global_variable8;
  return;
}

uint64_t InitializeSystemModule13(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeVideoSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x78);
  }
  return handleIdentifier;
}
// void ConfigureSystemParameters(uint64_t *handleIdentifier)

void ConfigureSystemParameters(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t SystemFunction_17_6(longlong handleIdentifier,uint64_t resourceIdentifier)

{
  uint64_t uint_result;
  longlong long_result;

  uint_result = AllocateSystemMemory(systemMemoryPool,resourceIdentifier,SYSTEM_DATA_COMPARE_SIZE,6);
  long_result = ValidateResourceAllocation(uint_result);
  *(longlong *)(handleIdentifier + 8) = *(longlong *)(handleIdentifier + 8) + long_result;
  return uint_result;
}
// void InitializeAudioMutex(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeAudioMutex(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  long_result = ValidateResourceAllocation(resourceIdentifier);
  *(longlong *)(handleIdentifier + 8) = *(longlong *)(handleIdentifier + 8) - long_result;
  if (resourceIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(resourceIdentifier);
  }
  return;
}

uint64_t *
InitializeSystemDataNode30(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,SYSTEM_DATA_COMPARE_SIZE,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

bool InitializeSystemComponents(void)

{
  char is_initialized;
  uint32_t *node_root;
  void *ptr_uint_var;
  int int_result;
  bool bool_var;
  uint64_t uintStack_48;
  longlong longStack_40;
  void *system_buffer_ptr_30;
  void *system_buffer_ptr_28;
  uint uintStack_20;

  InitializeInputSystem(&bufferPtr_30system_buffer_ptr_30);
  int_result = uintStack_20 + 0x11;
  ConfigureSystemParameters(&bufferPtr_30system_buffer_ptr_30,int_result);
  node_root = (uint32_t *)(system_buffer_ptr_28 + uintStack_20);
  *node_root = 0x69676e65;
  node_root[1] = 0x635f656e;
  node_root[2] = 0x69666e6f;
  node_root[3] = 0x78742e67;
  *(uint16_t *)(node_root + 4) = 0x74;
  uintStack_48 = 0;
  longStack_40 = 0;
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_28 != (void *)0x0) {
    ptr_uint_var = bufferPtr_28;
  }
  uintStack_20 = int_result;
  ProcessSystemNode(&uintStack_48,ptr_uint_var,&g_system_global_variablec);
  if (longStack_40 == 0) {
    bool_var = false;
  }
  else {
    is_initialized = InitializeSystemModule1(systemCoreData,&uintStack_48);
    if (longStack_40 != 0) {
      fclose();
      longStack_40 = 0;
      LOCK();
      systemCoreData = systemCoreData + -1;
      UNLOCK();
    }
    bool_var = is_initialized != '\0';
  }
  if (longStack_40 != 0) {
    fclose();
    longStack_40 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
  system_buffer_ptr_30 = &resourcePoolPointer;
  if (system_buffer_ptr_28 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return bool_var;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule9(void)
void InitializeSystemModule9(void)

{
  char is_initialized;
  uint32_t *node_root;
  uint64_t *ptr_uint_var;
  void *ptr_uint_var;
  int int_result;
  uint8_t system_local_buffer_88 [32];
  uint32_t uintStack_68;
  uint8_t localBuffer_60 [8];
  void *system_buffer_ptr_58;
  uint uintStack_50;
  uint64_t uintStack_40;
  void *system_buffer_ptr_38;
  uint8_t *system_buffer_ptr_30;
  uint32_t uintStack_28;
  uint8_t localBuffer_20 [16];
  ulonglong uintStack_10;

  uintStack_40 = INVALID_HANDLE_VALUE;
  uintStack_10 = systemConfigurationData ^ (ulonglong)system_local_buffer_88;
  uintStack_68 = 0;
  is_initialized = InitializeSystemComponents();
  if (is_initialized == '\0') {
    InitializeSystemModule43(1);
    InitializeSystemComponents();
  }
  system_buffer_ptr_38 = &g_system_data_nodeconfig;
  system_buffer_ptr_30 = localBuffer_20;
  localBuffer_20[0] = 0;
  uintStack_28 = 6;
  strcpy_s(localBuffer_20,SYSTEM_DATA_COMPARE_SIZE,&g_system_global_variablec);
  uintStack_68 = 1;
  PrepareSystemBuffer(localBuffer_60,&bufferPtr_38system_buffer_ptr_38);
  uintStack_68 = 0;
  system_buffer_ptr_38 = &globalSystemPointerData;
  int_result = uintStack_50 + 0xf;
  ConfigureSystemParameters(localBuffer_60,int_result);
  node_root = (uint32_t *)(system_buffer_ptr_58 + uintStack_50);
  *node_root = 0x72657375;
  node_root[1] = 0x6e6f635f;
  node_root[2] = 0x2e676966;
  node_root[3] = 0x747874;
  uintStack_50 = int_result;
  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x18,8,3);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_58 != (void *)0x0) {
    ptr_uint_var = bufferPtr_58;
  }
  *ptr_uint_var = 0;
  *(uint8_t *)(ptr_uint_var + 2) = 0;
  ProcessSystemNode(ptr_uint_var,ptr_uint_var,&g_system_global_variablec);
  if (ptr_uint_var[1] == 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  InitializeSystemModule1(systemCoreData,ptr_uint_var);
  ReleaseSystemResource(ptr_uint_var);
  if (ptr_uint_var[1] != 0) {
    fclose();
    ptr_uint_var[1] = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void UpdatePhysicsResources(void)
void UpdatePhysicsResources(void)

{
  uint64_t uint_result;

  uint_result = AllocateSystemMemory(systemMemoryPool,0xd20,8,3);
  systemCoreData = InitializeConfigSystem(uint_result);
  uint_result = AllocateSystemMemory(systemMemoryPool,0x138,8,3);
  systemConfigurationData = InitializeThreadManagerSystem(uint_result);
  uint_result = AllocateSystemMemory(systemMemoryPool,0x50,8,3);
                    // WARNING: Subroutine does not return
  memset(uint_result,0,0x50);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeUISystem(void)
void InitializeUISystem(void)

{
  char is_initialized;
  uint64_t *node_root;
  char *ptr_char_var;
  uint64_t uint_result;
  longlong allocation_size;
  longlong long_result;
  void *node_previous;
  int int_result;
  uint uint_result;
  ulonglong uint_result;
  void *system_buffer_ptr_28;
  uint uintStack_20;

  InitializeAudioManagerSystem();
  int_result = 0;
  uint_result = 0;
  if (uintStack_20 != 0) {
    allocation_size = 0;
    long_result = 0;
    do {
      is_initialized = bufferPtr_28[long_result];
      if (((byte)(is_initialized + 0x9fU) < 0x1a) ||
         (((byte)(is_initialized - 0x30U) < 0x30 &&
          ((0x87fffffe03ffU >> ((longlong)(char)(is_initialized - 0x30U) & 0x3fU) & 1) != 0)))) {
        if (allocation_size != long_result) {
          bufferPtr_28[allocation_size] = is_initialized;
        }
        int_result = int_result + 1;
        allocation_size = allocation_size + 1;
      }
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      long_result = long_result + 1;
    } while (uint_result < uintStack_20);
  }
  bufferPtr_28[int_result] = 0;
  node_root = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x28,8,CONCAT71((int7)(uint_result >> 8),3));
  node_previous = &g_system_data_variable3;
  if (system_buffer_ptr_28 != (void *)0x0) {
    node_previous = bufferPtr_28;
  }
  UpdateSystemBuffer(node_root + 1,node_previous);
  ptr_char_var = (char *)node_root[2];
  if (*ptr_char_var != '\0') {
    allocation_size = 0;
    do {
      long_result = strchr(&g_system_configuration_data_ptr,(int)ptr_char_var[allocation_size]);
      if (long_result != 0) {
        *(uint8_t *)(allocation_size + node_root[2]) = 0x2f;
      }
      allocation_size = allocation_size + 1;
      ptr_char_var = (char *)node_root[2];
    } while (ptr_char_var[allocation_size] != '\0');
  }
  *node_root = 0;
  systemConfigurationData = node_root;
  if (g_system_data_variable1 != '\0') {
    GetLastError();
    node_previous = &g_system_data_variable3;
    if ((void *)node_root[2] != (void *)0x0) {
      node_previous = (void *)node_root[2];
    }
    uint_result = CreateMutexA(0,0,node_previous);
    *node_root = uint_result;
    int_result = GetLastError();
// void ConfigureSystemHandles(void)

void ConfigureSystemHandles(void)

{
  longlong *long_ptr;
  longlong long_result;
  longlong long_result;
  uint64_t systemParam_;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  if ((systemConfigurationData != (longlong *)0x0) && ((char)systemConfigurationData[0x42] == '\0')) {
    (**(code **)(*systemConfigurationData + 0x38))();
  }
  long_result = systemCoreData;
  (**(code **)(**(longlong **)(systemCoreData + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_DATA_COMPARE_SIZE8))
            (*(longlong **)(systemCoreData + SYSTEM_NODE_HEADER_SIZE),systemCoreData + 0xc0);
  long_ptr = *(longlong **)(long_result + 0x30);
  if (long_ptr != (longlong *)0x0) {
    long_result = __RTCastToVoid(long_ptr);
    (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,0,*(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE),systemParam_,uint_result);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
  }
  *(uint64_t *)(long_result + 0x30) = 0;
  if (*(uint64_t **)(long_result + 0x28) != (uint64_t *)0x0) {
    (**(code **)**(uint64_t **)(long_result + 0x28))();
    *(uint64_t *)(long_result + 0x28) = 0;
  }
  long_result = systemCoreData;
  if (systemCoreData != 0) {
    InitializeSystemModule59();
    *(void **)(long_result + 0xc0) = &g_system_global_variable8;
    InitializeVideoSystem(long_result + 0x48);
    *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = &globalSystemVariable;
    *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = &globalSystemVariable;
    *(void **)(long_result + 8) = &globalSystemVariable;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  systemCoreData = 0;
  timeEndPeriod(1);
  long_result = systemCoreData;
  if (systemCoreData != 0) {
    SetupSystemServices(systemCoreData);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  systemCoreData = 0;
  return;
}

uint64_t *
InitializeSystemProfiler(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint32_t *ptr_uint_var;
  uint64_t *node_root;
  int compare_result;
  int int_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &resourcePoolPointer;
  handleIdentifier[3] = 0;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  ConfigureSystemParameters(handleIdentifier,0,systemConfig,systemFlags,0,INVALID_HANDLE_VALUE);
  *(uint32_t *)(handleIdentifier + 2) = 0;
  if ((uint8_t *)handleIdentifier[1] != (uint8_t *)0x0) {
    *(uint8_t *)handleIdentifier[1] = 0;
  }
  int_result = *(int *)(handleIdentifier + 2);
  compare_result = int_result + 6;
  ConfigureSystemParameters(handleIdentifier,compare_result,systemConfig,systemFlags,1,uint_result);
  ptr_uint_var = (uint32_t *)((ulonglong)*(uint *)(handleIdentifier + 2) + handleIdentifier[1]);
  *ptr_uint_var = 0x2e2f2e2e;
  *(uint16_t *)(ptr_uint_var + 1) = 0x2f2e;
  *(uint8_t *)((longlong)ptr_uint_var + 6) = 0;
  *(int *)(handleIdentifier + 2) = compare_result;
  int_result = int_result + 0x2a;
  ConfigureSystemParameters(handleIdentifier,int_result);
  node_root = (uint64_t *)((ulonglong)*(uint *)(handleIdentifier + 2) + handleIdentifier[1]);
  *node_root = 0x736c6f6f542f2e2e;
  node_root[1] = 0x747541747365542f;
  node_root[2] = 0x2f6e6f6974616d6f;
  node_root[3] = 0x656d686361747441;
  *(uint32_t *)(node_root + 4) = 0x2f73746e;
  *(uint8_t *)((longlong)node_root + 0x24) = 0;
  *(int *)(handleIdentifier + 2) = int_result;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t InitializeSystemModule43(char handleIdentifier)

{
  longlong *long_ptr;
  char char_var;
  uint32_t *ptr_uint_var;
  void *ptr_uint_var;
  int int_result;
  uint64_t uint_result;
  uint64_t uintStack_48;
  longlong longStack_40;
  void *system_buffer_ptr_30;
  void *system_buffer_ptr_28;
  uint uintStack_20;

  if (handleIdentifier == '\0') {
    if ((void *)*systemCoreData == &globalSystemVariable) {
      if ((systemCoreData[0x16] == 0) && (*(char *)(g_system_base_1 + 0x1f0) != '\0')) {
        char_var = '\x01';
      }
      else {
        char_var = '\0';
      }
    }
    else {
      char_var = (**(code **)((void *)*systemCoreData + 0x28))();
    }
    if (char_var == '\0') {
      return 0;
    }
  }
  InitializeInputSystem(&bufferPtr_30system_buffer_ptr_30);
  int_result = uintStack_20 + 0x11;
  ConfigureSystemParameters(&bufferPtr_30system_buffer_ptr_30,int_result);
  ptr_uint_var = (uint32_t *)(system_buffer_ptr_28 + uintStack_20);
  *ptr_uint_var = 0x69676e65;
  ptr_uint_var[1] = 0x635f656e;
  ptr_uint_var[2] = 0x69666e6f;
  ptr_uint_var[3] = 0x78742e67;
  *(uint16_t *)(ptr_uint_var + 4) = 0x74;
  uintStack_48 = 0;
  longStack_40 = 0;
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_28 != (void *)0x0) {
    ptr_uint_var = bufferPtr_28;
  }
  uintStack_20 = int_result;
  ProcessSystemNode(&uintStack_48,ptr_uint_var,&g_system_data_variablec);
  long_ptr = systemCoreData;
  if (longStack_40 == 0) {
    uint_result = 3;
  }
  else {
    char_var = (**(code **)(*systemCoreData + 0x28))(systemCoreData);
    if (char_var != '\0') {
      InitializeTextureSystem(long_ptr,&uintStack_48);
    }
    uint_result = 0;
    if (longStack_40 != 0) {
      fclose();
      longStack_40 = 0;
      LOCK();
      systemCoreData = systemCoreData + -1;
      UNLOCK();
      uint_result = 0;
    }
  }
  if (longStack_40 != 0) {
    fclose();
    longStack_40 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
  system_buffer_ptr_30 = &resourcePoolPointer;
  if (system_buffer_ptr_28 == (void *)0x0) {
    return uint_result;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

bool InitializeSystemResources(void)

{
  int int_result;

  int_result = _Thrd_id();
  if (g_system_data_variablec == 0) {
    return int_result == *(int *)(**(longlong **)(systemConfigurationData + 8) + 0x48);
  }
  if ((int_result != *(int *)(**(longlong **)(systemConfigurationData + 8) + 0x48)) && (int_result != g_system_data_variablec))
  {
    return false;
  }
  return true;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule24(uint64_t *handleIdentifier)
void InitializeSystemModule24(uint64_t *handleIdentifier)

{
  uint uint_result;
  int int_result;
  longlong long_result;
  uint uint_result;
  void *ptr_uint_var;
  uint8_t system_local_buffer_88 [32];
  uint32_t uintStack_68;
  uint64_t uintStack_60;
  uint64_t *system_buffer_ptr_58;
  void *system_buffer_ptr_50;
  void *system_buffer_ptr_48;
  uint32_t uintStack_40;
  undefined localBuffer_38 [32];
  ulonglong uintStack_18;

  uintStack_60 = INVALID_HANDLE_VALUE;
  uintStack_18 = systemConfigurationData ^ (ulonglong)system_local_buffer_88;
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_data_main;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  uint_result = *(uint *)(handleIdentifier + 2);
  uint_result = uint_result + 7;
  if (uint_result < 0x1f) {
    *(uint64_t *)((ulonglong)uint_result + handleIdentifier[1]) = 0x32312e322e3176;
    *(uint *)(handleIdentifier + 2) = uint_result;
    uint_result = uint_result;
  }
  if (uint_result + 1 < 0x1f) {
    *(uint16_t *)((ulonglong)uint_result + handleIdentifier[1]) = 0x2e;
    *(uint *)(handleIdentifier + 2) = uint_result + 1;
  }
  system_buffer_ptr_50 = &g_system_data_main;
  system_buffer_ptr_48 = localBuffer_38;
  uintStack_40 = 0;
  localBuffer_38[0] = 0;
  uintStack_68 = 3;
  system_buffer_ptr_58 = handleIdentifier;
  InitializeSystemModule17(&bufferPtr_50system_buffer_ptr_50,&globalSystemVariable,0x130a7);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_48 != (void *)0x0) {
    ptr_uint_var = bufferPtr_48;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (ptr_uint_var[long_result] != '\0');
  int_result = (int)long_result;
  if ((0 < int_result) && (*(uint *)(handleIdentifier + 2) + int_result < 0x1f)) {
                    // WARNING: Subroutine does not return
    memcpy((ulonglong)*(uint *)(handleIdentifier + 2) + handleIdentifier[1],ptr_uint_var,(longlong)(int_result + 1));
  }
  uintStack_68 = 1;
  system_buffer_ptr_50 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_18 ^ (ulonglong)system_local_buffer_88);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong * ProcessSystemData(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = (longlong)&globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = (longlong)&resourcePoolPointer;
  handleIdentifier[3] = 0;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  if (*(char *)(systemCoreData + 0x22) != '\0') {
    InitializeResourceBlock(handleIdentifier,systemCoreData + 0x28);
    return handleIdentifier;
  }
  (**(code **)(*handleIdentifier + SYSTEM_DATA_COMPARE_SIZE))(handleIdentifier,&g_system_global_variable8,systemConfig,systemFlags,1,INVALID_HANDLE_VALUE);
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode19(uint32_t *handleIdentifier)
void InitializeSystemDataNode19(uint32_t *handleIdentifier)

{
  int int_result;
  int int_result;

  int_result = *(int *)(**(longlong **)(systemConfigurationData + 8) + 0x48);
  int_result = _Thrd_id();
  if (int_result != int_result) {
    g_system_data_variablec = *handleIdentifier;
  }
  return;
}

uint64_t *
InitializeStringManager(uint64_t *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  void *ptr_uint_var;

  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_data_main;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  *(uint32_t *)(handleIdentifier + 2) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  strcpy_s(handleIdentifier[1],SYSTEM_NODE_HEADER_SIZE,ptr_uint_var,systemFlags,INVALID_HANDLE_VALUE);
  return handleIdentifier;
}
// void InitializeGameSystem(uint64_t *handleIdentifier)

void InitializeGameSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  return;
}
// void InitializeSystemTimer(uint64_t *handleIdentifier)

void InitializeSystemTimer(uint64_t *handleIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  return;
}
// void InitializeSystemModule58(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule58(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (ptr_uint_var != (uint64_t *)0x0) {
    ValidateSystemConfiguration(handleIdentifier,*ptr_uint_var,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return;
}
// void InitializePhysicsSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializePhysicsSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (ptr_uint_var != (uint64_t *)0x0) {
    ValidateSystemConfiguration(handleIdentifier,*ptr_uint_var,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return;
}
// void InitializeSystemModule59(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule59(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (ptr_uint_var != (uint64_t *)0x0) {
    ValidateSystemConfiguration(handleIdentifier,*ptr_uint_var,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return;
}
// void ValidateSystemConfiguration(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

void ValidateSystemConfiguration(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  if (resourceIdentifier != (uint64_t *)0x0) {
    ValidateSystemConfiguration(handleIdentifier,*resourceIdentifier);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(resourceIdentifier);
  }
  return;
}
// void SystemFunction_15_4(uint64_t handleIdentifier)

void SystemFunction_15_4(uint64_t handleIdentifier)

{
  uint64_t *system_RBX;

  ValidateSystemConfiguration(handleIdentifier,*system_RBX);
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_21_4(void)

void SystemFunction_21_4(void)

{
  return;
}

uint64_t * InitializeSystemModule10(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,8);
  }
  return handleIdentifier;
}

uint64_t * InitializeSystemModule41(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,8);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule17(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemModule17(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  int int_result;
  ulonglong *ptr_uint_var;
  longlong long_result;
  uint64_t flag_initialized;
  uint64_t ustack_var;
  uint8_t localBuffer_78 [32];
  uint64_t uintStack_58;
  uint64_t *system_buffer_ptr_50;
  char acStack_48 [32];
  ulonglong uintStack_28;

  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_78;
  flag_initialized = systemConfig;
  ustack_var = systemFlags;
  ptr_uint_var = (ulonglong *)GetSystemPointerData();
  uintStack_58 = 0;
  system_buffer_ptr_50 = &flag_initialized;
  __stdio_common_vsprintf(*ptr_uint_var | 1,acStack_48,SYSTEM_NODE_HEADER_SIZE,resourceIdentifier);
  long_result = -1;
  do {
    long_result = long_result;
    long_result = long_result + 1;
  } while (acStack_48[long_result + 1] != '\0');
  int_result = (int)(long_result + 1);
  if ((0 < int_result) && (*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) + int_result < 0x1f)) {
                    // WARNING: Subroutine does not return
    memcpy((ulonglong)*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(handleIdentifier + 8),acStack_48,
           (longlong)((int)long_result + 2));
  }
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_28 ^ (ulonglong)localBuffer_78);
}

uint64_t * InitializeSystemDataNode28(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,8);
  }
  return handleIdentifier;
}

uint64_t * InitializeSystemModule18(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,8);
  }
  return handleIdentifier;
}

int InitializeSystemDataNode17(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  ulonglong *node_root;

  node_root = (ulonglong *)GetSystemPointerData();
  int_result = __stdio_common_vsprintf(*node_root | 1,handleIdentifier,resourceIdentifier,systemConfig,0,systemFlags);
  if (int_result < 0) {
    int_result = -1;
  }
  return int_result;
}
// void InitializeSystemModule35(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule35(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ValidateSystemConfiguration(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule19(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule19(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ValidateSystemConfiguration(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeConfigSystem(uint64_t *handleIdentifier)
void InitializeConfigSystem(uint64_t *handleIdentifier)

{
  int int_result;

  systemCoreData = *handleIdentifier;
  int_result = _Mtx_unlock(0x180c91970);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void InitializeVideoSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeVideoSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeTextureSystem(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule1(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule1(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeTextureSystem(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule13(longlong handleIdentifier)

void InitializeSystemModule13(longlong handleIdentifier)

{
  SystemFunction_36_8(handleIdentifier + 0x60);
  return;
}
// void InitializeSystemResources(longlong handleIdentifier)

void InitializeSystemResources(longlong handleIdentifier)

{
  SystemFunction_36_8(handleIdentifier + 0x60);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_16_0(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void SystemFunction_16_0(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  longlong long_result;
  int compare_result;
  longlong long_result;

  long_result = systemCoreData;
  compare_result = (int)(*(longlong *)(systemCoreData + 0x38) - *(longlong *)(systemCoreData + 0x30) >> 3);
  long_result = 0;
  if (0 < compare_result) {
    do {
      ptr_uint_var = *(uint64_t **)(*(longlong *)(long_result + 0x30) + long_result * 8);
      if (ptr_uint_var != (uint64_t *)0x0) {
        ptr_uint_var[4] = &resourcePoolPointer;
        if (ptr_uint_var[5] != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        ptr_uint_var[5] = 0;
        *(uint32_t *)(ptr_uint_var + 7) = 0;
        ptr_uint_var[4] = &globalSystemPointerData;
        *ptr_uint_var = &resourcePoolPointer;
        if (ptr_uint_var[1] == 0) {
          ptr_uint_var[1] = 0;
          *(uint32_t *)(ptr_uint_var + 3) = 0;
          *ptr_uint_var = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(ptr_uint_var);
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(uint64_t *)(*(longlong *)(long_result + 0x30) + long_result * 8) = 0;
      long_result = long_result + 1;
    } while (long_result < compare_result);
  }
  *(uint64_t *)(long_result + 0x38) = *(uint64_t *)(long_result + 0x30);
  long_result = long_result + 0x50;
  InitializeTextureSystem(long_result,*(uint64_t *)(long_result + 0x60),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  *(longlong *)long_result = long_result;
  *(longlong *)(long_result + 0x58) = long_result;
  *(uint64_t *)(long_result + 0x60) = 0;
  *(uint8_t *)(long_result + 0x68) = 0;
  *(uint64_t *)(long_result + 0x70) = 0;
  return;
}
// void InitializeFontSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeFontSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeInputSystem(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule46(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule46(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeInputSystem(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}

uint64_t * InitializeTextureSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_core_data_ptr;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  ValidateResourceHandle(handleIdentifier + 0xb);
  handleIdentifier[0x74] = 0;
  handleIdentifier[0x75] = 0;
  handleIdentifier[0x76] = 0;
  *(uint32_t *)(handleIdentifier + 0x77) = 3;
  handleIdentifier[0x78] = 0;
  handleIdentifier[0x79] = 0;
  handleIdentifier[0x7a] = 0;
  *(uint32_t *)(handleIdentifier + 0x7b) = 3;
  handleIdentifier[0x7c] = 0;
  handleIdentifier[0x7d] = 0;
  handleIdentifier[0x7e] = 0;
  *(uint32_t *)(handleIdentifier + 0x7f) = 3;
  handleIdentifier[0x80] = 0;
  handleIdentifier[0x81] = 0;
  handleIdentifier[0x82] = 0;
  *(uint32_t *)(handleIdentifier + 0x83) = 3;
  handleIdentifier[0x84] = 0;
  handleIdentifier[0x85] = 0;
  handleIdentifier[0x86] = 0;
  *(uint32_t *)(handleIdentifier + 0x87) = 3;
  handleIdentifier[0x88] = 0;
  handleIdentifier[0x89] = 0;
  handleIdentifier[0x8a] = 0;
  *(uint32_t *)(handleIdentifier + 0x8b) = 3;
  handleIdentifier[0x8c] = 0;
  handleIdentifier[0x8d] = 0;
  handleIdentifier[0x8e] = 0;
  *(uint32_t *)(handleIdentifier + 0x8f) = 3;
  return handleIdentifier;
}
// void RenderUIElements(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void RenderUIElements(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 0x69) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void ConfigureSystemSettings(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ConfigureSystemSettings(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 0xb) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeAuthenticationSystem(longlong handleIdentifier)

void InitializeAuthenticationSystem(longlong handleIdentifier)

{
  int int_result;
  longlong long_result;
  uint uint_result;
  ulonglong uint_result;
  ulonglong uint_result;

  int_result = _Mtx_lock(handleIdentifier + 0x28);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  uint_result = 0;
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = uint_result;
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - long_result >> 3 != 0) {
    do {
      if (*(longlong *)(uint_result + long_result) != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(uint64_t *)(uint_result + *(longlong *)(handleIdentifier + 8)) = 0;
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      long_result = *(longlong *)(handleIdentifier + 8);
      uint_result = uint_result + 8;
    } while ((ulonglong)(longlong)(int)uint_result <
             (ulonglong)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - long_result >> 3));
  }
  *(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = long_result;
  int_result = _Mtx_unlock(handleIdentifier + 0x28);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void HandleUIInput(longlong *handleIdentifier)

void HandleUIInput(longlong *handleIdentifier)

{
  longlong long_result;

  long_result = *handleIdentifier;
  if (long_result == 0) {
    *handleIdentifier = 0;
    if ((longlong *)handleIdentifier[2] != (longlong *)0x0) {
      (**(code **)(*(longlong *)handleIdentifier[2] + 0x38))();
    }
    if ((longlong *)handleIdentifier[1] != (longlong *)0x0) {
      (**(code **)(*(longlong *)handleIdentifier[1] + 0x38))();
    }
    return;
  }
  if (*(longlong *)(long_result + 8) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  _Mtx_destroy_in_situ();
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(long_result);
}
// void InitializeSystemModule41(longlong handleIdentifier)

void InitializeSystemModule41(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializeSystemModule26(longlong *handleIdentifier)

void InitializeSystemModule26(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x18) {
    HandleUIInput(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule17(longlong *handleIdentifier)

void InitializeSystemModule17(longlong *handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;

  long_ptr = (longlong *)handleIdentifier[1];
  for (long_ptr = (longlong *)*handleIdentifier; long_ptr != long_ptr; long_ptr = long_ptr + 1) {
    if ((longlong *)*long_ptr != (longlong *)0x0) {
      (**(code **)(*(longlong *)*long_ptr + 0x38))();
    }
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}

uint64_t * ValidateUIState(uint64_t *handleIdentifier)

{
  *handleIdentifier = 0;
  handleIdentifier[1] = 0;
  handleIdentifier[2] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 3;
  return handleIdentifier;
}
// void InitializeSystemModule21(longlong *handleIdentifier)

void InitializeSystemModule21(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x18) {
    HandleUIInput(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void GetSystemFunctionPointer(longlong handleIdentifier)

void GetSystemFunctionPointer(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializeInputSystem(longlong handleIdentifier)

void InitializeInputSystem(longlong handleIdentifier)

{
  void *ptr_uint_var;
  uint8_t localBuffer_a8 [8];
  void *thread_parameter_ptr;
  uint uintStack_98;
  uint64_t uintStack_88;
  uint64_t uintStack_80;
  uint64_t uintStack_78;
  uint32_t uintStack_70;
  uint64_t uintStack_68;
  uint64_t uintStack_60;
  uint64_t uintStack_58;
  uint32_t uintStack_50;
  void *system_buffer_ptr_48;
  longlong longStack_40;
  uint32_t uintStack_30;
  uint64_t uintStack_28;

  uintStack_28 = INVALID_HANDLE_VALUE;
  if (handleIdentifier == 0) {
// void InitializeConfigSystem(ulonglong *handleIdentifier)

void InitializeConfigSystem(ulonglong *handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  node_root = (uint64_t *)*handleIdentifier;
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeSystemModule23(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule23(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 4) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule36(longlong handleIdentifier)

void InitializeSystemModule36(longlong handleIdentifier)

{
  uint uint_result;
  longlong long_result;

  if (handleIdentifier == 0) {
// void SystemFunction_0_4(longlong handleIdentifier)

void SystemFunction_0_4(longlong handleIdentifier)

{
  uint uint_result;
  longlong long_result;

  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(handleIdentifier + long_result) != '\0');
  uint_result = (uint)long_result;
  if (0x1fff < uint_result) {
    uint_result = 0x1fff;
  }
                    // WARNING: Subroutine does not return
  memcpy(&g_system_data_variable0,handleIdentifier,(longlong)(int)uint_result);
}
// void SystemFunction_9_5(void)

void SystemFunction_9_5(void)

{
  code *pis_initialized;

  ValidateSystemIntegrity();
  pis_initialized = (code *)swi(3);
  (*pis_initialized)();
  return;
}

uint8_t *
InitializeSystemResources(uint8_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *long_ptr;

  long_ptr = (longlong *)(handleIdentifier + 8);
  *long_ptr = (longlong)&globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + 0x18) = 0;
  *long_ptr = (longlong)&resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + 0x18) = 0;
  *(void **)(handleIdentifier + 0x38) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0x40) = 0;
  *(uint32_t *)(handleIdentifier + 0x48) = 0;
  *(void **)(handleIdentifier + 0x38) = &resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + 0x50) = 0;
  *(uint64_t *)(handleIdentifier + 0x40) = 0;
  *(uint32_t *)(handleIdentifier + 0x48) = 0;
  *(void **)(handleIdentifier + 0x58) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0x60) = 0;
  *(uint32_t *)(handleIdentifier + 0x68) = 0;
  *(void **)(handleIdentifier + 0x58) = &resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + 0x70) = 0;
  *(uint64_t *)(handleIdentifier + 0x60) = 0;
  *(uint32_t *)(handleIdentifier + 0x68) = 0;
  long_ptr = (longlong *)(handleIdentifier + 0x80);
  *long_ptr = (longlong)&globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0x88) = 0;
  *(uint32_t *)(handleIdentifier + 0x90) = 0;
  *long_ptr = (longlong)&resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + 0x98) = 0;
  *(uint64_t *)(handleIdentifier + 0x88) = 0;
  *(uint32_t *)(handleIdentifier + 0x90) = 0;
  long_ptr = (longlong *)(handleIdentifier + 0xa0);
  *long_ptr = (longlong)&globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0xa8) = 0;
  *(uint32_t *)(handleIdentifier + 0xb0) = 0;
  *long_ptr = (longlong)&resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + 0xb8) = 0;
  *(uint64_t *)(handleIdentifier + 0xa8) = 0;
  *(uint32_t *)(handleIdentifier + 0xb0) = 0;
  *handleIdentifier = 0;
  (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,&g_system_global_variable8,&globalSystemPointerData,systemFlags,INVALID_HANDLE_VALUE);
  *(uint64_t *)(handleIdentifier + 0x28) = 0;
  *(uint32_t *)(handleIdentifier + 0x30) = 0;
  handleIdentifier[0x7c] = 0;
  handleIdentifier[0xc9] = 1;
  (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,&g_system_configuration_data_ptr);
  (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,&g_system_data_variable3);
  *(uint32_t *)(handleIdentifier + 0xc0) = 0x461c4000;
  *(uint32_t *)(handleIdentifier + 0xc4) = 0x461c4000;
  handleIdentifier[200] = 0;
  *(uint64_t *)(handleIdentifier + 0xd0) = 0;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeFontSystem(uint64_t *handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong long_result;
  uint32_t *ptr_uint_var;
  uint64_t *node_current;
  longlong *long_ptr;
  uint32_t *node_next;
  uint32_t *ptr_uint_var;
  longlong long_result;
  uint64_t *anode_new [3];

  *(uint8_t *)((longlong)handleIdentifier + 0x1c) = 0;
  handleIdentifier[2] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  handleIdentifier[8] = 0;
  handleIdentifier[9] = 0;
  handleIdentifier[0xf] = 0;
  handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] = 0;
  handleIdentifier[0x11] = 0;
  *(uint32_t *)(handleIdentifier + 0x12) = 3;
  handleIdentifier[0x17] = &globalSystemPointerData;
  handleIdentifier[0x18] = 0;
  *(uint32_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET) = 0;
  handleIdentifier[0x17] = &resourcePoolPointer;
  handleIdentifier[0x1a] = 0;
  handleIdentifier[0x18] = 0;
  *(uint32_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET) = 0;
  handleIdentifier[0x1b] = 0;
  handleIdentifier[0x1c] = 0;
  handleIdentifier[0x1d] = 0;
  *(uint32_t *)(handleIdentifier + 0x1e) = 3;
  long_ptr = handleIdentifier + 0x21;
  *long_ptr = 0;
  handleIdentifier[0x22] = 0;
  handleIdentifier[0x23] = 0;
  *(uint32_t *)(handleIdentifier + 0x24) = 3;
  handleIdentifier[0x29] = &globalSystemPointerData;
  handleIdentifier[0x2a] = 0;
  *(uint32_t *)(handleIdentifier + 0x2b) = 0;
  handleIdentifier[0x29] = &resourcePoolPointer;
  handleIdentifier[0x2c] = 0;
  handleIdentifier[0x2a] = 0;
  *(uint32_t *)(handleIdentifier + 0x2b) = 0;
  long_ptr = handleIdentifier + 0x2e;
  *long_ptr = (longlong)&globalSystemPointerData;
  handleIdentifier[0x2f] = 0;
  *(uint32_t *)(handleIdentifier + 0x30) = 0;
  *long_ptr = (longlong)&resourcePoolPointer;
  handleIdentifier[0x31] = 0;
  handleIdentifier[0x2f] = 0;
  *(uint32_t *)(handleIdentifier + 0x30) = 0;
  long_ptr = handleIdentifier + 0x32;
  *long_ptr = (longlong)&globalSystemPointerData;
  handleIdentifier[0x33] = 0;
  *(uint32_t *)(handleIdentifier + 0x34) = 0;
  *long_ptr = (longlong)&g_system_data_main;
  handleIdentifier[0x33] = handleIdentifier + 0x35;
  *(uint32_t *)(handleIdentifier + 0x34) = 0;
  *(uint8_t *)(handleIdentifier + 0x35) = 0;
  long_ptr = handleIdentifier + 0x39;
  *long_ptr = (longlong)&globalSystemPointerData;
  handleIdentifier[0x3a] = 0;
  *(uint32_t *)(handleIdentifier + 0x3b) = 0;
  *long_ptr = (longlong)&resourcePoolPointer;
  handleIdentifier[0x3c] = 0;
  handleIdentifier[0x3a] = 0;
  *(uint32_t *)(handleIdentifier + 0x3b) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x254) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x25c) = 0;
  handleIdentifier[0x4e] = &globalSystemPointerData;
  handleIdentifier[0x4f] = 0;
  *(uint32_t *)(handleIdentifier + 0x50) = 0;
  handleIdentifier[0x4e] = &resourcePoolPointer;
  handleIdentifier[0x51] = 0;
  handleIdentifier[0x4f] = 0;
  *(uint32_t *)(handleIdentifier + 0x50) = 0;
  handleIdentifier[0x52] = &globalSystemPointerData;
  handleIdentifier[0x53] = 0;
  *(uint32_t *)(handleIdentifier + 0x54) = 0;
  handleIdentifier[0x52] = &resourcePoolPointer;
  handleIdentifier[0x55] = 0;
  handleIdentifier[0x53] = 0;
  *(uint32_t *)(handleIdentifier + 0x54) = 0;
  handleIdentifier[0x58] = &globalSystemPointerData;
  handleIdentifier[0x59] = 0;
  *(uint32_t *)(handleIdentifier + 0x5a) = 0;
  handleIdentifier[0x58] = &resourcePoolPointer;
  handleIdentifier[0x5b] = 0;
  handleIdentifier[0x59] = 0;
  *(uint32_t *)(handleIdentifier + 0x5a) = 0;
  node_current = handleIdentifier + 0x5c;
  handleIdentifier[0x5f] = 0;
  *(uint32_t *)(handleIdentifier + 0x61) = 3;
  *node_current = node_current;
  handleIdentifier[0x5d] = node_current;
  handleIdentifier[0x5e] = 0;
  *(uint8_t *)(handleIdentifier + 0x5f) = 0;
  handleIdentifier[0x60] = 0;
  handleIdentifier[100] = 0;
  handleIdentifier[0x65] = 0;
  handleIdentifier[0x66] = 0;
  *(uint32_t *)(handleIdentifier + 0x67) = 3;
  handleIdentifier[0x69] = &globalSystemPointerData;
  handleIdentifier[0x6a] = 0;
  *(uint32_t *)(handleIdentifier + 0x6b) = 0;
  handleIdentifier[0x69] = &resourcePoolPointer;
  handleIdentifier[0x6c] = 0;
  handleIdentifier[0x6a] = 0;
  *(uint32_t *)(handleIdentifier + 0x6b) = 0;
  anode_new[0] = handleIdentifier + 0x6d;
  *anode_new[0] = &globalSystemPointerData;
  handleIdentifier[0x6e] = 0;
  *(uint32_t *)(handleIdentifier + 0x6f) = 0;
  *anode_new[0] = &resourcePoolPointer;
  handleIdentifier[0x70] = 0;
  handleIdentifier[0x6e] = 0;
  *(uint32_t *)(handleIdentifier + 0x6f) = 0;
  *(uint32_t *)(handleIdentifier + 4) = 0;
  *handleIdentifier = 0;
  *(uint32_t *)(handleIdentifier + 99) = 0;
  (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))
            (long_ptr,&globalSystemVariable,&resourcePoolPointer,&globalSystemPointerData,INVALID_HANDLE_VALUE);
  *(uint32_t *)(handleIdentifier + 0x3d) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x1ed) = SYSTEM_DATA_COMPARE_SIZE00001;
  handleIdentifier[0x62] = 0;
  *(uint8_t *)(handleIdentifier + 0xc) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0xffffffff;
  *(uint8_t *)(handleIdentifier + 0x14) = 0;
  handleIdentifier[0x15] = 0;
  handleIdentifier[0x16] = 0;
  *(uint8_t *)((longlong)handleIdentifier + 0x1ec) = 0;
  LOCK();
  *(uint8_t *)(handleIdentifier + 0x79) = 0;
  UNLOCK();
  (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,&globalSystemVariable);
  (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,&g_system_data_variable3);
  *(uint8_t *)(handleIdentifier + 0x2d) = 0;
  handleIdentifier[0x13] = 0;
  *(uint32_t *)(handleIdentifier + 0x1f) = SYSTEM_DATA_COMPARE_SIZE10101;
  *(uint16_t *)((longlong)handleIdentifier + 0xfc) = SYSTEM_DATA_COMPARE_SIZE1;
  *(uint32_t *)((longlong)handleIdentifier + SYSTEM_DATA_COMPARE_SIZE4) = 0xffffffff;
  long_result = 8;
  do {
    ptr_uint_var = (uint32_t *)handleIdentifier[0x22];
    if (ptr_uint_var < (uint32_t *)handleIdentifier[0x23]) {
      handleIdentifier[0x22] = ptr_uint_var + 1;
      *ptr_uint_var = 0;
    }
    else {
      node_next = (uint32_t *)*long_ptr;
      long_result = (longlong)ptr_uint_var - (longlong)node_next >> 2;
      if (long_result == 0) {
        long_result = 1;
LAB_18004c7ef:
        ptr_uint_var = (uint32_t *)
                 AllocateSystemResource(systemMemoryPool,long_result * 4,*(uint8_t *)(handleIdentifier + 0x24));
        ptr_uint_var = (uint32_t *)handleIdentifier[0x22];
        node_next = (uint32_t *)*long_ptr;
      }
      else {
        long_result = long_result * 2;
        ptr_uint_var = (uint32_t *)0x0;
        if (long_result != 0) goto LAB_18004c7ef;
      }
      if (node_next != ptr_uint_var) {
                    // WARNING: Subroutine does not return
        memmove(ptr_uint_var,node_next,(longlong)ptr_uint_var - (longlong)node_next);
      }
      *ptr_uint_var = 0;
      if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *long_ptr = (longlong)ptr_uint_var;
      handleIdentifier[0x22] = ptr_uint_var + 1;
      handleIdentifier[0x23] = ptr_uint_var + long_result;
    }
    long_result = long_result + -1;
    if (long_result == 0) {
      *(uint32_t *)((longlong)handleIdentifier + 0x24) = 0;
      *(uint32_t *)((longlong)handleIdentifier + 0x29) = SYSTEM_DATA_COMPARE_SIZE10101;
      *(uint8_t *)(handleIdentifier + 5) = 1;
      *(uint32_t *)(handleIdentifier + 0x71) = 0x3f800000;
      *(uint8_t *)(handleIdentifier + 0x76) = 1;
      *(uint32_t *)(handleIdentifier + 0x25) = 0;
      handleIdentifier[0x56] = 0;
      *(uint64_t *)((longlong)handleIdentifier + 0x224) = 0;
      *(uint8_t *)((longlong)handleIdentifier + 0x22c) = 0;
      *(uint32_t *)(handleIdentifier + 0x40) = 0;
      handleIdentifier[0x41] = 0;
      node_current = systemConfigurationData;
      if (systemConfigurationData == (uint64_t *)0x0) {
        QueryPerformanceCounter(anode_new);
        node_current = anode_new[0];
      }
      handleIdentifier[0x42] = (double)((longlong)node_current - systemConfigurationData) * systemCoreData;
      *(uint32_t *)(handleIdentifier + 0x44) = 0;
      *(uint8_t *)((longlong)handleIdentifier + 0x264) = 0;
      *(uint32_t *)(handleIdentifier + 0x4d) = 0;
      *(uint64_t *)((longlong)handleIdentifier + 500) = 0;
      *(uint8_t *)(handleIdentifier + 0x28) = 0;
      *(uint8_t *)((longlong)handleIdentifier + 0x1fc) = 0;
      handleIdentifier[0x7b] = 0;
      handleIdentifier[0x57] = 0;
      long_result = AllocateSystemMemory(systemMemoryPool,0xc,4,3);
      *(uint8_t *)(long_result + 8) = 0;
      handleIdentifier[6] = long_result;
      handleIdentifier[0x27] = 0;
      *(uint8_t *)(handleIdentifier + 7) = 0;
      *(uint32_t *)((longlong)handleIdentifier + 0x3c) = 0xffffffff;
      handleIdentifier[0x43] = 0;
      *(uint32_t *)(handleIdentifier + 0x26) = 0xffffffff;
      node_current = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x30,8,3);
      node_current[1] = 0;
      node_current[2] = 0;
      node_current[3] = 0;
      node_current[4] = 0;
      node_current[5] = 0;
      *node_current = &globalSystemVariable;
      *node_current = &globalSystemVariable;
      *(uint32_t *)(node_current + 1) = 0;
      *node_current = &globalSystemVariable;
      node_current[2] = 0;
      node_current[3] = 0;
      node_current[4] = 0;
      *(uint32_t *)(node_current + 5) = 3;
      handleIdentifier[0x78] = node_current;
      return handleIdentifier;
    }
  } while( true );
}
// void InitializeSystemModule19(longlong *handleIdentifier)

void InitializeSystemModule19(longlong *handleIdentifier)

{
  if ((longlong *)*handleIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*handleIdentifier + 0x38))();
  }
  return;
}

uint64_t *
InitializeConfigSystem(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (handleIdentifier[2] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x30,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeSystemModule1(uint64_t *handleIdentifier)

void InitializeSystemModule1(uint64_t *handleIdentifier)

{
  if (handleIdentifier[2] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeThreadManagerSystem(longlong handleIdentifier)
void InitializeThreadManagerSystem(longlong handleIdentifier)

{
  longlong long_result;
  int int_result;
  int compare_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;

  long_result = systemCoreData;
  int_result = *(int *)(systemCoreData + 0xd90) + -1;
  compare_result = 0;
  if ((-1 < int_result) && (compare_result = int_result, 3 < int_result)) {
    compare_result = 3;
  }
  float_result = (float)compare_result;
  float_result = float_result * 1.6750001 + 2.4750001;
  float_result = float_result * 4.4666667 + 6.6000004;
  float_result = float_result * 3.3500001 + 4.9500003;
  float_result = float_result + float_result;
  *(float *)(handleIdentifier + 0x38c) = float_result * float_result;
  float_result = float_result + float_result;
  *(float *)(handleIdentifier + 0x390) = float_result * float_result;
  float_result = float_result + float_result;
  *(float *)(handleIdentifier + 0x394) = float_result * float_result;
  float_result = float_result + float_result;
  *(float *)(handleIdentifier + 0x398) = float_result * float_result;
  float_result = float_result * 13.400001 + 19.800001 + float_result;
  *(float *)(handleIdentifier + 0x39c) = float_result * float_result;
  float_result = float_result * 17.866667 + 26.400002 + float_result;
  *(float *)(handleIdentifier + 0x3a0) = float_result * float_result;
  *(float *)(handleIdentifier + 0x3a4) = float_result * float_result;
  *(uint32_t *)(handleIdentifier + 0x3a8) = 0x7f7fffff;
  *(uint *)(handleIdentifier + 0x3ac) = (uint)(*(int *)(long_result + 0xd90) == 0);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeGraphicsMemory(longlong *handleIdentifier)
void InitializeGraphicsMemory(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  longlong long_result;

  ptr_uint_var = (uint64_t *)handleIdentifier[0x7c];
  if (ptr_uint_var != (uint64_t *)0x0) {
    ptr_uint_var[0x14] = &resourcePoolPointer;
    if (ptr_uint_var[0x15] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    ptr_uint_var[0x15] = 0;
    *(uint32_t *)(ptr_uint_var + 0x17) = 0;
    ptr_uint_var[0x14] = &globalSystemPointerData;
    ptr_uint_var[SYSTEM_DATA_COMPARE_SIZE] = &resourcePoolPointer;
    if (ptr_uint_var[0x11] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    ptr_uint_var[0x11] = 0;
    *(uint32_t *)(ptr_uint_var + 0x13) = 0;
    ptr_uint_var[SYSTEM_DATA_COMPARE_SIZE] = &globalSystemPointerData;
    if (ptr_uint_var[0xc] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    InitializeSystemDataNode19();
    InitializeSystemDataNode19();
    *ptr_uint_var = &resourcePoolPointer;
    if (ptr_uint_var[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    ptr_uint_var[1] = 0;
    *(uint32_t *)(ptr_uint_var + 3) = 0;
    *ptr_uint_var = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  handleIdentifier[0x7c] = 0;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  if (ptr_uint_var != (uint64_t *)0x0) {
    long_result = __RTCastToVoid(ptr_uint_var);
    *ptr_uint_var = &globalSystemVariable;
    InitializeSystemModule47(systemConfigurationData,ptr_uint_var[0x28]);
    ptr_uint_var[0x28] = 0;
    ptr_uint_var[0x29] = &resourcePoolPointer;
    if (ptr_uint_var[0x2a] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    ptr_uint_var[0x2a] = 0;
    *(uint32_t *)(ptr_uint_var + 0x2c) = 0;
    ptr_uint_var[0x29] = &globalSystemPointerData;
    InitializeAudioSystem();
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
  }
  handleIdentifier[1] = 0;
  long_result = *handleIdentifier;
  if (long_result != 0) {
    InitializeSystemDataNode29(long_result);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  *handleIdentifier = 0;
  long_result = systemConfigurationData;
  if (systemConfigurationData != 0) {
    InitializeProfilingSystem();
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  systemConfigurationData = 0;
  InitializeSystemDataNode31();
  systemCoreData = 0;
  if (handleIdentifier[6] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[6] = 0;
  handleIdentifier[0x6d] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x6e] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x6e] = 0;
  *(uint32_t *)(handleIdentifier + 0x70) = 0;
  handleIdentifier[0x6d] = (longlong)&globalSystemPointerData;
  handleIdentifier[0x69] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x6a] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x6a] = 0;
  *(uint32_t *)(handleIdentifier + 0x6c) = 0;
  handleIdentifier[0x69] = (longlong)&globalSystemPointerData;
  InitializeFontSystem();
  InitializeSystemDataNode28(handleIdentifier + 0x5c,handleIdentifier[0x5e]);
  handleIdentifier[0x58] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x59] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x59] = 0;
  *(uint32_t *)(handleIdentifier + 0x5b) = 0;
  handleIdentifier[0x58] = (longlong)&globalSystemPointerData;
  handleIdentifier[0x52] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x53] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x53] = 0;
  *(uint32_t *)(handleIdentifier + 0x55) = 0;
  handleIdentifier[0x52] = (longlong)&globalSystemPointerData;
  handleIdentifier[0x4e] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x4f] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x4f] = 0;
  *(uint32_t *)(handleIdentifier + 0x51) = 0;
  handleIdentifier[0x4e] = (longlong)&globalSystemPointerData;
  handleIdentifier[0x39] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x3a] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x3a] = 0;
  *(uint32_t *)(handleIdentifier + 0x3c) = 0;
  handleIdentifier[0x39] = (longlong)&globalSystemPointerData;
  handleIdentifier[0x32] = (longlong)&globalSystemPointerData;
  handleIdentifier[0x2e] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x2f] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x2f] = 0;
  *(uint32_t *)(handleIdentifier + 0x31) = 0;
  handleIdentifier[0x2e] = (longlong)&globalSystemPointerData;
  handleIdentifier[0x29] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x2a] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x2a] = 0;
  *(uint32_t *)(handleIdentifier + 0x2c) = 0;
  handleIdentifier[0x29] = (longlong)&globalSystemPointerData;
  if (handleIdentifier[0x21] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  InitializePhysicsSystem();
  handleIdentifier[0x17] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x18] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x18] = 0;
  *(uint32_t *)(handleIdentifier + 0x1a) = 0;
  handleIdentifier[0x17] = (longlong)&globalSystemPointerData;
  if (handleIdentifier[0xf] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if ((longlong *)handleIdentifier[9] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[9] + 0x38))();
  }
  return;
}
// WARNING: Removing unreachable block (ram,0x00018004d2c7)

// WARNING: Removing unreachable block (ram,0x00018004d2d0)

// WARNING: Removing unreachable block (ram,0x00018004d2da)

// WARNING: Removing unreachable block (ram,0x00018004d2df)

// WARNING: Removing unreachable block (ram,0x00018004d2f2)

// WARNING: Removing unreachable block (ram,0x00018004d30d)

// WARNING: Removing unreachable block (ram,0x00018004d328)

// WARNING: Removing unreachable block (ram,0x00018004d343)

// WARNING: Removing unreachable block (ram,0x00018004d35e)

// WARNING: Removing unreachable block (ram,0x00018004d379)

// WARNING: Removing unreachable block (ram,0x00018004d4a0)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureGraphicsShader(uint64_t handleIdentifier,longlong resourceIdentifier)
void ConfigureGraphicsShader(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  byte bool_var;
  uint8_t uint_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  char char_var;
  int int_result;
  uint32_t uint_result;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  uint8_t *ptr_uint_var;
  char *pis_initialized2;
  uint32_t *ptr_uint_var;
  uint8_t *ptr_uint_var;
  byte *ptr_byte_var;
  uint8_t *ptr_uint_var;
  void *ptr_uint_var;
  void *ptr_uint_var;
  int int_result;
  longlong long_result;
  ulonglong uint_result;
  uint64_t *node_root2;
  uint uint_result;
  longlong long_result;
  ulonglong uint_result;
  uint uint_result;
  uint64_t uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint uint_result;
  bool system_initialization_flag;
  uint32_t extra_output_varXMM0_Da;
  uint32_t extra_output_varXMM0_Da_00;
  uint8_t localBuffer_368 [32];
  uint8_t uintStack_348;
  char cStack_338;
  char cStack_337;
  char acStack_336 [2];
  uint uintStack_334;
  void *system_buffer_ptr_330;
  char *stack_char_ptr;
  uint uintStack_320;
  uint64_t uintStack_318;
  void *system_buffer_ptr_310;
  uint8_t *system_buffer_ptr_308;
  uint uintStack_300;
  uint64_t uintStack_2f8;
  ulonglong uintStack_2f0;
  void *system_buffer_ptr_2e8;
  uint8_t *system_buffer_ptr_2e0;
  uint uintStack_2d8;
  ulonglong uintStack_2d0;
  void *system_buffer_ptr_2c8;
  uint8_t *system_buffer_ptr_2c0;
  uint32_t uintStack_2b8;
  ulonglong uintStack_2b0;
  void *system_buffer_ptr_2a8;
  void *system_buffer_ptr_2a0;
  uint uintStack_298;
  uint32_t uintStack_290;
  uint32_t uintStack_28c;
  void *system_buffer_ptr_288;
  uint32_t *system_buffer_ptr_280;
  uint32_t uintStack_278;
  uint64_t uintStack_270;
  void *system_buffer_ptr_268;
  longlong longStack_260;
  void *system_buffer_ptr_258;
  longlong longStack_250;
  uint uintStack_248;
  uint32_t uintStack_240;
  uint32_t uintStack_23c;
  void *system_buffer_ptr_238;
  longlong longStack_230;
  uint uintStack_228;
  uint32_t uintStack_220;
  void *system_buffer_ptr_218;
  longlong longStack_210;
  uint uintStack_208;
  uint32_t uintStack_200;
  void *system_buffer_ptr_1f8;
  longlong longStack_1f0;
  uint uintStack_1e8;
  uint32_t uintStack_1e0;
  void *system_buffer_ptr_1d8;
  longlong longStack_1d0;
  uint uintStack_1c8;
  uint32_t uintStack_1c0;
  void *system_buffer_ptr_1b8;
  void *system_buffer_ptr_1b0;
  int intStack_1a8;
  uint32_t uintStack_1a0;
  void *system_buffer_ptr_198;
  void *system_buffer_ptr_190;
  int intStack_188;
  uint32_t uintStack_180;
  void *system_buffer_ptr_178;
  longlong longStack_170;
  uint32_t uintStack_160;
  uint64_t uintStack_158;
  ulonglong uintStack_150;
  void *system_buffer_ptr_148;
  longlong longStack_140;
  uint32_t uintStack_130;
  void *system_buffer_ptr_128;
  longlong longStack_120;
  uint32_t uintStack_110;
  void *system_buffer_ptr_108;
  longlong longStack_100;
  uint32_t uintStack_f0;
  uint64_t *system_buffer_ptr_e8;
  uint64_t *system_buffer_ptr_e0;
  uint64_t uintStack_d8;
  uint32_t uintStack_d0;
  void *system_buffer_ptr_c8;
  longlong longStack_c0;
  uint32_t uintStack_b0;
  uint64_t uintStack_a8;
  void *system_buffer_ptr_98;
  uint8_t *system_buffer_ptr_90;
  uint32_t uintStack_88;
  uint8_t localBuffer_80 [72];
  ulonglong uintStack_38;

  long_result = g_system_base_1;
  uintStack_a8 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_368;
  ptr_uint_var = (uint8_t *)0x0;
  uintStack_334 = 0;
  longStack_260 = g_system_base_1;
  cStack_338 = '\0';
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  long_result = -1;
  do {
    long_result = long_result;
    long_result = long_result + 1;
  } while (ptr_uint_var[long_result] != '\0');
  uint_result = long_result + 2;
  system_buffer_ptr_310 = &resourcePoolPointer;
  uintStack_2f8 = 0;
  system_buffer_ptr_308 = (uint8_t *)0x0;
  uintStack_300 = 0;
  system_buffer_ptr_268 = ptr_uint_var;
  uintStack_150 = uint_result;
  (**(code **)(*(longlong *)(g_system_base_1 + 0x2c0) + SYSTEM_DATA_COMPARE_SIZE))
            ((longlong *)(g_system_base_1 + 0x2c0),ptr_uint_var);
  uintStack_2f0 = 0;
  ptr_uint_var = ptr_uint_var;
  if (uint_result != 0) {
    do {
      bool_var = ptr_uint_var[uintStack_2f0];
      uint_result = (uint)ptr_uint_var;
      if ((bool_var & 0xdf) == 0) {
        long_result = long_result + 0x2e0;
        long_result = AllocateSystemResource(systemMemoryPool,0x40,*(uint8_t *)(long_result + 0x308));
        ProcessResourceData(long_result + SYSTEM_NODE_HEADER_SIZE,&bufferPtr_310system_buffer_ptr_310);
        long_result = InitializeSystemDataNode19(long_result,&cStack_337,long_result + SYSTEM_NODE_HEADER_SIZE);
        if (cStack_337 != '\0') {
          if (long_result == long_result) goto LAB_18004d1c1;
          if (*(int *)(long_result + 0x30) == 0) goto LAB_18004d1b9;
          if (*(int *)(long_result + 0x30) == 0) goto LAB_18004d1c1;
          ptr_byte_var = *(byte **)(long_result + 0x28);
          long_result = *(longlong *)(long_result + 0x28) - (longlong)ptr_byte_var;
          goto LAB_18004d1a2;
        }
        ConfigureGraphicsShader(extra_output_varXMM0_Da,long_result);
        if (uint_result == 8) {
          int_result = strcmp(ptr_uint_var,&globalSystemVariable);
          system_initialization_flag = int_result == 0;
        }
        else {
          system_initialization_flag = false;
        }
        if (system_initialization_flag) {
// void InitializePhysicsSystem(longlong handleIdentifier)

void InitializePhysicsSystem(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint32_t uint_result;
  int compare_result;
  bool bool_var;
  uint64_t uint_result;
  bool bool_var;

  ptr_int_var = (int *)(handleIdentifier + 0x3d0);
  if (((int)*(float *)(systemCoreData + 0x17ec) == *(int *)(handleIdentifier + 0x3cc)) &&
     ((int)*(float *)(systemCoreData + 0x17f0) == *ptr_int_var)) {
    bool_var = false;
  }
  else {
    bool_var = true;
    InitializeThreadManagerSystem(systemCoreData,*(int *)(handleIdentifier + 0x3cc),*ptr_int_var);
  }
  if (*(int *)(*(longlong *)(handleIdentifier + 8) + 0x38) == 2) {
    if ((*(char *)(handleIdentifier + 0x3d4) != '\0') || (*(char *)(handleIdentifier + 0x3d5) != '\0')) {
      uint_result = *(uint32_t *)(systemCoreData + 0x1ea0);
      ConfigureGraphicsShader(systemCoreData,0);
      ProcessAudioConfiguration(*(uint64_t *)(handleIdentifier + 8),*(uint32_t *)(handleIdentifier + 0x3cc),*ptr_int_var,
                    *(uint8_t *)(handleIdentifier + 0x3d5));
      InitializeSystemModule45(systemConfigurationData,*(uint32_t *)(handleIdentifier + 0x3cc),*ptr_int_var,1);
      ConfigureGraphicsShader(systemCoreData,uint_result);
      ProcessAudioConfiguration(*(uint64_t *)(handleIdentifier + 8),*(uint32_t *)(handleIdentifier + 0x3cc),*ptr_int_var,
                    *(uint8_t *)(handleIdentifier + 0x3d5));
      bool_var = true;
      goto LAB_18004e721;
    }
  }
  else {
    if (*(char *)(handleIdentifier + 0x3d4) != '\0') {
      compare_result = *(int *)(systemCoreData + 0x1ea0);
      if ((*(char *)(handleIdentifier + 0x3d5) != '\0') || (bool_var)) {
        uint_result = 1;
      }
      else {
        uint_result = 0;
      }
      ProcessAudioConfiguration(*(longlong *)(handleIdentifier + 8),*(uint32_t *)(handleIdentifier + 0x3cc),*ptr_int_var,uint_result);
      bool_var = compare_result == 2;
      goto LAB_18004e721;
    }
    if (!bool_var) {
      return;
    }
  }
  bool_var = false;
LAB_18004e721:
  InitializeSystemModule45(systemConfigurationData,*(uint32_t *)(handleIdentifier + 0x3cc),*ptr_int_var,bool_var);
  if (!bool_var) {
    return;
  }
                    // WARNING: Subroutine does not return
  SystemFunction_17_6(g_system_context_1,&g_system_global_variable8,*(uint32_t *)(handleIdentifier + 0x3cc),*ptr_int_var);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint32_t InitializeSystemModule21(void)

{
  uint8_t audio_data_buffer[16];
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint uint_result;
  int int_result;
  void *system_buffer_ptr_c8;
  longlong longStack_c0;
  uint uintStack_b8;
  ulonglong uintStack_b0;
  void *system_buffer_ptr_a8;
  longlong longStack_a0;
  uint uintStack_98;
  uint64_t uintStack_90;
  uint64_t uintStack_88;
  uint8_t localBuffer_80 [32];
  uint8_t localBuffer_60 [40];

  long_result = g_system_base_1;
  uintStack_88 = INVALID_HANDLE_VALUE;
  audio_data_buffer = *(uint8_t (*) [16])
            (*(longlong *)(g_system_base_1 + 8) + 0xcc +
            (ulonglong)(*(uint *)(*(longlong *)(g_system_base_1 + 8) + 0x13c) & 1) * 0x48);
  if ((audio_data_buffer._12_4_ != 0) && (audio_data_buffer._8_4_ != 0)) {
    system_buffer_ptr_c8 = &resourcePoolPointer;
    uintStack_b0 = 0;
    longStack_c0 = 0;
    uintStack_b8 = 0;
    ExtractAudioData(&bufferPtr_c8system_buffer_ptr_c8,audio_data_buffer._0_4_);
    uint_result = uintStack_b8 + 1;
    ConfigureSystemParameters(&bufferPtr_c8system_buffer_ptr_c8,uint_result);
    *(uint16_t *)((ulonglong)uintStack_b8 + longStack_c0) = 0x2c;
    uintStack_b8 = uint_result;
    ExtractAudioData(&bufferPtr_c8system_buffer_ptr_c8,audio_data_buffer._0_8_ >> SYSTEM_NODE_HEADER_SIZE);
    uint_result = uintStack_b8 + 1;
    ConfigureSystemParameters(&bufferPtr_c8system_buffer_ptr_c8,uint_result);
    *(uint16_t *)((ulonglong)uintStack_b8 + longStack_c0) = 0x2c;
    uintStack_b8 = uint_result;
    ExtractAudioData(&bufferPtr_c8system_buffer_ptr_c8,audio_data_buffer._8_8_ & 0xffffffff);
    int_result = uintStack_b8 + 1;
    ConfigureSystemParameters(&bufferPtr_c8system_buffer_ptr_c8,int_result);
    *(uint16_t *)((ulonglong)uintStack_b8 + longStack_c0) = 0x2c;
    uintStack_b8 = int_result;
    ExtractAudioData(&bufferPtr_c8system_buffer_ptr_c8,audio_data_buffer._8_8_ >> SYSTEM_NODE_HEADER_SIZE);
    ptr_uint_var = (uint64_t *)ProcessResourceData(localBuffer_80,&bufferPtr_c8system_buffer_ptr_c8);
    InitializeSystemModule59(systemCoreData + 0xe30,ptr_uint_var);
    *ptr_uint_var = &resourcePoolPointer;
    if (ptr_uint_var[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    ptr_uint_var[1] = 0;
    *(uint32_t *)(ptr_uint_var + 3) = 0;
    *ptr_uint_var = &globalSystemPointerData;
    system_buffer_ptr_c8 = &resourcePoolPointer;
    if (longStack_c0 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_c0 = 0;
    uintStack_b0 = uintStack_b0 & 0xffffffff00000000;
    system_buffer_ptr_c8 = &globalSystemPointerData;
  }
  long_result = *(longlong *)(long_result + 8);
  audio_data_buffer = *(uint8_t (*) [16])(long_result + 0xdc + (ulonglong)(*(uint *)(long_result + 0x13c) & 1) * 0x48);
  if ((audio_data_buffer._12_4_ != 0) && (audio_data_buffer._8_4_ != 0)) {
    system_buffer_ptr_a8 = &resourcePoolPointer;
    uintStack_90 = 0;
    longStack_a0 = 0;
    uintStack_98 = 0;
    ExtractAudioData(&bufferPtr_a8system_buffer_ptr_a8,audio_data_buffer._0_4_);
    uint_result = uintStack_98 + 1;
    ConfigureSystemParameters(&bufferPtr_a8system_buffer_ptr_a8,uint_result);
    *(uint16_t *)((ulonglong)uintStack_98 + longStack_a0) = 0x2c;
    uintStack_98 = uint_result;
    ExtractAudioData(&bufferPtr_a8system_buffer_ptr_a8,audio_data_buffer._0_8_ >> SYSTEM_NODE_HEADER_SIZE);
    uint_result = uintStack_98 + 1;
    ConfigureSystemParameters(&bufferPtr_a8system_buffer_ptr_a8,uint_result);
    *(uint16_t *)((ulonglong)uintStack_98 + longStack_a0) = 0x2c;
    uintStack_98 = uint_result;
    ExtractAudioData(&bufferPtr_a8system_buffer_ptr_a8,audio_data_buffer._8_8_ & 0xffffffff);
    int_result = uintStack_98 + 1;
    ConfigureSystemParameters(&bufferPtr_a8system_buffer_ptr_a8,int_result);
    *(uint16_t *)((ulonglong)uintStack_98 + longStack_a0) = 0x2c;
    uintStack_98 = int_result;
    ExtractAudioData(&bufferPtr_a8system_buffer_ptr_a8,audio_data_buffer._8_8_ >> SYSTEM_NODE_HEADER_SIZE);
    ptr_uint_var = (uint64_t *)ProcessResourceData(localBuffer_60,&bufferPtr_a8system_buffer_ptr_a8);
    InitializeSystemModule59(systemCoreData + 0xef0,ptr_uint_var);
    *ptr_uint_var = &resourcePoolPointer;
    if (ptr_uint_var[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    ptr_uint_var[1] = 0;
    *(uint32_t *)(ptr_uint_var + 3) = 0;
    *ptr_uint_var = &globalSystemPointerData;
    system_buffer_ptr_a8 = &resourcePoolPointer;
    if (longStack_a0 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  return *(uint32_t *)(*(longlong *)(long_result + 8) + 0x13c);
}
// WARNING: Removing unreachable block (ram,0x00018004ed08)

// WARNING: Removing unreachable block (ram,0x00018004ed22)

// WARNING: Removing unreachable block (ram,0x00018004ed36)

// WARNING: Removing unreachable block (ram,0x00018004ed44)

// WARNING: Removing unreachable block (ram,0x00018004ed48)

// WARNING: Removing unreachable block (ram,0x00018004ed5b)

// WARNING: Removing unreachable block (ram,0x00018004ed5f)

// WARNING: Removing unreachable block (ram,0x00018004ed72)

// WARNING: Removing unreachable block (ram,0x00018004ed76)

// WARNING: Removing unreachable block (ram,0x00018004ed89)

// WARNING: Removing unreachable block (ram,0x00018004ed8d)

// WARNING: Removing unreachable block (ram,0x00018004edbc)

// WARNING: Removing unreachable block (ram,0x00018004edc0)

// WARNING: Removing unreachable block (ram,0x00018004edd3)

// WARNING: Removing unreachable block (ram,0x00018004ee38)

// WARNING: Removing unreachable block (ram,0x00018004ee52)

// WARNING: Removing unreachable block (ram,0x00018004ee66)

// WARNING: Removing unreachable block (ram,0x00018004ee74)

// WARNING: Removing unreachable block (ram,0x00018004ee78)

// WARNING: Removing unreachable block (ram,0x00018004ee8b)

// WARNING: Removing unreachable block (ram,0x00018004ee8f)

// WARNING: Removing unreachable block (ram,0x00018004eea2)

// WARNING: Removing unreachable block (ram,0x00018004eea6)

// WARNING: Removing unreachable block (ram,0x00018004eeb6)

// WARNING: Removing unreachable block (ram,0x00018004eeba)

// WARNING: Removing unreachable block (ram,0x00018004eeec)

// WARNING: Removing unreachable block (ram,0x00018004eef0)

// WARNING: Removing unreachable block (ram,0x00018004ef03)

// WARNING: Removing unreachable block (ram,0x00018004ebd5)

// WARNING: Removing unreachable block (ram,0x00018004ebef)

// WARNING: Removing unreachable block (ram,0x00018004ec03)

// WARNING: Removing unreachable block (ram,0x00018004ec11)

// WARNING: Removing unreachable block (ram,0x00018004ec15)

// WARNING: Removing unreachable block (ram,0x00018004ec28)

// WARNING: Removing unreachable block (ram,0x00018004ec2c)

// WARNING: Removing unreachable block (ram,0x00018004ec3f)

// WARNING: Removing unreachable block (ram,0x00018004ec43)

// WARNING: Removing unreachable block (ram,0x00018004ec56)

// WARNING: Removing unreachable block (ram,0x00018004ec5a)

// WARNING: Removing unreachable block (ram,0x00018004ec88)

// WARNING: Removing unreachable block (ram,0x00018004ec90)

// WARNING: Removing unreachable block (ram,0x00018004eca3)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode30(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemDataNode30(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint uint_result;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  void *system_buffer_ptr_68;
  longlong longStack_60;
  uint uintStack_58;
  uint64_t uintStack_50;

  long_result = systemCoreData;
  system_buffer_ptr_68 = &resourcePoolPointer;
  uintStack_50 = 0;
  longStack_60 = 0;
  uintStack_58 = 0;
  if (*(int *)(systemCoreData + 0x1ea0) == 0) {
    uint_result = *(uint *)(systemCoreData + 0xe40);
    uint_result = (ulonglong)uint_result;
    if (*(longlong *)(systemCoreData + 0xe38) != 0) {
      ConfigureSystemParameters(&bufferPtr_68system_buffer_ptr_68,uint_result,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
    }
    if (uint_result != 0) {
                    // WARNING: Subroutine does not return
      memcpy(longStack_60,*(uint64_t *)(long_result + 0xe38),uint_result);
    }
    if (longStack_60 != 0) {
      *(uint8_t *)(uint_result + longStack_60) = 0;
    }
    uintStack_50 = CONCAT44(*(uint32_t *)(long_result + 0xe4c),(uint32_t)uintStack_50);
  }
  long_result = systemCoreData;
  uintStack_58 = 0;
  uint_result = *(uint *)(systemCoreData + 0xf00);
  uint_result = (ulonglong)uint_result;
  if (*(longlong *)(systemCoreData + 0xef8) != 0) {
    ConfigureSystemParameters(&bufferPtr_68system_buffer_ptr_68,uint_result);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memcpy(longStack_60,*(uint64_t *)(long_result + 0xef8),uint_result);
  }
  if (longStack_60 != 0) {
    *(uint8_t *)(uint_result + longStack_60) = 0;
  }
  long_result = systemCoreData;
  uintStack_50 = CONCAT44(*(uint32_t *)(long_result + 0xf0c),(uint32_t)uintStack_50);
  uint_result = *(uint *)(systemCoreData + 0xfc0);
  uint_result = (ulonglong)uint_result;
  uintStack_58 = uint_result;
  if (*(longlong *)(systemCoreData + 0xfb8) != 0) {
    ConfigureSystemParameters(&bufferPtr_68system_buffer_ptr_68,uint_result);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memcpy(longStack_60,*(uint64_t *)(long_result + 0xfb8),uint_result);
  }
  if (longStack_60 != 0) {
    *(uint8_t *)(uint_result + longStack_60) = 0;
  }
  uintStack_50 = CONCAT44(*(uint32_t *)(long_result + 0xfcc),(uint32_t)uintStack_50);
  system_buffer_ptr_68 = &resourcePoolPointer;
  if (longStack_60 != 0) {
    uintStack_58 = uint_result;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureGraphicsShader(void)
void ConfigureGraphicsShader(void)

{
  int int_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  int *ptr_int_var;
  uint64_t *node_current;
  uint32_t *node_previous;
  void *node_next;
  char char_var;
  float float_result;
  uint32_t uint_result;
  float float_result;
  uint8_t localBuffer_208 [32];
  longlong longStack_1e8;
  longlong longStack_1d8;
  longlong longStack_1d0;
  uint64_t *asystem_buffer_ptr_1c8 [10];
  uint64_t uintStack_178;
  uint8_t system_local_buffer_170 [8];
  void *system_buffer_ptr_168;
  uint8_t *system_buffer_ptr_160;
  uint32_t uintStack_158;
  uint8_t localBuffer_150 [264];
  ulonglong uintStack_48;

  long_result = g_system_base_1;
  uintStack_178 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_208;
  if (*(void **)*systemConfigurationData == &systemNextData) {
    char_var = *(int *)(systemConfigurationData + 0xe0) != 0;
  }
  else {
    char_var = (**(code **)(*(void **)*systemConfigurationData + 0x48))();
  }
  if (char_var == '\0') {
    systemConfigurationData = timeGetTime();
  }
  else {
    systemConfigurationData = 0xb061;
  }
  long_result = systemCoreData;
  systemConfigurationData = systemConfigurationData ^ 0x41c64e6d;
  if ((*(longlong *)(systemCoreData + 0x7ab8) == 0) || (*(int *)(systemCoreData + 0x540) < 1)) {
    if (*(int *)(systemCoreData + 0x2140) == 0) {
      float_result = *(float *)(systemCoreData + SYSTEM_NODE_HEADER_SIZEd0);
    }
    else {
      float_result = 100.0;
    }
    float_result = float_result * 0.01;
  }
  else {
    float_result = 1.0;
  }
  *(float *)(long_result + 0x234) = float_result;
  *(uint32_t *)(long_result + 0x238) = 0x3f800000;
  float_result = 1.0;
  if (*(int *)(long_result + 0x1ea0) == 1) {
    int_result = *(int *)(long_result + 0x1d50);
    ptr_int_var = (int *)GetAudioDeviceHandle(*(uint64_t *)(g_system_base_1 + 8),system_local_buffer_170);
    float_result = (float)int_result / (float)*ptr_int_var;
    float_result = float_result * *(float *)(long_result + 0x234);
    float_result = float_result * *(float *)(long_result + 0x238);
  }
  if (0.2 <= float_result) {
    if (1.0 <= float_result) {
      float_result = 1.0;
    }
  }
  else {
    float_result = 0.2;
  }
  *(float *)(long_result + 0x234) = float_result;
  float_result = 0.2;
  if ((0.2 <= float_result) && (float_result = float_result, 1.0 <= float_result)) {
    float_result = 1.0;
  }
  *(float *)(long_result + 0x238) = float_result;
  *(uint8_t *)(long_result + 0x22d) = 0;
  uint_result = log2f();
  *(uint32_t *)(long_result + 0x230) = uint_result;
  uint_result = log2f();
  *(uint32_t *)(long_result + 0x240) = uint_result;
  uint_result = log2f();
  *(uint32_t *)(long_result + 0x244) = uint_result;
  uint_result = log2f();
  *(uint32_t *)(long_result + 0x248) = uint_result;
  uint_result = log2f();
  *(uint32_t *)(long_result + 0x24c) = uint_result;
  uint_result = log2f(*(float *)(systemCoreData + 0x2220) * 0.01);
  *(uint32_t *)(long_result + 0x23c) = uint_result;
  *(uint64_t *)(long_result + 0x254) = 0x3f8000003f800000;
  longStack_1d8 = 0x3f8000003f800000;
  *(uint64_t *)(long_result + 0x25c) = 0x3f8000003f800000;
  long_result = systemCoreData;
  long_result = systemConfigurationData;
  system_buffer_ptr_168 = &g_system_data_nodeconfig;
  system_buffer_ptr_160 = localBuffer_150;
  localBuffer_150[0] = 0;
  uintStack_158 = 0xd;
  strcpy_s(localBuffer_150,SYSTEM_DATA_COMPARE_SIZE,&globalSystemVariable);
  node_current = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
  longStack_1e8 = long_result + 0x70;
  abufferPtr_1c8[0] = node_current;
  InitializeGraphicsSystem(node_current,&bufferPtr_168system_buffer_ptr_168,3,long_result + 0x2e0);
  *node_current = &globalSystemVariable;
  abufferPtr_1c8[0] = node_current;
  ConfigureGraphicsDevice(node_current);
  InitializeSystemModule44(long_result + 0x48,asystem_buffer_ptr_1c8);
  *(uint64_t **)(long_result + 0x18) = node_current;
  system_buffer_ptr_168 = &globalSystemPointerData;
  node_next = &g_system_data_variable3;
  if (*(void **)(long_result + 0x278) != (void *)0x0) {
    node_next = *(void **)(long_result + 0x278);
  }
  (**(code **)(*(longlong *)(systemCoreData + 0x560) + SYSTEM_DATA_COMPARE_SIZE))
            ((longlong *)(systemCoreData + 0x560),node_next);
  long_result = systemConfigurationData;
  longStack_1d8 = AllocateSystemMemory(systemMemoryPool,0x30,8,3);
  *(uint64_t *)(longStack_1d8 + 0x28) = 3;
  *(uint32_t *)(longStack_1d8 + NODE_INITIALIZED_OFFSET) = 0;
  *(uint16_t *)(longStack_1d8 + 0x1d) = 0;
  *(uint8_t *)(longStack_1d8 + 0x1f) = 0;
  *(longlong *)longStack_1d8 = longStack_1d8;
  *(longlong *)(longStack_1d8 + 8) = longStack_1d8;
  *(uint64_t *)(longStack_1d8 + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint8_t *)(longStack_1d8 + 0x18) = 0;
  *(uint64_t *)(longStack_1d8 + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(longlong *)(long_result + 0xa8) = longStack_1d8;
  longStack_1d0 = longStack_1d8;
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_data_variable0,&globalSystemVariable,ConfigureGraphicsParameters);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_data_variable0,&g_system_data_variable0,SetupGraphicsDevice);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_data_variable0,&globalSystemVariable,InitializeGraphicsMemory);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_configuration_data_ptr,&globalSystemVariable,ProcessGraphicsTexture);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_global_variable8,&globalSystemVariable,ConfigureGraphicsShader);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_configuration_data_ptr,&g_system_data_variable0,SystemFunction_72_0);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_data_variable0,&globalSystemVariable,InitializeStringManagerSystem);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_global_variable8,&g_system_global_variable8,SystemFunction_1_6);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&globalSystemVariable,&g_system_global_variable8,SystemFunction_96_0);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_data_variable0,&globalSystemVariable,SystemFunction_85_6);
  RegisterGraphicsCallback(*(uint64_t *)(systemConfigurationData + 0xa8),&g_system_data_variable0,&globalSystemVariable,SystemFunction_74_4);
  node_previous = (uint32_t *)InitializeSystemDataNode15(long_result + 0xe0,&g_system_data_variable0);
  *node_previous = 1;
  node_previous = (uint32_t *)InitializeSystemDataNode15(long_result + 0xe0,&g_system_data_variable0);
  *node_previous = 1;
  longStack_1d0 = AllocateSystemMemory(systemMemoryPool,0x3878,8,3);
                    // WARNING: Subroutine does not return
  memset(longStack_1d0,0,0x3878);
}
// void InitializeSystemModule19(longlong handleIdentifier)

void InitializeSystemModule19(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializeNetworkManagerSystem(longlong handleIdentifier)

void InitializeNetworkManagerSystem(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_92_0(void)
void SystemFunction_92_0(void)

{
  uint64_t *ptr_uint_var;
  char *ptr_char_var;
  uint64_t uint_result;
  longlong long_result;
  char char_var;
  int int_result;
  uint32_t uint_result;
  longlong long_result;
  longlong *long_ptr;
  uint32_t *ptr_uint_var;
  uint8_t localBuffer_a8 [32];
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  void *system_buffer_ptr_78;
  uint32_t *system_buffer_ptr_70;
  uint32_t uintStack_68;
  uint64_t uintStack_60;
  uint64_t uintStack_58;
  void *system_buffer_ptr_50;
  uint8_t *system_buffer_ptr_48;
  uint32_t uintStack_40;
  uint8_t localBuffer_38 [16];
  ulonglong uintStack_28;

  long_result = g_system_base_1;
  uintStack_58 = INVALID_HANDLE_VALUE;
  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_a8;
  InitializeFilesystemSystem(systemConfigurationData);
  do {
    uint_result = systemConfigurationData;
    long_result = InitializeSystemModule10(systemConfigurationData);
    if (long_result == 0) break;
    long_ptr = (longlong *)InitializeSystemModule10(uint_result);
    char_var = (**(code **)(*long_ptr + SYSTEM_NODE_HEADER_SIZE))(long_ptr,1);
  } while (char_var != '\0');
  InitializeFilesystemSystem(systemConfigurationData);
  ptr_uint_var = systemCoreData;
  if (*(char *)(systemCoreData + 7) != '\0') {
    stack_long_ptr = (longlong *)0x180c91970;
    int_result = _Mtx_lock(0x180c91970);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
    InitializeGraphicsMemory(*(uint64_t *)*ptr_uint_var);
    InitializeGraphicsMemory(*(uint64_t *)ptr_uint_var[1]);
    SetupSystemMemory(*ptr_uint_var);
    SetupSystemMemory(ptr_uint_var[1]);
    *(uint8_t *)(ptr_uint_var + 7) = 0;
    int_result = _Mtx_unlock(0x180c91970);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
  }
  ptr_uint_var = (uint64_t *)*systemCoreData;
  if (ptr_uint_var != (uint64_t *)0x0) {
    *systemCoreData = 0;
    (**(code **)*ptr_uint_var)(ptr_uint_var,1);
  }
  long_ptr = systemConfigurationData;
  uint_result = systemConfigurationData;
  stack_long_ptr = systemConfigurationData;
  if (systemConfigurationData != (longlong *)0x0) {
    SetupGraphicsBuffers(*systemConfigurationData);
    *long_ptr = 0;
    stack_long_ptr = long_ptr + 1;
    InitializePhysicsSystem();
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_ptr);
  }
  systemConfigurationData = (longlong *)0x0;
  if (systemInitializationObject != (longlong *)0x0) {
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = systemInitializationObject;
    (**(code **)(*systemInitializationObject + 0x28))();
    InitializeSystemDataNode19(uint_result,&stack_long_ptr,0);
  }
  InitializeFilesystemSystem(systemConfigurationData);
  if (g_system_handle_1 != 0) {
    ConfigureGraphicsShader();
  }
  InitializeFilesystemSystem(systemConfigurationData);
  if (*(longlong **)(long_result + 0x2b0) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(long_result + 0x2b0) + SYSTEM_NODE_HEADER_SIZE))();
  }
  ptr_char_var = *(char **)(systemConfigurationData + SYSTEM_DATA_COMPARE_SIZE);
  if (*ptr_char_var != '\0') {
    WSACleanup();
    *ptr_char_var = '\0';
  }
  uint_result = systemConfigurationData;
  if (systemInitializationObject != (longlong *)0x0) {
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = systemInitializationObject;
    (**(code **)(*systemInitializationObject + 0x28))();
    InitializeSystemDataNode19(uint_result,&stack_long_ptr,0);
  }
  InitializeFilesystemSystem(systemConfigurationData);
  if (g_system_handle_1 != 0) {
    ConfigureGraphicsShader();
  }
  InitializeFilesystemSystem(systemConfigurationData);
  uint_result = systemConfigurationData;
  if (systemInitializationObject != (longlong *)0x0) {
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = systemInitializationObject;
    (**(code **)(*systemInitializationObject + 0x28))();
    InitializeSystemDataNode19(uint_result,&stack_long_ptr,0);
  }
  InitializeFilesystemSystem(systemConfigurationData);
  if (g_system_handle_1 != 0) {
    ConfigureGraphicsShader();
  }
  InitializeFilesystemSystem(systemConfigurationData);
  system_buffer_ptr_50 = &g_system_data_nodeconfig;
  system_buffer_ptr_48 = localBuffer_38;
  localBuffer_38[0] = 0;
  uintStack_40 = 3;
  strcpy_s(localBuffer_38,SYSTEM_DATA_COMPARE_SIZE,&g_system_global_variable4);
  system_buffer_ptr_78 = &resourcePoolPointer;
  uintStack_60 = 0;
  system_buffer_ptr_70 = (uint32_t *)0x0;
  uintStack_68 = 0;
  ptr_uint_var = (uint32_t *)AllocateSystemResource(systemMemoryPool,0x14,0x13);
  *(uint8_t *)ptr_uint_var = 0;
  system_buffer_ptr_70 = ptr_uint_var;
  uint_result = ValidateResourceAllocation(ptr_uint_var);
  *ptr_uint_var = 0x706d6554;
  ptr_uint_var[1] = 0x7261726f;
  ptr_uint_var[2] = 0x73655279;
  ptr_uint_var[3] = 0x6372756f;
  ptr_uint_var[4] = 0x2f7365;
  uintStack_68 = 0x13;
  uintStack_60._0_4_ = uint_result;
  PrepareGraphicsData(&bufferPtr_78system_buffer_ptr_78,&bufferPtr_50system_buffer_ptr_50);
  system_buffer_ptr_78 = &resourcePoolPointer;
  if (system_buffer_ptr_70 != (uint32_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_70 = (uint32_t *)0x0;
  uintStack_60 = (ulonglong)uintStack_60._4_4_ << SYSTEM_NODE_HEADER_SIZE;
  system_buffer_ptr_78 = &globalSystemPointerData;
  system_buffer_ptr_50 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  SystemFunction_17_6(g_system_context_1,&globalSystemVariable);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule46(void)
void InitializeSystemModule46(void)

{
  longlong *long_ptr;
  uint64_t *node_root;
  code *ptr_char_var;
  uint8_t *ptr_uint_var;
  uint64_t uint_result;
  longlong long_result;
  int int_result;
  longlong long_result;
  longlong **ptr_ptr_long_var;
  uint16_t *ptr_uint_var;
  uint uint_result;
  ulonglong uint_result;
  float float_result;
  double double_var;
  double double_var;
  longlong **pstack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong lstack_var;
  longlong longStack_90;
  longlong longStack_88;
  longlong longStack_80;
  longlong longStack_78;
  longlong ***ppstack_long_ptr;
  uint64_t uintStack_68;
  longlong **pstack_long_ptr;
  uint64_t uintStack_58;
  ulonglong uint_result;

  long_result = systemCoreData;
  long_result = g_system_base_1;
  if (g_system_data_variable0 != '\0') {
    InitializeTextureSystem();
    return;
  }
  uintStack_68 = INVALID_HANDLE_VALUE;
  *(uint64_t *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE38) = *(uint64_t *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE30);
  ptr_uint_var = (uint16_t *)(long_result + 0x14);
  long_result = SYSTEM_DATA_COMPARE_SIZE0;
  uint_result = 0;
  do {
    *ptr_uint_var = 0;
    ptr_uint_var = ptr_uint_var + 0xc;
    long_result = long_result + -1;
  } while (long_result != 0);
  InitializeAuthenticationSystem(systemCoreData + 0x48);
  systemConfigurationData = 0;
  g_system_data_variablec = 0;
  if (g_system_data_variable1 != '\0') {
    long_ptr = *(longlong **)(long_result + 8);
    ptr_ptr_long_var = (longlong **)AllocateSystemMemory(systemMemoryPool,0x48,8,3);
    *ptr_ptr_long_var = (longlong *)&globalSystemVariable;
    *ptr_ptr_long_var = (longlong *)&globalSystemVariable;
    *(uint32_t *)(ptr_ptr_long_var + 1) = 0;
    *ptr_ptr_long_var = (longlong *)&globalSystemOutputData;
    LOCK();
    *(uint8_t *)(ptr_ptr_long_var + 2) = 0;
    UNLOCK();
    ptr_ptr_long_var[3] = (longlong *)0xffffffffffffffff;
    *ptr_ptr_long_var = (longlong *)&globalSystemVariable;
    *(uint32_t *)(ptr_ptr_long_var + 5) = 4;
    ptr_ptr_long_var[4] = long_ptr;
    ppstack_long_ptr = (longlong ***)ptr_ptr_long_var;
    pstack_long_ptr = ptr_ptr_long_var;
    (*(code *)(*ptr_ptr_long_var)[5])(ptr_ptr_long_var);
    node_root = (uint64_t *)long_ptr[0x28];
    ptr_char_var = *(code **)*node_root;
    ppstack_long_ptr = &pstack_long_ptr;
    pstack_long_ptr = ptr_ptr_long_var;
    (*(code *)(*ptr_ptr_long_var)[5])(ptr_ptr_long_var);
    (*ptr_char_var)(node_root,&pstack_long_ptr);
    ProcessGameData(long_ptr[0x28]);
    (*(code *)(*ptr_ptr_long_var)[7])(ptr_ptr_long_var);
  }
  long_result = *(longlong *)(systemCoreData + 0x18) - *(longlong *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = uint_result;
  if (long_result / 0x1c != 0) {
    do {
      ProcessGraphicsTexture(long_result,uint_result * 0x1c + *(longlong *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE));
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      long_result = *(longlong *)(systemCoreData + 0x18) - *(longlong *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE);
      uint_result = (longlong)(int)uint_result;
    } while ((ulonglong)(longlong)(int)uint_result < (ulonglong)(long_result / 0x1c));
  }
  *(uint64_t *)(systemCoreData + 0x18) = *(uint64_t *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE);
  *(uint8_t *)(*(longlong *)(*(longlong *)(long_result + 8) + 0x140) + SYSTEM_NODE_HEADER_SIZE8) = 1;
  if (*(char *)(long_result + 0x3c8) != '\0') {
    InitializePhysicsSystem(long_result);
    LOCK();
    *(uint8_t *)(long_result + 0x3c8) = 0;
    UNLOCK();
  }
  long_result = systemConfigurationData;
  *(uint64_t *)(systemConfigurationData + 4) = 0;
  *(uint64_t *)(long_result + 0xc) = 0;
  *(uint64_t *)(long_result + 0x14) = 0;
  InitializeResourceSystem(long_result + SYSTEM_NODE_HEADER_SIZE);
  InitializeResourceSystem(long_result + 0x50);
  LOCK();
  *(uint32_t *)(long_result + 0x80) = 0;
  UNLOCK();
  LOCK();
  *(uint32_t *)(long_result + 0x84) = 0;
  UNLOCK();
  LOCK();
  *(uint32_t *)(long_result + 0x88) = 0;
  UNLOCK();
  long_result = systemConfigurationData;
  if (systemConfigurationData == 0) {
    QueryPerformanceCounter(&lstack_var);
    long_result = lstack_var;
  }
  *(double *)(long_result + 0x68) = (double)(long_result - systemConfigurationData) * systemCoreData;
  if (g_system_data_variable3 != '\0') {
    uintStack_58 = 0x180c91288;
    int_result = _Mtx_lock(0x180c91288);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
// void InitializeTextureSystem(longlong handleIdentifier)

void InitializeTextureSystem(longlong handleIdentifier)

{
  longlong *long_ptr;
  uint64_t *node_root;
  code *ptr_char_var;
  uint8_t *ptr_uint_var;
  uint64_t uint_result;
  int int_result;
  longlong long_result;
  longlong **ptr_ptr_long_var;
  uint16_t *ptr_uint_var;
  uint uint_result;
  ulonglong uint_result;
  float float_result;
  double double_var;
  double double_var;
  longlong **pstack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong lstack_var;
  longlong longStack_90;
  longlong longStack_88;
  longlong longStack_80;
  longlong longStack_78;
  longlong ***ppstack_long_ptr;
  uint64_t uintStack_68;
  longlong **pstack_long_ptr;
  uint64_t uintStack_58;
  ulonglong uint_result;

  long_result = systemCoreData;
  uintStack_68 = INVALID_HANDLE_VALUE;
  *(uint64_t *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE38) = *(uint64_t *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE30);
  ptr_uint_var = (uint16_t *)(long_result + 0x14);
  long_result = SYSTEM_DATA_COMPARE_SIZE0;
  uint_result = 0;
  do {
    *ptr_uint_var = 0;
    ptr_uint_var = ptr_uint_var + 0xc;
    long_result = long_result + -1;
  } while (long_result != 0);
  InitializeAuthenticationSystem(systemCoreData + 0x48);
  systemConfigurationData = 0;
  g_system_data_variablec = 0;
  if (g_system_data_variable1 != '\0') {
    long_ptr = *(longlong **)(handleIdentifier + 8);
    ptr_ptr_long_var = (longlong **)AllocateSystemMemory(systemMemoryPool,0x48,8,3);
    *ptr_ptr_long_var = (longlong *)&globalSystemVariable;
    *ptr_ptr_long_var = (longlong *)&globalSystemVariable;
    *(uint32_t *)(ptr_ptr_long_var + 1) = 0;
    *ptr_ptr_long_var = (longlong *)&globalSystemOutputData;
    LOCK();
    *(uint8_t *)(ptr_ptr_long_var + 2) = 0;
    UNLOCK();
    ptr_ptr_long_var[3] = (longlong *)0xffffffffffffffff;
    *ptr_ptr_long_var = (longlong *)&globalSystemVariable;
    *(uint32_t *)(ptr_ptr_long_var + 5) = 4;
    ptr_ptr_long_var[4] = long_ptr;
    ppstack_long_ptr = (longlong ***)ptr_ptr_long_var;
    pstack_long_ptr = ptr_ptr_long_var;
    (*(code *)(*ptr_ptr_long_var)[5])(ptr_ptr_long_var);
    node_root = (uint64_t *)long_ptr[0x28];
    ptr_char_var = *(code **)*node_root;
    ppstack_long_ptr = &pstack_long_ptr;
    pstack_long_ptr = ptr_ptr_long_var;
    (*(code *)(*ptr_ptr_long_var)[5])(ptr_ptr_long_var);
    (*ptr_char_var)(node_root,&pstack_long_ptr);
    ProcessGameData(long_ptr[0x28]);
    (*(code *)(*ptr_ptr_long_var)[7])(ptr_ptr_long_var);
  }
  long_result = *(longlong *)(systemCoreData + 0x18) - *(longlong *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = uint_result;
  if (long_result / 0x1c != 0) {
    do {
      ProcessGraphicsTexture(long_result,uint_result * 0x1c + *(longlong *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE));
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      long_result = *(longlong *)(systemCoreData + 0x18) - *(longlong *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE);
      uint_result = (longlong)(int)uint_result;
    } while ((ulonglong)(longlong)(int)uint_result < (ulonglong)(long_result / 0x1c));
  }
  *(uint64_t *)(systemCoreData + 0x18) = *(uint64_t *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZE);
  *(uint8_t *)(*(longlong *)(*(longlong *)(handleIdentifier + 8) + 0x140) + SYSTEM_NODE_HEADER_SIZE8) = 1;
  if (*(char *)(handleIdentifier + 0x3c8) != '\0') {
    InitializePhysicsSystem(handleIdentifier);
    LOCK();
    *(uint8_t *)(handleIdentifier + 0x3c8) = 0;
    UNLOCK();
  }
  long_result = systemConfigurationData;
  *(uint64_t *)(systemConfigurationData + 4) = 0;
  *(uint64_t *)(long_result + 0xc) = 0;
  *(uint64_t *)(long_result + 0x14) = 0;
  InitializeResourceSystem(long_result + SYSTEM_NODE_HEADER_SIZE);
  InitializeResourceSystem(long_result + 0x50);
  LOCK();
  *(uint32_t *)(long_result + 0x80) = 0;
  UNLOCK();
  LOCK();
  *(uint32_t *)(long_result + 0x84) = 0;
  UNLOCK();
  LOCK();
  *(uint32_t *)(long_result + 0x88) = 0;
  UNLOCK();
  long_result = systemConfigurationData;
  if (systemConfigurationData == 0) {
    QueryPerformanceCounter(&lstack_var);
    long_result = lstack_var;
  }
  *(double *)(handleIdentifier + 0x68) = (double)(long_result - systemConfigurationData) * systemCoreData;
  if (g_system_data_variable3 != '\0') {
    uintStack_58 = 0x180c91288;
    int_result = _Mtx_lock(0x180c91288);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
// void InitializeEffectSystem(longlong handleIdentifier,uint64_t resourceIdentifier)

void InitializeEffectSystem(longlong handleIdentifier,uint64_t resourceIdentifier)

{
  longlong *long_ptr;
  char char_var;
  char char_var;
  int int_result;
  uint32_t uint_result;
  uint8_t *node_current;
  uint64_t *node_previous;
  uint64_t *node_next;
  longlong long_result;
  uint uint_result;
  longlong long_result;
  ulonglong uint_result;
  longlong *long_ptr;
  float float_result;
  uint64_t uint_result;
  float float_result;
  uint8_t localBuffer_348 [32];
  longlong **pstack_long_ptr;
  void *system_buffer_ptr_320;
  uint32_t uintStack_318;
  uint64_t uintStack_308;
  char cStack_300;
  char acStack_2ff [7];
  longlong *stack_long_ptr;
  uint32_t uintStack_2f0;
  void *system_buffer_ptr_2e8;
  uint64_t *system_buffer_ptr_2e0;
  uint32_t uintStack_2d8;
  uint64_t uintStack_2d0;
  uint32_t localBuffer_2c8 [2];
  longlong *stack_long_ptr;
  uint64_t uintStack_2b8;
  uint64_t localBuffer_2a8 [67];
  longlong alongStack_90 [3];
  uint32_t uintStack_78;
  ulonglong uintStack_68;
  ulonglong uint_result;

  uintStack_2b8 = INVALID_HANDLE_VALUE;
  uintStack_68 = systemConfigurationData ^ (ulonglong)localBuffer_348;
  float_result = (float)resourceIdentifier;
  systemCoreData = (longlong)(float_result * 100000.0);
  systemCoreData = systemCoreData + systemCoreData;
  systemConfigurationData = float_result;
  uint_result = InitializeSystemModule23();
  uint_result = ValidateTextureData(uint_result,resourceIdentifier);
  char_var = CheckTextureFormat(uint_result,0x52);
  char_var = CheckTextureFormat(1,0x51);
  long_result = 0xe0;
  if (char_var == '\0') {
    if (char_var == '\0') goto LAB_18005122d;
  }
  else {
// void ConfigureSystemHandles(longlong handleIdentifier)

void ConfigureSystemHandles(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  node_root = *(uint64_t **)(handleIdentifier + 0x218);
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemDataNode15(uint64_t *handleIdentifier,uint64_t *resourceIdentifier)

{
  longlong *long_ptr;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  uint8_t *node_previous;
  longlong long_result;
  ulonglong uint_result;

  node_previous = (uint8_t *)((longlong)handleIdentifier + 0xf);
  *handleIdentifier = *resourceIdentifier;
  *(uint32_t *)(handleIdentifier + 1) = *(uint32_t *)(resourceIdentifier + 1);
  *(uint8_t *)((longlong)handleIdentifier + 0xc) = *(uint8_t *)((longlong)resourceIdentifier + 0xc);
  *(uint8_t *)((longlong)handleIdentifier + 0xd) = *(uint8_t *)((longlong)resourceIdentifier + 0xd);
  *(uint8_t *)((longlong)handleIdentifier + 0xe) = *(uint8_t *)((longlong)resourceIdentifier + 0xe);
  long_result = SYSTEM_DATA_COMPARE_SIZE0;
  do {
    *node_previous = node_previous[(longlong)resourceIdentifier - (longlong)handleIdentifier];
    node_previous[1] = node_previous[((longlong)resourceIdentifier - (longlong)handleIdentifier) + 1];
    node_previous = node_previous + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  *(uint8_t *)((longlong)handleIdentifier + SYSTEM_NODE_HEADER_SIZEf) = *(uint8_t *)((longlong)resourceIdentifier + SYSTEM_NODE_HEADER_SIZEf);
  long_ptr = handleIdentifier + 0x43;
  *(uint8_t *)(handleIdentifier + 0x42) = *(uint8_t *)(resourceIdentifier + 0x42);
  *(uint8_t *)((longlong)handleIdentifier + 0x211) = *(uint8_t *)((longlong)resourceIdentifier + 0x211);
  if (long_ptr != resourceIdentifier + 0x43) {
    long_result = *long_ptr;
    long_result = resourceIdentifier[0x44];
    long_result = resourceIdentifier[0x43];
    long_result = long_result - long_result;
    uint_result = long_result >> 2;
    if ((ulonglong)(handleIdentifier[0x45] - long_result >> 2) < uint_result) {
      if (uint_result == 0) {
        long_result = 0;
      }
      else {
        long_result = AllocateSystemResource(systemMemoryPool,uint_result * 4,*(uint8_t *)(handleIdentifier + 0x46));
      }
      if (long_result != long_result) {
                    // WARNING: Subroutine does not return
        memmove(long_result,long_result,long_result);
      }
      if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      long_result = long_result + uint_result * 4;
      *long_ptr = long_result;
      handleIdentifier[0x44] = long_result;
      handleIdentifier[0x45] = long_result;
    }
    else {
      long_result = handleIdentifier[0x44];
      uint_result = long_result - long_result >> 2;
      if (uint_result < uint_result) {
        long_result = uint_result * 4 + long_result;
        if (long_result != long_result) {
                    // WARNING: Subroutine does not return
          memmove(long_result,long_result);
        }
        if (long_result != long_result) {
                    // WARNING: Subroutine does not return
          memmove(long_result,long_result,long_result - long_result);
        }
        handleIdentifier[0x44] = long_result;
      }
      else {
        if (long_result != long_result) {
                    // WARNING: Subroutine does not return
          memmove(long_result,long_result,long_result);
        }
        handleIdentifier[0x44] = long_result;
      }
    }
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_33_2(longlong handleIdentifier)
void SystemFunction_33_2(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  longlong in_RAX;
  longlong long_result;
  ulonglong uint_result;
  longlong *system_RSI;
  longlong *system_RDI;
  longlong allocation_size;
  ulonglong uint_result;

  long_result = system_RSI[1];
  long_result = *system_RSI;
  allocation_size = long_result - long_result;
  uint_result = allocation_size >> 2;
  if ((ulonglong)(in_RAX - handleIdentifier >> 2) < uint_result) {
    if (uint_result == 0) {
      long_result = 0;
    }
    else {
      long_result = AllocateSystemResource(systemMemoryPool,uint_result * 4,(char)system_RDI[3]);
    }
    if (long_result != long_result) {
                    // WARNING: Subroutine does not return
      memmove(long_result,long_result,allocation_size);
    }
    if (*system_RDI != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    long_result = long_result + uint_result * 4;
    *system_RDI = long_result;
    system_RDI[1] = long_result;
    system_RDI[2] = long_result;
  }
  else {
    long_result = system_RDI[1];
    uint_result = long_result - handleIdentifier >> 2;
    if (uint_result < uint_result) {
      allocation_size = uint_result * 4 + long_result;
      if (long_result != allocation_size) {
                    // WARNING: Subroutine does not return
        memmove(handleIdentifier,long_result);
      }
      if (allocation_size != long_result) {
                    // WARNING: Subroutine does not return
        memmove(long_result,allocation_size,long_result - allocation_size);
      }
      system_RDI[1] = long_result;
    }
    else {
      if (long_result != long_result) {
                    // WARNING: Subroutine does not return
        memmove(handleIdentifier,long_result,allocation_size);
      }
      system_RDI[1] = handleIdentifier;
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_37_9(void)
void SystemFunction_37_9(void)

{
  longlong long_result;
  longlong long_result;
  longlong system_RBP;
  longlong system_RSI;
  longlong *system_RDI;
  longlong system_R14;

  if (system_R14 == 0) {
    long_result = 0;
  }
  else {
    long_result = AllocateSystemResource(systemMemoryPool,system_R14 * 4,(char)system_RDI[3]);
  }
  if (system_RSI != system_RBP) {
                    // WARNING: Subroutine does not return
    memmove(long_result);
  }
  if (*system_RDI != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = long_result + system_R14 * 4;
  *system_RDI = long_result;
  system_RDI[1] = long_result;
  system_RDI[2] = long_result;
  return;
}
// void SystemFunction_47_6(longlong handleIdentifier)

void SystemFunction_47_6(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  longlong system_RBP;
  longlong system_RSI;
  longlong system_RDI;
  ulonglong system_R14;

  long_result = *(longlong *)(system_RDI + 8);
  uint_result = long_result - handleIdentifier >> 2;
  if (uint_result < system_R14) {
    long_result = uint_result * 4 + system_RSI;
    if (system_RSI != long_result) {
                    // WARNING: Subroutine does not return
      memmove();
    }
    if (long_result != system_RBP) {
                    // WARNING: Subroutine does not return
      memmove(long_result,long_result,system_RBP - long_result);
    }
    *(longlong *)(system_RDI + 8) = long_result;
  }
  else {
    if (system_RSI != system_RBP) {
                    // WARNING: Subroutine does not return
      memmove();
    }
    *(longlong *)(system_RDI + 8) = handleIdentifier;
  }
  return;
}
// void SystemFunction_59_9(void)

void SystemFunction_59_9(void)

{
  return;
}

bool InitializeSystemResources(longlong handleIdentifier)

{
  uint64_t *ptr_uint_var;
  byte bool_var;
  bool bool_var;
  byte *ptr_byte_var;
  uint uint_result;
  int int_result;
  longlong long_result;
  uint64_t *node_next;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  void *system_buffer_ptr_30;
  byte *pbStack_28;
  int intStack_20;

  ptr_uint_var = (uint64_t *)(handleIdentifier + 0x2e0);
  PrepareSystemBuffer(&bufferPtr_30system_buffer_ptr_30);
  node_next = *(uint64_t **)(handleIdentifier + 0x2f0);
  ptr_uint_var = ptr_uint_var;
  if (node_next != (uint64_t *)0x0) {
    do {
      if (intStack_20 == 0) {
        bool_var = false;
        ptr_uint_var = (uint64_t *)node_next[1];
      }
      else {
        if (*(int *)(node_next + 6) == 0) {
          bool_var = true;
        }
        else {
          ptr_byte_var = pbStack_28;
          do {
            uint_result = (uint)ptr_byte_var[node_next[5] - (longlong)pbStack_28];
            int_result = *ptr_byte_var - uint_result;
            if (*ptr_byte_var != uint_result) break;
            ptr_byte_var = ptr_byte_var + 1;
          } while (uint_result != 0);
          bool_var = 0 < int_result;
          if (int_result < 1) {
            ptr_uint_var = (uint64_t *)node_next[1];
            goto LAB_180051f8b;
          }
        }
        ptr_uint_var = (uint64_t *)*node_next;
      }
LAB_180051f8b:
      ptr_uint_var = node_next;
      if (bool_var) {
        ptr_uint_var = ptr_uint_var;
      }
      node_next = ptr_uint_var;
      ptr_uint_var = ptr_uint_var;
    } while (ptr_uint_var != (uint64_t *)0x0);
    if (ptr_uint_var != ptr_uint_var) {
      if (*(int *)(ptr_uint_var + 6) == 0) goto LAB_180051fc9;
      if (intStack_20 != 0) {
        ptr_byte_var = (byte *)ptr_uint_var[5];
        long_result = (longlong)pbStack_28 - (longlong)ptr_byte_var;
        do {
          bool_var = *ptr_byte_var;
          uint_result = (uint)ptr_byte_var[long_result];
          if (bool_var != uint_result) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (uint_result != 0);
        if ((int)(bool_var - uint_result) < 1) goto LAB_180051fc9;
      }
    }
  }
  ptr_uint_var = ptr_uint_var;
LAB_180051fc9:
  system_buffer_ptr_30 = &resourcePoolPointer;
  if (pbStack_28 == (byte *)0x0) {
    return ptr_uint_var != ptr_uint_var;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t
InitializeConfigSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ProcessResourceData(resourceIdentifier,g_system_base_1 + 0x2c0,systemConfig,systemFlags,0,INVALID_HANDLE_VALUE);
  return resourceIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule36(longlong handleIdentifier)
void InitializeSystemModule36(longlong handleIdentifier)

{
  uint64_t *ptr_uint_var;
  int int_result;
  uint8_t localBuffer_108 [32];
  uint32_t uintStack_e8;
  uint64_t uintStack_b8;
  longlong longStack_b0;
  uint8_t localBuffer_a8 [128];
  ulonglong uintStack_28;

  uintStack_b8 = INVALID_HANDLE_VALUE;
  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_108;
  uintStack_e8 = 0;
  longStack_b0 = handleIdentifier;
  ProcessResourceData(handleIdentifier,g_system_base_1 + 0x170);
  uintStack_e8 = 1;
  int_result = *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) + 8;
  ConfigureSystemParameters(handleIdentifier,int_result);
  ptr_uint_var = (uint64_t *)((ulonglong)*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(handleIdentifier + 8));
  *ptr_uint_var = 0x2f73656873617263;
  *(uint8_t *)(ptr_uint_var + 1) = 0;
  *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = int_result;
                    // WARNING: Subroutine does not return
  memset(localBuffer_a8,0,0x80);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemComponents(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemComponents(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  uint32_t uint_result;
  int compare_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  longlong long_result;
  uint64_t uint_result;
  void *system_buffer_ptr_90;
  uint64_t *system_buffer_ptr_88;
  uint32_t uintStack_80;
  uint64_t uintStack_78;
  void *system_buffer_ptr_70;
  uint64_t *system_buffer_ptr_68;
  uint32_t uintStack_60;
  uint64_t uintStack_58;

  uint_result = INVALID_HANDLE_VALUE;
  long_ptr = (longlong *)(handleIdentifier + 0xd8);
  long_result = 0;
  if ((*(longlong *)(handleIdentifier + 0xe0) - *long_ptr & 0xffffffffffffffe0U) != 0) {
    InitializeUISystem(resourceIdentifier);
    uint_result = *(longlong *)(handleIdentifier + 0xe0) - *long_ptr >> 5;
    if (0 < (int)uint_result) {
      uint_result = uint_result & 0xffffffff;
      do {
        if (*(ulonglong *)(resourceIdentifier + 8) < *(ulonglong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE)) {
          *(ulonglong *)(resourceIdentifier + 8) = *(ulonglong *)(resourceIdentifier + 8) + SYSTEM_NODE_HEADER_SIZE;
          ProcessResourceData();
        }
        else {
          InitializeUISystem(resourceIdentifier,*long_ptr + long_result);
        }
        long_result = long_result + SYSTEM_NODE_HEADER_SIZE;
        uint_result = uint_result - 1;
      } while (uint_result != 0);
    }
    return;
  }
  system_buffer_ptr_70 = &resourcePoolPointer;
  uintStack_58 = 0;
  system_buffer_ptr_68 = (uint64_t *)0x0;
  uintStack_60 = 0;
  ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13,systemFlags,INVALID_HANDLE_VALUE);
  *(uint8_t *)ptr_uint_var = 0;
  system_buffer_ptr_68 = ptr_uint_var;
  uint_result = ValidateResourceAllocation(ptr_uint_var);
  uintStack_58 = CONCAT44(uintStack_58._4_4_,uint_result);
  *ptr_uint_var = 0x53454c55444f4d5f;
  *(uint16_t *)(ptr_uint_var + 1) = 0x2a5f;
  *(uint8_t *)((longlong)ptr_uint_var + 10) = 0;
  uintStack_60 = 10;
  compare_result = CompareSystemBuffers(handleIdentifier + 0x2c0,&bufferPtr_70system_buffer_ptr_70);
  if (-1 < compare_result) {
    system_buffer_ptr_90 = &resourcePoolPointer;
    uintStack_78 = 0;
    system_buffer_ptr_88 = (uint64_t *)0x0;
    uintStack_80 = 0;
    ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13,systemFlags,uint_result);
    *(uint8_t *)ptr_uint_var = 0;
    system_buffer_ptr_88 = ptr_uint_var;
    uint_result = ValidateResourceAllocation(ptr_uint_var);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
    *ptr_uint_var = 0x454c55444f4d5f2a;
    *(uint16_t *)(ptr_uint_var + 1) = 0x5f53;
    *(uint8_t *)((longlong)ptr_uint_var + 10) = 0;
    uintStack_80 = 10;
    CompareSystemBuffers(handleIdentifier + 0x2c0,&bufferPtr_90system_buffer_ptr_90);
    system_buffer_ptr_90 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  system_buffer_ptr_70 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t InitializeSystemModule16(uint64_t handleIdentifier,uint64_t resourceIdentifier)

{
  longlong long_result;
  uint32_t uint_result;
  int compare_result;
  uint64_t *ptr_uint_var;
  void *system_buffer_ptr_88;
  uint64_t *system_buffer_ptr_80;
  uint32_t uintStack_78;
  uint64_t uintStack_70;
  void *system_buffer_ptr_68;
  uint64_t *system_buffer_ptr_60;
  uint32_t uintStack_58;
  uint64_t uintStack_50;

  long_result = g_system_base_1;
  if (*(int *)(g_system_base_1 + 200) != 0) {
    ProcessResourceData(resourceIdentifier,g_system_base_1 + 0xb8);
    return resourceIdentifier;
  }
  system_buffer_ptr_68 = &resourcePoolPointer;
  uintStack_50 = 0;
  system_buffer_ptr_60 = (uint64_t *)0x0;
  uintStack_58 = 0;
  ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
  *(uint8_t *)ptr_uint_var = 0;
  system_buffer_ptr_60 = ptr_uint_var;
  uint_result = ValidateResourceAllocation(ptr_uint_var);
  uintStack_50 = CONCAT44(uintStack_50._4_4_,uint_result);
  *ptr_uint_var = 0x53454c55444f4d5f;
  *(uint16_t *)(ptr_uint_var + 1) = 0x2a5f;
  *(uint8_t *)((longlong)ptr_uint_var + 10) = 0;
  uintStack_58 = 10;
  compare_result = CompareSystemBuffers(long_result + 0x2c0,&bufferPtr_68system_buffer_ptr_68);
  if (-1 < compare_result) {
    system_buffer_ptr_88 = &resourcePoolPointer;
    uintStack_70 = 0;
    system_buffer_ptr_80 = (uint64_t *)0x0;
    uintStack_78 = 0;
    ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
    *(uint8_t *)ptr_uint_var = 0;
    system_buffer_ptr_80 = ptr_uint_var;
    uint_result = ValidateResourceAllocation(ptr_uint_var);
    uintStack_70 = CONCAT44(uintStack_70._4_4_,uint_result);
    *ptr_uint_var = 0x454c55444f4d5f2a;
    *(uint16_t *)(ptr_uint_var + 1) = 0x5f53;
    *(uint8_t *)((longlong)ptr_uint_var + 10) = 0;
    uintStack_78 = 10;
    CompareSystemBuffers(long_result + 0x2c0,&bufferPtr_88system_buffer_ptr_88);
    system_buffer_ptr_88 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  system_buffer_ptr_68 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAudioMutex(longlong handleIdentifier,float resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeAudioMutex(longlong handleIdentifier,float resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ulonglong uint_result;
  float float_result;
  float float_result;
  ulonglong uint_result;
  ulonglong uint_result;
  int int_result;
  uint uint_result;
  longlong long_result;
  uint uint_result;
  uint64_t in_RDX;
  longlong long_result;
  uint uint_result;
  uint uint_result;
  uint uint_result;
  bool network_initialization_flag;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint32_t uint_result;
  float float_result;
  float fstack_var;
  float fstack_varc;

  long_result = systemCoreData;
  if ((*(longlong *)(systemCoreData + 0x7ab8) == 0) || (*(int *)(systemCoreData + 0x540) < 1)) {
    network_initialization_flag = *(int *)(systemCoreData + 0x2140) != 0;
  }
  else {
    network_initialization_flag = false;
  }
  if (network_initialization_flag) {
    float_result = (float)exp2f(systemCoreData,in_RDX,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
    if (*(char *)(handleIdentifier + 0x22d) == '\0') {
      long_result = *(longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8);
      if ((*(int *)(long_result + 0x48) < systemCoreData) &&
         (CheckSystemInitialized(&g_system_data_variable0), systemCoreData == -1)) {
        systemStatusData = resourceIdentifier;
        MarkSystemInitialized(&g_system_data_variable0);
      }
      float_result = (float)exp2f();
      float_result = (float)exp2f();
      float_result = (float)exp2f();
      float_result = (float)exp2f();
      float_result = (float)exp2f();
      systemStatusData = (1.0 - float_result) * systemStatusData + float_result * resourceIdentifier;
      float_result = (float)*(int *)(systemCoreData + 0x21b0);
      if (*(float *)(g_system_base_1 + 0x1f8) <= (float)*(int *)(systemCoreData + 0x21b0)) {
        float_result = *(float *)(g_system_base_1 + 0x1f8);
      }
      float_result = *(float *)(systemCoreData + 0x1e30);
      if (0 < *(int *)(systemCoreData + 0x1f80)) {
        float_result = float_result / (float)*(int *)(systemCoreData + 0x1f80);
      }
      float_result = (float)((int)float_result + -1);
      if (float_result <= (float)((int)float_result + -1)) {
        float_result = float_result;
      }
      if ((*(int *)(long_result + 0x48) < systemConfigurationData) &&
         (CheckSystemInitialized(&g_system_configuration_data_ptr), systemConfigurationData == -1)) {
        g_system_data_variablec = float_result;
        MarkSystemInitialized(&g_system_configuration_data_ptr);
      }
      g_system_data_variablec = (1.0 - float_result) * g_system_data_variablec + float_result * float_result;
      float_result = ((float)(int)((systemStatusData / g_system_data_variablec) / float_result) * float_result - 1.0) * float_result *
               float_result + float_result;
      if (float_result <= float_result) {
        float_result = float_result;
      }
      if (1.0 <= float_result) {
        float_result = 1.0;
      }
      float_result = (float)(int)((float_result + 0.05) / float_result) * float_result;
      if ((float_result <= float_result) && (float_result = float_result, 1.0 <= float_result)) {
        float_result = 1.0;
      }
      *(float *)(handleIdentifier + 0x238) = float_result;
      uint_result = log2f();
      *(uint32_t *)(handleIdentifier + 0x248) = uint_result;
      *(float *)(handleIdentifier + 0x250) = systemStatusData;
      long_result = systemCoreData;
      *(uint8_t *)(systemCoreData + 0x162b) = 1;
      long_result = systemCoreData;
    }
    else {
      *(float *)(handleIdentifier + 0x238) = float_result;
      long_result = systemCoreData;
      long_result = systemCoreData;
    }
  }
  else {
    *(uint32_t *)(handleIdentifier + 0x238) = 0x3f800000;
    long_result = systemCoreData;
  }
  if ((*(longlong *)(systemCoreData + 0x7ab8) == 0) || (*(int *)(long_result + 0x540) < 1)) {
    if (*(int *)(long_result + 0x2140) == 0) {
      float_result = *(float *)(long_result + SYSTEM_NODE_HEADER_SIZEd0);
    }
    else {
      float_result = 100.0;
    }
    float_result = float_result * 0.01;
  }
  else {
    float_result = 1.0;
  }
  *(float *)(handleIdentifier + 0x234) = float_result;
  uint_result = (uint)*(float *)(long_result + 0x17ec);
  uint_result = (uint)*(float *)(long_result + 0x17f0);
  uint_result = uint_result;
  uint_result = uint_result;
  if (1.0 <= float_result) {
    fstack_var = 1.0;
    fstack_varc = 1.0;
  }
  else {
    while (0 < (int)uint_result) {
      uint_result = (int)uint_result % (int)uint_result;
      uint_result = uint_result;
      uint_result = uint_result;
    }
    int_result = (int)uint_result / (int)uint_result;
    fstack_var = (float)(int)uint_result;
    do {
      uint_result = (uint)(fstack_var * float_result);
      if (1 < int_result) {
        uint_result = ((uint_result - 1) - (int)(uint_result - 1) % int_result) + int_result;
      }
      uint_result = (longlong)(int)(((int)uint_result / (int)uint_result) * uint_result) / (longlong)int_result;
      uint_result = (uint)uint_result;
      if (((uint_result & 1) == 0) && ((uint_result & 1) == 0)) goto LAB_180052ce3;
      float_result = float_result + 0.01;
      *(float *)(handleIdentifier + 0x234) = float_result;
    } while (float_result <= 1.0);
    *(uint32_t *)(handleIdentifier + 0x234) = 0x3f800000;
LAB_180052ce3:
    fstack_var = (float)(int)uint_result / fstack_var;
    fstack_varc = (float)(int)uint_result / (float)(int)uint_result;
    uint_result = uint_result;
  }
  *(ulonglong *)(handleIdentifier + 0x254) = CONCAT44(fstack_varc,fstack_var);
  float_result = *(float *)(handleIdentifier + 0x238);
  if (1.0 <= float_result) {
    fstack_var = 1.0;
    fstack_varc = 1.0;
  }
  else {
    uint_result = (ulonglong)uint_result;
    uint_result = (ulonglong)uint_result;
    uint_result = uint_result;
    uint_result = uint_result;
    while (uint_result = uint_result, 0 < (int)uint_result) {
      uint_result = (uint)uint_result;
      uint_result = (longlong)(int)uint_result % (longlong)(int)uint_result;
      uint_result = (uint)uint_result;
      uint_result = uint_result & 0xffffffff;
      uint_result = uint_result;
    }
    int_result = (int)uint_result / (int)uint_result;
    do {
      uint_result = (uint)(float_result * (float)(int)uint_result);
      if (1 < int_result) {
        uint_result = ((uint_result - 1) - (int)(uint_result - 1) % int_result) + int_result;
      }
      uint_result = (longlong)(int)(((int)uint_result / (int)uint_result) * uint_result) / (longlong)int_result;
      if (((uint_result & 1) == 0) && ((uint_result & 1) == 0)) goto LAB_180052de5;
      float_result = float_result + 0.01;
      *(float *)(handleIdentifier + 0x238) = float_result;
    } while (float_result <= 1.0);
    *(uint32_t *)(handleIdentifier + 0x238) = 0x3f800000;
LAB_180052de5:
    fstack_var = (float)(int)uint_result / (float)(int)uint_result;
    fstack_varc = (float)(int)uint_result / (float)(int)uint_result;
  }
  *(ulonglong *)(handleIdentifier + 0x25c) = CONCAT44(fstack_varc,fstack_var);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule43(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint8_t systemFlags)
void InitializeSystemModule43(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint8_t systemFlags)

{
  int int_result;
  longlong long_result;
  longlong long_result;
  uint64_t uint_result;
  longlong *pallocation_size;
  int *ptr_int_var;
  longlong long_result;
  ulonglong uint_result;
  uint uint_result;
  ulonglong uint_result;
  float float_result;
  float float_result;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong alongStack_70 [2];
  void *system_buffer_ptr_60;
  void *system_buffer_ptr_58;
  longlong alongStack_50 [2];
  void *system_buffer_ptr_40;
  void *system_buffer_ptr_38;

  long_result = g_system_base_1;
  stack_long_ptr = handleIdentifier;
  if (*(int *)(systemCoreData + 0xd94) != *(int *)(systemCoreData + 0xd90)) {
    InitializeThreadManagerSystem(g_system_base_1,resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  long_result = systemCoreData;
  if (systemCoreData != 0) {
    uint_result = 0;
    long_result = *(longlong *)(systemCoreData + 0x1868);
    uint_result = uint_result;
    if (*(longlong *)(systemCoreData + 0x1870) - long_result >> 3 != 0) {
      do {
        if (*(longlong **)(uint_result + long_result) != (longlong *)0x0) {
          (**(code **)(**(longlong **)(uint_result + long_result) + SYSTEM_DATA_COMPARE_SIZE8))();
        }
        uint_result = (int)uint_result + 1;
        uint_result = uint_result + 8;
        long_result = *(longlong *)(long_result + 0x1868);
        uint_result = (ulonglong)uint_result;
      } while ((ulonglong)(longlong)(int)uint_result <
               (ulonglong)(*(longlong *)(long_result + 0x1870) - long_result >> 3));
    }
    (**(code **)(systemCoreData + 0x40))();
  }
  (**(code **)(**(longlong **)(long_result + 0x2b0) + 0xd0))();
  if (((*(int *)(systemCoreData + 0x4d4) != *(int *)(systemCoreData + 0x4d0)) ||
      (*(int *)(systemCoreData + 0x314) != *(int *)(systemCoreData + 0x310))) ||
     (*(int *)(systemCoreData + 0x544) != *(int *)(systemCoreData + 0x540))) {
    stack_long_ptr = alongStack_70;
    system_buffer_ptr_60 = &g_system_func_10;
    system_buffer_ptr_58 = &g_system_func_9;
    InitializeFontSystem(alongStack_70);
  }
  if ((systemCoreData != 0) &&
     ((*(int *)(systemCoreData + 900) != *(int *)(systemCoreData + 0x380) ||
      (*(int *)(systemCoreData + 0x3f4) != *(int *)(systemCoreData + 0x3f0))))) {
    uint_result = AllocateSystemMemory(systemMemoryPool,0x40,8,3);
    stack_long_ptr = alongStack_50;
    system_buffer_ptr_40 = &g_system_func_8;
    system_buffer_ptr_38 = &g_system_func_7;
    pallocation_size = (longlong *)InitializeInputSystem(uint_result,alongStack_50);
    stack_long_ptr = pallocation_size;
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x28))(pallocation_size);
    }
    uint_result = systemConfigurationData;
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = pallocation_size;
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x28))(pallocation_size);
    }
    InitializeConfigSystem(uint_result,&stack_long_ptr);
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x38))(pallocation_size);
    }
  }
  long_result = systemCoreData;
  if ((*(longlong *)(systemCoreData + 0x7ab8) == 0) || (*(int *)(systemCoreData + 0x540) < 1)) {
    if (*(int *)(systemCoreData + 0x2140) == 0) {
      float_result = *(float *)(systemCoreData + SYSTEM_NODE_HEADER_SIZEd0);
    }
    else {
      float_result = 100.0;
    }
    float_result = float_result * 0.01;
  }
  else {
    float_result = 1.0;
  }
  *(float *)(long_result + 0x234) = float_result;
  *(uint32_t *)(long_result + 0x238) = 0x3f800000;
  float_result = 1.0;
  if (*(int *)(long_result + 0x1ea0) == 1) {
    int_result = *(int *)(long_result + 0x1d50);
    ptr_int_var = (int *)GetAudioDeviceHandle(*(uint64_t *)(g_system_base_1 + 8),&stack_long_ptr);
    float_result = (float)int_result / (float)*ptr_int_var;
    float_result = float_result * *(float *)(long_result + 0x234);
    float_result = float_result * *(float *)(long_result + 0x238);
  }
  if (0.2 <= float_result) {
    if (1.0 <= float_result) {
      float_result = 1.0;
    }
  }
  else {
    float_result = 0.2;
  }
  *(float *)(long_result + 0x234) = float_result;
  if (0.2 <= float_result) {
    if (1.0 <= float_result) {
      float_result = 1.0;
    }
    *(float *)(long_result + 0x238) = float_result;
  }
  else {
    *(uint32_t *)(long_result + 0x238) = 0x3e4ccccd;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeNetworkSystem(uint64_t handleIdentifier,longlong resourceIdentifier)
void InitializeNetworkSystem(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  uint32_t *ptr_uint_var;
  int int_result;
  int compare_result;
  uint8_t localBuffer_1c8 [32];
  void **pbufferPtr_1a8;
  uint64_t uintStack_1a0;
  void *system_buffer_ptr_198;
  uint64_t uintStack_190;
  int intStack_188;
  uint8_t localBuffer_e8 [16];
  void *system_buffer_ptr_d8;
  uint64_t uintStack_d0;
  int intStack_c8;
  ulonglong uintStack_18;

  uintStack_1a0 = INVALID_HANDLE_VALUE;
  uintStack_18 = systemConfigurationData ^ (ulonglong)localBuffer_1c8;
  InitializeSystemModule24(localBuffer_e8,
                (longlong)*(int *)(systemConfigurationData + 0x1d40) * 0xd0 +
                *(longlong *)(systemConfigurationData + 0x1d20));
  CleanupSystemBuffer(&bufferPtr_198system_buffer_ptr_198);
  int_result = 0;
  *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  if (*(uint8_t **)(resourceIdentifier + 8) != (uint8_t *)0x0) {
    **(uint8_t **)(resourceIdentifier + 8) = 0;
    int_result = *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  compare_result = int_result + 5;
  ConfigureSystemParameters(resourceIdentifier,compare_result);
  ptr_uint_var = (uint32_t *)((ulonglong)*(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(resourceIdentifier + 8));
  *ptr_uint_var = 0x3a757067;
  *(uint16_t *)(ptr_uint_var + 1) = SYSTEM_NODE_HEADER_SIZE;
  *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = compare_result;
  if (0 < intStack_c8) {
    ConfigureSystemParameters(resourceIdentifier,compare_result + intStack_c8);
                    // WARNING: Subroutine does not return
    memcpy((ulonglong)*(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(resourceIdentifier + 8),uintStack_d0,
           (longlong)(intStack_c8 + 1));
  }
  ConfigureSystemParameters(resourceIdentifier,int_result + 6);
  *(uint16_t *)((ulonglong)*(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(resourceIdentifier + 8)) = 10;
  *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = int_result + 6;
  compare_result = int_result + 0xb;
  ConfigureSystemParameters(resourceIdentifier,compare_result);
  ptr_uint_var = (uint32_t *)((ulonglong)*(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(resourceIdentifier + 8));
  *ptr_uint_var = 0x3a757063;
  *(uint16_t *)(ptr_uint_var + 1) = SYSTEM_NODE_HEADER_SIZE;
  *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = compare_result;
  if (0 < intStack_188) {
    ConfigureSystemParameters(resourceIdentifier,compare_result + intStack_188);
                    // WARNING: Subroutine does not return
    memcpy((ulonglong)*(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(resourceIdentifier + 8),uintStack_190,
           (longlong)(intStack_188 + 1));
  }
  ConfigureSystemParameters(resourceIdentifier,int_result + 0xc);
  *(uint16_t *)((ulonglong)*(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(resourceIdentifier + 8)) = 10;
  *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = int_result + 0xc;
  system_buffer_ptr_198 = &globalSystemPointerData;
  psystem_buffer_ptr_1a8 = &bufferPtr_d8system_buffer_ptr_d8;
  system_buffer_ptr_d8 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_18 ^ (ulonglong)localBuffer_1c8);
}
// WARNING: Removing unreachable block (ram,0x000180053668)

// WARNING: Removing unreachable block (ram,0x0001800536a5)

// WARNING: Removing unreachable block (ram,0x0001800536a9)

// WARNING: Removing unreachable block (ram,0x0001800536b4)

// WARNING: Removing unreachable block (ram,0x0001800536b7)

// WARNING: Removing unreachable block (ram,0x0001800536e1)

// WARNING: Removing unreachable block (ram,0x0001800536e5)

// WARNING: Removing unreachable block (ram,0x0001800536f3)

// WARNING: Removing unreachable block (ram,0x0001800536fb)

// WARNING: Removing unreachable block (ram,0x000180053702)

// WARNING: Removing unreachable block (ram,0x00018005370c)

// WARNING: Removing unreachable block (ram,0x00018005373c)

// WARNING: Removing unreachable block (ram,0x000180053744)

// WARNING: Removing unreachable block (ram,0x000180053747)

// WARNING: Removing unreachable block (ram,0x000180053714)

// WARNING: Removing unreachable block (ram,0x000180053719)

// WARNING: Removing unreachable block (ram,0x000180053760)

// WARNING: Removing unreachable block (ram,0x00018005376e)

// WARNING: Removing unreachable block (ram,0x0001800537b1)

// WARNING: Removing unreachable block (ram,0x0001800537b5)

// WARNING: Removing unreachable block (ram,0x0001800537c0)

// WARNING: Removing unreachable block (ram,0x0001800537c3)

// WARNING: Removing unreachable block (ram,0x0001800537ed)

// WARNING: Removing unreachable block (ram,0x0001800537f1)

// WARNING: Removing unreachable block (ram,0x0001800537ff)

// WARNING: Removing unreachable block (ram,0x000180053807)

// WARNING: Removing unreachable block (ram,0x00018005380c)

// WARNING: Removing unreachable block (ram,0x00018005381c)

// WARNING: Removing unreachable block (ram,0x00018005384b)

// WARNING: Removing unreachable block (ram,0x000180053853)

// WARNING: Removing unreachable block (ram,0x000180053856)

// WARNING: Removing unreachable block (ram,0x000180053824)

// WARNING: Removing unreachable block (ram,0x000180053828)

// WARNING: Removing unreachable block (ram,0x00018005386f)

// WARNING: Removing unreachable block (ram,0x00018005387d)

// WARNING: Removing unreachable block (ram,0x0001800538c8)

// WARNING: Removing unreachable block (ram,0x0001800538cc)

// WARNING: Removing unreachable block (ram,0x0001800538d7)

// WARNING: Removing unreachable block (ram,0x0001800538da)

// WARNING: Removing unreachable block (ram,0x000180053906)

// WARNING: Removing unreachable block (ram,0x00018005390a)

// WARNING: Removing unreachable block (ram,0x000180053918)

// WARNING: Removing unreachable block (ram,0x000180053921)

// WARNING: Removing unreachable block (ram,0x000180053925)

// WARNING: Removing unreachable block (ram,0x000180053931)

// WARNING: Removing unreachable block (ram,0x000180053962)

// WARNING: Removing unreachable block (ram,0x00018005396a)

// WARNING: Removing unreachable block (ram,0x00018005396d)

// WARNING: Removing unreachable block (ram,0x000180053939)

// WARNING: Removing unreachable block (ram,0x00018005393e)

// WARNING: Removing unreachable block (ram,0x000180053987)

// WARNING: Removing unreachable block (ram,0x000180053996)

// WARNING: Removing unreachable block (ram,0x0001800539f8)

// WARNING: Removing unreachable block (ram,0x0001800539fc)

// WARNING: Removing unreachable block (ram,0x000180053a07)

// WARNING: Removing unreachable block (ram,0x000180053a0a)

// WARNING: Removing unreachable block (ram,0x000180053a34)

// WARNING: Removing unreachable block (ram,0x000180053a38)

// WARNING: Removing unreachable block (ram,0x000180053a46)

// WARNING: Removing unreachable block (ram,0x000180053a4e)

// WARNING: Removing unreachable block (ram,0x000180053a53)

// WARNING: Removing unreachable block (ram,0x000180053ad8)

// WARNING: Removing unreachable block (ram,0x000180053a61)

// WARNING: Removing unreachable block (ram,0x000180053aa2)

// WARNING: Removing unreachable block (ram,0x000180053aab)

// WARNING: Removing unreachable block (ram,0x000180053aaf)

// WARNING: Removing unreachable block (ram,0x000180053a69)

// WARNING: Removing unreachable block (ram,0x000180053a74)

// WARNING: Removing unreachable block (ram,0x000180053ade)

// WARNING: Removing unreachable block (ram,0x000180053b28)

// WARNING: Removing unreachable block (ram,0x000180053b2c)

// WARNING: Removing unreachable block (ram,0x000180053b32)

// WARNING: Removing unreachable block (ram,0x000180053b36)

// WARNING: Removing unreachable block (ram,0x000180053b60)

// WARNING: Removing unreachable block (ram,0x000180053b64)

// WARNING: Removing unreachable block (ram,0x000180053b72)

// WARNING: Removing unreachable block (ram,0x000180053b7a)

// WARNING: Removing unreachable block (ram,0x000180053b7e)

// WARNING: Removing unreachable block (ram,0x000180053b8e)

// WARNING: Removing unreachable block (ram,0x000180053bbe)

// WARNING: Removing unreachable block (ram,0x000180053bc6)

// WARNING: Removing unreachable block (ram,0x000180053bc9)

// WARNING: Removing unreachable block (ram,0x000180053b97)

// WARNING: Removing unreachable block (ram,0x000180053b9b)

// WARNING: Removing unreachable block (ram,0x000180053be2)

// WARNING: Removing unreachable block (ram,0x000180053bf0)

// WARNING: Removing unreachable block (ram,0x000180053c4c)

// WARNING: Removing unreachable block (ram,0x000180053c51)

// WARNING: Removing unreachable block (ram,0x000180053c5d)

// WARNING: Removing unreachable block (ram,0x000180053c60)

// WARNING: Removing unreachable block (ram,0x000180053c8e)

// WARNING: Removing unreachable block (ram,0x000180053c93)

// WARNING: Removing unreachable block (ram,0x000180053ca1)

// WARNING: Removing unreachable block (ram,0x000180053caa)

// WARNING: Removing unreachable block (ram,0x000180053caf)

// WARNING: Removing unreachable block (ram,0x000180053cbe)

// WARNING: Removing unreachable block (ram,0x000180053cf1)

// WARNING: Removing unreachable block (ram,0x000180053cf9)

// WARNING: Removing unreachable block (ram,0x000180053cfc)

// WARNING: Removing unreachable block (ram,0x000180053cc6)

// WARNING: Removing unreachable block (ram,0x000180053cce)

// WARNING: Removing unreachable block (ram,0x000180053d15)

// WARNING: Removing unreachable block (ram,0x000180053d23)

// WARNING: Removing unreachable block (ram,0x000180053d8b)

// WARNING: Removing unreachable block (ram,0x000180053d8f)

// WARNING: Removing unreachable block (ram,0x000180053d9a)

// WARNING: Removing unreachable block (ram,0x000180053d9d)

// WARNING: Removing unreachable block (ram,0x000180053dcd)

// WARNING: Removing unreachable block (ram,0x000180053dd1)

// WARNING: Removing unreachable block (ram,0x000180053ddf)

// WARNING: Removing unreachable block (ram,0x000180053de8)

// WARNING: Removing unreachable block (ram,0x000180053ded)

// WARNING: Removing unreachable block (ram,0x000180053dfc)

// WARNING: Removing unreachable block (ram,0x000180053e2f)

// WARNING: Removing unreachable block (ram,0x000180053e37)

// WARNING: Removing unreachable block (ram,0x000180053e3a)

// WARNING: Removing unreachable block (ram,0x000180053e03)

// WARNING: Removing unreachable block (ram,0x000180053e0b)

// WARNING: Removing unreachable block (ram,0x000180053e54)

// WARNING: Removing unreachable block (ram,0x000180053e63)

// WARNING: Removing unreachable block (ram,0x000180053ead)

// WARNING: Removing unreachable block (ram,0x000180053eb5)

// WARNING: Removing unreachable block (ram,0x000180053ee6)

// WARNING: Removing unreachable block (ram,0x000180053ef5)

// WARNING: Removing unreachable block (ram,0x000180053f18)

// WARNING: Removing unreachable block (ram,0x000180053f20)

// WARNING: Removing unreachable block (ram,0x000180053f43)

// WARNING: Removing unreachable block (ram,0x000180053f4b)

// WARNING: Removing unreachable block (ram,0x000180053f74)

// WARNING: Removing unreachable block (ram,0x000180053f79)

// WARNING: Removing unreachable block (ram,0x000180053f98)

// WARNING: Removing unreachable block (ram,0x000180053fa0)

// WARNING: Removing unreachable block (ram,0x000180053fbc)

// WARNING: Removing unreachable block (ram,0x000180053fc4)

// WARNING: Removing unreachable block (ram,0x000180053fe5)

// WARNING: Removing unreachable block (ram,0x000180053fea)

// WARNING: Removing unreachable block (ram,0x000180054035)

// WARNING: Removing unreachable block (ram,0x000180054062)

// WARNING: Removing unreachable block (ram,0x000180054075)

// WARNING: Removing unreachable block (ram,0x00018005407a)

// WARNING: Removing unreachable block (ram,0x0001800540b2)

// WARNING: Removing unreachable block (ram,0x0001800540b7)

// WARNING: Removing unreachable block (ram,0x0001800540d9)

// WARNING: Removing unreachable block (ram,0x0001800540e1)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemTimer(uint64_t handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig)
void InitializeSystemTimer(uint64_t handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  uint32_t uint_result;
  int int_result;
  uint uint_result;
  uint uint_result;
  uint8_t *node_previous;
  ulonglong uint_result;
  void *ptr_uint_var;
  longlong long_result;
  uint uint_result;
  uint8_t localBuffer_228 [32];
  uint8_t uintStack_208;
  uint32_t uintStack_1f8;
  uint32_t uintStack_1f4;
  void *system_buffer_ptr_1b0;
  uint8_t *system_buffer_ptr_1a8;
  uint uintStack_1a0;
  uint64_t uintStack_198;
  void *system_buffer_ptr_f0;
  longlong longStack_e8;
  uint uintStack_e0;
  uint64_t uintStack_d8;
  uint64_t uintStack_d0;
  void *system_buffer_ptr_c8;
  uint64_t uintStack_c0;
  uint32_t uintStack_b8;
  uint64_t uintStack_b0;
  uint8_t system_local_buffer_88 [32];
  uint64_t uintStack_68;
  uint64_t uintStack_60;
  char acStack_58 [16];
  ulonglong uintStack_48;

  uintStack_68 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_228;
  node_previous = (uint8_t *)0x0;
  uintStack_1f8 = 0;
  uintStack_d0 = resourceIdentifier;
  uintStack_60 = resourceIdentifier;
  uint_result = GetCurrentProcessId();
  system_buffer_ptr_f0 = &resourcePoolPointer;
  uintStack_d8 = 0;
  longStack_e8 = 0;
  uintStack_e0 = 0;
  ConfigureSystemParameters(&bufferPtr_f0system_buffer_ptr_f0,6);
  long_result = longStack_e8;
  uint_result = (ulonglong)uintStack_e0;
  *(uint32_t *)(uint_result + longStack_e8) = 0x44495020;
  *(uint16_t *)(uint_result + 4 + longStack_e8) = SYSTEM_NODE_HEADER_SIZE3a;
  *(uint8_t *)(uint_result + 6 + longStack_e8) = 0;
  uintStack_e0 = 6;
  SystemFunction_88_0(acStack_58,&globalSystemVariable,uint_result);
  long_result = -1;
  do {
    long_result = long_result;
    long_result = long_result + 1;
  } while (acStack_58[long_result + 1] != '\0');
  if (0 < (int)(long_result + 1)) {
    ConfigureSystemParameters(&bufferPtr_f0system_buffer_ptr_f0,(int)long_result + 7);
                    // WARNING: Subroutine does not return
    memcpy((ulonglong)uintStack_e0 + longStack_e8,acStack_58,(longlong)((int)long_result + 2));
  }
  ptr_uint_var = &g_system_configuration_data_ptr;
  if (g_system_data_variable1 != '\0') {
    ptr_uint_var = &globalSystemVariable;
  }
  UpdateSystemBuffer(system_local_buffer_88,ptr_uint_var);
  system_buffer_ptr_c8 = &resourcePoolPointer;
  uintStack_b0 = 0;
  uintStack_c0 = 0;
  uintStack_b8 = 0;
  system_buffer_ptr_1b0 = &resourcePoolPointer;
  uint_result = 0;
  uintStack_198 = 0;
  system_buffer_ptr_1a8 = (uint8_t *)0x0;
  uintStack_1a0 = 0;
  uintStack_1f8 = 2;
  uint_result = *(uint *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = (ulonglong)uint_result;
  uint_result = 0;
  if (*(longlong *)(systemConfig + 8) == 0) {
LAB_1800535b0:
    uint_result = uint_result;
    if (uint_result != 0) {
                    // WARNING: Subroutine does not return
      memcpy(node_previous,*(uint64_t *)(systemConfig + 8),uint_result);
    }
  }
  else if (uint_result != 0) {
    int_result = uint_result + 1;
    if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
      int_result = SYSTEM_DATA_COMPARE_SIZE;
    }
    node_previous = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)int_result,0x13);
    *node_previous = 0;
    system_buffer_ptr_1a8 = node_previous;
    uint_result = ValidateResourceAllocation(node_previous);
    uintStack_198 = CONCAT44(uintStack_198._4_4_,uint_result);
    goto LAB_1800535b0;
  }
  if (node_previous != (uint8_t *)0x0) {
    node_previous[uint_result] = 0;
  }
  uintStack_1f4 = *(uint32_t *)(systemConfig + 0x1c);
  uintStack_198 = CONCAT44(uintStack_1f4,(uint32_t)uintStack_198);
  uintStack_1a0 = uint_result;
  if (uint_result != 0xfffffffa) {
    uint_result = uint_result + 7;
    if (node_previous == (uint8_t *)0x0) {
      if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
        uint_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      node_previous = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
      *node_previous = 0;
    }
    else {
      if (uint_result <= uint_result) goto LAB_18005364c;
      uintStack_208 = 0x13;
      node_previous = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,node_previous,uint_result,SYSTEM_DATA_COMPARE_SIZE);
    }
    system_buffer_ptr_1a8 = node_previous;
    uint_result = ValidateResourceAllocation(node_previous);
    uintStack_198 = CONCAT44(uintStack_198._4_4_,uint_result);
  }
LAB_18005364c:
                    // WARNING: Subroutine does not return
  memcpy(node_previous + uint_result,long_result,7);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t
InitializeEventSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  char is_initialized;
  char char_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  char *ptr_char_var;
  uint uint_result;
  int *ptr_int_var;
  ulonglong uint_result;
  uint64_t uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  void *system_buffer_ptr_70;
  uint8_t *system_buffer_ptr_68;
  uint uintStack_60;
  uint64_t uintStack_58;
  uint64_t *system_buffer_ptr_50;
  uint64_t *system_buffer_ptr_48;
  uint64_t uintStack_40;
  uint32_t uintStack_38;
  ulonglong uint_result;

  system_buffer_ptr_50 = (uint64_t *)0x0;
  system_buffer_ptr_48 = (uint64_t *)0x0;
  uint_result = 0;
  uintStack_40 = 0;
  uintStack_38 = 3;
  InitializeSystemComponents(g_system_base_1,&bufferPtr_50system_buffer_ptr_50,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  ptr_uint_var = bufferPtr_48;
  ptr_uint_var = bufferPtr_50;
  uint_result = (longlong)system_buffer_ptr_48 - (longlong)system_buffer_ptr_50 >> 5;
  ptr_uint_var = ptr_uint_var;
  if (uint_result == 0) {
LAB_180054302:
    uint_result = 0;
joined_r0x00018005430b:
    for (; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    }
    if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    return uint_result;
  }
  ptr_int_var = (int *)(system_buffer_ptr_50 + 2);
  uint_result = uint_result;
LAB_18005419d:
  system_buffer_ptr_70 = &resourcePoolPointer;
  uintStack_58 = 0;
  system_buffer_ptr_68 = (uint8_t *)0x0;
  uintStack_60 = 0;
  ConfigureSystemParameters(&bufferPtr_70system_buffer_ptr_70,*ptr_int_var);
  if (*ptr_int_var != 0) {
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_68,*(uint64_t *)(ptr_int_var + -2),*ptr_int_var + 1);
  }
  if (*(longlong *)(ptr_int_var + -2) != 0) {
    uintStack_60 = 0;
    if (system_buffer_ptr_68 != (uint8_t *)0x0) {
      *system_buffer_ptr_68 = 0;
    }
    uintStack_58 = uintStack_58 & 0xffffffff;
  }
  uint_result = uint_result;
  uint_result = uint_result;
  if (uintStack_60 != 0) {
    do {
      if ((byte)(system_buffer_ptr_68[uint_result] + 0xbf) < 0x1a) {
        bufferPtr_68[uint_result] = bufferPtr_68[uint_result] + ' ';
      }
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      uint_result = uint_result + 1;
    } while (uint_result < uintStack_60);
  }
  long_result = InitializeSystemBuffer(&bufferPtr_70system_buffer_ptr_70);
  ptr_uint_var = (uint64_t *)&globalSystemVariable;
  do {
    ptr_char_var = (char *)*ptr_uint_var;
    long_result = long_result - (longlong)ptr_char_var;
    do {
      is_initialized = *ptr_char_var;
      char_var = ptr_char_var[long_result];
      if (is_initialized != char_var) break;
      ptr_char_var = ptr_char_var + 1;
    } while (char_var != '\0');
    if (is_initialized == char_var) break;
    ptr_uint_var = ptr_uint_var + 1;
    if (0x1809fde87 < (longlong)ptr_uint_var) {
      system_buffer_ptr_70 = &resourcePoolPointer;
      if (system_buffer_ptr_68 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      system_buffer_ptr_68 = (uint8_t *)0x0;
      uintStack_58 = (ulonglong)uintStack_58._4_4_ << SYSTEM_NODE_HEADER_SIZE;
      system_buffer_ptr_70 = &globalSystemPointerData;
      uint_result = 1;
      goto joined_r0x00018005430b;
    }
  } while( true );
  system_buffer_ptr_70 = &resourcePoolPointer;
  if (system_buffer_ptr_68 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_68 = (uint8_t *)0x0;
  uintStack_58 = (ulonglong)uintStack_58._4_4_ << SYSTEM_NODE_HEADER_SIZE;
  system_buffer_ptr_70 = &globalSystemPointerData;
  uint_result = (int)uint_result + 1;
  uint_result = (ulonglong)uint_result;
  ptr_int_var = ptr_int_var + 8;
  if (uint_result <= (ulonglong)(longlong)(int)uint_result) goto LAB_180054302;
  goto LAB_18005419d;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAuthenticationSystem(longlong *handleIdentifier,longlong resourceIdentifier)
void InitializeAuthenticationSystem(longlong *handleIdentifier,longlong resourceIdentifier)

{
  uint uint_result;
  int int_result;
  uint64_t uint_result;
  longlong *ptr_data;
  void *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  uint8_t localBuffer_238 [32];
  uint32_t uintStack_218;
  void *system_buffer_ptr_208;
  longlong longStack_200;
  uint uintStack_1f8;
  uint64_t uintStack_1f0;
  uint32_t uintStack_1e8;
  void *system_buffer_ptr_1e0;
  longlong longStack_1d8;
  uint uintStack_1d0;
  uint64_t uintStack_1c8;
  void *system_buffer_ptr_1c0;
  longlong longStack_1b8;
  uint32_t uintStack_1b0;
  ulonglong uintStack_1a8;
  uint32_t uintStack_1a0;
  uint uintStack_19c;
  uint8_t uintStack_198;
  uint32_t uintStack_194;
  void *system_buffer_ptr_190;
  longlong longStack_188;
  int intStack_180;
  uint32_t uintStack_178;
  void **pbufferPtr_170;
  void *system_buffer_ptr_168;
  longlong longStack_160;
  uint32_t uintStack_150;
  uint32_t uintStack_148;
  uint32_t uintStack_144;
  uint32_t uintStack_140;
  uint32_t uintStack_13c;
  uint32_t uintStack_138;
  uint32_t uintStack_134;
  uint32_t uintStack_130;
  uint32_t uintStack_12c;
  uint32_t uintStack_128;
  uint32_t uintStack_124;
  uint32_t uintStack_120;
  uint32_t uintStack_11c;
  uint32_t uintStack_118;
  uint32_t uintStack_114;
  uint32_t uintStack_110;
  uint32_t uintStack_10c;
  uint8_t uintStack_108;
  uint32_t uintStack_107;
  uint32_t uintStack_103;
  uint64_t uintStack_f8;
  void **pbufferPtr_f0;
  void *system_buffer_ptr_e8;
  uint8_t *system_buffer_ptr_e0;
  uint32_t uintStack_d8;
  uint8_t localBuffer_d0 [136];
  ulonglong uintStack_48;

  uintStack_f8 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_238;
  uintStack_1e8 = 0;
  psystem_buffer_ptr_f0 = &bufferPtr_1c0system_buffer_ptr_1c0;
  system_buffer_ptr_1c0 = &resourcePoolPointer;
  uintStack_1a8 = 0;
  longStack_1b8 = 0;
  uintStack_1b0 = 0;
  uintStack_19c = SYSTEM_DATA_COMPARE_SIZE0;
  uintStack_198 = 0;
  uintStack_194 = 0;
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  ConfigureSystemData(&bufferPtr_1c0system_buffer_ptr_1c0,ptr_uint_var);
  uintStack_1a0 = 0;
  uintStack_19c = uintStack_19c & 0xffffff00;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x60d30,SYSTEM_DATA_COMPARE_SIZE,0x1f);
  ptr_data = (longlong *)CreateGraphicsBuffer(uint_result,&bufferPtr_1c0system_buffer_ptr_1c0);
  psystem_buffer_ptr_170 = (void **)ptr_data;
  if (ptr_data != (longlong *)0x0) {
    (**(code **)(*ptr_data + 0x28))(ptr_data);
  }
  uintStack_148 = 0x3f800000;
  uintStack_144 = 0;
  uintStack_140 = 0;
  uintStack_13c = 0;
  uintStack_138 = 0;
  uintStack_134 = 0x3f800000;
  uintStack_130 = 0;
  uintStack_12c = 0;
  uintStack_128 = 0;
  uintStack_124 = 0;
  uintStack_120 = 0x3f800000;
  uintStack_11c = 0;
  uintStack_118 = 0;
  uintStack_114 = 0;
  uintStack_110 = 0;
  uintStack_10c = 0x3f800000;
  uintStack_107 = SYSTEM_DATA_COMPARE_SIZE10101;
  uintStack_103 = 1;
  uintStack_108 = 1;
  system_buffer_ptr_e8 = &g_thread_parameter_ptr;
  system_buffer_ptr_e0 = localBuffer_d0;
  localBuffer_d0[0] = 0;
  uintStack_d8 = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  strcpy_s(localBuffer_d0,0x80,ptr_uint_var);
  SetupBufferLayout(&bufferPtr_190system_buffer_ptr_190,&bufferPtr_e8system_buffer_ptr_e8);
  system_buffer_ptr_e8 = &globalSystemPointerData;
  system_buffer_ptr_1e0 = &resourcePoolPointer;
  uintStack_1c8 = 0;
  longStack_1d8 = 0;
  uintStack_1d0 = 0;
  long_result = *handleIdentifier;
  PrepareSystemBuffer(&bufferPtr_168system_buffer_ptr_168,resourceIdentifier);
  int_result = ValidateBufferHandle(long_result,&bufferPtr_168system_buffer_ptr_168);
  system_buffer_ptr_168 = &resourcePoolPointer;
  if (longStack_160 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_160 = 0;
  uintStack_150 = 0;
  system_buffer_ptr_168 = &globalSystemPointerData;
  if ((int_result < 0) ||
     (long_result = *(longlong *)(*handleIdentifier + 0x888),
     (ulonglong)(*(longlong *)(*handleIdentifier + 0x890) - long_result >> 5) <= (ulonglong)(longlong)int_result)) {
    long_result = GetBufferData();
  }
  else {
    long_result = (longlong)int_result * SYSTEM_NODE_HEADER_SIZE + long_result;
  }
  system_buffer_ptr_208 = &resourcePoolPointer;
  uintStack_1f0 = 0;
  longStack_200 = 0;
  uintStack_1f8 = 0;
  uintStack_1e8 = 1;
  uint_result = *(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = (ulonglong)uint_result;
  if (*(longlong *)(long_result + 8) != 0) {
    ConfigureSystemParameters(&bufferPtr_20system_buffer_ptr_208,uint_result);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memcpy(longStack_200,*(uint64_t *)(long_result + 8),uint_result);
  }
  if (longStack_200 != 0) {
    *(uint8_t *)(uint_result + longStack_200) = 0;
  }
  uintStack_1f0 = CONCAT44(*(uint *)(long_result + 0x1c),(uint32_t)uintStack_1f0);
  if (0 < intStack_180) {
    uintStack_1f8 = uint_result;
    ConfigureSystemParameters(&bufferPtr_20system_buffer_ptr_208,intStack_180);
                    // WARNING: Subroutine does not return
    memcpy((ulonglong)uintStack_1f8 + longStack_200,longStack_188,(longlong)(intStack_180 + 1));
  }
  longStack_1d8 = longStack_200;
  uintStack_1c8._0_4_ = (uint32_t)uintStack_1f0;
  uintStack_1f8 = 0;
  uintStack_1e8 = 0;
  longStack_200 = 0;
  uintStack_1f0 = 0;
  system_buffer_ptr_208 = &globalSystemPointerData;
  uintStack_218 = 0xffffffff;
  uintStack_1d0 = uint_result;
  uintStack_1c8._4_4_ = *(uint *)(long_result + 0x1c);
  ProcessSystemConfiguration(ptr_data,systemConfigurationData,&bufferPtr_1e0system_buffer_ptr_1e0,&uintStack_148);
  UpdateConfiguration(ptr_data);
  (**(code **)(*(longlong *)handleIdentifier[0x56] + 0x138))((longlong *)handleIdentifier[0x56],ptr_data);
  ValidateConfiguration(ptr_data,0x3d072b02,1);
  ApplyConfiguration(ptr_data);
  (**(code **)(*(longlong *)handleIdentifier[0x56] + 0x140))((longlong *)handleIdentifier[0x56],ptr_data);
  Sleep(1000);
  system_buffer_ptr_1e0 = &resourcePoolPointer;
  if (longStack_1d8 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_1d8 = 0;
  uintStack_1c8 = (ulonglong)uintStack_1c8._4_4_ << SYSTEM_NODE_HEADER_SIZE;
  system_buffer_ptr_1e0 = &globalSystemPointerData;
  system_buffer_ptr_190 = &resourcePoolPointer;
  if (longStack_188 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_188 = 0;
  uintStack_178 = 0;
  system_buffer_ptr_190 = &globalSystemPointerData;
  if (ptr_data != (longlong *)0x0) {
    (**(code **)(*ptr_data + 0x38))(ptr_data);
  }
  psystem_buffer_ptr_170 = &bufferPtr_1c0system_buffer_ptr_1c0;
  system_buffer_ptr_1c0 = &resourcePoolPointer;
  if (longStack_1b8 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_1b8 = 0;
  uintStack_1a8 = uintStack_1a8 & 0xffffffff00000000;
  system_buffer_ptr_1c0 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_238);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAuthenticationSystem(void)
void InitializeAuthenticationSystem(void)

{
  uint uint_result;
  longlong *long_ptr;
  uint64_t *ptr_uint_var;
  char char_var;
  uint64_t *ptr_uint_var;
  uint8_t *node_current;
  uint32_t *node_previous;
  int int_result;
  int int_result;
  longlong long_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  int int_result;
  longlong long_result;
  uint *ptr_uint_var;
  void *ptr_uint_var;
  uint32_t uint_result;
  uint8_t localBuffer_178 [32];
  void *system_buffer_ptr_158;
  uint8_t *system_buffer_ptr_150;
  uint uintStack_148;
  uint64_t uintStack_140;
  void *system_buffer_ptr_138;
  uint8_t *system_buffer_ptr_130;
  uint uintStack_128;
  ulonglong uintStack_120;
  void *system_buffer_ptr_118;
  uint8_t *system_buffer_ptr_110;
  uint32_t uintStack_108;
  ulonglong uintStack_100;
  int intStack_f8;
  void *system_buffer_ptr_f0;
  uint8_t *system_buffer_ptr_e8;
  uint32_t uintStack_e0;
  ulonglong uintStack_d8;
  void *system_buffer_ptr_d0;
  longlong longStack_c8;
  int intStack_c0;
  uint32_t uintStack_b8;
  longlong *stack_long_ptr;
  longlong longStack_a0;
  void *system_buffer_ptr_98;
  void *system_buffer_ptr_90;
  uint32_t uintStack_80;
  void *system_buffer_ptr_78;
  longlong longStack_70;
  uint32_t uintStack_60;
  uint64_t *system_buffer_ptr_58;
  uint64_t *system_buffer_ptr_50;
  uint64_t uintStack_48;
  uint32_t uintStack_40;
  uint64_t uintStack_38;
  ulonglong uintStack_30;

  uintStack_38 = INVALID_HANDLE_VALUE;
  uintStack_30 = systemConfigurationData ^ (ulonglong)localBuffer_178;
  stack_long_ptr = g_system_base_1;
  long_result = *(longlong *)(*g_system_base_1 + 0x890) - *(longlong *)(*g_system_base_1 + 0x888) >> 5;
  intStack_f8 = 0;
  longStack_a0 = long_result;
  if (0 < (int)long_result) {
    do {
      int_result = intStack_f8;
      int_result = 0;
      if (intStack_f8 < 0) {
LAB_18005485e:
        long_result = GetBufferData();
      }
      else {
        long_result = *(longlong *)(*g_system_base_1 + 0x888);
        if ((ulonglong)(*(longlong *)(*g_system_base_1 + 0x890) - long_result >> 5) <=
            (ulonglong)(longlong)intStack_f8) goto LAB_18005485e;
        long_result = (longlong)intStack_f8 * SYSTEM_NODE_HEADER_SIZE + long_result;
      }
      system_buffer_ptr_138 = &resourcePoolPointer;
      uintStack_120 = 0;
      system_buffer_ptr_130 = (uint8_t *)0x0;
      uintStack_128 = 0;
      ConfigureSystemParameters(&bufferPtr_138system_buffer_ptr_138,*(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE));
      if (*(int *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0) {
                    // WARNING: Subroutine does not return
        memcpy(system_buffer_ptr_130,*(uint64_t *)(long_result + 8),*(int *)(long_result + SYSTEM_DATA_COMPARE_SIZE) + 1);
      }
      if (*(longlong *)(long_result + 8) != 0) {
        uintStack_128 = 0;
        if (system_buffer_ptr_130 != (uint8_t *)0x0) {
          *system_buffer_ptr_130 = 0;
        }
        uintStack_120 = uintStack_120 & 0xffffffff;
      }
      if (int_result < 0) {
LAB_180054912:
        long_result = GetBufferData();
      }
      else {
        long_result = *(longlong *)(*g_system_base_1 + 0x8a8);
        if ((ulonglong)(*(longlong *)(*g_system_base_1 + 0x8b0) - long_result >> 5) <
            (ulonglong)(longlong)int_result) goto LAB_180054912;
        long_result = (longlong)int_result * SYSTEM_NODE_HEADER_SIZE + long_result;
      }
      system_buffer_ptr_118 = &resourcePoolPointer;
      uintStack_100 = 0;
      system_buffer_ptr_110 = (uint8_t *)0x0;
      uintStack_108 = 0;
      ConfigureSystemParameters(&bufferPtr_118system_buffer_ptr_118,*(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE));
      if (*(int *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0) {
                    // WARNING: Subroutine does not return
        memcpy(system_buffer_ptr_110,*(uint64_t *)(long_result + 8),*(int *)(long_result + SYSTEM_DATA_COMPARE_SIZE) + 1);
      }
      if (*(longlong *)(long_result + 8) != 0) {
        uintStack_108 = 0;
        if (system_buffer_ptr_110 != (uint8_t *)0x0) {
          *system_buffer_ptr_110 = 0;
        }
        uintStack_100 = uintStack_100 & 0xffffffff;
      }
      int_result = uintStack_128 + 8;
      ConfigureSystemParameters(&bufferPtr_138system_buffer_ptr_138,int_result);
      *(uint64_t *)(system_buffer_ptr_130 + uintStack_128) = 0x6a624f656e656353;
      *(uint8_t *)((longlong)(system_buffer_ptr_130 + uintStack_128) + 8) = 0;
      uintStack_128 = int_result;
      char_var = ValidateSystemData(&bufferPtr_138system_buffer_ptr_138);
      if (char_var == '\0') {
        system_buffer_ptr_118 = &resourcePoolPointer;
        if (system_buffer_ptr_110 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        system_buffer_ptr_110 = (uint8_t *)0x0;
        uintStack_100 = uintStack_100 & 0xffffffff00000000;
        system_buffer_ptr_118 = &globalSystemPointerData;
        system_buffer_ptr_138 = &resourcePoolPointer;
        if (system_buffer_ptr_130 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
      }
      else {
        system_buffer_ptr_58 = (uint64_t *)0x0;
        system_buffer_ptr_50 = (uint64_t *)0x0;
        uintStack_48 = 0;
        uintStack_40 = 3;
        ProcessBufferData(&bufferPtr_138system_buffer_ptr_138,&bufferPtr_58system_buffer_ptr_58);
        ptr_uint_var = bufferPtr_50;
        ptr_uint_var = bufferPtr_58;
        long_result = (longlong)system_buffer_ptr_50 - (longlong)bufferPtr_58;
        InitializeSystemProfiler(&bufferPtr_d0system_buffer_ptr_d0);
        node_current = &g_system_data_variable3;
        if (system_buffer_ptr_110 != (uint8_t *)0x0) {
          node_current = bufferPtr_110;
        }
        ConfigureBufferAttributes(&bufferPtr_d0system_buffer_ptr_d0,&g_system_global_variable4,node_current);
        char_var = ValidateSystemData(&bufferPtr_d0system_buffer_ptr_d0);
        if (char_var == '\0') {
          CleanupSystemData(&bufferPtr_d0system_buffer_ptr_d0);
        }
        long_ptr = stack_long_ptr;
        int_result = (int)(long_result >> 5);
        long_result = (longlong)int_result;
        if (0 < int_result) {
          ptr_uint_var = (uint *)(ptr_uint_var + 2);
          do {
            InitializeSystemDataNode32();
            InitializeEventSystem();
            system_buffer_ptr_158 = &resourcePoolPointer;
            uintStack_140._0_4_ = 0;
            uintStack_140._4_4_ = 0;
            system_buffer_ptr_150 = (uint8_t *)0x0;
            uintStack_148 = 0;
            ConfigureSystemParameters(&bufferPtr_158system_buffer_ptr_158,*ptr_uint_var);
            if (*ptr_uint_var != 0) {
                    // WARNING: Subroutine does not return
              memcpy(system_buffer_ptr_150,*(uint64_t *)(ptr_uint_var + -2),*ptr_uint_var + 1);
            }
            if (*(longlong *)(ptr_uint_var + -2) != 0) {
              uintStack_148 = 0;
              if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                *system_buffer_ptr_150 = 0;
              }
              uintStack_140._4_4_ = 0;
            }
            int_result = uintStack_148 + 0xd;
            ConfigureSystemParameters(&bufferPtr_158system_buffer_ptr_158,int_result);
            ptr_uint_var = (uint64_t *)(system_buffer_ptr_150 + uintStack_148);
            *ptr_uint_var = 0x782e656e6563732f;
            *(uint32_t *)(ptr_uint_var + 1) = 0x6e656373;
            *(uint16_t *)((longlong)ptr_uint_var + 0xc) = 0x65;
            node_current = &g_system_data_variable3;
            if (system_buffer_ptr_150 != (uint8_t *)0x0) {
              node_current = bufferPtr_150;
            }
            uintStack_148 = int_result;
            long_result = strstr(node_current,&g_system_global_variable8);
            if (long_result == 0) {
              node_current = &g_system_data_variable3;
              if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                node_current = bufferPtr_150;
              }
              long_result = strstr(node_current,&g_system_global_variable8);
              if (long_result != 0) goto LAB_180054ec9;
              node_current = &g_system_data_variable3;
              if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                node_current = bufferPtr_150;
              }
              long_result = strstr(node_current,&globalSystemVariable);
              if (long_result != 0) goto LAB_180054ec9;
              node_current = &g_system_data_variable3;
              if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                node_current = bufferPtr_150;
              }
              long_result = strstr(node_current,&g_system_global_variable8);
              if (long_result != 0) goto LAB_180054ec9;
              node_current = &g_system_data_variable3;
              if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                node_current = bufferPtr_150;
              }
              long_result = strstr(node_current,&g_system_global_variable8);
              if (long_result != 0) goto LAB_180054ec9;
              char_var = ValidateConfigurationValue(&bufferPtr_158system_buffer_ptr_158);
              if (char_var == '\0') {
                uintStack_148 = 0;
                if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                  *system_buffer_ptr_150 = 0;
                }
                uint_result = *ptr_uint_var;
                uint_result = (ulonglong)uint_result;
                if (*(longlong *)(ptr_uint_var + -2) != 0) {
                  ConfigureSystemParameters(&bufferPtr_158system_buffer_ptr_158,uint_result);
                }
                if (uint_result != 0) {
                    // WARNING: Subroutine does not return
                  memcpy(system_buffer_ptr_150,*(uint64_t *)(ptr_uint_var + -2),uint_result);
                }
                if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                  bufferPtr_150[uint_result] = 0;
                }
                uintStack_140._4_4_ = ptr_uint_var[3];
                uintStack_148 = uint_result;
                ConfigureSystemParameters(&bufferPtr_158system_buffer_ptr_158,0x12);
                node_previous = (uint32_t *)(system_buffer_ptr_150 + uintStack_148);
                *node_previous = 0x6563732f;
                node_previous[1] = 0x782e656e;
                node_previous[2] = 0x2e6f6373;
                node_previous[3] = 0x65637378;
                *(uint16_t *)(node_previous + 4) = 0x656e;
                *(uint8_t *)((longlong)node_previous + 0x12) = 0;
                uintStack_148 = 0x12;
                char_var = ValidateConfigurationValue(&bufferPtr_158system_buffer_ptr_158);
                if (char_var != '\0') goto LAB_180054d28;
                system_buffer_ptr_158 = &resourcePoolPointer;
                if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
                  ProcessSystemOperation();
                }
                uintStack_140 = (ulonglong)uintStack_140._4_4_ << SYSTEM_NODE_HEADER_SIZE;
              }
              else {
LAB_180054d28:
                int_result = *ptr_uint_var - 1;
                if (-1 < int_result) {
                  long_result = (longlong)int_result;
                  do {
                    if (*(char *)(long_result + *(longlong *)(ptr_uint_var + -2)) == '/') goto LAB_180054d57;
                    int_result = int_result + -1;
                    long_result = long_result + -1;
                  } while (-1 < long_result);
                }
                int_result = -1;
LAB_180054d57:
                CompareSystemData(ptr_uint_var + (longlong)int_result * 4,&bufferPtr_98system_buffer_ptr_98,int_result + 1,0xffffffff);
                uint_result = InitializeAuthenticationSystem(long_ptr,&bufferPtr_98system_buffer_ptr_98);
                if (systemStatusData != 0) {
                  InitializeSystemModule41(uint_result,&bufferPtr_78system_buffer_ptr_78);
                  system_buffer_ptr_f0 = &resourcePoolPointer;
                  uintStack_d8 = 0;
                  system_buffer_ptr_e8 = (uint8_t *)0x0;
                  uintStack_e0 = 0;
                  ConfigureSystemParameters(&bufferPtr_f0system_buffer_ptr_f0,intStack_c0);
                  if (intStack_c0 != 0) {
                    // WARNING: Subroutine does not return
                    memcpy(system_buffer_ptr_e8,longStack_c8,intStack_c0 + 1);
                  }
                  if (longStack_c8 != 0) {
                    uintStack_e0 = 0;
                    if (system_buffer_ptr_e8 != (uint8_t *)0x0) {
                      *system_buffer_ptr_e8 = 0;
                    }
                    uintStack_d8 = uintStack_d8 & 0xffffffff;
                  }
                  ptr_uint_var = &g_system_data_variable3;
                  if (system_buffer_ptr_90 != (void *)0x0) {
                    ptr_uint_var = bufferPtr_90;
                  }
                  ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&globalSystemVariable,ptr_uint_var);
                  UpdateBufferData(&bufferPtr_f0system_buffer_ptr_f0,&bufferPtr_78system_buffer_ptr_78);
                  systemStatusData = 0;
                  system_buffer_ptr_f0 = &resourcePoolPointer;
                  if (system_buffer_ptr_e8 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  system_buffer_ptr_e8 = (uint8_t *)0x0;
                  uintStack_d8 = uintStack_d8 & 0xffffffff00000000;
                  system_buffer_ptr_f0 = &globalSystemPointerData;
                  system_buffer_ptr_78 = &resourcePoolPointer;
                  if (longStack_70 != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  longStack_70 = 0;
                  uintStack_60 = 0;
                  system_buffer_ptr_78 = &globalSystemPointerData;
                }
                system_buffer_ptr_98 = &resourcePoolPointer;
                if (system_buffer_ptr_90 != (void *)0x0) {
                    // WARNING: Subroutine does not return
                  ProcessSystemOperation();
                }
                system_buffer_ptr_90 = (void *)0x0;
                uintStack_80 = 0;
                system_buffer_ptr_98 = &globalSystemPointerData;
                system_buffer_ptr_158 = &resourcePoolPointer;
                if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
                  ProcessSystemOperation();
                }
                uintStack_140 = (ulonglong)uintStack_140._4_4_ << SYSTEM_NODE_HEADER_SIZE;
              }
            }
            else {
LAB_180054ec9:
              system_buffer_ptr_158 = &resourcePoolPointer;
              if (system_buffer_ptr_150 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
                ProcessSystemOperation();
              }
              uintStack_140 = (ulonglong)uintStack_140._4_4_ << SYSTEM_NODE_HEADER_SIZE;
            }
            system_buffer_ptr_150 = (uint8_t *)0x0;
            system_buffer_ptr_158 = &globalSystemPointerData;
            int_result = int_result + 1;
            ptr_uint_var = ptr_uint_var + 8;
            long_result = long_result + -1;
            long_result = longStack_a0;
            ptr_uint_var = bufferPtr_50;
            int_result = intStack_f8;
          } while (long_result != 0);
        }
        system_buffer_ptr_d0 = &resourcePoolPointer;
        if (longStack_c8 != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        longStack_c8 = 0;
        uintStack_b8 = 0;
        system_buffer_ptr_d0 = &globalSystemPointerData;
        for (ptr_uint_var = ptr_uint_var; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
          (**(code **)*ptr_uint_var)(ptr_uint_var,0);
        }
        if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(ptr_uint_var);
        }
        system_buffer_ptr_118 = &resourcePoolPointer;
        if (system_buffer_ptr_110 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        system_buffer_ptr_110 = (uint8_t *)0x0;
        uintStack_100 = uintStack_100 & 0xffffffff00000000;
        system_buffer_ptr_118 = &globalSystemPointerData;
        system_buffer_ptr_138 = &resourcePoolPointer;
        if (system_buffer_ptr_130 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
      }
      system_buffer_ptr_110 = (uint8_t *)0x0;
      system_buffer_ptr_118 = &globalSystemPointerData;
      uintStack_120 = uintStack_120 & 0xffffffff00000000;
      system_buffer_ptr_130 = (uint8_t *)0x0;
      system_buffer_ptr_138 = &globalSystemPointerData;
      intStack_f8 = int_result + 1;
    } while (intStack_f8 < (int)long_result);
  }
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_30 ^ (ulonglong)localBuffer_178);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void CreateMonitoringResources(void)
void CreateMonitoringResources(void)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;
  longlong long_result;

  node_root = (uint64_t *)AllocateSystemMemory(systemMemoryPool,NODE_INITIALIZED_OFFSET8,8,3);
  ptr_uint_var = node_root + 4;
  InitializeSystemCore(ptr_uint_var);
  *ptr_uint_var = &globalSystemVariable;
  *(uint16_t *)(node_root + 0x1a) = 1;
  *(uint32_t *)(node_root + 9) = 0;
  *(uint8_t *)((longlong)node_root + 0x54) = 0;
  *ptr_uint_var = &g_system_global_variable8;
  ptr_uint_var = node_root + 0x1b;
  InitializeSystemCore(ptr_uint_var);
  *ptr_uint_var = &globalSystemVariable;
  *(uint16_t *)(node_root + 0x31) = 1;
  *(uint32_t *)(node_root + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint8_t *)((longlong)node_root + SYSTEM_DATA_COMPARE_SIZEc) = 0;
  *ptr_uint_var = &g_system_global_variable8;
  *node_root = 0;
  *(uint8_t *)(node_root + 3) = 0;
  node_root[2] = 0xffffffff00000000;
  *(uint32_t *)(node_root + 1) = 0xe;
  g_system_context_1 = node_root;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x480,8,3);
  systemConfigurationData = InitializeTextureSystem(uint_result);
  uint_result = AllocateSystemMemory(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE420,8,3);
  systemCoreData = InitializeSystemModule58(uint_result);
  systemConfigurationData = AllocateSystemMemory(systemMemoryPool,0x30,8,3);
  *(uint32_t *)(systemConfigurationData + NODE_INITIALIZED_OFFSET) = 0;
  *(uint16_t *)(systemConfigurationData + 0x1d) = 0;
  *(uint8_t *)(systemConfigurationData + 0x1f) = 0;
  *(uint32_t *)(systemConfigurationData + 0x28) = 3;
  *(longlong *)systemConfigurationData = systemConfigurationData;
  *(longlong *)(systemConfigurationData + 8) = systemConfigurationData;
  *(uint64_t *)(systemConfigurationData + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint8_t *)(systemConfigurationData + 0x18) = 0;
  *(uint64_t *)(systemConfigurationData + SYSTEM_NODE_HEADER_SIZE) = 0;
  systemCoreData = AllocateSystemMemory(systemMemoryPool,8,4,3);
  *(uint32_t *)(systemCoreData + 4) = 0;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x80,8,3);
  systemCoreData = GetGraphicsContext(uint_result);
  long_result = AllocateSystemMemory(systemMemoryPool,0xe8,8,3);
  _Mtx_init_in_situ(long_result,2);
  _Mtx_init_in_situ(long_result + 0x50,2);
  *(uint64_t *)(long_result + 0xa0) = 0;
  *(uint64_t *)(long_result + 0xa8) = 0;
  *(uint64_t *)(long_result + 0xb0) = 0;
  *(uint32_t *)(long_result + 0xb8) = 3;
  *(uint64_t *)(long_result + 0xc0) = 0;
  *(uint64_t *)(long_result + 200) = 0;
  *(uint64_t *)(long_result + 0xd0) = 0;
  *(uint32_t *)(long_result + 0xd8) = SYSTEM_NODE_HEADER_SIZE;
  *(uint32_t *)(long_result + 0xe0) = 0;
  systemConfigurationData = long_result;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3);
                    // WARNING: Subroutine does not return
  memset(uint_result,0,0x70);
}
// void InitializeNetworkSystem(longlong *handleIdentifier)

void InitializeNetworkSystem(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x48) {
    InitializeSystemModule42(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemDataNode29(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode29(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule58(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeMemoryManagerSystem(longlong handleIdentifier)

void InitializeMemoryManagerSystem(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
        if (*(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) != (longlong *)0x0) {
          (**(code **)(**(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) + 0x38))();
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (*(longlong *)(handleIdentifier + 8) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}

longlong InitializeInputMutex(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + 8) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + 0x18) = 0;
  *(uint64_t *)(handleIdentifier + 8) = &resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + 0x18) = 0;
  return handleIdentifier;
}
// void InitializeSystemModule23(longlong handleIdentifier)

void InitializeSystemModule23(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + 8) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + 8) = &globalSystemPointerData;
  return;
}
// void InitializeAuthenticationSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeAuthenticationSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule58(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void ValidateLoggingState(longlong handleIdentifier)

void ValidateLoggingState(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
        if (*(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) != (longlong *)0x0) {
          (**(code **)(**(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) + 0x38))();
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (*(longlong *)(handleIdentifier + 8) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemResources(uint64_t handleIdentifier,uint32_t resourceIdentifier)
void InitializeSystemResources(uint64_t handleIdentifier,uint32_t resourceIdentifier)

{
  code *pis_initialized;

  if (systemConfigurationData != 0) {
    InitializeSystemConfig(systemConfigurationData + 8);
  }
  Sleep(2000);
  _Exit(resourceIdentifier);
  pis_initialized = (code *)swi(3);
  (*pis_initialized)();
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_16_0(void)
void SystemFunction_16_0(void)

{
  uint64_t *ptr_uint_var;
  uint64_t uint_result;
  char *ptr_char_var;
  int int_result;
  char *ptr_char_var;
  uint64_t systemParam_;
  uint64_t uint_result;

  ptr_char_var = systemConfigurationData;
  uint_result = INVALID_HANDLE_VALUE;
  if (*systemConfigurationData != '\0') {
    ptr_uint_var = (uint64_t *)*systemCoreData;
    int_result = _Mtx_lock(0x180c91970);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
    uint_result = systemCoreData;
    systemCoreData = *ptr_uint_var;
    InitializeGraphicsContext(&globalSystemVariable,0,0,systemParam_,uint_result);
    SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + 4));
    SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + 8));
    SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + 0xc));
    SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + SYSTEM_DATA_COMPARE_SIZE));
    SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + 0x14));
    SetGraphicsContext(&g_system_global_variable8,*(uint32_t *)(ptr_char_var + 0x18));
    for (ptr_char_var = *(char **)(ptr_char_var + 0x28); ptr_char_var != ptr_char_var + SYSTEM_NODE_HEADER_SIZE;
        ptr_char_var = (char *)DestroySystemHandle(ptr_char_var)) {
      SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + SYSTEM_NODE_HEADER_SIZE),*(uint32_t *)(ptr_char_var + 0x24));
    }
    for (ptr_char_var = *(char **)(ptr_char_var + 0x58); ptr_char_var != ptr_char_var + 0x50;
        ptr_char_var = (char *)DestroySystemHandle(ptr_char_var)) {
      SetGraphicsContext(&g_system_global_variable8,*(uint32_t *)(ptr_char_var + SYSTEM_NODE_HEADER_SIZE),*(uint32_t *)(ptr_char_var + 0x24));
    }
    SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + 0x80));
    SetGraphicsContext(&g_system_global_variable8,*(uint32_t *)(ptr_char_var + 0x84));
    SetGraphicsContext(&globalSystemVariable,*(uint32_t *)(ptr_char_var + 0x88));
    FinalizeGraphicsContext();
    systemCoreData = uint_result;
    int_result = _Mtx_unlock(0x180c91970);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
  }
  return;
}
// void InitializeTestingSystem(longlong handleIdentifier)

void InitializeTestingSystem(longlong handleIdentifier)

{
  char is_initialized;
  char char_var;
  int compare_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  int int_result;
  char *ptr_char_var;
  longlong *long_ptr;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  int int_result;
  longlong long_result;
  int int_result;
  longlong long_result;
  int int_result;
  ulonglong uint_result;
  int int_result;
  bool module_initialization_flag;

  uint_result = 0;
  long_result = *(longlong *)(handleIdentifier + 0x50);
  long_result = *(longlong *)(handleIdentifier + 0x48);
  if (long_result - long_result >> 3 != 0) {
    int_result = 1;
    long_result = 8;
    uint_result = uint_result;
    do {
      int_result = (int)uint_result;
      int_result = -1;
      if ((ulonglong)(longlong)int_result < (ulonglong)(long_result - long_result >> 3)) {
        long_result = *(longlong *)(handleIdentifier + 0x50);
        long_result = long_result;
        int_result = int_result;
        int_result = -1;
        do {
          int_result = *(int *)(*(longlong *)(long_result + long_result) + SYSTEM_DATA_COMPARE_SIZE);
          compare_result = *(int *)(*(longlong *)(uint_result + long_result) + SYSTEM_DATA_COMPARE_SIZE);
          if (int_result == compare_result) {
            if (int_result == 0) {
LAB_180056220:
              if (compare_result != 0) goto LAB_180056228;
              module_initialization_flag = true;
            }
            else {
              ptr_char_var = *(char **)(*(longlong *)(long_result + long_result) + 8);
              long_result = *(longlong *)(*(longlong *)(uint_result + long_result) + 8) - (longlong)ptr_char_var;
              do {
                is_initialized = *ptr_char_var;
                char_var = ptr_char_var[long_result];
                if (is_initialized != char_var) break;
                ptr_char_var = ptr_char_var + 1;
              } while (char_var != '\0');
              module_initialization_flag = is_initialized == char_var;
            }
          }
          else {
            if (int_result == 0) goto LAB_180056220;
LAB_180056228:
            module_initialization_flag = false;
          }
          int_result = int_result;
          if (!module_initialization_flag) {
            int_result = int_result;
          }
          int_result = int_result + 1;
          long_result = long_result + 8;
          int_result = int_result;
        } while ((ulonglong)(longlong)int_result < (ulonglong)(long_result - long_result >> 3));
      }
      if (int_result != -1) {
        long_result = (longlong)int_result;
        long_result = *(longlong *)(long_result + long_result * 8);
        *(double *)(*(longlong *)(uint_result + long_result) + 0x40) =
             *(double *)(long_result + 0x40) + *(double *)(*(longlong *)(uint_result + long_result) + 0x40);
        long_ptr = *(longlong **)(long_result + 0x48);
        if (long_ptr != *(longlong **)(long_result + 0x50)) {
          long_result = *(longlong *)(handleIdentifier + 0x48);
          do {
            *(uint64_t *)(*long_ptr + 0x68) = *(uint64_t *)(uint_result + long_result);
            long_ptr = long_ptr + 1;
            long_result = *(longlong *)(handleIdentifier + 0x48);
          } while (long_ptr != *(longlong **)(*(longlong *)(long_result + long_result * 8) + 0x50));
        }
        long_result = *(longlong *)(long_result + long_result * 8);
        InitializeSystemModule59(*(longlong *)(uint_result + long_result) + 0x48,
                      *(uint64_t *)(*(longlong *)(uint_result + long_result) + 0x50),
                      *(uint64_t *)(long_result + 0x48),*(uint64_t *)(long_result + 0x50));
        long_result = *(longlong *)(*(longlong *)(handleIdentifier + 0x48) + long_result * 8);
        *(uint64_t *)(long_result + 0x50) = *(uint64_t *)(long_result + 0x48);
        InitializeTestingSystem(*(uint64_t *)(uint_result + *(longlong *)(handleIdentifier + 0x48)));
        InitializeSystemModule6(*(uint64_t *)(*(longlong *)(handleIdentifier + 0x48) + long_result * 8));
        ptr_uint_var = *(uint64_t **)(*(longlong *)(handleIdentifier + 0x48) + long_result * 8);
        if (ptr_uint_var != (uint64_t *)0x0) {
          if (ptr_uint_var[9] != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          ptr_uint_var[4] = &resourcePoolPointer;
          if (ptr_uint_var[5] == 0) {
            ptr_uint_var[5] = 0;
            *(uint32_t *)(ptr_uint_var + 7) = 0;
            ptr_uint_var[4] = &globalSystemPointerData;
            *ptr_uint_var = &resourcePoolPointer;
            if (ptr_uint_var[1] == 0) {
              ptr_uint_var[1] = 0;
              *(uint32_t *)(ptr_uint_var + 3) = 0;
              *ptr_uint_var = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
              ProcessSystemOperation(ptr_uint_var);
            }
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(uint64_t *)(*(longlong *)(handleIdentifier + 0x48) + long_result * 8) = 0;
        long_result = *(longlong *)(handleIdentifier + 0x48) + long_result * 8;
        uint_result = long_result + 8;
        uint_result = *(ulonglong *)(handleIdentifier + 0x50);
        if (uint_result < uint_result) {
                    // WARNING: Subroutine does not return
          memmove(long_result,uint_result,uint_result - uint_result);
        }
        long_result = uint_result - 8;
        *(longlong *)(handleIdentifier + 0x50) = long_result;
        int_result = int_result + -1;
        int_result = int_result + -1;
        uint_result = uint_result - 8;
        long_result = long_result + -8;
      }
      uint_result = (ulonglong)(int_result + 1U);
      int_result = int_result + 1;
      uint_result = uint_result + 8;
      long_result = long_result + 8;
      long_result = *(longlong *)(handleIdentifier + 0x48);
    } while ((ulonglong)(longlong)(int)(int_result + 1U) < (ulonglong)(long_result - long_result >> 3));
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule6(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemModule6(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ulonglong *ptr_uint_var;
  uint64_t *node_root;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;
  uint uint_result;
  ulonglong uint_result;
  longlong long_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  uint_result = 0;
  ptr_uint_var = (ulonglong *)(handleIdentifier + 0x48);
  uint_result = *ptr_uint_var;
  uint_result = uint_result;
  uint_result = uint_result;
  if ((longlong)(*(longlong *)(handleIdentifier + 0x50) - uint_result) >> 3 != 0) {
    do {
      InitializeSystemModule6(*(uint64_t *)(uint_result + uint_result));
      node_root = *(uint64_t **)(*ptr_uint_var + uint_result);
      if (node_root != (uint64_t *)0x0) {
        if (node_root[9] != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        node_root[4] = &resourcePoolPointer;
        if (node_root[5] == 0) {
          node_root[5] = 0;
          *(uint32_t *)(node_root + 7) = 0;
          node_root[4] = &globalSystemPointerData;
          *node_root = &resourcePoolPointer;
          if (node_root[1] == 0) {
            node_root[1] = 0;
            *(uint32_t *)(node_root + 3) = 0;
            *node_root = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
            ProcessSystemOperation(node_root);
          }
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(uint64_t *)(*ptr_uint_var + uint_result) = 0;
      uint_result = (int)uint_result + 1;
      uint_result = *ptr_uint_var;
      uint_result = uint_result + 8;
      uint_result = (ulonglong)uint_result;
    } while ((ulonglong)(longlong)(int)uint_result <
             (ulonglong)((longlong)(*(longlong *)(handleIdentifier + 0x50) - uint_result) >> 3));
  }
  InitializeSystemModule39(ptr_uint_var,0);
  uint_result = *(ulonglong *)(handleIdentifier + 0x50);
  uint_result = *ptr_uint_var;
  uint_result = *(uint *)(handleIdentifier + 0x60);
  long_result = uint_result - uint_result;
  long_result = long_result >> 3;
  if (long_result != 0) {
    uint_result = AllocateSystemResource(systemMemoryPool,long_result * 8,uint_result & 0xff,systemFlags,uint_result,0,0,0,uint_result);
  }
  long_result = uint_result + long_result * 8;
  if (uint_result == uint_result) {
    uint_result = *ptr_uint_var;
    *ptr_uint_var = uint_result;
    *(longlong *)(handleIdentifier + 0x50) = long_result;
    *(longlong *)(handleIdentifier + 0x58) = long_result;
    *(uint *)(handleIdentifier + 0x60) = uint_result;
    if (uint_result == 0) {
      return;
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
                    // WARNING: Subroutine does not return
  memmove(uint_result,uint_result,long_result,systemFlags,uint_result,uint_result,long_result,long_result);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSecuritySystem(longlong *handleIdentifier)
void InitializeSecuritySystem(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong long_result;
  longlong *ptr_data;
  uint8_t localBuffer_98 [32];
  longlong longStack_78;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  uint64_t uintStack_58;
  void *system_buffer_ptr_50;
  uint8_t *system_buffer_ptr_48;
  uint32_t uintStack_40;
  uint8_t localBuffer_38 [16];
  ulonglong uintStack_28;

  uintStack_58 = INVALID_HANDLE_VALUE;
  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_98;
  ptr_data = (longlong *)AllocateSystemMemory(systemMemoryPool,0xd0,8,3);
  pstack_long_ptr = (longlong **)ptr_data;
  ConfigureSystemHandles(ptr_data);
  *ptr_data = (longlong)&g_system_global_variable8;
  ptr_data[0x18] = 0;
  *(uint32_t *)(ptr_data + NODE_INITIALIZED_OFFSET) = 0;
  stack_long_ptr = ptr_data;
  (**(code **)(*ptr_data + 0x28))(ptr_data);
  stack_long_ptr = (longlong *)*handleIdentifier;
  *handleIdentifier = (longlong)ptr_data;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x38))();
  }
  long_result = systemConfigurationData;
  system_buffer_ptr_50 = &g_system_data_nodeconfig;
  system_buffer_ptr_48 = localBuffer_38;
  localBuffer_38[0] = 0;
  uintStack_40 = 0xc;
  strcpy_s(localBuffer_38,SYSTEM_DATA_COMPARE_SIZE,&globalSystemVariable);
  ptr_data = (longlong *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
  longStack_78 = long_result + 0x70;
  pstack_long_ptr = (longlong **)ptr_data;
  InitializeGraphicsSystem(ptr_data,&bufferPtr_50system_buffer_ptr_50,3,long_result + 0x2e0);
  *ptr_data = (longlong)&globalSystemVariable;
  stack_long_ptr = ptr_data;
  ConfigureGraphicsDevice(ptr_data);
  InitializeSystemModule44(long_result + 0x48,&stack_long_ptr);
  handleIdentifier[1] = (longlong)ptr_data;
  system_buffer_ptr_50 = &globalSystemPointerData;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)*handleIdentifier;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_28 ^ (ulonglong)localBuffer_98);
}

uint64_t InitializeAudioMutex(uint64_t handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeInputManagerSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xd0,systemConfig,systemFlags,uint_result);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule14(longlong handleIdentifier)
void InitializeSystemModule14(longlong handleIdentifier)

{
  uint uint_result;
  double double_var;
  uint uint_result;
  longlong long_result;
  uint32_t *ptr_uint_var;
  uint64_t *node_current;
  int int_result;
  longlong long_result;
  void *ptr_uint_var;
  uint8_t localBuffer_c8 [32];
  uint8_t uintStack_a8;
  uint8_t uintStack_a0;
  void *system_buffer_ptr_98;
  void *system_buffer_ptr_90;
  uint uintStack_88;
  ulonglong uintStack_80;
  longlong longStack_78;
  longlong alongStack_70 [2];
  char acStack_60 [16];
  ulonglong uintStack_50;

  alongStack_70[1] = INVALID_HANDLE_VALUE;
  uintStack_50 = systemConfigurationData ^ (ulonglong)localBuffer_c8;
  long_result = systemConfigurationData;
  if (systemConfigurationData == 0) {
    QueryPerformanceCounter(&longStack_78);
    long_result = longStack_78;
  }
  *(double *)(handleIdentifier + 0xc0) = (double)(long_result - systemConfigurationData) * systemCoreData;
  LOCK();
  *(uint32_t *)(handleIdentifier + 200) = 0;
  UNLOCK();
  LOCK();
  *(uint32_t *)(handleIdentifier + 0xcc) = 1;
  UNLOCK();
  while( true ) {
    do {
      if (*(int *)(handleIdentifier + 0xcc) == 0) {
                    // WARNING: Subroutine does not return
        InitializeSystemStack(uintStack_50 ^ (ulonglong)localBuffer_c8);
      }
      Sleep(10);
      long_result = systemConfigurationData;
      if (systemConfigurationData == 0) {
        QueryPerformanceCounter(alongStack_70);
        long_result = alongStack_70[0];
      }
      double_var = (double)(long_result - systemConfigurationData) * systemCoreData;
    } while ((g_system_data_variable3 == '\0') || (double_var - *(double *)(handleIdentifier + 0xc0) <= 900.0));
    LOCK();
    *(uint32_t *)(handleIdentifier + 200) = 1;
    UNLOCK();
    system_buffer_ptr_98 = &resourcePoolPointer;
    uintStack_80 = 0;
    system_buffer_ptr_90 = (void *)0x0;
    uintStack_88 = 0;
    ConfigureSystemParameters(&bufferPtr_98system_buffer_ptr_98,0x1c);
    ptr_uint_var = (uint32_t *)(system_buffer_ptr_90 + uintStack_88);
    *ptr_uint_var = 0x73736f50;
    ptr_uint_var[1] = 0x656c6269;
    ptr_uint_var[2] = 0x61656420;
    ptr_uint_var[3] = 0x636f6c64;
    *(uint64_t *)(ptr_uint_var + 4) = 0x746365746564206b;
    ptr_uint_var[6] = SYSTEM_NODE_HEADER_SIZE2c6465;
    *(uint8_t *)(ptr_uint_var + 7) = 0;
    uintStack_88 = 0x1c;
    ConfigureSystemParameters(&bufferPtr_98system_buffer_ptr_98,0x3e);
    ptr_uint_var = (uint32_t *)(system_buffer_ptr_90 + uintStack_88);
    *ptr_uint_var = 0x69676e65;
    ptr_uint_var[1] = 0x6420656e;
    ptr_uint_var[2] = 0x6e206469;
    ptr_uint_var[3] = 0x7220746f;
    ptr_uint_var[4] = 0x65646e65;
    ptr_uint_var[5] = SYSTEM_NODE_HEADER_SIZE612072;
    ptr_uint_var[6] = 0x6d617266;
    ptr_uint_var[7] = 0x6f662065;
    *(uint16_t *)(ptr_uint_var + 8) = SYSTEM_NODE_HEADER_SIZE72;
    *(uint8_t *)((longlong)ptr_uint_var + 0x22) = 0;
    uintStack_88 = 0x3e;
    SystemFunction_88_0(acStack_60,&globalSystemVariable,900);
    uint_result = uintStack_88;
    long_result = -1;
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (acStack_60[long_result + 1] != '\0');
    int_result = (int)(long_result + 1);
    if (0 < int_result) break;
    uint_result = uintStack_88 + 10;
    ConfigureSystemParameters(&bufferPtr_98system_buffer_ptr_98,uint_result);
    node_current = (uint64_t *)(system_buffer_ptr_90 + uintStack_88);
    *node_current = 0x73646e6f63657320;
    *(uint16_t *)(node_current + 1) = SYSTEM_NODE_HEADER_SIZE21;
    *(uint8_t *)((longlong)node_current + 10) = 0;
    uintStack_88 = uint_result;
    ConfigureSystemParameters(&bufferPtr_98system_buffer_ptr_98,uint_result + 0x2b);
    ptr_uint_var = (uint32_t *)(system_buffer_ptr_90 + uintStack_88);
    *ptr_uint_var = 0x65766544;
    ptr_uint_var[1] = 0x65706f6c;
    ptr_uint_var[2] = 0x6e692072;
    ptr_uint_var[3] = 0x76726574;
    ptr_uint_var[4] = 0x69746e65;
    ptr_uint_var[5] = 0x73206e6f;
    ptr_uint_var[6] = 0x65676775;
    ptr_uint_var[7] = 0x64657473;
    *(uint16_t *)(ptr_uint_var + 8) = 0x2e;
    ptr_uint_var = &g_system_data_variable3;
    if (system_buffer_ptr_90 != (void *)0x0) {
      ptr_uint_var = bufferPtr_90;
    }
    uintStack_a0 = 0;
    uintStack_a8 = 0;
    uintStack_88 = uint_result + 0x2b;
    (**(code **)(*(longlong *)*systemConfigurationData + SYSTEM_NODE_HEADER_SIZE))
              ((longlong *)*systemConfigurationData,&globalSystemVariable,0x175c,ptr_uint_var);
    *(double *)(handleIdentifier + 0xc0) = double_var;
    system_buffer_ptr_98 = &resourcePoolPointer;
    if (system_buffer_ptr_90 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_90 = (void *)0x0;
    uintStack_80 = uintStack_80 & 0xffffffff00000000;
    system_buffer_ptr_98 = &globalSystemPointerData;
  }
  ConfigureSystemParameters(&bufferPtr_98system_buffer_ptr_98,uintStack_88 + int_result);
                    // WARNING: Subroutine does not return
  memcpy(system_buffer_ptr_90 + uintStack_88,acStack_60,(longlong)((int)long_result + 2));
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SetupGraphicsDevice(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void SetupGraphicsDevice(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  char char_var;
  uint8_t localBuffer_30 [16];
  void *system_buffer_ptr_20;
  void *system_buffer_ptr_18;

  InitializeSystemModule25(handleIdentifier,1,1,systemFlags,INVALID_HANDLE_VALUE);
  if (systemConfigurationData != (longlong *)0x0) {
    char_var = (**(code **)(*systemConfigurationData + 0x48))();
    if ((char_var != '\0') && (systemConfigurationData[2] != 0)) {
      (*(code *)systemConfigurationData[0x11])(0);
    }
  }
  system_buffer_ptr_20 = &g_system_func_6;
  system_buffer_ptr_18 = &g_system_func_5;
  InitializeFontSystem(localBuffer_30);
  *(uint8_t *)(systemCoreData + 0x3a0) = 1;
  InitializeFilesystemSystem(systemConfigurationData);
  InitializeFilesystemSystem(systemConfigurationData);
  if (g_system_handle_1 != 0) {
    ConfigureGraphicsShader();
  }
  InitializeFilesystemSystem(systemConfigurationData);
  InitializeFilesystemSystem(systemConfigurationData);
  InitializeFilesystemSystem(systemConfigurationData);
  if (g_system_handle_1 != 0) {
    ConfigureGraphicsShader();
  }
  InitializeFilesystemSystem(systemConfigurationData);
  InitializeSystemModule25();
  long_result = systemCoreData;
  *(uint8_t *)(systemCoreData + 0x1504) = 0;
  *(uint8_t *)(long_result + 0x1506) = 0;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SetupDebuggingPipeline(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint32_t systemConfig)
void SetupDebuggingPipeline(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint32_t systemConfig)

{
  uint64_t uint_result;
  void **pnode_root;
  uint8_t localBuffer_158 [32];
  void **pbufferPtr_138;
  void ***ppbufferPtr_130;
  uint64_t uintStack_128;
  uint64_t *system_buffer_ptr_120;
  void **pbufferPtr_118;
  void *system_buffer_ptr_108;
  uint8_t *system_buffer_ptr_100;
  uint32_t uintStack_f8;
  uint8_t localBuffer_f0 [128];
  uint32_t uintStack_70;
  uint64_t uintStack_58;
  uint32_t uintStack_50;
  ulonglong uintStack_28;

  uintStack_128 = INVALID_HANDLE_VALUE;
  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_158;
  psystem_buffer_ptr_138 = &bufferPtr_108system_buffer_ptr_108;
  system_buffer_ptr_108 = &g_thread_parameter_ptr;
  system_buffer_ptr_100 = localBuffer_f0;
  uintStack_f8 = 0;
  localBuffer_f0[0] = 0;
  uintStack_70 = 0x17;
  system_buffer_ptr_120 = resourceIdentifier;
  uint_result = AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE,8,3);
  uintStack_58 = ProcessResourceData(uint_result,resourceIdentifier);
  uintStack_50 = systemConfig;
  uint_result = AllocateSystemMemory(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE0,8,3);
  pnode_root = (void **)InitializeSystemDataNode18(uint_result,&bufferPtr_108system_buffer_ptr_108);
  psystem_buffer_ptr_118 = pnode_root;
  if (pnode_root != (void **)0x0) {
    (**(code **)(*pnode_root + 0x28))(pnode_root);
  }
  uint_result = systemConfigurationData;
  ppsystem_buffer_ptr_130 = &pbufferPtr_138;
  psystem_buffer_ptr_138 = pnode_root;
  if (pnode_root != (void **)0x0) {
    (**(code **)(*pnode_root + 0x28))(pnode_root);
  }
  InitializeConfigSystem(uint_result,&psystem_buffer_ptr_138);
  if (pnode_root != (void **)0x0) {
    (**(code **)(*pnode_root + 0x38))(pnode_root);
  }
  ppsystem_buffer_ptr_130 = (void ***)&bufferPtr_108system_buffer_ptr_108;
  system_buffer_ptr_108 = &globalSystemPointerData;
  *resourceIdentifier = &resourcePoolPointer;
  if (resourceIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[1] = 0;
  *(uint32_t *)(resourceIdentifier + 3) = 0;
  *resourceIdentifier = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_28 ^ (ulonglong)localBuffer_158);
}

uint64_t * InitializeSystemModule35(uint64_t *handleIdentifier)

{
  *handleIdentifier = 0;
  handleIdentifier[1] = 0;
  handleIdentifier[2] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 3;
  return handleIdentifier;
}

uint64_t * InitializeSystemModule19(uint64_t *handleIdentifier)

{
  *handleIdentifier = 0;
  handleIdentifier[1] = 0;
  handleIdentifier[2] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 3;
  return handleIdentifier;
}
// void InitializeConfigSystem(void)

void InitializeConfigSystem(void)

{
  SystemFunction_36_8();
  return;
}

uint64_t * InitializeNetworkMutex(uint64_t *handleIdentifier)

{
  *handleIdentifier = 0;
  handleIdentifier[1] = 0;
  handleIdentifier[2] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 10;
  return handleIdentifier;
}

uint64_t * InitializeSystemModule36(uint64_t *handleIdentifier)

{
  uint64_t *ptr_uint_var;

  *handleIdentifier = 0;
  handleIdentifier[1] = 0;
  handleIdentifier[4] = 0;
  *(uint32_t *)(handleIdentifier + 5) = 0;
  handleIdentifier[6] = 0;
  handleIdentifier[8] = 0;
  handleIdentifier[0x60f] = 0;
  handleIdentifier[0x610] = 0;
  ptr_uint_var = handleIdentifier + 0xf;
  handleIdentifier[0xc] = ptr_uint_var;
  handleIdentifier[0xd] = (ulonglong)(-(int)ptr_uint_var & 7) + (longlong)ptr_uint_var;
  handleIdentifier[0xe] = handleIdentifier + 0x60f;
  handleIdentifier[0x60f] = &g_system_func_11;
  handleIdentifier[0x610] = InitializeUISystem;
  return handleIdentifier;
}

longlong * InitializeSystemResources(longlong *handleIdentifier,longlong *resourceIdentifier)

{
  longlong *long_ptr;

  if (resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*resourceIdentifier + 0x28))(resourceIdentifier);
  }
  long_ptr = (longlong *)*handleIdentifier;
  *handleIdentifier = (longlong)resourceIdentifier;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  return handleIdentifier;
}
// void InitializeSystemModule24(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeSystemModule24(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;
  void *node_root;

  node_root = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    node_root = *(void **)(resourceIdentifier + 8);
  }
  if (node_root == (void *)0x0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (node_root[long_result] != '\0');
  if ((int)long_result < 0x400) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x000180056fc2. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),0x400);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,0x400);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}
// void SystemFunction_36_8(longlong *handleIdentifier)

void SystemFunction_36_8(longlong *handleIdentifier)

{
  longlong *long_ptr;
  longlong long_result;

  long_ptr = handleIdentifier + 3;
  long_result = *handleIdentifier;
  while ((longlong *)long_result != long_ptr) {
    long_result = *(longlong *)((ulonglong)(-(int)long_result & 7) + long_result);
    if ((code *)handleIdentifier[0x604] == (code *)0x0) {
      free();
    }
    else {
      (*(code *)handleIdentifier[0x604])();
    }
    *handleIdentifier = long_result;
  }
  *handleIdentifier = (longlong)long_ptr;
  handleIdentifier[1] = (ulonglong)(-(int)long_ptr & 7) + (longlong)long_ptr;
  handleIdentifier[2] = (longlong)(handleIdentifier + 0x603);
  return;
}
// void SystemFunction_39_3(longlong handleIdentifier)

void SystemFunction_39_3(longlong handleIdentifier)

{
  longlong system_RSI;
  longlong *system_RDI;

  do {
    handleIdentifier = *(longlong *)((ulonglong)(-(int)handleIdentifier & 7) + handleIdentifier);
    if ((code *)system_RDI[0x604] == (code *)0x0) {
      free();
    }
    else {
      (*(code *)system_RDI[0x604])();
    }
    *system_RDI = handleIdentifier;
  } while (handleIdentifier != system_RSI);
  *system_RDI = system_RSI;
  system_RDI[1] = (ulonglong)(-(int)system_RSI & 7) + system_RSI;
  system_RDI[2] = (longlong)(system_RDI + 0x603);
  return;
}
// void SystemFunction_45_0(void)

void SystemFunction_45_0(void)

{
  longlong system_RSI;
  longlong *system_RDI;

  *system_RDI = system_RSI;
  system_RDI[1] = (ulonglong)(-(int)system_RSI & 7) + system_RSI;
  system_RDI[2] = (longlong)(system_RDI + 0x603);
  return;
}

uint64_t *
InitializeSystemModule46(uint64_t *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;

  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_data_nodeconfig;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  if (resourceIdentifier != 0) {
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    *(int *)(handleIdentifier + 2) = (int)long_result;
    strcpy_s(handleIdentifier[1],SYSTEM_DATA_COMPARE_SIZE,resourceIdentifier,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeUISystem(longlong *handleIdentifier)

void InitializeUISystem(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;

  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  node_root = (uint64_t *)*handleIdentifier;
  if (node_root != ptr_uint_var) {
    do {
      (**(code **)*node_root)(node_root,0);
      node_root = node_root + 4;
    } while (node_root != ptr_uint_var);
    handleIdentifier[1] = *handleIdentifier;
    return;
  }
  handleIdentifier[1] = (longlong)node_root;
  return;
}
// void InitializeSystemDataNode19(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode19(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 0xb) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule37(longlong *handleIdentifier,uint32_t *resourceIdentifier)
void InitializeSystemModule37(longlong *handleIdentifier,uint32_t *resourceIdentifier)

{
  longlong long_result;
  uint32_t *node_root;
  uint32_t *ptr_uint_var;
  uint32_t *ptr_uint_var;

  ptr_uint_var = (uint32_t *)handleIdentifier[1];
  if (ptr_uint_var < (uint32_t *)handleIdentifier[2]) {
    handleIdentifier[1] = (longlong)(ptr_uint_var + 1);
    *ptr_uint_var = *resourceIdentifier;
    return;
  }
  ptr_uint_var = (uint32_t *)*handleIdentifier;
  long_result = (longlong)ptr_uint_var - (longlong)ptr_uint_var >> 2;
  if (long_result == 0) {
    long_result = 1;
  }
  else {
    long_result = long_result * 2;
    if (long_result == 0) {
      node_root = (uint32_t *)0x0;
      goto LAB_18005726e;
    }
  }
  node_root = (uint32_t *)AllocateSystemResource(systemMemoryPool,long_result * 4,(char)handleIdentifier[3]);
  ptr_uint_var = (uint32_t *)*handleIdentifier;
  ptr_uint_var = (uint32_t *)handleIdentifier[1];
LAB_18005726e:
  if (ptr_uint_var != ptr_uint_var) {
                    // WARNING: Subroutine does not return
    memmove(node_root,ptr_uint_var,(longlong)ptr_uint_var - (longlong)ptr_uint_var);
  }
  *node_root = *resourceIdentifier;
  if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = (longlong)node_root;
  handleIdentifier[1] = (longlong)(node_root + 1);
  handleIdentifier[2] = (longlong)(node_root + long_result);
  return;
}
// void InitializeResourceSystem(longlong handleIdentifier)

void InitializeResourceSystem(longlong handleIdentifier)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (ptr_uint_var != (uint64_t *)0x0) {
    ValidateSystemConfiguration(handleIdentifier,*ptr_uint_var);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  *(longlong *)handleIdentifier = handleIdentifier;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint8_t *)(handleIdentifier + 0x18) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(longlong *)(handleIdentifier + 8) = handleIdentifier;
  return;
}
// void SystemFunction_9_4(void)

void SystemFunction_9_4(void)

{
  ValidateSystemConfiguration();
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_14_0(void)

void SystemFunction_14_0(void)

{
  longlong system_RBX;

  *(longlong *)system_RBX = system_RBX;
  *(uint64_t *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint8_t *)(system_RBX + 0x18) = 0;
  *(uint64_t *)(system_RBX + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(longlong *)(system_RBX + 8) = system_RBX;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule39(longlong *handleIdentifier,ulonglong resourceIdentifier)
void InitializeSystemModule39(longlong *handleIdentifier,ulonglong resourceIdentifier)

{
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong allocation_size;
  longlong long_result;

  allocation_size = handleIdentifier[1];
  long_result = *handleIdentifier;
  uint_result = allocation_size - long_result >> 3;
  if (resourceIdentifier <= uint_result) {
    handleIdentifier[1] = long_result + resourceIdentifier * 8;
    return;
  }
  uint_result = resourceIdentifier - uint_result;
  if (uint_result <= (ulonglong)(handleIdentifier[2] - allocation_size >> 3)) {
    if (uint_result != 0) {
                    // WARNING: Subroutine does not return
      memset(allocation_size,0,uint_result * 8);
    }
    handleIdentifier[1] = allocation_size;
    return;
  }
  uint_result = uint_result * 2;
  if (uint_result == 0) {
    uint_result = 1;
  }
  if (uint_result < resourceIdentifier) {
    uint_result = resourceIdentifier;
  }
  if (uint_result == 0) {
    long_result = 0;
  }
  else {
    long_result = AllocateSystemResource(systemMemoryPool,uint_result * 8,(char)handleIdentifier[3]);
    long_result = *handleIdentifier;
    allocation_size = handleIdentifier[1];
  }
  if (long_result != allocation_size) {
                    // WARNING: Subroutine does not return
    memmove(long_result,long_result,allocation_size - long_result);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memset(long_result,0,uint_result * 8);
  }
  if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = long_result;
  handleIdentifier[2] = long_result + uint_result * 8;
  handleIdentifier[1] = long_result;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_22_7(longlong handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,longlong systemFlags)
void SystemFunction_22_7(longlong handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,longlong systemFlags)

{
  longlong in_RAX;
  longlong long_result;
  longlong *system_RBX;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong system_RDI;

  uint_result = resourceIdentifier - handleIdentifier;
  if (uint_result <= (ulonglong)(in_RAX - system_RDI >> 3)) {
    if (uint_result != 0) {
                    // WARNING: Subroutine does not return
      memset();
    }
    system_RBX[1] = system_RDI;
    return;
  }
  uint_result = handleIdentifier * 2;
  if (handleIdentifier == 0) {
    uint_result = 1;
  }
  if (uint_result < resourceIdentifier) {
    uint_result = resourceIdentifier;
  }
  if (uint_result == 0) {
    long_result = 0;
  }
  else {
    long_result = AllocateSystemResource(systemMemoryPool,uint_result * 8,(char)system_RBX[3]);
    systemFlags = *system_RBX;
    system_RDI = system_RBX[1];
  }
  if (systemFlags != system_RDI) {
                    // WARNING: Subroutine does not return
    memmove(long_result,systemFlags,system_RDI - systemFlags);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memset(long_result,0,uint_result * 8);
  }
  if (*system_RBX != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *system_RBX = long_result;
  system_RBX[2] = long_result + uint_result * 8;
  system_RBX[1] = long_result;
  return;
}
// void SystemFunction_44_6(void)

void SystemFunction_44_6(void)

{
  longlong system_RBX;
  longlong system_RSI;
  uint64_t system_RDI;

  if (system_RSI != 0) {
                    // WARNING: Subroutine does not return
    memset();
  }
  *(uint64_t *)(system_RBX + 8) = system_RDI;
  return;
}
// void SystemFunction_49_7(uint64_t handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,longlong systemFlags)

void SystemFunction_49_7(uint64_t handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,longlong systemFlags)

{
  longlong system_RBX;

  *(longlong *)(system_RBX + 8) = systemFlags + resourceIdentifier * 8;
  return;
}
// void InitializeUISystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeUISystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule58(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule42(longlong *handleIdentifier)

void InitializeSystemModule42(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x48) {
    InitializeSystemModule42(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_64_8(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void SystemFunction_64_8(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ValidateSystemConfiguration(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemDataNode17(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode17(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeTextureSystem(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeProfilingSystem(longlong handleIdentifier)

void InitializeProfilingSystem(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void SystemFunction_71_8(longlong handleIdentifier)

void SystemFunction_71_8(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializeNetworkSystem(void)

void InitializeNetworkSystem(void)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  longlong system_RBP;
  ulonglong system_RSI;
  ulonglong system_RDI;
  ulonglong uint_result;
  longlong system_R14;
  uint64_t system_R15;

  do {
    long_result = *(longlong *)(system_R14 + system_RDI * 8);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
    *(uint64_t *)(system_R14 + system_RDI * 8) = system_R15;
    system_RDI = system_RDI + 1;
  } while (system_RDI < system_RSI);
  *(uint64_t *)(system_RBP + 0x18) = system_R15;
  if ((1 < *(ulonglong *)(system_RBP + SYSTEM_DATA_COMPARE_SIZE)) &&
     (node_root = *(uint64_t **)(system_RBP + 8), node_root != (uint64_t *)0x0)) {
    uint_result = (ulonglong)node_root & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            node_root,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void SystemFunction_81_4(void)

void SystemFunction_81_4(void)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  longlong system_RBP;
  ulonglong system_RSI;
  ulonglong uint_result;
  uint64_t system_R15;

  *(uint64_t *)(system_RBP + 0x18) = system_R15;
  if ((1 < system_RSI) && (node_root = *(uint64_t **)(system_RBP + 8), node_root != (uint64_t *)0x0)) {
    uint_result = (ulonglong)node_root & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            node_root,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void SystemFunction_84_4(void)

void SystemFunction_84_4(void)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  longlong system_RBP;
  ulonglong uint_result;

  node_root = *(uint64_t **)(system_RBP + 8);
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeInputMutex(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeInputMutex(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeInputSystem(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeConfigSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeConfigSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 0x69) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule1(longlong handleIdentifier)

void InitializeSystemModule1(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
        if (*(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) != (longlong *)0x0) {
          (**(code **)(**(longlong **)(long_result + SYSTEM_DATA_COMPARE_SIZE) + 0x38))();
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (*(longlong *)(handleIdentifier + 8) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// void InitializeShaderSystem(longlong *handleIdentifier)

void InitializeShaderSystem(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x18) {
    HandleUIInput(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeResourceSystem(longlong handleIdentifier)

void InitializeResourceSystem(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void SystemFunction_29_4(longlong handleIdentifier)

void SystemFunction_29_4(longlong handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (ptr_uint_var = *(uint64_t **)(handleIdentifier + 8), ptr_uint_var != (uint64_t *)0x0)) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializePhysicsSystem(void)

void InitializePhysicsSystem(void)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  longlong system_RBP;
  ulonglong system_RSI;
  ulonglong system_RDI;
  ulonglong uint_result;
  longlong system_R14;
  uint64_t system_R15;

  do {
    long_result = *(longlong *)(system_R14 + system_RDI * 8);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
    *(uint64_t *)(system_R14 + system_RDI * 8) = system_R15;
    system_RDI = system_RDI + 1;
  } while (system_RDI < system_RSI);
  *(uint64_t *)(system_RBP + 0x18) = system_R15;
  if ((1 < *(ulonglong *)(system_RBP + SYSTEM_DATA_COMPARE_SIZE)) &&
     (node_root = *(uint64_t **)(system_RBP + 8), node_root != (uint64_t *)0x0)) {
    uint_result = (ulonglong)node_root & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            node_root,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void SystemFunction_39_0(void)

void SystemFunction_39_0(void)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  longlong system_RBP;
  ulonglong system_RSI;
  ulonglong uint_result;
  uint64_t system_R15;

  *(uint64_t *)(system_RBP + 0x18) = system_R15;
  if ((1 < system_RSI) && (node_root = *(uint64_t **)(system_RBP + 8), node_root != (uint64_t *)0x0)) {
    uint_result = (ulonglong)node_root & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            node_root,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void SystemFunction_42_0(void)

void SystemFunction_42_0(void)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  longlong system_RBP;
  ulonglong uint_result;

  node_root = *(uint64_t **)(system_RBP + 8);
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeFontSystem(longlong *handleIdentifier)

void InitializeFontSystem(longlong *handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;

  long_ptr = (longlong *)handleIdentifier[1];
  for (long_ptr = (longlong *)*handleIdentifier; long_ptr != long_ptr; long_ptr = long_ptr + 1) {
    if ((longlong *)*long_ptr != (longlong *)0x0) {
      (**(code **)(*(longlong *)*long_ptr + 0x38))();
    }
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode31(void)
void InitializeSystemDataNode31(void)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  node_root = systemCoreData;
  if (systemCoreData == (uint64_t *)0x0) {
    return;
  }
  InitializeFontSystem();
  if ((longlong *)node_root[0x30b] != (longlong *)0x0) {
    (**(code **)(*(longlong *)node_root[0x30b] + 0x38))();
  }
  _Mtx_destroy_in_situ();
  if ((longlong *)node_root[0x300] != (longlong *)0x0) {
    (**(code **)(*(longlong *)node_root[0x300] + 0x38))();
  }
  if ((longlong *)node_root[0x2d3] != (longlong *)0x0) {
    (**(code **)(*(longlong *)node_root[0x2d3] + 0x38))();
  }
  if ((longlong *)node_root[0x2c0] != (longlong *)0x0) {
    (**(code **)(*(longlong *)node_root[0x2c0] + 0x38))();
  }
  SystemFunction_88_0(node_root + 0x116);
  InitializeSystemDataNode19(node_root + 6);
  if (node_root[2] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeSystemModule4(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule4(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  char is_initialized;
  longlong long_result;
  char *ptr_char_var;
  char *ptr_char_var;
  uint64_t uint_result;
  void *system_buffer_ptr_50;
  longlong longStack_48;
  uint32_t uintStack_40;
  ulonglong uintStack_38;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_char_var = *(char **)(handleIdentifier + 8);
  is_initialized = *ptr_char_var;
  ptr_char_var = ptr_char_var;
  if (is_initialized != '\0') {
    do {
      long_result = strchr(systemConfig,(int)is_initialized);
      if ((long_result != 0) && (ptr_char_var != ptr_char_var)) {
        system_buffer_ptr_50 = &resourcePoolPointer;
        uintStack_38 = 0;
        longStack_48 = 0;
        uintStack_40 = 0;
        SystemConfigWriteExtendedFunction(&bufferPtr_50system_buffer_ptr_50,ptr_char_var,(int)ptr_char_var - (int)ptr_char_var,systemFlags,uint_result);
        ptr_char_var = ptr_char_var + 1;
        if (*(ulonglong *)(resourceIdentifier + 8) < *(ulonglong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE)) {
          *(ulonglong *)(resourceIdentifier + 8) = *(ulonglong *)(resourceIdentifier + 8) + SYSTEM_NODE_HEADER_SIZE;
          ProcessResourceData();
        }
        else {
          InitializeUISystem(resourceIdentifier,&bufferPtr_50system_buffer_ptr_50);
        }
        system_buffer_ptr_50 = &resourcePoolPointer;
        if (longStack_48 != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        longStack_48 = 0;
        uintStack_38 = uintStack_38 & 0xffffffff00000000;
        system_buffer_ptr_50 = &globalSystemPointerData;
      }
      ptr_char_var = ptr_char_var + 1;
      is_initialized = *ptr_char_var;
    } while (is_initialized != '\0');
    if (ptr_char_var != ptr_char_var) {
      system_buffer_ptr_50 = &resourcePoolPointer;
      uintStack_38 = 0;
      longStack_48 = 0;
      uintStack_40 = 0;
      SystemConfigWriteExtendedFunction(&bufferPtr_50system_buffer_ptr_50,ptr_char_var,(int)ptr_char_var - (int)ptr_char_var,systemFlags,uint_result);
      if (*(ulonglong *)(resourceIdentifier + 8) < *(ulonglong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE)) {
        *(ulonglong *)(resourceIdentifier + 8) = *(ulonglong *)(resourceIdentifier + 8) + SYSTEM_NODE_HEADER_SIZE;
        ProcessResourceData();
      }
      else {
        InitializeUISystem(resourceIdentifier,&bufferPtr_50system_buffer_ptr_50);
      }
      system_buffer_ptr_50 = &resourcePoolPointer;
      if (longStack_48 != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong * InitializeSystemDataNode15(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig)

{
  byte bool_var;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  byte *ptr_byte_var;
  longlong long_result;
  uint64_t uint_result;
  char acstack_var [8];

  long_result = AllocateSystemResource(systemMemoryPool,0x40,*(uint8_t *)(handleIdentifier + 0x28));
  ProcessResourceData(long_result + SYSTEM_NODE_HEADER_SIZE,systemConfig);
  long_result = InitializeSystemDataNode19(handleIdentifier,acstack_var,long_result + SYSTEM_NODE_HEADER_SIZE);
  if (acstack_var[0] == '\0') {
    ConfigureGraphicsShader();
    *resourceIdentifier = long_result;
    *(uint8_t *)(resourceIdentifier + 1) = 0;
    return resourceIdentifier;
  }
  if (long_result != handleIdentifier) {
    if (*(int *)(long_result + 0x30) == 0) {
LAB_180057b97:
      uint_result = 1;
      goto LAB_180057ba2;
    }
    if (*(int *)(long_result + 0x30) != 0) {
      ptr_byte_var = *(byte **)(long_result + 0x28);
      long_result = *(longlong *)(long_result + 0x28) - (longlong)ptr_byte_var;
      do {
        bool_var = *ptr_byte_var;
        uint_result = (uint)ptr_byte_var[long_result];
        if (bool_var != uint_result) break;
        ptr_byte_var = ptr_byte_var + 1;
      } while (uint_result != 0);
      if ((int)(bool_var - uint_result) < 1) goto LAB_180057b97;
    }
  }
  uint_result = 0;
LAB_180057ba2:
                    // WARNING: Subroutine does not return
  CreateSystemHandle(long_result,long_result,handleIdentifier,uint_result);
}
// void InitializeSystemModule33(uint64_t *handleIdentifier)

void InitializeSystemModule33(uint64_t *handleIdentifier)

{
  if (handleIdentifier == (uint64_t *)0x0) {
    return;
  }
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[4] = &resourcePoolPointer;
  if (handleIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 7) = 0;
  handleIdentifier[4] = &globalSystemPointerData;
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(handleIdentifier);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemModule18(uint64_t *handleIdentifier,uint resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemVariable;
  InitializeSystemModule47(systemConfigurationData,handleIdentifier[0x28],systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  handleIdentifier[0x28] = 0;
  handleIdentifier[0x29] = &resourcePoolPointer;
  if (handleIdentifier[0x2a] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x2a] = 0;
  *(uint32_t *)(handleIdentifier + 0x2c) = 0;
  handleIdentifier[0x29] = &globalSystemPointerData;
  InitializeAudioSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x170);
  }
  return handleIdentifier;
}
// void InitializeSystemDataNode29(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode29(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeNetworkSystem();
  InitializeNetworkSystem();
  handleIdentifier[0x123] = (longlong)&resourcePoolPointer;
  if (handleIdentifier[0x124] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x124] = 0;
  *(uint32_t *)(handleIdentifier + 0x126) = 0;
  handleIdentifier[0x123] = (longlong)&globalSystemPointerData;
  InitializeTextureSystem(handleIdentifier + 0x11d,handleIdentifier[0x11f],systemConfig,systemFlags,uint_result);
  if (handleIdentifier[0x119] == 0) {
    InitializePhysicsSystem();
    InitializePhysicsSystem();
    InitializeSystemDataNode25(handleIdentifier + SYSTEM_DATA_COMPARE_SIZEb,handleIdentifier[SYSTEM_DATA_COMPARE_SIZEd]);
    handleIdentifier[0x87] = (longlong)&globalSystemPointerData;
    handleIdentifier[4] = (longlong)&globalSystemPointerData;
    uint_result = INVALID_HANDLE_VALUE;
    ptr_uint_var = (uint64_t *)handleIdentifier[1];
    for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 4) {
      (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
    }
    if (*handleIdentifier == 0) {
      return;
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule29(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule29(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemDataNode25(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void ConfigureSystemParameters(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ConfigureSystemParameters(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (ptr_uint_var != (uint64_t *)0x0) {
    InitializeFontSystem(handleIdentifier,*ptr_uint_var,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
    InitializeSystemDataNode23(ptr_uint_var);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return;
}
// void SystemFunction_16_0(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void SystemFunction_16_0(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemDataNode25(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule24(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule24(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (ptr_uint_var != (uint64_t *)0x0) {
    InitializeFontSystem(handleIdentifier,*ptr_uint_var,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
    InitializeSystemDataNode23(ptr_uint_var);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return;
}
// void InitializeAudioMutex(longlong *handleIdentifier)

void InitializeAudioMutex(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  uint64_t *node_previous;

  InitializeUISystem();
  long_result = *handleIdentifier;
  *handleIdentifier = 0;
  long_result = handleIdentifier[1];
  handleIdentifier[1] = 0;
  long_result = handleIdentifier[2];
  handleIdentifier[2] = 0;
  long_result = handleIdentifier[3];
  *(int *)(handleIdentifier + 3) = (int)handleIdentifier[3];
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  *handleIdentifier = long_result;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  handleIdentifier[1] = long_result;
  handleIdentifier[2] = long_result;
  *(int *)(handleIdentifier + 3) = (int)long_result;
  for (node_previous = ptr_uint_var; node_previous != ptr_uint_var; node_previous = node_previous + 4) {
    (**(code **)*node_previous)(node_previous,0);
  }
  if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return;
}
// void InitializeFontSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeFontSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemDataNode25(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeNetworkSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeNetworkSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;

  ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (ptr_uint_var != (uint64_t *)0x0) {
    InitializeFontSystem(handleIdentifier,*ptr_uint_var,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
    InitializeSystemDataNode23(ptr_uint_var);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return;
}

uint64_t * ProcessSystemData(uint64_t *handleIdentifier,uint64_t *resourceIdentifier,longlong systemConfig)

{
  byte bool_var;
  bool bool_var;
  byte *ptr_byte_var;
  uint uint_result;
  int int_result;
  longlong long_result;
  uint64_t *node_previous;
  uint64_t *node_next;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;

  if ((uint64_t *)handleIdentifier[2] != (uint64_t *)0x0) {
    node_previous = (uint64_t *)handleIdentifier[2];
    ptr_uint_var = handleIdentifier;
    do {
      if (*(int *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        node_next = (uint64_t *)node_previous[1];
        bool_var = false;
      }
      else {
        if (*(int *)(node_previous + 6) == 0) {
          bool_var = true;
        }
        else {
          ptr_byte_var = *(byte **)(systemConfig + 8);
          long_result = node_previous[5] - (longlong)ptr_byte_var;
          do {
            uint_result = (uint)ptr_byte_var[long_result];
            int_result = *ptr_byte_var - uint_result;
            if (*ptr_byte_var != uint_result) break;
            ptr_byte_var = ptr_byte_var + 1;
          } while (uint_result != 0);
          bool_var = 0 < int_result;
          if (int_result < 1) {
            node_next = (uint64_t *)node_previous[1];
            goto LAB_1800580f9;
          }
        }
        node_next = (uint64_t *)*node_previous;
      }
LAB_1800580f9:
      ptr_uint_var = node_previous;
      if (bool_var) {
        ptr_uint_var = ptr_uint_var;
      }
      node_previous = node_next;
      ptr_uint_var = ptr_uint_var;
    } while (node_next != (uint64_t *)0x0);
    if (ptr_uint_var != handleIdentifier) {
      if (*(int *)(ptr_uint_var + 6) == 0) {
LAB_180058138:
        *resourceIdentifier = ptr_uint_var;
        return resourceIdentifier;
      }
      if (*(int *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE) != 0) {
        ptr_byte_var = (byte *)ptr_uint_var[5];
        long_result = *(longlong *)(systemConfig + 8) - (longlong)ptr_byte_var;
        do {
          bool_var = *ptr_byte_var;
          uint_result = (uint)ptr_byte_var[long_result];
          if (bool_var != uint_result) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (uint_result != 0);
        if ((int)(bool_var - uint_result) < 1) goto LAB_180058138;
      }
    }
  }
  *resourceIdentifier = handleIdentifier;
  return resourceIdentifier;
}
// void InitializeStringManager(ulonglong *handleIdentifier)

void InitializeStringManager(ulonglong *handleIdentifier)

{
  int *ptr_int_var;
  ulonglong uint_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;

  handleIdentifier[1] = *handleIdentifier;
  uint_result = *handleIdentifier;
  *handleIdentifier = 0;
  uint_result = handleIdentifier[1];
  handleIdentifier[1] = 0;
  uint_result = handleIdentifier[2];
  handleIdentifier[2] = 0;
  uint_result = handleIdentifier[3];
  *(int *)(handleIdentifier + 3) = (int)handleIdentifier[3];
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  *handleIdentifier = uint_result;
  handleIdentifier[1] = uint_result;
  handleIdentifier[2] = uint_result;
  *(int *)(handleIdentifier + 3) = (int)uint_result;
  if (ptr_uint_var == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeSystemModule58(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule58(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier != (uint64_t *)0x0) {
    InitializeSystemModule58(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
    if ((longlong *)resourceIdentifier[0x17] != (longlong *)0x0) {
      (**(code **)(*(longlong *)resourceIdentifier[0x17] + 0x38))();
    }
    resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(resourceIdentifier);
  }
  return;
}
// void ValidateSystemConfiguration(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ValidateSystemConfiguration(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier == (uint64_t *)0x0) {
    return;
  }
  ValidateSystemConfiguration(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  InitializeSystemModule23(resourceIdentifier + 8);
  resourceIdentifier[4] = &resourcePoolPointer;
  if (resourceIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[5] = 0;
  *(uint32_t *)(resourceIdentifier + 7) = 0;
  resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(resourceIdentifier);
}
// void InitializeTextureSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeTextureSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier == (uint64_t *)0x0) {
    return;
  }
  InitializeTextureSystem(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  resourceIdentifier[4] = &resourcePoolPointer;
  if (resourceIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[5] = 0;
  *(uint32_t *)(resourceIdentifier + 7) = 0;
  resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(resourceIdentifier);
}
// void InitializeInputSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeInputSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier == (uint64_t *)0x0) {
    return;
  }
  InitializeInputSystem(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  if (resourceIdentifier[8] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[4] = &resourcePoolPointer;
  if (resourceIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[5] = 0;
  *(uint32_t *)(resourceIdentifier + 7) = 0;
  resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(resourceIdentifier);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule43(uint64_t *handleIdentifier,longlong resourceIdentifier)
void InitializeSystemModule43(uint64_t *handleIdentifier,longlong resourceIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  longlong allocation_size;
  longlong long_result;
  uint64_t *node_previous;

  node_previous = (uint64_t *)handleIdentifier[1];
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  allocation_size = ((longlong)node_previous - (longlong)ptr_uint_var) / 0x28;
  node_root = (uint64_t *)0x0;
  if (allocation_size == 0) {
    allocation_size = 1;
  }
  else {
    allocation_size = allocation_size * 2;
    if (allocation_size == 0) goto LAB_18005856a;
  }
  node_root = (uint64_t *)
           AllocateSystemResource(systemMemoryPool,allocation_size * 0x28,*(uint8_t *)(handleIdentifier + 3),ptr_uint_var,
                         INVALID_HANDLE_VALUE);
  node_previous = (uint64_t *)handleIdentifier[1];
  ptr_uint_var = (uint64_t *)*handleIdentifier;
LAB_18005856a:
  ptr_uint_var = node_root;
  if (ptr_uint_var != node_previous) {
    long_result = (longlong)node_root - (longlong)ptr_uint_var;
    ptr_uint_var = ptr_uint_var + 1;
    do {
      *ptr_uint_var = &globalSystemPointerData;
      *(uint64_t *)(long_result + (longlong)ptr_uint_var) = 0;
      *(uint32_t *)(long_result + 8 + (longlong)ptr_uint_var) = 0;
      *ptr_uint_var = &resourcePoolPointer;
      *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + (longlong)ptr_uint_var) = 0;
      *(uint64_t *)(long_result + (longlong)ptr_uint_var) = 0;
      *(uint32_t *)(long_result + 8 + (longlong)ptr_uint_var) = 0;
      *(uint32_t *)(long_result + 8 + (longlong)ptr_uint_var) = *(uint32_t *)(ptr_uint_var + 1);
      *(uint64_t *)(long_result + (longlong)ptr_uint_var) = *ptr_uint_var;
      *(uint32_t *)(long_result + 0x14 + (longlong)ptr_uint_var) = *(uint32_t *)((longlong)ptr_uint_var + 0x14);
      *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + (longlong)ptr_uint_var) = *(uint32_t *)(ptr_uint_var + 2);
      *(uint32_t *)(ptr_uint_var + 1) = 0;
      *ptr_uint_var = 0;
      ptr_uint_var[2] = 0;
      *(uint32_t *)(long_result + 0x18 + (longlong)ptr_uint_var) = *(uint32_t *)(ptr_uint_var + 3);
      ptr_uint_var = ptr_uint_var + 5;
      ptr_uint_var = ptr_uint_var + 4;
      ptr_uint_var = ptr_uint_var + 5;
    } while (ptr_uint_var != node_previous);
  }
  *ptr_uint_var = &globalSystemPointerData;
  ptr_uint_var[1] = 0;
  *(uint32_t *)(ptr_uint_var + 2) = 0;
  *ptr_uint_var = &resourcePoolPointer;
  ptr_uint_var[3] = 0;
  ptr_uint_var[1] = 0;
  *(uint32_t *)(ptr_uint_var + 2) = 0;
  *(uint32_t *)(ptr_uint_var + 2) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  ptr_uint_var[1] = *(uint64_t *)(resourceIdentifier + 8);
  *(uint32_t *)((longlong)ptr_uint_var + 0x1c) = *(uint32_t *)(resourceIdentifier + 0x1c);
  *(uint32_t *)(ptr_uint_var + 3) = *(uint32_t *)(resourceIdentifier + 0x18);
  *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint64_t *)(resourceIdentifier + 8) = 0;
  *(uint64_t *)(resourceIdentifier + 0x18) = 0;
  *(uint32_t *)(ptr_uint_var + 4) = *(uint32_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE);
  node_previous = (uint64_t *)handleIdentifier[1];
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != node_previous) {
    do {
      *ptr_uint_var = &resourcePoolPointer;
      if (ptr_uint_var[1] != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      ptr_uint_var[1] = 0;
      *(uint32_t *)(ptr_uint_var + 3) = 0;
      *ptr_uint_var = &globalSystemPointerData;
      ptr_uint_var = ptr_uint_var + 5;
    } while (ptr_uint_var != node_previous);
    ptr_uint_var = (uint64_t *)*handleIdentifier;
  }
  if (ptr_uint_var == (uint64_t *)0x0) {
    *handleIdentifier = node_root;
    handleIdentifier[1] = ptr_uint_var + 5;
    handleIdentifier[2] = node_root + allocation_size * 5;
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// void InitializeSystemModule24(longlong handleIdentifier)

void InitializeSystemModule24(longlong handleIdentifier)

{
  if (*(longlong **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) + 0x38))();
  }
  return;
}
// void InitializeSystemDataNode25(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode25(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier == (uint64_t *)0x0) {
    return;
  }
  InitializeSystemDataNode25(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  if (resourceIdentifier[8] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[4] = &resourcePoolPointer;
  if (resourceIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[5] = 0;
  *(uint32_t *)(resourceIdentifier + 7) = 0;
  resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(resourceIdentifier);
}
// void InitializeFontSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

void InitializeFontSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  if (resourceIdentifier != (uint64_t *)0x0) {
    InitializeFontSystem(handleIdentifier,*resourceIdentifier);
    InitializeSystemDataNode23(resourceIdentifier);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(resourceIdentifier);
  }
  return;
}
// void SystemFunction_46_6(uint64_t handleIdentifier)

void SystemFunction_46_6(uint64_t handleIdentifier)

{
  uint64_t *system_RBX;

  InitializeFontSystem(handleIdentifier,*system_RBX);
  InitializeSystemDataNode23();
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_53_4(void)

void SystemFunction_53_4(void)

{
  return;
}
// void InitializeTextureSystem(uint64_t handleIdentifier,longlong resourceIdentifier)

void InitializeTextureSystem(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  if (*(longlong *)(resourceIdentifier + 0x40) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE) = &resourcePoolPointer;
  if (*(longlong *)(resourceIdentifier + 0x28) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(resourceIdentifier + 0x28) = 0;
  *(uint32_t *)(resourceIdentifier + 0x38) = 0;
  *(uint64_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE) = &globalSystemPointerData;
  if (resourceIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(resourceIdentifier);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ValidateSystemConfiguration(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void ValidateSystemConfiguration(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  uint64_t *ptr_uint_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;

  uint_result = systemConfig - resourceIdentifier >> 5;
  if ((ulonglong)(handleIdentifier[2] - *handleIdentifier >> 5) < uint_result) {
    if (uint_result == 0) {
      long_result = 0;
    }
    else {
      long_result = AllocateSystemResource(systemMemoryPool,uint_result << 5,(char)handleIdentifier[3]);
    }
    if (resourceIdentifier != systemConfig) {
      long_result = long_result - resourceIdentifier;
      do {
        ProcessResourceData(long_result + resourceIdentifier,resourceIdentifier);
        resourceIdentifier = resourceIdentifier + SYSTEM_NODE_HEADER_SIZE;
      } while (resourceIdentifier != systemConfig);
    }
    ptr_uint_var = (uint64_t *)handleIdentifier[1];
    ptr_uint_var = (uint64_t *)*handleIdentifier;
    if (ptr_uint_var != ptr_uint_var) {
      do {
        (**(code **)*ptr_uint_var)(ptr_uint_var,0);
        ptr_uint_var = ptr_uint_var + 4;
      } while (ptr_uint_var != ptr_uint_var);
      ptr_uint_var = (uint64_t *)*handleIdentifier;
    }
    if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    *handleIdentifier = long_result;
    long_result = uint_result * SYSTEM_NODE_HEADER_SIZE + long_result;
    handleIdentifier[2] = long_result;
    handleIdentifier[1] = long_result;
  }
  else {
    uint_result = handleIdentifier[1] - *handleIdentifier >> 5;
    if (uint_result < uint_result) {
      long_result = uint_result * SYSTEM_NODE_HEADER_SIZE + resourceIdentifier;
      ValidateSystemConfiguration(resourceIdentifier,long_result);
      long_result = InitializeSystemModule26(long_result,systemConfig,handleIdentifier[1]);
      handleIdentifier[1] = long_result;
    }
    else {
      ptr_uint_var = (uint64_t *)ValidateSystemConfiguration(resourceIdentifier,systemConfig);
      ptr_uint_var = (uint64_t *)handleIdentifier[1];
      for (ptr_uint_var = ptr_uint_var; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
        (**(code **)*ptr_uint_var)(ptr_uint_var,0);
      }
      handleIdentifier[1] = (longlong)ptr_uint_var;
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_74_8(longlong handleIdentifier)
void SystemFunction_74_8(longlong handleIdentifier)

{
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong system_RBX;
  uint64_t *ptr_uint_var;
  longlong system_RSI;
  longlong *system_RDI;
  longlong long_result;
  longlong system_R15;

  if (system_RSI == 0) {
    long_result = 0;
  }
  else {
    long_result = AllocateSystemResource(systemMemoryPool,system_RSI << 5,*(uint8_t *)(handleIdentifier + 0x18));
  }
  if (system_RBX != system_R15) {
    long_result = long_result - system_RBX;
    do {
      ProcessResourceData(long_result + system_RBX,system_RBX);
      system_RBX = system_RBX + SYSTEM_NODE_HEADER_SIZE;
    } while (system_RBX != system_R15);
  }
  ptr_uint_var = (uint64_t *)system_RDI[1];
  ptr_uint_var = (uint64_t *)*system_RDI;
  if (ptr_uint_var != ptr_uint_var) {
    do {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
      ptr_uint_var = ptr_uint_var + 4;
    } while (ptr_uint_var != ptr_uint_var);
    ptr_uint_var = (uint64_t *)*system_RDI;
  }
  if (ptr_uint_var == (uint64_t *)0x0) {
    *system_RDI = long_result;
    long_result = system_RSI * SYSTEM_NODE_HEADER_SIZE + long_result;
    system_RDI[2] = long_result;
    system_RDI[1] = long_result;
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// void SystemFunction_79_5(void)

void SystemFunction_79_5(void)

{
  uint64_t *ptr_uint_var;
  longlong system_RBX;
  uint64_t *node_root;
  longlong system_RSI;
  longlong *system_RDI;
  longlong system_R12;
  longlong long_result;
  longlong system_R15;

  long_result = system_R12 - system_RBX;
  do {
    ProcessResourceData(long_result + system_RBX,system_RBX);
    system_RBX = system_RBX + SYSTEM_NODE_HEADER_SIZE;
  } while (system_RBX != system_R15);
  ptr_uint_var = (uint64_t *)system_RDI[1];
  node_root = (uint64_t *)*system_RDI;
  if (node_root != ptr_uint_var) {
    do {
      (**(code **)*node_root)(node_root,0);
      node_root = node_root + 4;
    } while (node_root != ptr_uint_var);
    node_root = (uint64_t *)*system_RDI;
  }
  if (node_root != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(node_root);
  }
  *system_RDI = system_R12;
  long_result = system_RSI * SYSTEM_NODE_HEADER_SIZE + system_R12;
  system_RDI[2] = long_result;
  system_RDI[1] = long_result;
  return;
}
// void SystemFunction_84_2(void)

void SystemFunction_84_2(void)

{
  longlong long_result;
  uint64_t *node_root;
  uint64_t *ptr_uint_var;
  longlong system_RSI;
  longlong *system_RDI;
  longlong system_R12;

  node_root = (uint64_t *)system_RDI[1];
  ptr_uint_var = (uint64_t *)*system_RDI;
  if (ptr_uint_var != node_root) {
    do {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
      ptr_uint_var = ptr_uint_var + 4;
    } while (ptr_uint_var != node_root);
    ptr_uint_var = (uint64_t *)*system_RDI;
  }
  if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  *system_RDI = system_R12;
  long_result = system_RSI * SYSTEM_NODE_HEADER_SIZE + system_R12;
  system_RDI[2] = long_result;
  system_RDI[1] = long_result;
  return;
}
// void SystemFunction_91_5(longlong handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig)

void SystemFunction_91_5(longlong handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;
  longlong system_RBX;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong system_RSI;
  longlong system_RDI;

  uint_result = *(longlong *)(handleIdentifier + 8) - systemConfig >> 5;
  if (uint_result < system_RSI) {
    ValidateSystemConfiguration();
    uint_result = InitializeSystemModule26(uint_result * SYSTEM_NODE_HEADER_SIZE + system_RBX);
    *(uint64_t *)(system_RDI + 8) = uint_result;
  }
  else {
    node_root = (uint64_t *)ValidateSystemConfiguration();
    ptr_uint_var = *(uint64_t **)(system_RDI + 8);
    for (ptr_uint_var = node_root; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    }
    *(uint64_t **)(system_RDI + 8) = node_root;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule59(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig,longlong systemFlags)
void InitializeSystemModule59(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig,longlong systemFlags)

{
  uint64_t uint_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  if (systemConfig == systemFlags) {
    return;
  }
  long_result = handleIdentifier[1];
  uint_result = systemFlags - systemConfig >> 3;
  if ((ulonglong)(handleIdentifier[2] - long_result >> 3) < uint_result) {
    long_result = *handleIdentifier;
    long_result = long_result - long_result >> 3;
    uint_result = long_result * 2;
    if (long_result == 0) {
      uint_result = 1;
    }
    if (uint_result <= long_result + uint_result) {
      uint_result = long_result + uint_result;
    }
    if (uint_result == 0) {
      uint_result = 0;
    }
    else {
      uint_result = AllocateSystemResource(systemMemoryPool,uint_result * 8,(char)handleIdentifier[3]);
      long_result = *handleIdentifier;
    }
    if (long_result != resourceIdentifier) {
                    // WARNING: Subroutine does not return
      memmove(uint_result,long_result,resourceIdentifier - long_result);
    }
                    // WARNING: Subroutine does not return
    memmove(uint_result,systemConfig,systemFlags - systemConfig);
  }
  uint_result = long_result - resourceIdentifier >> 3;
  if (uint_result < uint_result) {
    long_result = long_result + uint_result * -8;
    if (long_result != long_result) {
                    // WARNING: Subroutine does not return
      memmove(long_result,long_result,uint_result * 8);
    }
                    // WARNING: Subroutine does not return
    memmove(long_result - ((long_result + uint_result * -8) - resourceIdentifier & 0xfffffffffffffff8),resourceIdentifier);
  }
  long_result = systemConfig + uint_result * 8;
  if (long_result != systemFlags) {
                    // WARNING: Subroutine does not return
    memmove(long_result,long_result,systemFlags - long_result);
  }
  if (resourceIdentifier != long_result) {
                    // WARNING: Subroutine does not return
    memmove(long_result + (uint_result - uint_result) * 8,resourceIdentifier,long_result - resourceIdentifier);
  }
                    // WARNING: Subroutine does not return
  memmove(resourceIdentifier + (uint_result - (long_result - systemConfig >> 3)) * 8,systemConfig,long_result - systemConfig);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_5_7(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig,longlong systemFlags)
void SystemFunction_5_7(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig,longlong systemFlags)

{
  uint64_t uint_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;

  long_result = handleIdentifier[1];
  uint_result = systemFlags - systemConfig >> 3;
  if ((ulonglong)(handleIdentifier[2] - long_result >> 3) < uint_result) {
    long_result = *handleIdentifier;
    long_result = long_result - long_result >> 3;
    uint_result = long_result * 2;
    if (long_result == 0) {
      uint_result = 1;
    }
    if (uint_result <= long_result + uint_result) {
      uint_result = long_result + uint_result;
    }
    if (uint_result == 0) {
      uint_result = 0;
    }
    else {
      uint_result = AllocateSystemResource(systemMemoryPool,uint_result * 8,(char)handleIdentifier[3]);
      long_result = *handleIdentifier;
    }
    if (long_result != resourceIdentifier) {
                    // WARNING: Subroutine does not return
      memmove(uint_result,long_result,resourceIdentifier - long_result);
    }
                    // WARNING: Subroutine does not return
    memmove(uint_result,systemConfig,systemFlags - systemConfig);
  }
  uint_result = long_result - resourceIdentifier >> 3;
  if (uint_result < uint_result) {
    long_result = long_result + uint_result * -8;
    if (long_result != long_result) {
                    // WARNING: Subroutine does not return
      memmove(long_result,long_result,uint_result * 8);
    }
                    // WARNING: Subroutine does not return
    memmove(long_result - ((long_result + uint_result * -8) - resourceIdentifier & 0xfffffffffffffff8),resourceIdentifier);
  }
  long_result = systemConfig + uint_result * 8;
  if (long_result != systemFlags) {
                    // WARNING: Subroutine does not return
    memmove(long_result,long_result,systemFlags - long_result);
  }
  if (resourceIdentifier != long_result) {
                    // WARNING: Subroutine does not return
    memmove(long_result + (uint_result - uint_result) * 8,resourceIdentifier,long_result - resourceIdentifier);
  }
                    // WARNING: Subroutine does not return
  memmove(resourceIdentifier + (uint_result - (long_result - systemConfig >> 3)) * 8,systemConfig,long_result - systemConfig);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_32_6(longlong handleIdentifier,longlong resourceIdentifier)
void SystemFunction_32_6(longlong handleIdentifier,longlong resourceIdentifier)

{
  uint64_t uint_result;
  longlong system_RBP;
  longlong system_RSI;
  longlong *system_RDI;
  ulonglong uint_result;

  handleIdentifier = handleIdentifier >> 3;
  uint_result = handleIdentifier * 2;
  if (handleIdentifier == 0) {
    uint_result = 1;
  }
  if (uint_result <= (ulonglong)(handleIdentifier + system_RBP)) {
    uint_result = handleIdentifier + system_RBP;
  }
  if (uint_result == 0) {
    uint_result = 0;
  }
  else {
    uint_result = AllocateSystemResource(systemMemoryPool,uint_result * 8,(char)system_RDI[3]);
    resourceIdentifier = *system_RDI;
  }
  if (resourceIdentifier != system_RSI) {
                    // WARNING: Subroutine does not return
    memmove(uint_result,resourceIdentifier,system_RSI - resourceIdentifier);
  }
                    // WARNING: Subroutine does not return
  memmove(uint_result);
}
// void SystemFunction_51_4(void)

void SystemFunction_51_4(void)

{
  return;
}
// void SystemFunction_54_2(void)

void SystemFunction_54_2(void)

{
  return;
}
// void InitializeSystemModule42(longlong handleIdentifier)

void InitializeSystemModule42(longlong handleIdentifier)

{
  InitializeAudioSystem();
  *(uint64_t *)(handleIdentifier + 8) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + 8) = &globalSystemPointerData;
  return;
}
// void SystemFunction_64_8(uint64_t *handleIdentifier)

void SystemFunction_64_8(uint64_t *handleIdentifier)

{
  if ((longlong *)handleIdentifier[0x13] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[0x13] + 0x38))();
  }
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeAudioSystem(uint64_t *handleIdentifier)

void InitializeAudioSystem(uint64_t *handleIdentifier)

{
  InitializeSystemModule23(handleIdentifier + 4);
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSystemModule35(uint64_t *handleIdentifier)

void InitializeSystemModule35(uint64_t *handleIdentifier)

{
  if (handleIdentifier[4] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void SystemFunction_92_0(longlong *handleIdentifier)

void SystemFunction_92_0(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x548) {
    InitializeSystemDataNode23(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule23(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule23(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  _Mtx_destroy_in_situ();
  InitializeTextureSystem(handleIdentifier + 0xf0,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0),systemConfig,systemFlags,uint_result);
  InitializeTextureSystem(handleIdentifier + 0xc0,*(uint64_t *)(handleIdentifier + 0xd0));
  InitializeTextureSystem(handleIdentifier + 0x90,*(uint64_t *)(handleIdentifier + 0xa0));
  InitializeSystemModule42(handleIdentifier + 0x60,*(uint64_t *)(handleIdentifier + 0x70));
  InitializeSystemDataNode25(handleIdentifier + 0x30,*(uint64_t *)(handleIdentifier + 0x40));
  InitializeSystemModule42(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE));
  return;
}
// void ConfigureSystemParameters(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ConfigureSystemParameters(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule42(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void SystemFunction_17_6(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void SystemFunction_17_6(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule42(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeResourceSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

void InitializeResourceSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  (*(code *)*resourceIdentifier)();
  return;
}
// WARNING: Removing unreachable block (ram,0x00018017747d)

// WARNING: Removing unreachable block (ram,0x000180177a18)

// WARNING: Removing unreachable block (ram,0x000180177a22)

// WARNING: Removing unreachable block (ram,0x000180177a2e)

// WARNING: Removing unreachable block (ram,0x000180177a35)

// WARNING: Removing unreachable block (ram,0x000180177581)

// WARNING: Removing unreachable block (ram,0x000180177590)

// WARNING: Removing unreachable block (ram,0x00018017759c)

// WARNING: Removing unreachable block (ram,0x0001801775a3)

// WARNING: Removing unreachable block (ram,0x0001801775b3)

// WARNING: Removing unreachable block (ram,0x0001801775c0)

// WARNING: Removing unreachable block (ram,0x0001801775cc)

// WARNING: Removing unreachable block (ram,0x0001801775d3)

// WARNING: Removing unreachable block (ram,0x000180177263)

// WARNING: Removing unreachable block (ram,0x000180177296)

// WARNING: Removing unreachable block (ram,0x00018017726a)

// WARNING: Removing unreachable block (ram,0x000180177274)

// WARNING: Removing unreachable block (ram,0x000180177280)

// WARNING: Removing unreachable block (ram,0x000180177287)

// WARNING: Removing unreachable block (ram,0x000180177290)

// WARNING: Removing unreachable block (ram,0x000180177298)

// WARNING: Removing unreachable block (ram,0x00018017753a)

// WARNING: Removing unreachable block (ram,0x000180177540)

// WARNING: Removing unreachable block (ram,0x000180177550)

// WARNING: Removing unreachable block (ram,0x00018017755c)

// WARNING: Removing unreachable block (ram,0x000180177563)

// WARNING: Removing unreachable block (ram,0x0001801772c2)

// WARNING: Removing unreachable block (ram,0x0001801772d0)

// WARNING: Removing unreachable block (ram,0x0001801772dc)

// WARNING: Removing unreachable block (ram,0x0001801772e3)

// WARNING: Removing unreachable block (ram,0x00018017764c)

// WARNING: Removing unreachable block (ram,0x00018017749a)

// WARNING: Removing unreachable block (ram,0x0001801774a8)

// WARNING: Removing unreachable block (ram,0x0001801774aa)

// WARNING: Removing unreachable block (ram,0x000180176fc3)

// WARNING: Removing unreachable block (ram,0x000180177722)

// WARNING: Removing unreachable block (ram,0x00018017729d)

// WARNING: Removing unreachable block (ram,0x00018017766b)

// WARNING: Removing unreachable block (ram,0x000180177677)

// WARNING: Removing unreachable block (ram,0x000180177679)

// WARNING: Removing unreachable block (ram,0x00018017739f)

// WARNING: Removing unreachable block (ram,0x0001801773a6)

// WARNING: Removing unreachable block (ram,0x0001801773b0)

// WARNING: Removing unreachable block (ram,0x0001801773bc)

// WARNING: Removing unreachable block (ram,0x0001801773c3)

// WARNING: Removing unreachable block (ram,0x00018017731b)

// WARNING: Removing unreachable block (ram,0x000180177321)

// WARNING: Removing unreachable block (ram,0x000180177330)

// WARNING: Removing unreachable block (ram,0x00018017733c)

// WARNING: Removing unreachable block (ram,0x000180177343)

// WARNING: Removing unreachable block (ram,0x00018017734b)

// WARNING: Removing unreachable block (ram,0x000180177356)

// WARNING: Removing unreachable block (ram,0x000180177360)

// WARNING: Removing unreachable block (ram,0x00018017736c)

// WARNING: Removing unreachable block (ram,0x000180177373)

// WARNING: Removing unreachable block (ram,0x00018017737b)

// WARNING: Removing unreachable block (ram,0x000180177385)

// WARNING: Removing unreachable block (ram,0x0001801773cb)

// WARNING: Removing unreachable block (ram,0x000180177381)

// WARNING: Removing unreachable block (ram,0x0001801773cd)

// WARNING: Removing unreachable block (ram,0x0001801773d6)

// WARNING: Removing unreachable block (ram,0x0001801773da)

// WARNING: Removing unreachable block (ram,0x0001801773e4)

// WARNING: Removing unreachable block (ram,0x0001801773eb)

// WARNING: Removing unreachable block (ram,0x000180177400)

// WARNING: Removing unreachable block (ram,0x00018017740c)

// WARNING: Removing unreachable block (ram,0x000180177413)

// WARNING: Removing unreachable block (ram,0x00018017741e)

// WARNING: Removing unreachable block (ram,0x000180177417)

// WARNING: Removing unreachable block (ram,0x000180177420)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeTextureSystem(longlong *handleIdentifier)
void InitializeTextureSystem(longlong *handleIdentifier)

{
  uint64_t *******system_pointer_chain;
  uint64_t *node_root;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  uint32_t uint_result;
  int int_result;
  uint64_t uint_result;
  longlong long_result;
  uint8_t *ptr_uint_var;
  longlong long_result;
  void *ptr_uint_var;
  uint64_t *******system_pointer_chain4;
  longlong *long_ptr;
  uint uint_result;
  void *ptr_uint_var;
  longlong long_result;
  uint64_t ******system_pointer_root;
  int int_result;
  uint *node_root1;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  bool handle_validation_flag;
  uint8_t localBuffer_3b8 [32];
  void *system_buffer_ptr_398;
  uint8_t *system_buffer_ptr_390;
  uint32_t uintStack_388;
  ulonglong uintStack_380;
  uint uintStack_378;
  int intStack_374;
  int intStack_370;
  longlong longStack_368;
  uint64_t ******pppppbufferPtr_360;
  uint64_t ******pppppbufferPtr_358;
  uint64_t ******pppppbufferPtr_350;
  uint64_t uintStack_348;
  uint64_t uintStack_340;
  uint32_t uintStack_338;
  void *system_buffer_ptr_330;
  void *system_buffer_ptr_328;
  uint32_t uintStack_320;
  ulonglong uintStack_318;
  longlong longStack_310;
  uint64_t *system_buffer_ptr_308;
  uint64_t *system_buffer_ptr_300;
  uint64_t uintStack_2f8;
  uint32_t uintStack_2f0;
  void *system_buffer_ptr_2e8;
  longlong longStack_2e0;
  uint32_t uintStack_2d0;
  longlong longStack_2c8;
  ulonglong uintStack_2c0;
  longlong longStack_2b8;
  uint64_t *system_buffer_ptr_2b0;
  uint64_t *system_buffer_ptr_2a8;
  uint64_t *system_buffer_ptr_2a0;
  uint64_t uintStack_298;
  void *system_buffer_ptr_290;
  uint8_t *system_buffer_ptr_288;
  uint32_t uintStack_280;
  uint8_t localBuffer_278 [16];
  uint64_t uintStack_268;
  uint64_t uintStack_48;
  uint32_t uintStack_40;
  uint32_t uintStack_3c;
  ulonglong uintStack_38;
  uint64_t uintStack_30;

  uintStack_30 = 0x180059023;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x270,8,3);
  uintStack_30 = 0x18005902b;
  long_result = GetSystemModuleHandle(uint_result);
  uint_result = *(uint32_t *)(systemCoreData + 0x1dc0);
  systemCoreData = long_result;
  *(uint32_t *)(long_result + 0x1e0) = *(uint32_t *)(systemCoreData + 0x1d50);
  *(uint32_t *)(long_result + 0x1e4) = uint_result;
  uintStack_30 = 0x180059066;
  (**(code **)(**(longlong **)(*handleIdentifier + 0x2b0) + 0xf8))();
  uintStack_298 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_3b8;
  uintStack_378 = 0;
  longStack_310 = systemCoreData;
  *(uint64_t *)(systemCoreData + 0xf0) = 0;
  uintStack_338 = 3;
  pppppsystem_buffer_ptr_360 = &pppppbufferPtr_360;
  pppppsystem_buffer_ptr_358 = &pppppbufferPtr_360;
  pppppsystem_buffer_ptr_350 = (uint64_t *******)0x0;
  uintStack_348 = 0;
  uintStack_340 = 0;
  longStack_2b8 = *g_system_base_1;
  intStack_370 = 0;
  long_result = *(longlong *)(longStack_2b8 + 0x8a8);
  if (*(longlong *)(longStack_2b8 + 0x8b0) - long_result >> 5 != 0) {
    longStack_368 = 0;
    do {
      long_result = longStack_368;
      int_result = intStack_370;
      ptr_uint_var = *(void **)(longStack_368 * SYSTEM_NODE_HEADER_SIZE + 8 + long_result);
      ptr_uint_var = &g_system_data_variable3;
      if (ptr_uint_var != (void *)0x0) {
        ptr_uint_var = ptr_uint_var;
      }
      system_buffer_ptr_398 = &resourcePoolPointer;
      uintStack_380 = 0;
      system_buffer_ptr_390 = (uint8_t *)0x0;
      uintStack_388 = 0;
      if (ptr_uint_var != (void *)0x0) {
        long_result = -1;
        do {
          long_result = long_result;
          long_result = long_result + 1;
        } while (ptr_uint_var[long_result] != '\0');
        if ((int)long_result != 0) {
          int_result = (int)long_result + 2;
          int_result = int_result;
          if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
            int_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          ptr_uint_var = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)int_result,0x13);
          *ptr_uint_var = 0;
          system_buffer_ptr_390 = ptr_uint_var;
          uint_result = ValidateResourceAllocation(ptr_uint_var);
          uintStack_380 = CONCAT44(uintStack_380._4_4_,uint_result);
                    // WARNING: Subroutine does not return
          memcpy(ptr_uint_var,ptr_uint_var,int_result);
        }
      }
      uintStack_388 = 0;
      InitializeSystemModule(&resourcePoolPointer,&bufferPtr_2e8system_buffer_ptr_2e8,&bufferPtr_398system_buffer_ptr_398);
      system_buffer_ptr_390 = (uint8_t *)0x0;
      uintStack_380 = uintStack_380 & 0xffffffff00000000;
      system_buffer_ptr_398 = &globalSystemPointerData;
      system_buffer_ptr_308 = (uint64_t *)0x0;
      system_buffer_ptr_300 = (uint64_t *)0x0;
      uintStack_2f8 = 0;
      uintStack_2f0 = 3;
      system_buffer_ptr_290 = &g_system_data_nodeconfig;
      system_buffer_ptr_288 = localBuffer_278;
      localBuffer_278[0] = 0;
      uintStack_280 = 4;
      strcpy_s(localBuffer_278,SYSTEM_DATA_COMPARE_SIZE,&g_system_global_variable4);
      ConfigureSystemModule(&bufferPtr_2e8system_buffer_ptr_2e8,&bufferPtr_30system_buffer_ptr_308,&bufferPtr_290system_buffer_ptr_290);
      system_buffer_ptr_290 = &globalSystemPointerData;
      intStack_374 = 0;
      longStack_2c8 = 0;
      uintStack_2c0 = (longlong)system_buffer_ptr_300 - (longlong)system_buffer_ptr_308 >> 5;
      node_root = bufferPtr_308;
      ptr_uint_var = bufferPtr_308;
      ptr_uint_var = bufferPtr_300;
      if (uintStack_2c0 != 0) {
        do {
          long_result = longStack_2c8;
          node_root = bufferPtr_308;
          int_result = intStack_374;
          ptr_uint_var = &g_system_data_variable3;
          if ((void *)bufferPtr_308[longStack_2c8 * 4 + 1] != (void *)0x0) {
            ptr_uint_var = (void *)bufferPtr_308[longStack_2c8 * 4 + 1];
          }
          long_result = strrchr(ptr_uint_var,0x2f);
          if (long_result == 0) {
            ptr_uint_var = &g_system_data_variable3;
            if ((void *)node_root[long_result * 4 + 1] != (void *)0x0) {
              ptr_uint_var = (void *)node_root[long_result * 4 + 1];
            }
          }
          else {
            ptr_uint_var = (void *)(long_result + 1);
          }
          ptr_uint_var = (void *)strchr(ptr_uint_var,0x2e);
          if (ptr_uint_var == (void *)0x0) {
            ptr_uint_var = &g_system_data_variable3;
            if ((void *)node_root[long_result * 4 + 1] != (void *)0x0) {
              ptr_uint_var = (void *)node_root[long_result * 4 + 1];
            }
            ptr_uint_var = ptr_uint_var + *(int *)(node_root + long_result * 4 + 2);
          }
          if ((longlong)ptr_uint_var - (longlong)ptr_uint_var != 0) {
                    // WARNING: Subroutine does not return
            memcpy(&uintStack_268,ptr_uint_var,(longlong)ptr_uint_var - (longlong)ptr_uint_var);
          }
                    // WARNING: Ignoring partial resolution of indirect
          uintStack_268._0_1_ = 0;
          uint_result = 0;
          uint_result = 0;
          system_buffer_ptr_330 = &resourcePoolPointer;
          uintStack_318 = 0;
          system_buffer_ptr_328 = (void *)0x0;
          uintStack_320 = 0;
          long_result = -1;
          do {
            long_result = long_result;
            long_result = long_result + 1;
          } while (*(char *)((longlong)&uintStack_268 + long_result + 1) != '\0');
          if ((int)(long_result + 1) != 0) {
            int_result = (int)long_result + 2;
            int_result = int_result;
            if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
              int_result = SYSTEM_DATA_COMPARE_SIZE;
            }
            system_buffer_ptr_328 = (void *)AllocateSystemResource(systemMemoryPool,(longlong)int_result,0x13);
            *system_buffer_ptr_328 = 0;
            uint_result = (ulonglong)system_buffer_ptr_328 & 0xffffffffffc00000;
            if (uint_result != 0) {
              long_result = ((longlong)system_buffer_ptr_328 - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50 + 0x80 + uint_result;
              node_root1 = (uint *)(long_result - (ulonglong)*(uint *)(long_result + 4));
              if ((*(byte *)((longlong)node_root1 + 0xe) & 2) == 0) {
                uint_result = node_root1[7];
                if (0x3ffffff < uint_result) {
                  uint_result = *node_root1 << SYSTEM_DATA_COMPARE_SIZE;
                }
              }
              else {
                uint_result = node_root1[7];
                if (uint_result < 0x4000000) {
                  uint_result = (ulonglong)uint_result;
                }
                else {
                  uint_result = (ulonglong)*node_root1 << SYSTEM_DATA_COMPARE_SIZE;
                }
                if (0x3ffffff < uint_result) {
                  uint_result = *node_root1 << SYSTEM_DATA_COMPARE_SIZE;
                }
                uint_result = uint_result - (int)(((longlong)system_buffer_ptr_328 -
                                        (((longlong)((longlong)node_root1 + (-0x80 - uint_result)) / 0x50) *
                                         SYSTEM_DATA_COMPARE_SIZE000 + uint_result)) % uint_result);
              }
            }
            uintStack_318 = CONCAT44(uintStack_318._4_4_,uint_result);
                    // WARNING: Subroutine does not return
            memcpy(system_buffer_ptr_328,&uintStack_268,int_result);
          }
          uintStack_320 = 0;
          system_pointer_chain4 = &pppppbufferPtr_360;
          for (system_pointer_chain = (uint64_t *******)pppppbufferPtr_350;
              system_pointer_chain != (uint64_t *******)0x0;
              system_pointer_chain = (uint64_t *******)system_pointer_chain[1]) {
            system_pointer_chain4 = system_pointer_chain;
          }
          if ((system_pointer_chain4 == &pppppsystem_buffer_ptr_360) ||
             (long_result = long_result, *(int *)(system_pointer_chain4 + 6) != 0)) {
            if ((system_pointer_chain4 != (uint64_t *******)pppppsystem_buffer_ptr_360) &&
               (system_pointer_chain4 != &pppppsystem_buffer_ptr_360)) {
              DestroySystemHandle(system_pointer_chain4);
            }
            handle_validation_flag = true;
            system_pointer_chain4 = &pppppbufferPtr_360;
            system_pointer_chain = (uint64_t *******)pppppbufferPtr_350;
            while (system_pointer_chain != (uint64_t *******)0x0) {
              handle_validation_flag = *(int *)(system_pointer_chain + 6) != 0;
              system_pointer_chain4 = system_pointer_chain;
              if (handle_validation_flag) {
                system_pointer_chain = (uint64_t *******)system_pointer_chain[1];
              }
              else {
                system_pointer_chain = (uint64_t *******)*system_pointer_chain;
              }
            }
            long_result = longStack_2c8;
            int_result = intStack_374;
            if (handle_validation_flag) {
              if (system_pointer_chain4 == (uint64_t *******)pppppsystem_buffer_ptr_358) {
                if ((system_pointer_chain4 != &pppppsystem_buffer_ptr_360) && (*(int *)(system_pointer_chain4 + 6) == 0)) {
                  uint_result = 1;
                }
                long_result = AllocateSystemResource(systemMemoryPool,0x60,(uint8_t)uintStack_338);
                system_buffer_ptr_2b0 = (uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
                *system_buffer_ptr_2b0 = &globalSystemPointerData;
                *(uint64_t *)(long_result + 0x28) = 0;
                *(uint32_t *)(long_result + 0x30) = 0;
                *system_buffer_ptr_2b0 = &resourcePoolPointer;
                *(uint64_t *)(long_result + 0x38) = 0;
                *(uint64_t *)(long_result + 0x28) = 0;
                *(uint32_t *)(long_result + 0x30) = 0;
                system_buffer_ptr_2a8 = bufferPtr_2b0;
                ConfigureSystemParameters(system_buffer_ptr_2b0,0);
                system_buffer_ptr_2a0 = (uint64_t *)(long_result + 0x40);
                *system_buffer_ptr_2a0 = &globalSystemPointerData;
                *(uint64_t *)(long_result + 0x48) = 0;
                *(uint32_t *)(long_result + 0x50) = 0;
                *system_buffer_ptr_2a0 = &resourcePoolPointer;
                *(uint64_t *)(long_result + 0x58) = 0;
                *(uint64_t *)(long_result + 0x48) = 0;
                *(uint32_t *)(long_result + 0x50) = 0;
                    // WARNING: Subroutine does not return
                CreateSystemHandle(long_result,system_pointer_chain4,&pppppnew_var,uint_result);
              }
              system_pointer_chain4 = (uint64_t *******)InitializeSystemHandle(system_pointer_chain4);
              long_result = longStack_2c8;
              int_result = intStack_374;
            }
          }
          uint_result = *(uint *)(node_root + long_result * 4 + 2);
          uint_result = (ulonglong)uint_result;
          if (node_root[long_result * 4 + 1] != 0) {
            ConfigureSystemParameters(system_pointer_chain4 + 8,uint_result);
          }
          if (uint_result != 0) {
                    // WARNING: Subroutine does not return
            memcpy(system_pointer_chain4[9],node_root[long_result * 4 + 1],uint_result);
          }
          *(uint32_t *)(system_pointer_chain4 + 10) = 0;
          if (system_pointer_chain4[9] != (uint64_t ******)0x0) {
            *(uint8_t *)(uint_result + (longlong)system_pointer_chain4[9]) = 0;
          }
          *(uint32_t *)((longlong)system_pointer_chain4 + 0x5c) =
               *(uint32_t *)((longlong)node_root + long_result * SYSTEM_NODE_HEADER_SIZE + 0x1c);
          system_buffer_ptr_328 = (void *)0x0;
          uintStack_318 = uintStack_318 & 0xffffffff00000000;
          system_buffer_ptr_330 = &globalSystemPointerData;
          intStack_374 = int_result + 1;
          longStack_2c8 = long_result + 1;
          node_root = bufferPtr_308;
          ptr_uint_var = bufferPtr_308;
          ptr_uint_var = bufferPtr_300;
          int_result = intStack_370;
          long_result = longStack_368;
        } while ((ulonglong)(longlong)intStack_374 < uintStack_2c0);
      }
      for (; node_current = new_var, ptr_uint_var = new_var, node_root != bufferPtr_300; node_root = node_root + 4)
      {
        system_buffer_ptr_308 = ptr_uint_var;
        system_buffer_ptr_300 = ptr_uint_var;
        (**(code **)*node_root)(node_root,0);
        ptr_uint_var = bufferPtr_308;
        ptr_uint_var = bufferPtr_300;
        system_buffer_ptr_300 = node_current;
        system_buffer_ptr_308 = ptr_uint_var;
      }
      if (system_buffer_ptr_308 != (uint64_t *)0x0) {
        system_buffer_ptr_308 = ptr_uint_var;
        system_buffer_ptr_300 = ptr_uint_var;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(ptr_uint_var);
      }
      system_buffer_ptr_2e8 = &resourcePoolPointer;
      if (longStack_2e0 != 0) {
        system_buffer_ptr_308 = ptr_uint_var;
        system_buffer_ptr_300 = ptr_uint_var;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      longStack_2e0 = 0;
      uintStack_2d0 = 0;
      system_buffer_ptr_2e8 = &globalSystemPointerData;
      intStack_370 = int_result + 1;
      longStack_368 = long_result + 1;
      long_result = *(longlong *)(longStack_2b8 + 0x8a8);
      system_buffer_ptr_308 = ptr_uint_var;
      system_buffer_ptr_300 = ptr_uint_var;
    } while ((ulonglong)(longlong)intStack_370 <
             (ulonglong)(*(longlong *)(longStack_2b8 + 0x8b0) - long_result >> 5));
  }
  uintStack_48 = 0x3f8000003f800000;
  uintStack_40 = 0x3f000000;
  uintStack_3c = 0;
  if ((uint64_t *******)pppppsystem_buffer_ptr_358 != &pppppsystem_buffer_ptr_360) {
    long_result = longStack_310 + 0x150;
    system_pointer_chain4 = (uint64_t *******)pppppbufferPtr_358;
    long_result = longStack_310;
    longStack_368 = long_result;
    do {
      long_ptr = (longlong *)ProcessSystemData(long_result,&bufferPtr_2a0system_buffer_ptr_2a0,system_pointer_chain4 + 4);
      if (*long_ptr != long_result) {
        handle_validation_flag = false;
        uint_result = 0;
        long_result = *(longlong *)(long_result + 0xc0);
        uint_result = uint_result;
        if (*(longlong *)(long_result + 200) - long_result >> 3 != 0) {
          do {
            long_result = *(longlong *)(long_result + uint_result);
            system_buffer_ptr_398 = &resourcePoolPointer;
            uintStack_380 = 0;
            system_buffer_ptr_390 = (uint8_t *)0x0;
            uintStack_388 = 0;
            if (*(int *)(long_result + 0xb8) != 0) {
              int_result = *(int *)(long_result + 0xb8) + 1;
              if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
                int_result = SYSTEM_DATA_COMPARE_SIZE;
              }
              system_buffer_ptr_390 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)int_result,0x13);
              *system_buffer_ptr_390 = 0;
              uint_result = (ulonglong)system_buffer_ptr_390 & 0xffffffffffc00000;
              if (uint_result == 0) {
                uint_result = 0;
              }
              else {
                long_result = ((longlong)system_buffer_ptr_390 - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50 + 0x80 + uint_result;
                node_root1 = (uint *)(long_result - (ulonglong)*(uint *)(long_result + 4));
                if ((*(byte *)((longlong)node_root1 + 0xe) & 2) == 0) {
                  uint_result = node_root1[7];
                  if (0x3ffffff < uint_result) {
                    uint_result = *node_root1 << SYSTEM_DATA_COMPARE_SIZE;
                  }
                }
                else {
                  uint_result = node_root1[7];
                  if (uint_result < 0x4000000) {
                    uint_result = (ulonglong)uint_result;
                  }
                  else {
                    uint_result = (ulonglong)*node_root1 << SYSTEM_DATA_COMPARE_SIZE;
                  }
                  if (0x3ffffff < uint_result) {
                    uint_result = *node_root1 << SYSTEM_DATA_COMPARE_SIZE;
                  }
                  uint_result = uint_result - (int)(((longlong)system_buffer_ptr_390 -
                                          (((longlong)((longlong)node_root1 + (-0x80 - uint_result)) / 0x50)
                                           * SYSTEM_DATA_COMPARE_SIZE000 + uint_result)) % uint_result);
                }
              }
              uintStack_380 = CONCAT44(uintStack_380._4_4_,uint_result);
              if (*(int *)(long_result + 0xb8) != 0) {
                    // WARNING: Subroutine does not return
                memcpy(system_buffer_ptr_390,*(uint64_t *)(long_result + 0xb0),*(int *)(long_result + 0xb8) + 1);
              }
            }
            if (*(longlong *)(long_result + 0xb0) != 0) {
              uintStack_388 = 0;
              if (system_buffer_ptr_390 != (uint8_t *)0x0) {
                *system_buffer_ptr_390 = 0;
              }
              uintStack_380 = uintStack_380 & 0xffffffff;
            }
            uintStack_378 = uintStack_378 & 0xfffffffd;
            system_buffer_ptr_398 = &resourcePoolPointer;
            if (system_buffer_ptr_390 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
              ProcessSystemOperation(system_buffer_ptr_390);
            }
            system_buffer_ptr_390 = (uint8_t *)0x0;
            uintStack_380 = uintStack_380 & 0xffffffff00000000;
            system_buffer_ptr_398 = &globalSystemPointerData;
            long_result = longStack_310;
            long_result = longStack_368;
            if (*(int *)(system_pointer_chain4 + 6) == 0) {
              handle_validation_flag = true;
              break;
            }
            uint_result = (int)uint_result + 1;
            uint_result = (ulonglong)uint_result;
            uint_result = uint_result + 8;
            long_result = *(longlong *)(longStack_310 + 0xc0);
          } while ((ulonglong)(longlong)(int)uint_result <
                   (ulonglong)(*(longlong *)(longStack_310 + 200) - long_result >> 3));
        }
        if (!handle_validation_flag) {
          uint_result = ValidateModuleHandle(&uintStack_268,system_pointer_chain4 + 8);
          PrepareSystemBuffer(&bufferPtr_330system_buffer_ptr_330,uint_result);
          uintStack_268 = &globalSystemPointerData;
          system_pointer_root = (uint64_t ******)&g_system_data_variable3;
          if (system_pointer_chain4[5] != (uint64_t ******)0x0) {
            system_pointer_root = system_pointer_chain4[5];
          }
          UpdateSystemBuffer(&bufferPtr_30system_buffer_ptr_308,system_pointer_root);
          ptr_uint_var = &g_system_data_variable3;
          if (system_buffer_ptr_328 != (void *)0x0) {
            ptr_uint_var = bufferPtr_328;
          }
          UpdateSystemBuffer(&bufferPtr_2e8system_buffer_ptr_2e8,ptr_uint_var);
          ActivateSystemModule(long_result,&bufferPtr_2e8system_buffer_ptr_2e8,&bufferPtr_30system_buffer_ptr_308,&uintStack_48);
          system_buffer_ptr_2e8 = &resourcePoolPointer;
          if (longStack_2e0 != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          longStack_2e0 = 0;
          uintStack_2d0 = 0;
          system_buffer_ptr_2e8 = &globalSystemPointerData;
          system_buffer_ptr_308 = (uint64_t *)&resourcePoolPointer;
          if (system_buffer_ptr_300 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          system_buffer_ptr_300 = (uint64_t *)0x0;
          uintStack_2f0 = 0;
          system_buffer_ptr_308 = (uint64_t *)&globalSystemPointerData;
          system_buffer_ptr_330 = &resourcePoolPointer;
          if (system_buffer_ptr_328 != (void *)0x0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          system_buffer_ptr_328 = (void *)0x0;
          uintStack_318 = uintStack_318 & 0xffffffff00000000;
          system_buffer_ptr_330 = &globalSystemPointerData;
        }
      }
      system_pointer_chain4 = (uint64_t *******)DestroySystemHandle(system_pointer_chain4);
    } while (system_pointer_chain4 != &pppppsystem_buffer_ptr_360);
  }
  InitializeNetworkSystem(&pppppsystem_buffer_ptr_360);
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_3b8);
}

uint64_t * InitializeSystemDataNode19(uint64_t *handleIdentifier,uint8_t *resourceIdentifier,longlong systemConfig)

{
  byte bool_var;
  bool bool_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint uint_result;
  byte *ptr_byte_var;
  longlong long_result;

  bool_var = true;
  ptr_uint_var = (uint64_t *)handleIdentifier[2];
  ptr_uint_var = handleIdentifier;
  while (ptr_uint_var != (uint64_t *)0x0) {
    ptr_uint_var = ptr_uint_var;
    if (*(int *)(ptr_uint_var + 6) == 0) {
      bool_var = false;
LAB_1800590e2:
      ptr_uint_var = (uint64_t *)*ptr_uint_var;
    }
    else {
      if (*(int *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        bool_var = true;
      }
      else {
        ptr_byte_var = (byte *)ptr_uint_var[5];
        long_result = *(longlong *)(systemConfig + 8) - (longlong)ptr_byte_var;
        do {
          bool_var = *ptr_byte_var;
          uint_result = (uint)ptr_byte_var[long_result];
          if (bool_var != uint_result) break;
          ptr_byte_var = ptr_byte_var + 1;
        } while (uint_result != 0);
        bool_var = 0 < (int)(bool_var - uint_result);
      }
      if (!bool_var) goto LAB_1800590e2;
      ptr_uint_var = (uint64_t *)ptr_uint_var[1];
    }
  }
  ptr_uint_var = ptr_uint_var;
  if (bool_var) {
    if (ptr_uint_var == (uint64_t *)handleIdentifier[1]) {
      *resourceIdentifier = 1;
      return ptr_uint_var;
    }
    ptr_uint_var = (uint64_t *)InitializeSystemHandle(ptr_uint_var);
  }
  if (*(int *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE) != 0) {
    if (*(int *)(ptr_uint_var + 6) != 0) {
      ptr_byte_var = *(byte **)(systemConfig + 8);
      long_result = ptr_uint_var[5] - (longlong)ptr_byte_var;
      do {
        bool_var = *ptr_byte_var;
        uint_result = (uint)ptr_byte_var[long_result];
        if (bool_var != uint_result) break;
        ptr_byte_var = ptr_byte_var + 1;
      } while (uint_result != 0);
      if ((int)(bool_var - uint_result) < 1) goto LAB_1800591a6;
    }
    *resourceIdentifier = 1;
    return ptr_uint_var;
  }
LAB_1800591a6:
  *resourceIdentifier = 0;
  return ptr_uint_var;
}
// void InitializeAudioSystem(longlong *handleIdentifier)

void InitializeAudioSystem(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x548) {
    InitializeSystemDataNode23(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void ConfigureSystemHandles(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ConfigureSystemHandles(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule42(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}

longlong ValidateSystemConfiguration(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  uint uint_result;
  longlong *long_ptr;
  longlong long_result;
  ulonglong uint_result;

  long_result = resourceIdentifier - handleIdentifier >> 5;
  if (0 < long_result) {
    long_ptr = (longlong *)(handleIdentifier + 8);
    handleIdentifier = systemConfig - handleIdentifier;
    do {
      uint_result = *(uint *)(long_ptr + 1);
      uint_result = (ulonglong)uint_result;
      if (*long_ptr != 0) {
        ConfigureSystemParameters(systemConfig,uint_result);
      }
      if (uint_result != 0) {
                    // WARNING: Subroutine does not return
        memcpy(*(uint64_t *)(handleIdentifier + (longlong)long_ptr),*long_ptr,uint_result);
      }
      *(uint32_t *)(handleIdentifier + 8 + (longlong)long_ptr) = 0;
      if (*(longlong *)(handleIdentifier + (longlong)long_ptr) != 0) {
        *(uint8_t *)(uint_result + *(longlong *)(handleIdentifier + (longlong)long_ptr)) = 0;
      }
      long_result = long_result + -1;
      *(uint32_t *)(handleIdentifier + 0x14 + (longlong)long_ptr) = *(uint32_t *)((longlong)long_ptr + 0x14);
      systemConfig = systemConfig + SYSTEM_NODE_HEADER_SIZE;
      long_ptr = long_ptr + 4;
    } while (0 < long_result);
  }
  return systemConfig;
}

longlong SystemFunction_16_4(longlong handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig)

{
  uint uint_result;
  longlong *long_ptr;
  longlong system_RBP;
  longlong system_RSI;
  ulonglong uint_result;

  long_ptr = (longlong *)(handleIdentifier + 8);
  systemConfig = systemConfig - handleIdentifier;
  do {
    uint_result = *(uint *)(long_ptr + 1);
    uint_result = (ulonglong)uint_result;
    if (*long_ptr != 0) {
      ConfigureSystemParameters(system_RSI,uint_result);
    }
    if (uint_result != 0) {
                    // WARNING: Subroutine does not return
      memcpy(*(uint64_t *)(systemConfig + (longlong)long_ptr),*long_ptr,uint_result);
    }
    *(uint32_t *)(systemConfig + 8 + (longlong)long_ptr) = 0;
    if (*(longlong *)(systemConfig + (longlong)long_ptr) != 0) {
      *(uint8_t *)(uint_result + *(longlong *)(systemConfig + (longlong)long_ptr)) = 0;
    }
    system_RBP = system_RBP + -1;
    *(uint32_t *)(systemConfig + 0x14 + (longlong)long_ptr) = *(uint32_t *)((longlong)long_ptr + 0x14);
    system_RSI = system_RSI + SYSTEM_NODE_HEADER_SIZE;
    long_ptr = long_ptr + 4;
  } while (0 < system_RBP);
  return system_RSI;
}
// void SystemFunction_28_4(void)

void SystemFunction_28_4(void)

{
  return;
}

longlong InitializeSystemModule26(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  if (handleIdentifier != resourceIdentifier) {
    do {
      ProcessResourceData(systemConfig,handleIdentifier);
      handleIdentifier = handleIdentifier + SYSTEM_NODE_HEADER_SIZE;
      systemConfig = systemConfig + SYSTEM_NODE_HEADER_SIZE;
    } while (handleIdentifier != resourceIdentifier);
  }
  return systemConfig;
}
// void SystemFunction_39_2(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig)

void SystemFunction_39_2(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig)

{
  if (handleIdentifier != resourceIdentifier) {
                    // WARNING: Subroutine does not return
    memmove(systemConfig,handleIdentifier,resourceIdentifier - handleIdentifier);
  }
  return;
}
// void InitializeSystemModule21(uint64_t *handleIdentifier)

void InitializeSystemModule21(uint64_t *handleIdentifier)

{
  if (handleIdentifier[4] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSystemModule42(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule42(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier == (uint64_t *)0x0) {
    return;
  }
  InitializeSystemModule42(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  InitializeSystemModule59();
  resourceIdentifier[4] = &resourcePoolPointer;
  if (resourceIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[5] = 0;
  *(uint32_t *)(resourceIdentifier + 7) = 0;
  resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(resourceIdentifier);
}
// void InitializeSystemDataNode23(uint64_t *handleIdentifier)

void InitializeSystemDataNode23(uint64_t *handleIdentifier)

{
  ValidateSystemHandle(handleIdentifier + 0x7d,0x58,4,ValidateSystemConfiguration,INVALID_HANDLE_VALUE);
  ValidateSystemHandle(handleIdentifier + 0x51,0x58,4,ValidateSystemConfiguration);
  ValidateSystemHandle(handleIdentifier + 0x11,SYSTEM_NODE_HEADER_SIZE,SYSTEM_DATA_COMPARE_SIZE,InitializeSystemResources);
  handleIdentifier[8] = &resourcePoolPointer;
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[9] = 0;
  *(uint32_t *)(handleIdentifier + 0xb) = 0;
  handleIdentifier[8] = &globalSystemPointerData;
  handleIdentifier[4] = &resourcePoolPointer;
  if (handleIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 7) = 0;
  handleIdentifier[4] = &globalSystemPointerData;
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSystemModule1(uint64_t *handleIdentifier)

void InitializeSystemModule1(uint64_t *handleIdentifier)

{
  InitializeSystemModule59();
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSystemResources(longlong *handleIdentifier)

void InitializeSystemResources(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x50) {
    InitializeAudioMutex(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeInputManagerSystem(longlong *handleIdentifier)

void InitializeInputManagerSystem(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x50) {
    InitializeAudioMutex(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeAudioMutex(uint64_t *handleIdentifier)

void InitializeAudioMutex(uint64_t *handleIdentifier)

{
  handleIdentifier[4] = &resourcePoolPointer;
  if (handleIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 7) = 0;
  handleIdentifier[4] = &globalSystemPointerData;
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSystemComponents(longlong handleIdentifier)

void InitializeSystemComponents(longlong handleIdentifier)

{
  if (*(longlong *)(handleIdentifier + 8) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  _Mtx_destroy_in_situ();
  return;
}

uint64_t * InitializeSystemDataNode18(uint64_t *handleIdentifier,uint64_t *resourceIdentifier,uint64_t *systemConfig)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  longlong long_result;

  if (handleIdentifier != resourceIdentifier) {
    long_result = (longlong)systemConfig - (longlong)handleIdentifier;
    node_root = handleIdentifier + 1;
    do {
      *systemConfig = &globalSystemPointerData;
      *(uint64_t *)(long_result + (longlong)node_root) = 0;
      *(uint32_t *)(long_result + 8 + (longlong)node_root) = 0;
      *systemConfig = &resourcePoolPointer;
      *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + (longlong)node_root) = 0;
      *(uint64_t *)(long_result + (longlong)node_root) = 0;
      *(uint32_t *)(long_result + 8 + (longlong)node_root) = 0;
      *(uint32_t *)(long_result + 8 + (longlong)node_root) = *(uint32_t *)(node_root + 1);
      *(uint64_t *)(long_result + (longlong)node_root) = *node_root;
      *(uint32_t *)(long_result + 0x14 + (longlong)node_root) = *(uint32_t *)((longlong)node_root + 0x14);
      *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + (longlong)node_root) = *(uint32_t *)(node_root + 2);
      *(uint32_t *)(node_root + 1) = 0;
      *node_root = 0;
      node_root[2] = 0;
      systemConfig = systemConfig + 4;
      ptr_uint_var = node_root + 3;
      node_root = node_root + 4;
    } while (ptr_uint_var != resourceIdentifier);
  }
  return systemConfig;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeUISystem(longlong *handleIdentifier,uint64_t resourceIdentifier)
void InitializeUISystem(longlong *handleIdentifier,uint64_t resourceIdentifier)

{
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  longlong long_result;

  long_result = handleIdentifier[1];
  long_result = *handleIdentifier;
  long_result = long_result - long_result >> 5;
  if (long_result == 0) {
    long_result = 1;
  }
  else {
    long_result = long_result * 2;
    if (long_result == 0) {
      long_result = 0;
      goto LAB_180059885;
    }
  }
  long_result = AllocateSystemResource(systemMemoryPool,long_result << 5,(char)handleIdentifier[3]);
  long_result = handleIdentifier[1];
  long_result = *handleIdentifier;
LAB_180059885:
  long_result = InitializeSystemDataNode18(long_result,long_result,long_result);
  ProcessResourceData(long_result,resourceIdentifier);
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != ptr_uint_var) {
    do {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
      ptr_uint_var = ptr_uint_var + 4;
    } while (ptr_uint_var != ptr_uint_var);
    ptr_uint_var = (uint64_t *)*handleIdentifier;
  }
  if (ptr_uint_var == (uint64_t *)0x0) {
    *handleIdentifier = long_result;
    handleIdentifier[2] = long_result * SYSTEM_NODE_HEADER_SIZE + long_result;
    handleIdentifier[1] = long_result + SYSTEM_NODE_HEADER_SIZE;
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}

uint64_t *
InitializeSystemModule31(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x28,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeGameSystem(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeGameSystem(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(resourceIdentifier + long_result) != '\0');
  if ((int)long_result < SYSTEM_DATA_COMPARE_SIZE) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x000180059977. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),SYSTEM_DATA_COMPARE_SIZE);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,SYSTEM_DATA_COMPARE_SIZE,resourceIdentifier);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}
// void InitializeSystemModule59(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

void InitializeSystemModule59(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  if (systemConfig + 1 < SYSTEM_DATA_COMPARE_SIZE) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint8_t **)(handleIdentifier + 8),resourceIdentifier,(longlong)systemConfig);
  }
  **(uint8_t **)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void SystemFunction_7_1(void)

void SystemFunction_7_1(void)

{
                    // WARNING: Subroutine does not return
  memcpy();
}
// void SystemFunction_10_8(uint8_t *handleIdentifier)

void SystemFunction_10_8(uint8_t *handleIdentifier)

{
  longlong system_RDI;

  *handleIdentifier = 0;
  *(uint32_t *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ValidateSystemConfiguration(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void ValidateSystemConfiguration(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint8_t localBuffer_98 [32];
  uint64_t uintStack_78;
  void *system_buffer_ptr_70;
  uint8_t *system_buffer_ptr_68;
  uint32_t uintStack_60;
  uint8_t localBuffer_58 [16];
  ulonglong uintStack_48;

  uintStack_78 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_98;
  system_buffer_ptr_70 = &g_system_data_nodeconfig;
  system_buffer_ptr_68 = localBuffer_58;
  uintStack_60 = 0;
  localBuffer_58[0] = 0;
  long_result = strstr(*(uint64_t *)(handleIdentifier + 8));
  if (long_result != 0) {
    long_result = -1;
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    do {
      long_result = long_result + 1;
    } while (*(char *)(long_result + systemConfig) != '\0');
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_68,*(longlong *)(handleIdentifier + 8),long_result - *(longlong *)(handleIdentifier + 8));
  }
  system_buffer_ptr_70 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_98);
}
// void InitializeUISystem(uint64_t *handleIdentifier)

void InitializeUISystem(uint64_t *handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  ulonglong uint_result;

  if (handleIdentifier == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)handleIdentifier & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)handleIdentifier - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *handleIdentifier = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = handleIdentifier;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          handleIdentifier,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule42(void)
void InitializeSystemModule42(void)

{
  longlong long_result;

  long_result = AllocateSystemResource(systemMemoryPool,0x1ae8,10);
  if (long_result == 0) {
    return;
  }
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE0) = 0;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE8) = 0;
  *(uint32_t *)(long_result + 0x130) = 0;
  *(uint64_t *)(long_result + 0x138) = 0;
  *(uint16_t *)(long_result + 0x140) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x248) = 0;
  *(uint64_t *)(long_result + 0x250) = 0;
  *(uint32_t *)(long_result + 0x278) = 0;
  *(uint64_t *)(long_result + 0x280) = 0;
  *(uint16_t *)(long_result + 0x288) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x390) = 0;
  *(uint64_t *)(long_result + 0x398) = 0;
  *(uint32_t *)(long_result + 0x3c0) = 0;
  *(uint64_t *)(long_result + 0x3c8) = 0;
  *(uint16_t *)(long_result + 0x3d0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x4d8) = 0;
  *(uint64_t *)(long_result + 0x4e0) = 0;
  *(uint32_t *)(long_result + 0x508) = 0;
  *(uint64_t *)(long_result + 0x510) = 0;
  *(uint16_t *)(long_result + 0x518) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x620) = 0;
  *(uint64_t *)(long_result + 0x628) = 0;
  *(uint32_t *)(long_result + 0x650) = 0;
  *(uint64_t *)(long_result + 0x658) = 0;
  *(uint16_t *)(long_result + 0x660) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x768) = 0;
  *(uint64_t *)(long_result + 0x770) = 0;
  *(uint32_t *)(long_result + 0x798) = 0;
  *(uint64_t *)(long_result + 0x7a0) = 0;
  *(uint16_t *)(long_result + 0x7a8) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x8b0) = 0;
  *(uint64_t *)(long_result + 0x8b8) = 0;
  *(uint32_t *)(long_result + 0x8e0) = 0;
  *(uint64_t *)(long_result + 0x8e8) = 0;
  *(uint16_t *)(long_result + 0x8f0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x9f8) = 0;
  *(uint64_t *)(long_result + 0xa00) = 0;
  *(uint32_t *)(long_result + 0xa28) = 0;
  *(uint64_t *)(long_result + 0xa30) = 0;
  *(uint16_t *)(long_result + 0xa38) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0xb40) = 0;
  *(uint64_t *)(long_result + 0xb48) = 0;
  *(uint32_t *)(long_result + 0xb70) = 0;
  *(uint64_t *)(long_result + 0xb78) = 0;
  *(uint16_t *)(long_result + 0xb80) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0xc88) = 0;
  *(uint64_t *)(long_result + 0xc90) = 0;
  *(uint32_t *)(long_result + 0xcb8) = 0;
  *(uint64_t *)(long_result + 0xcc0) = 0;
  *(uint16_t *)(long_result + 0xcc8) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0xdd0) = 0;
  *(uint64_t *)(long_result + 0xdd8) = 0;
  *(uint32_t *)(long_result + 0xe00) = 0;
  *(uint64_t *)(long_result + 0xe08) = 0;
  *(uint16_t *)(long_result + 0xe10) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0xf18) = 0;
  *(uint64_t *)(long_result + 0xf20) = 0;
  *(uint32_t *)(long_result + 0xf48) = 0;
  *(uint64_t *)(long_result + 0xf50) = 0;
  *(uint16_t *)(long_result + 0xf58) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE60) = 0;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE68) = 0;
  *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE90) = 0;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE98) = 0;
  *(uint16_t *)(long_result + SYSTEM_DATA_COMPARE_SIZEa0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x11a8) = 0;
  *(uint64_t *)(long_result + 0x11b0) = 0;
  *(uint32_t *)(long_result + 0x11d8) = 0;
  *(uint64_t *)(long_result + 0x11e0) = 0;
  *(uint16_t *)(long_result + 0x11e8) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x12f0) = 0;
  *(uint64_t *)(long_result + 0x12f8) = 0;
  *(uint32_t *)(long_result + 0x1320) = 0;
  *(uint64_t *)(long_result + 0x1328) = 0;
  *(uint16_t *)(long_result + 0x1330) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x1438) = 0;
  *(uint64_t *)(long_result + 0x1440) = 0;
  *(uint32_t *)(long_result + 0x1468) = 0;
  *(uint64_t *)(long_result + 0x1470) = 0;
  *(uint16_t *)(long_result + 0x1478) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x1580) = 0;
  *(uint64_t *)(long_result + 0x1588) = 0;
  *(uint32_t *)(long_result + 0x15b0) = 0;
  *(uint64_t *)(long_result + 0x15b8) = 0;
  *(uint16_t *)(long_result + 0x15c0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x16c8) = 0;
  *(uint64_t *)(long_result + 0x16d0) = 0;
  *(uint32_t *)(long_result + 0x16f8) = 0;
  *(uint64_t *)(long_result + 0x1700) = 0;
  *(uint16_t *)(long_result + 0x1708) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x1810) = 0;
  *(uint64_t *)(long_result + 0x1818) = 0;
  *(uint32_t *)(long_result + 0x1840) = 0;
  *(uint64_t *)(long_result + 0x1848) = 0;
  *(uint16_t *)(long_result + 0x1850) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + NODE_INITIALIZED_OFFSET58) = 0;
  *(uint64_t *)(long_result + NODE_INITIALIZED_OFFSET60) = 0;
  *(uint32_t *)(long_result + NODE_INITIALIZED_OFFSET88) = 0;
  *(uint64_t *)(long_result + NODE_INITIALIZED_OFFSET90) = 0;
  *(uint16_t *)(long_result + NODE_INITIALIZED_OFFSET98) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x1aa0) = 0;
  *(uint64_t *)(long_result + 0x1aa8) = 0;
  *(uint32_t *)(long_result + 0x1ad0) = 0;
  *(uint64_t *)(long_result + 0x1ad8) = 0;
  *(uint16_t *)(long_result + 0x1ae0) = SYSTEM_DATA_COMPARE_SIZE0;
  return;
}
// void InitializeEventSystem(longlong *handleIdentifier)

void InitializeEventSystem(longlong *handleIdentifier)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;

  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != (uint64_t *)0x0) {
    if ((uint64_t *)ptr_uint_var[3] != (uint64_t *)0x0) {
      *(uint64_t *)ptr_uint_var[3] = 0;
    }
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  if ((handleIdentifier[6] != 0) && (*(longlong *)(handleIdentifier[6] + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = handleIdentifier[5];
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x141);
    long_result = *(longlong *)(long_result + 0x138);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = (uint64_t *)handleIdentifier[3];
  if (ptr_uint_var == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void SystemFunction_35_6(longlong *handleIdentifier)

void SystemFunction_35_6(longlong *handleIdentifier)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;

  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != (uint64_t *)0x0) {
    if ((uint64_t *)ptr_uint_var[3] != (uint64_t *)0x0) {
      *(uint64_t *)ptr_uint_var[3] = 0;
    }
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  if ((handleIdentifier[6] != 0) && (*(longlong *)(handleIdentifier[6] + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = handleIdentifier[5];
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x141);
    long_result = *(longlong *)(long_result + 0x138);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = (uint64_t *)handleIdentifier[3];
  if (ptr_uint_var == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void SystemFunction_37_7(void)

void SystemFunction_37_7(void)

{
  uint64_t *system_RBX;

  if ((uint64_t *)system_RBX[3] != (uint64_t *)0x0) {
    *(uint64_t *)system_RBX[3] = 0;
  }
  (**(code **)*system_RBX)();
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_46_3(void)

void SystemFunction_46_3(void)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong system_RSI;
  ulonglong uint_result;

  if ((*(longlong *)(system_RSI + 0x30) != 0) &&
     (*(longlong *)(*(longlong *)(system_RSI + 0x30) + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = *(longlong *)(system_RSI + 0x28);
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x141);
    long_result = *(longlong *)(long_result + 0x138);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = *(uint64_t **)(system_RSI + 0x18);
  if (ptr_uint_var != (uint64_t *)0x0) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializeSystemDataNode31(uint64_t *handleIdentifier)

void InitializeSystemDataNode31(uint64_t *handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  ulonglong uint_result;

  uint_result = (ulonglong)handleIdentifier & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)handleIdentifier - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *handleIdentifier = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = handleIdentifier;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          handleIdentifier,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void ProcessSystemData(longlong *handleIdentifier)

void ProcessSystemData(longlong *handleIdentifier)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;

  _Mtx_destroy_in_situ();
  _Cnd_destroy_in_situ();
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != (uint64_t *)0x0) {
    if ((uint64_t *)ptr_uint_var[3] != (uint64_t *)0x0) {
      *(uint64_t *)ptr_uint_var[3] = 0;
    }
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  if ((handleIdentifier[6] != 0) && (*(longlong *)(handleIdentifier[6] + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = handleIdentifier[5];
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x141);
    long_result = *(longlong *)(long_result + 0x138);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = (uint64_t *)handleIdentifier[3];
  if (ptr_uint_var == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeRenderSystem(longlong handleIdentifier)

void InitializeRenderSystem(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  node_root = *(uint64_t **)(handleIdentifier + 0x18);
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeSystemDataNode19(longlong handleIdentifier)

void InitializeSystemDataNode19(longlong handleIdentifier)

{
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result == 0) {
    *(uint64_t *)(handleIdentifier + 0x18) = 0;
  }
  else {
    do {
      long_result = *(longlong *)(long_result + uint_result * 8);
      if (long_result != 0) {
        if (*(longlong *)(long_result + 0x18) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    *(uint64_t *)(handleIdentifier + 0x18) = 0;
  }
  return;
}
// void ConfigureSystemSettings(longlong handleIdentifier)

void ConfigureSystemSettings(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  InitializeSystemDataNode19();
  if ((1 < *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE)) &&
     (node_root = *(uint64_t **)(handleIdentifier + 8), node_root != (uint64_t *)0x0)) {
    uint_result = (ulonglong)node_root & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            node_root,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializeSystemTimer(longlong handleIdentifier)

void InitializeSystemTimer(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  InitializeSystemDataNode19();
  if ((1 < *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE)) &&
     (node_root = *(uint64_t **)(handleIdentifier + 8), node_root != (uint64_t *)0x0)) {
    uint_result = (ulonglong)node_root & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            node_root,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializePhysicsSystem(longlong handleIdentifier)

void InitializePhysicsSystem(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  InitializeSystemDataNode19();
  if ((1 < *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE)) &&
     (node_root = *(uint64_t **)(handleIdentifier + 8), node_root != (uint64_t *)0x0)) {
    uint_result = (ulonglong)node_root & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            node_root,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}

uint64_t InitializeResourceSystem(uint64_t handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeInputManagerSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xc0,systemConfig,systemFlags,uint_result);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule32(uint64_t *handleIdentifier)
void InitializeSystemModule32(uint64_t *handleIdentifier)

{
  ulonglong uint_result;
  uint64_t uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  uint64_t *node_previous;
  longlong long_result;

  uint_result = 0;
  *handleIdentifier = 0;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  handleIdentifier[2] = 0;
  handleIdentifier[5] = 0;
  ptr_uint_var = handleIdentifier + 0xb;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  node_previous = ptr_uint_var;
  do {
    FreeSystemMemory(node_previous);
    node_previous = node_previous + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  *(uint64_t *)((longlong)handleIdentifier + 0x25c) = 0;
  *(uint32_t *)(handleIdentifier + 0x4b) = 0;
  handleIdentifier[7] = 0;
  handleIdentifier[8] = SYSTEM_NODE_HEADER_SIZE;
  handleIdentifier[9] = ptr_uint_var;
  do {
    *(uint32_t *)ptr_uint_var = 0;
    ptr_uint_var = ptr_uint_var + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  handleIdentifier[10] = 0;
  handleIdentifier[6] = handleIdentifier + 8;
  handleIdentifier[4] = 0x15;
  long_result = InitializeSystemModule42();
  handleIdentifier[3] = long_result;
  if (long_result == 0) {
    handleIdentifier[4] = 0;
    uint_result = uint_result;
  }
  else {
    uint_result = handleIdentifier[4];
  }
  uint_result = uint_result;
  if (uint_result != 0) {
    do {
      *(uint8_t *)(uint_result + 0x141 + handleIdentifier[3]) = 0;
      uint_result = uint_result + 1;
      uint_result = uint_result + 0x148;
    } while (uint_result < (ulonglong)handleIdentifier[4]);
  }
  _Cnd_init_in_situ();
  _Mtx_init_in_situ(handleIdentifier + 0x56,2);
  handleIdentifier[0x60] = 0;
  handleIdentifier[0x61] = 0;
  handleIdentifier[0x62] = 0;
  *(uint32_t *)(handleIdentifier + 99) = 3;
  handleIdentifier[0x65] = 0;
  *(uint32_t *)(handleIdentifier + 0x6a) = 0x3f800000;
  *(uint64_t *)((longlong)handleIdentifier + 0x354) = 0x40000000;
  *(uint32_t *)((longlong)handleIdentifier + 0x35c) = 3;
  handleIdentifier[0x68] = 1;
  handleIdentifier[0x67] = &g_system_data_variable0;
  handleIdentifier[0x69] = 0;
  *(uint32_t *)(handleIdentifier + 0x6b) = 0;
  uint_result = AllocateSystemMemory(systemMemoryPool,0xc0,8,4);
                    // WARNING: Subroutine does not return
  memset(uint_result,0,0xc0);
}

uint64_t * InitializeSystemModule43(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  InitializeSystemDataNode19(handleIdentifier + 0xa4);
  ValidateSystemConfiguration(handleIdentifier + 0x8c);
  InitializeSystemDataNode19(handleIdentifier + 0x7e);
  InitializeSystemDataNode19(handleIdentifier + 0x70);
  InitializeSystemDataNode19(handleIdentifier + 0x62);
  InitializeSystemDataNode19(handleIdentifier + 0x54);
  InitializeSystemDataNode19(handleIdentifier + 0x46);
  InitializeSystemDataNode19(handleIdentifier + 0x38);
  InitializeSystemDataNode19(handleIdentifier + 0x2a);
  InitializeSystemDataNode19(handleIdentifier + 0x1c);
  InitializeSystemDataNode30(handleIdentifier);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x590);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_92_0(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void SystemFunction_92_0(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint32_t uint_result;
  uint64_t *node_root;
  void *system_buffer_ptr_50;
  uint64_t *system_buffer_ptr_48;
  uint32_t uintStack_40;
  uint64_t uintStack_38;

  system_buffer_ptr_50 = &resourcePoolPointer;
  uintStack_38 = 0;
  system_buffer_ptr_48 = (uint64_t *)0x0;
  uintStack_40 = 0;
  node_root = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13,systemFlags,INVALID_HANDLE_VALUE);
  *(uint8_t *)node_root = 0;
  system_buffer_ptr_48 = node_root;
  uint_result = ValidateResourceAllocation(node_root);
  uintStack_38 = CONCAT44(uintStack_38._4_4_,uint_result);
  *node_root = 0x6320726f74696445;
  *(uint32_t *)(node_root + 1) = 0x69666e6f;
  *(uint16_t *)((longlong)node_root + 0xc) = 0x67;
  uintStack_40 = 0xd;
  InitializeSystemModule1(handleIdentifier,&bufferPtr_50system_buffer_ptr_50);
  system_buffer_ptr_50 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(node_root);
}

uint64_t InitializeSystemModule59(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  ConfigureSystemHandles();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xa90);
  }
  return handleIdentifier;
}
// void ConfigureSystemHandles(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ConfigureSystemHandles(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &g_system_global_variable8;
  InitializeSystemDataNode28(handleIdentifier + 0x143);
  InitializeSystemDataNode28(handleIdentifier + 0x134);
  InitializeSystemDataNode19(handleIdentifier + 0x126);
  InitializeSystemDataNode19(handleIdentifier + 0x118);
  InitializeSystemDataNode19(handleIdentifier + SYSTEM_DATA_COMPARE_SIZEa);
  InitializeSystemDataNode19(handleIdentifier + 0xfc);
  InitializeSystemDataNode19(handleIdentifier + 0xee);
  InitializeSystemDataNode19(handleIdentifier + 0xe0);
  InitializeSystemDataNode19(handleIdentifier + 0xd2);
  InitializeSystemDataNode19(handleIdentifier + 0xc4);
  InitializeSystemDataNode19(handleIdentifier + 0xb6);
  InitializeSystemDataNode19(handleIdentifier + 0xa8);
  InitializeSystemDataNode19(handleIdentifier + 0x9a);
  InitializeSystemDataNode19(handleIdentifier + 0x8c);
  InitializeSystemDataNode19(handleIdentifier + 0x7e);
  InitializeSystemDataNode19(handleIdentifier + 0x70);
  InitializeSystemDataNode19(handleIdentifier + 0x62);
  InitializeSystemDataNode19(handleIdentifier + 0x54);
  InitializeSystemDataNode19(handleIdentifier + 0x46);
  InitializeSystemDataNode19(handleIdentifier + 0x38);
  InitializeSystemDataNode19(handleIdentifier + 0x2a);
  InitializeSystemDataNode19(handleIdentifier + 0x1c);
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[0x18] = &resourcePoolPointer;
  if (handleIdentifier[NODE_INITIALIZED_OFFSET] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[NODE_INITIALIZED_OFFSET] = 0;
  *(uint32_t *)(handleIdentifier + 0x1b) = 0;
  handleIdentifier[0x18] = &globalSystemPointerData;
  InitializeSystemDataNode28(handleIdentifier + 0x12,handleIdentifier[0x14],systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  if (handleIdentifier[0xd] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// void InitializeSystemModule21(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule21(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (*(code **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != (code *)0x0) {
    (**(code **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE))(handleIdentifier,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  return;
}
// void initialize_graphics_subsystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void initialize_graphics_subsystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (*(code **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != (code *)0x0) {
    (**(code **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE))(handleIdentifier,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  return;
}
// void InitializeSystemDataNode28(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode28(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (*(code **)(handleIdentifier + 0x68) != (code *)0x0) {
    (**(code **)(handleIdentifier + 0x68))(handleIdentifier + 0x58,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  *(uint64_t *)(handleIdentifier + 0x30) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x38) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x38) = 0;
  *(uint32_t *)(handleIdentifier + 0x48) = 0;
  *(uint64_t *)(handleIdentifier + 0x30) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x18) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  *(uint32_t *)(handleIdentifier + 0x28) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = &globalSystemPointerData;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAudioSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeAudioSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint32_t uint_result;
  uint32_t *node_root;
  void *system_buffer_ptr_50;
  uint32_t *system_buffer_ptr_48;
  uint32_t uintStack_40;
  uint64_t uintStack_38;

  system_buffer_ptr_50 = &resourcePoolPointer;
  uintStack_38 = 0;
  system_buffer_ptr_48 = (uint32_t *)0x0;
  uintStack_40 = 0;
  node_root = (uint32_t *)AllocateSystemResource(systemMemoryPool,0x13,0x13,systemFlags,INVALID_HANDLE_VALUE);
  *(uint8_t *)node_root = 0;
  system_buffer_ptr_48 = node_root;
  uint_result = ValidateResourceAllocation(node_root);
  uintStack_38 = CONCAT44(uintStack_38._4_4_,uint_result);
  *node_root = 0x65766544;
  node_root[1] = 0x6d706f6c;
  node_root[2] = SYSTEM_NODE_HEADER_SIZE746e65;
  node_root[3] = 0x666e6f63;
  *(uint16_t *)(node_root + 4) = 0x6769;
  *(uint8_t *)((longlong)node_root + 0x12) = 0;
  uintStack_40 = 0x12;
  InitializeSystemModule1(handleIdentifier,&bufferPtr_50system_buffer_ptr_50);
  system_buffer_ptr_50 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(node_root);
}

uint64_t InitializeFontSystem(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeSystemResources();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x13c0);
  }
  return handleIdentifier;
}
// void InitializeSystemResources(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemResources(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemVariable;
  InitializePhysicsSystem();
  InitializePhysicsSystem();
  InitializeSystemDataNode19(handleIdentifier + 0x262);
  InitializeSystemDataNode19(handleIdentifier + 0x254);
  InitializeSystemDataNode19(handleIdentifier + 0x246);
  InitializeSystemDataNode19(handleIdentifier + 0x238);
  InitializeSystemDataNode19(handleIdentifier + 0x22a);
  InitializeSystemDataNode19(handleIdentifier + 0x21c);
  InitializeSystemDataNode19(handleIdentifier + SYSTEM_NODE_HEADER_SIZEe);
  ValidateSystemConfiguration(handleIdentifier + 0x1f6);
  ValidateSystemConfiguration(handleIdentifier + 0x1de);
  ValidateSystemConfiguration(handleIdentifier + 0x1c6);
  InitializeSystemDataNode19(handleIdentifier + 0x1b8);
  InitializeSystemDataNode19(handleIdentifier + 0x1aa);
  InitializeSystemDataNode19(handleIdentifier + NODE_INITIALIZED_OFFSETc);
  ValidateSystemConfiguration(handleIdentifier + 0x184);
  ValidateSystemConfiguration(handleIdentifier + 0x16c);
  ValidateSystemConfiguration(handleIdentifier + 0x154);
  ValidateSystemConfiguration(handleIdentifier + 0x13c);
  ValidateSystemConfiguration(handleIdentifier + 0x124);
  ValidateSystemConfiguration(handleIdentifier + SYSTEM_DATA_COMPARE_SIZEc);
  ValidateSystemConfiguration(handleIdentifier + 0xf4);
  ValidateSystemConfiguration(handleIdentifier + 0xdc);
  ValidateSystemConfiguration(handleIdentifier + 0xc4);
  ValidateSystemConfiguration(handleIdentifier + 0xac);
  ValidateSystemConfiguration(handleIdentifier + 0x94);
  ValidateSystemConfiguration(handleIdentifier + 0x7c);
  ValidateSystemConfiguration(handleIdentifier + 100);
  ValidateSystemConfiguration(handleIdentifier + 0x4c);
  ValidateSystemConfiguration(handleIdentifier + 0x34);
  ValidateSystemConfiguration(handleIdentifier + 0x1c);
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[0x18] = &resourcePoolPointer;
  if (handleIdentifier[NODE_INITIALIZED_OFFSET] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[NODE_INITIALIZED_OFFSET] = 0;
  *(uint32_t *)(handleIdentifier + 0x1b) = 0;
  handleIdentifier[0x18] = &globalSystemPointerData;
  InitializeSystemDataNode28(handleIdentifier + 0x12,handleIdentifier[0x14],systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  if (handleIdentifier[0xd] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}

longlong ProcessSystemData(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + 8) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + 0x18) = 0;
  *(uint64_t *)(handleIdentifier + 8) = &resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + 0x18) = 0;
  *(uint64_t *)(handleIdentifier + 0x28) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0x30) = 0;
  *(uint32_t *)(handleIdentifier + 0x38) = 0;
  *(uint64_t *)(handleIdentifier + 0x28) = &resourcePoolPointer;
  *(uint64_t *)(handleIdentifier + 0x40) = 0;
  *(uint64_t *)(handleIdentifier + 0x30) = 0;
  *(uint32_t *)(handleIdentifier + 0x38) = 0;
  *(uint64_t *)(handleIdentifier + 0x60) = 0;
  *(code **)(handleIdentifier + 0x68) = _guard_check_icall;
  return handleIdentifier;
}
// void InitializeSystemDataNode19(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode19(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (*(code **)(handleIdentifier + 0x60) != (code *)0x0) {
    (**(code **)(handleIdentifier + 0x60))(handleIdentifier + 0x50,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  *(uint64_t *)(handleIdentifier + 0x28) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x30) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x30) = 0;
  *(uint32_t *)(handleIdentifier + 0x40) = 0;
  *(uint64_t *)(handleIdentifier + 0x28) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 8) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + 8) = &globalSystemPointerData;
  return;
}

uint64_t * ConfigureSystemSettings(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &resourcePoolPointer;
  handleIdentifier[3] = 0;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  handleIdentifier[4] = &globalSystemPointerData;
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 6) = 0;
  handleIdentifier[4] = &resourcePoolPointer;
  handleIdentifier[7] = 0;
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 6) = 0;
  handleIdentifier[8] = &globalSystemPointerData;
  handleIdentifier[9] = 0;
  *(uint32_t *)(handleIdentifier + 10) = 0;
  handleIdentifier[8] = &resourcePoolPointer;
  handleIdentifier[0xb] = 0;
  handleIdentifier[9] = 0;
  *(uint32_t *)(handleIdentifier + 10) = 0;
  handleIdentifier[0xc] = &globalSystemPointerData;
  handleIdentifier[0xd] = 0;
  *(uint32_t *)(handleIdentifier + 0xe) = 0;
  handleIdentifier[0xc] = &resourcePoolPointer;
  handleIdentifier[0xf] = 0;
  handleIdentifier[0xd] = 0;
  *(uint32_t *)(handleIdentifier + 0xe) = 0;
  handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] = &globalSystemPointerData;
  handleIdentifier[0x11] = 0;
  *(uint32_t *)(handleIdentifier + 0x12) = 0;
  handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] = &resourcePoolPointer;
  handleIdentifier[0x13] = 0;
  handleIdentifier[0x11] = 0;
  *(uint32_t *)(handleIdentifier + 0x12) = 0;
  handleIdentifier[0x16] = 0;
  handleIdentifier[0x17] = _guard_check_icall;
  return handleIdentifier;
}
// void ValidateSystemConfiguration(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ValidateSystemConfiguration(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if ((code *)handleIdentifier[0x16] != (code *)0x0) {
    (*(code *)handleIdentifier[0x16])(handleIdentifier + 0x14,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] = &resourcePoolPointer;
  if (handleIdentifier[0x11] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x11] = 0;
  *(uint32_t *)(handleIdentifier + 0x13) = 0;
  handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] = &globalSystemPointerData;
  handleIdentifier[0xc] = &resourcePoolPointer;
  if (handleIdentifier[0xd] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0xd] = 0;
  *(uint32_t *)(handleIdentifier + 0xf) = 0;
  handleIdentifier[0xc] = &globalSystemPointerData;
  handleIdentifier[8] = &resourcePoolPointer;
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[9] = 0;
  *(uint32_t *)(handleIdentifier + 0xb) = 0;
  handleIdentifier[8] = &globalSystemPointerData;
  handleIdentifier[4] = &resourcePoolPointer;
  if (handleIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 7) = 0;
  handleIdentifier[4] = &globalSystemPointerData;
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureGraphicsShader(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void ConfigureGraphicsShader(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint32_t uint_result;
  uint64_t *node_root;
  void *system_buffer_ptr_50;
  uint64_t *system_buffer_ptr_48;
  uint32_t uintStack_40;
  uint64_t uintStack_38;

  system_buffer_ptr_50 = &resourcePoolPointer;
  uintStack_38 = 0;
  system_buffer_ptr_48 = (uint64_t *)0x0;
  uintStack_40 = 0;
  node_root = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13,systemFlags,INVALID_HANDLE_VALUE);
  *(uint8_t *)node_root = 0;
  system_buffer_ptr_48 = node_root;
  uint_result = ValidateResourceAllocation(node_root);
  uintStack_38 = CONCAT44(uintStack_38._4_4_,uint_result);
  *node_root = 0x6e6f632072657355;
  *(uint32_t *)(node_root + 1) = 0x676966;
  uintStack_40 = 0xb;
  InitializeSystemModule1(handleIdentifier,&bufferPtr_50system_buffer_ptr_50);
  system_buffer_ptr_50 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(node_root);
}

uint64_t * InitializeAuthenticationSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = 0;
  handleIdentifier[1] = 0;
  handleIdentifier[2] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0x24;
  return handleIdentifier;
}

longlong InitializeSystemModule58(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  initialize_system_component(handleIdentifier,SYSTEM_NODE_HEADER_SIZE,0x400,InitializeAuthenticationSystem,InitializeDatabaseSystem);
  initialize_system_component(handleIdentifier + 0x8000,SYSTEM_NODE_HEADER_SIZE,0x400,InitializeAuthenticationSystem,InitializeDatabaseSystem);
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE400) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE408) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE410) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE418) = 0x24;
  long_result = handleIdentifier + SYSTEM_DATA_COMPARE_SIZE002;
  long_result = 8;
  do {
    *(uint64_t *)(long_result + -2) = 0;
    *(uint64_t *)(long_result + 6) = 0;
    *(uint64_t *)(long_result + 0xe) = 0;
    *(uint64_t *)(long_result + 0x16) = 0;
    *(uint64_t *)(long_result + 0x1e) = 0;
    *(uint64_t *)(long_result + 0x26) = 0;
    *(uint64_t *)(long_result + 0x2e) = 0;
    *(uint64_t *)(long_result + 0x36) = 0;
    *(uint64_t *)(long_result + 0x3e) = 0;
    *(uint64_t *)(long_result + 0x46) = 0;
    *(uint64_t *)(long_result + 0x4e) = 0;
    *(uint64_t *)(long_result + 0x56) = 0;
    *(uint64_t *)(long_result + 0x5e) = 0;
    *(uint64_t *)(long_result + 0x66) = 0;
    *(uint64_t *)(long_result + 0x6e) = 0;
    *(uint64_t *)(long_result + 0x76) = 0;
    long_result = long_result + 0x80;
    long_result = long_result + -1;
  } while (long_result != 0);
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t
InitializeSystemModule41(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ProcessResourceData(resourceIdentifier,g_system_context_1 + 0xe0,systemConfig,systemFlags,0,INVALID_HANDLE_VALUE);
  return resourceIdentifier;
}

uint64_t * SetupSystemMemory(uint64_t *handleIdentifier,uint resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if ((code *)handleIdentifier[6] != (code *)0x0) {
    (*(code *)handleIdentifier[6])(handleIdentifier + 4,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x40);
  }
  return handleIdentifier;
}

uint64_t *
InitializeInputSystem(uint64_t *handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;

  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *handleIdentifier = &globalSystemOutputData;
  LOCK();
  *(uint8_t *)(handleIdentifier + 2) = 0;
  UNLOCK();
  handleIdentifier[3] = 0xffffffffffffffff;
  *handleIdentifier = &g_system_global_variable8;
  ptr_uint_var = handleIdentifier + 4;
  handleIdentifier[6] = 0;
  handleIdentifier[7] = _guard_check_icall;
  if (ptr_uint_var != resourceIdentifier) {
    if ((code *)handleIdentifier[6] != (code *)0x0) {
      (*(code *)handleIdentifier[6])(ptr_uint_var,0,0,systemFlags,INVALID_HANDLE_VALUE);
    }
    ptr_char_var = (code *)resourceIdentifier[2];
    if (ptr_char_var != (code *)0x0) {
      (*ptr_char_var)(ptr_uint_var,resourceIdentifier,1);
      ptr_char_var = (code *)resourceIdentifier[2];
    }
    handleIdentifier[6] = ptr_char_var;
    handleIdentifier[7] = resourceIdentifier[3];
  }
  if ((code *)resourceIdentifier[2] != (code *)0x0) {
    (*(code *)resourceIdentifier[2])(resourceIdentifier,0,0);
  }
  return handleIdentifier;
}
// void InitializeSystemModule44(longlong handleIdentifier)

void InitializeSystemModule44(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + 0x18) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + 0x30) = 0;
  *(uint64_t *)(handleIdentifier + 0x18) = &globalSystemPointerData;
  return;
}
// void InitializeSystemModule35(longlong *handleIdentifier)

void InitializeSystemModule35(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  long_result = *handleIdentifier;
  if (long_result == long_result) {
    handleIdentifier[1] = long_result;
  }
  else {
    do {
      *(uint64_t *)(long_result + 0x18) = &resourcePoolPointer;
      if (*(longlong *)(long_result + SYSTEM_NODE_HEADER_SIZE) != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE) = 0;
      *(uint32_t *)(long_result + 0x30) = 0;
      *(uint64_t *)(long_result + 0x18) = &globalSystemPointerData;
      long_result = long_result + 0x50;
    } while (long_result != long_result);
    handleIdentifier[1] = *handleIdentifier;
  }
  return;
}

longlong InitializeThreadManagerSystem(longlong handleIdentifier,uint resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (*(code **)(handleIdentifier + 0xd0) != (code *)0x0) {
    (**(code **)(handleIdentifier + 0xd0))(handleIdentifier + 0xc0,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  InitializeInputManagerSystem(handleIdentifier);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xe8);
  }
  return handleIdentifier;
}
// void InitializeSystemModule24(longlong handleIdentifier)

void InitializeSystemModule24(longlong handleIdentifier)

{
  longlong long_result;
  int int_result;

  (**(code **)(handleIdentifier + 0xd8))(handleIdentifier + 0xc0);
  long_result = *(longlong *)(handleIdentifier + 0xe0);
  int_result = _Mtx_lock(long_result + 0x48);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  *(uint8_t *)(long_result + 0x98) = 1;
  int_result = _Cnd_broadcast(long_result);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  int_result = _Mtx_unlock(long_result + 0x48);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}

uint64_t *
InitializeSystemDataNode25(uint64_t *handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ConfigureSystemHandles();
  *handleIdentifier = &g_system_global_variable8;
  ptr_uint_var = handleIdentifier + 0x18;
  handleIdentifier[0x1a] = 0;
  handleIdentifier[0x1b] = _guard_check_icall;
  if (ptr_uint_var != resourceIdentifier) {
    if ((code *)handleIdentifier[0x1a] != (code *)0x0) {
      (*(code *)handleIdentifier[0x1a])(ptr_uint_var,0,0,systemFlags,uint_result);
    }
    ptr_char_var = (code *)resourceIdentifier[2];
    if (ptr_char_var != (code *)0x0) {
      (*ptr_char_var)(ptr_uint_var,resourceIdentifier,1);
      ptr_char_var = (code *)resourceIdentifier[2];
    }
    handleIdentifier[0x1a] = ptr_char_var;
    handleIdentifier[0x1b] = resourceIdentifier[3];
  }
  handleIdentifier[0x1c] = systemConfig;
  if ((code *)resourceIdentifier[2] != (code *)0x0) {
    (*(code *)resourceIdentifier[2])(resourceIdentifier,0,0);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeFontSystem(longlong *handleIdentifier)
void InitializeFontSystem(longlong *handleIdentifier)

{
  int int_result;
  longlong long_result;
  int compare_result;
  uint64_t uint_result;
  longlong *pallocation_size;
  code *ptr_char_var;
  uint8_t localBuffer_128 [32];
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong alongStack_f8 [2];
  code *stack_char_ptr;
  code *stack_char_ptr;
  uint64_t uintStack_d8;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong alongStack_b8 [9];
  longlong alongStack_70 [10];
  uint8_t uintStack_20;
  ulonglong uintStack_18;

  uintStack_d8 = INVALID_HANDLE_VALUE;
  uintStack_18 = systemConfigurationData ^ (ulonglong)localBuffer_128;
  int_result = *(int *)(*(longlong *)(*(longlong *)(systemConfigurationData + 8) + 8) + 0x48);
  stack_long_ptr = handleIdentifier;
  compare_result = _Thrd_id();
  if (compare_result == int_result) {
    (*(code *)handleIdentifier[3])(handleIdentifier);
  }
  else {
    stack_long_ptr = alongStack_b8;
    _Cnd_init_in_situ(alongStack_b8);
    stack_long_ptr = alongStack_70;
    _Mtx_init_in_situ(alongStack_70,2);
    uintStack_20 = 0;
    uint_result = AllocateSystemMemory(systemMemoryPool,0xe8,8,3);
    stack_long_ptr = alongStack_f8;
    stack_char_ptr = (code *)0x0;
    stack_char_ptr = _guard_check_icall;
    if (alongStack_f8 != handleIdentifier) {
      ptr_char_var = (code *)handleIdentifier[2];
      if (ptr_char_var != (code *)0x0) {
        (*ptr_char_var)(alongStack_f8,handleIdentifier,1);
        ptr_char_var = (code *)handleIdentifier[2];
      }
      stack_char_ptr = (code *)handleIdentifier[3];
      stack_char_ptr = ptr_char_var;
    }
    pallocation_size = (longlong *)InitializeSystemDataNode25(uint_result,alongStack_f8,alongStack_b8);
    stack_long_ptr = pallocation_size;
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x28))(pallocation_size);
    }
    long_result = systemConfigurationData;
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = pallocation_size;
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x28))(pallocation_size);
    }
    InitializeConfigSystem(long_result,&stack_long_ptr);
    SetupGraphicsDevice(alongStack_b8);
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x38))(pallocation_size);
    }
    pstack_long_ptr = (longlong **)alongStack_70;
    _Mtx_destroy_in_situ(alongStack_70);
    pstack_long_ptr = (longlong **)alongStack_b8;
    _Cnd_destroy_in_situ(alongStack_b8);
  }
  if ((code *)handleIdentifier[2] != (code *)0x0) {
    (*(code *)handleIdentifier[2])(handleIdentifier,0,0);
  }
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_18 ^ (ulonglong)localBuffer_128);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAuthenticationSystem(uint *handleIdentifier)
void InitializeAuthenticationSystem(uint *handleIdentifier)

{
  uint uint_result;
  char char_var;

  if (*(void **)*systemConfigurationData == &systemNextData) {
    char_var = *(int *)(systemConfigurationData + 0xe0) != 0;
  }
  else {
    char_var = (**(code **)(*(void **)*systemConfigurationData + 0x48))();
  }
  if (char_var != '\0') {
    *handleIdentifier = 0x41c6fe0c;
    return;
  }
  uint_result = timeGetTime();
  *handleIdentifier = uint_result ^ 0x41c64e6d;
  return;
}

uint64_t InitializeSystemModule59(longlong handleIdentifier,uint64_t resourceIdentifier)

{
  char is_initialized;
  void *node_root;

  if (*(longlong *)(handleIdentifier + 0xb0) != 0) {
    is_initialized = (**(code **)(handleIdentifier + 0xb8))(resourceIdentifier);
    if (is_initialized == '\0') {
      if (g_system_data_variable0 == '\0') {
        node_root = &g_system_data_variable3;
        if (*(void **)(handleIdentifier + 0x48) != (void *)0x0) {
          node_root = *(void **)(handleIdentifier + 0x48);
        }
        ProcessSystemDataHeader(&g_system_data_config,node_root);
      }
      InitializeResourceBlock(handleIdentifier,handleIdentifier + 0x80);
      return 0;
    }
  }
  InitializeResourceBlock(handleIdentifier,resourceIdentifier);
  return 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule39(uint64_t *handleIdentifier,uint64_t resourceIdentifier,int *systemConfig)
void InitializeSystemModule39(uint64_t *handleIdentifier,uint64_t resourceIdentifier,int *systemConfig)

{
  int int_result;
  bool bool_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t uint_result;

  long_result = AllocateSystemResource(systemMemoryPool,0x28,*(uint8_t *)(handleIdentifier + 5));
  int_result = *systemConfig;
  bool_var = true;
  *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE) = int_result;
  ptr_uint_var = (uint64_t *)handleIdentifier[2];
  ptr_uint_var = handleIdentifier;
  while (ptr_uint_var != (uint64_t *)0x0) {
    bool_var = int_result < *(int *)(ptr_uint_var + 4);
    ptr_uint_var = ptr_uint_var;
    if (int_result < *(int *)(ptr_uint_var + 4)) {
      ptr_uint_var = (uint64_t *)ptr_uint_var[1];
    }
    else {
      ptr_uint_var = (uint64_t *)*ptr_uint_var;
    }
  }
  ptr_uint_var = ptr_uint_var;
  if (bool_var) {
    if (ptr_uint_var == (uint64_t *)handleIdentifier[1]) goto LAB_18005c9be;
    ptr_uint_var = (uint64_t *)InitializeSystemHandle(ptr_uint_var);
  }
  if (*(int *)(long_result + SYSTEM_NODE_HEADER_SIZE) <= *(int *)(ptr_uint_var + 4)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
LAB_18005c9be:
  if ((ptr_uint_var == handleIdentifier) || (*(int *)(long_result + SYSTEM_NODE_HEADER_SIZE) < *(int *)(ptr_uint_var + 4))) {
    uint_result = 0;
  }
  else {
    uint_result = 1;
  }
                    // WARNING: Subroutine does not return
  CreateSystemHandle(long_result,ptr_uint_var,handleIdentifier,uint_result);
}
// void ConfigureGraphicsShader(longlong handleIdentifier,uint32_t resourceIdentifier)

void ConfigureGraphicsShader(longlong handleIdentifier,uint32_t resourceIdentifier)

{
  char is_initialized;
  void *node_root;
  uint32_t localBuffer_X10 [6];

  if ((*(longlong *)(handleIdentifier + 0x1f00) != 0) &&
     (localBuffer_X10[0] = resourceIdentifier, is_initialized = (**(code **)(handleIdentifier + 0x1f08))(localBuffer_X10),
     resourceIdentifier = localBuffer_X10[0], is_initialized == '\0')) {
    if (g_system_data_variable0 == '\0') {
      node_root = &g_system_data_variable3;
      if (*(void **)(handleIdentifier + 0x1eb0) != (void *)0x0) {
        node_root = *(void **)(handleIdentifier + 0x1eb0);
      }
      ProcessSystemDataHeader(&g_system_data_config,node_root);
    }
    *(uint32_t *)(handleIdentifier + 0x1ea0) = *(uint32_t *)(handleIdentifier + 0x1ee8);
    return;
  }
  *(uint32_t *)(handleIdentifier + 0x1ea0) = resourceIdentifier;
  return;
}

uint64_t * InitializeSystemModule42(uint64_t *handleIdentifier,longlong resourceIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &resourcePoolPointer;
  handleIdentifier[3] = 0;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint32_t *)(handleIdentifier + 2) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  handleIdentifier[1] = *(uint64_t *)(resourceIdentifier + 8);
  *(uint32_t *)((longlong)handleIdentifier + 0x1c) = *(uint32_t *)(resourceIdentifier + 0x1c);
  *(uint32_t *)(handleIdentifier + 3) = *(uint32_t *)(resourceIdentifier + 0x18);
  *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint64_t *)(resourceIdentifier + 8) = 0;
  *(uint64_t *)(resourceIdentifier + 0x18) = 0;
  handleIdentifier[4] = &globalSystemPointerData;
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 6) = 0;
  handleIdentifier[4] = &resourcePoolPointer;
  handleIdentifier[7] = 0;
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 6) = 0;
  *(uint32_t *)(handleIdentifier + 6) = *(uint32_t *)(resourceIdentifier + 0x30);
  handleIdentifier[5] = *(uint64_t *)(resourceIdentifier + 0x28);
  *(uint32_t *)((longlong)handleIdentifier + 0x3c) = *(uint32_t *)(resourceIdentifier + 0x3c);
  *(uint32_t *)(handleIdentifier + 7) = *(uint32_t *)(resourceIdentifier + 0x38);
  *(uint32_t *)(resourceIdentifier + 0x30) = 0;
  *(uint64_t *)(resourceIdentifier + 0x28) = 0;
  *(uint64_t *)(resourceIdentifier + 0x38) = 0;
  return handleIdentifier;
}

longlong InitializeSystemDataNode23(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + 0x40) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x48) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x48) = 0;
  *(uint32_t *)(handleIdentifier + 0x58) = 0;
  *(uint64_t *)(handleIdentifier + 0x40) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x28) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x28) = 0;
  *(uint32_t *)(handleIdentifier + 0x38) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = &globalSystemPointerData;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeConfigSystem(void **handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeConfigSystem(void **handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  byte bool_var;
  uint uint_result;
  longlong long_result;
  void **ptr_ptr_uint_var;
  byte *ptr_byte_var;
  void **pnode_current;
  longlong long_result;
  uint64_t uint_result;
  void **ppustack_var;
  char acstack_var [8];
  uint32_t uint_result;
  void *system_buffer_ptr_68;
  longlong longStack_60;
  void *system_buffer_ptr_48;
  longlong longStack_40;
  uint32_t uintStack_30;

  long_result = systemCoreData;
  acstack_var[0] = (char)systemFlags;
  uint_result = 0;
  pnode_current = (void **)(systemCoreData + 0x70);
  ppustack_var = handleIdentifier;
  ProcessSystemData(pnode_current,&ppustack_var,resourceIdentifier,systemFlags,0,INVALID_HANDLE_VALUE);
  if (ppustack_var != pnode_current) {
    InitializeResourceBlock(ppustack_var + 8,systemConfig);
    return;
  }
  ProcessResourceData(&bufferPtr_68system_buffer_ptr_68,resourceIdentifier);
  ProcessResourceData(&bufferPtr_48system_buffer_ptr_48,systemConfig);
  uint_result = 1;
  long_result = AllocateSystemResource(systemMemoryPool,0x60,*(uint8_t *)(long_result + 0x98));
  InitializeSystemModule42(long_result + SYSTEM_NODE_HEADER_SIZE,&bufferPtr_68system_buffer_ptr_68);
  ptr_ptr_uint_var = (void **)InitializeSystemDataNode19(pnode_current,acstack_var,long_result + SYSTEM_NODE_HEADER_SIZE);
  if (acstack_var[0] == '\0') {
    InitializeSystemDataNode23(long_result);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
    ppustack_var = &bufferPtr_48system_buffer_ptr_48;
    system_buffer_ptr_48 = &resourcePoolPointer;
    if (longStack_40 == 0) {
      longStack_40 = 0;
      uintStack_30 = 0;
      system_buffer_ptr_48 = &globalSystemPointerData;
      ppustack_var = &bufferPtr_68system_buffer_ptr_68;
      system_buffer_ptr_68 = &resourcePoolPointer;
      if (longStack_60 == 0) {
        return;
      }
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (ptr_ptr_uint_var == pnode_current) goto LAB_18005ccff;
  if (*(int *)(ptr_ptr_uint_var + 6) != 0) {
    if (*(int *)(long_result + 0x30) == 0) goto LAB_18005ccff;
    ptr_byte_var = ptr_ptr_uint_var[5];
    long_result = *(longlong *)(long_result + 0x28) - (longlong)ptr_byte_var;
    do {
      bool_var = *ptr_byte_var;
      uint_result = (uint)ptr_byte_var[long_result];
      if (bool_var != uint_result) break;
      ptr_byte_var = ptr_byte_var + 1;
    } while (uint_result != 0);
    if (0 < (int)(bool_var - uint_result)) goto LAB_18005ccff;
  }
  uint_result = 1;
LAB_18005ccff:
                    // WARNING: Subroutine does not return
  CreateSystemHandle(long_result,ptr_ptr_uint_var,pnode_current,uint_result,uint_result);
}

uint64_t *
InitializePhysicsSystem(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  handleIdentifier[4] = &globalSystemPointerData;
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,SYSTEM_DATA_COMPARE_SIZE0,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}

uint64_t * InitializeSystemDataNode18(uint64_t *handleIdentifier,uint64_t *resourceIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t uint_result;

  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *handleIdentifier = &globalSystemOutputData;
  LOCK();
  *(uint8_t *)(handleIdentifier + 2) = 0;
  UNLOCK();
  handleIdentifier[3] = 0xffffffffffffffff;
  *handleIdentifier = &globalSystemVariable;
  ptr_uint_var = handleIdentifier + 4;
  *ptr_uint_var = &globalSystemPointerData;
  handleIdentifier[5] = 0;
  *(uint32_t *)(handleIdentifier + 6) = 0;
  *ptr_uint_var = &g_thread_parameter_ptr;
  handleIdentifier[5] = handleIdentifier + 7;
  *(uint32_t *)(handleIdentifier + 6) = 0;
  *(uint8_t *)(handleIdentifier + 7) = 0;
  uint_result = resourceIdentifier[1];
  *ptr_uint_var = *resourceIdentifier;
  handleIdentifier[5] = uint_result;
  uint_result = resourceIdentifier[3];
  handleIdentifier[6] = resourceIdentifier[2];
  handleIdentifier[7] = uint_result;
  uint_result = resourceIdentifier[5];
  handleIdentifier[8] = resourceIdentifier[4];
  handleIdentifier[9] = uint_result;
  uint_result = resourceIdentifier[7];
  handleIdentifier[10] = resourceIdentifier[6];
  handleIdentifier[0xb] = uint_result;
  uint_result = resourceIdentifier[9];
  handleIdentifier[0xc] = resourceIdentifier[8];
  handleIdentifier[0xd] = uint_result;
  uint_result = resourceIdentifier[0xb];
  handleIdentifier[0xe] = resourceIdentifier[10];
  handleIdentifier[0xf] = uint_result;
  uint_result = resourceIdentifier[0xd];
  handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] = resourceIdentifier[0xc];
  handleIdentifier[0x11] = uint_result;
  uint_result = resourceIdentifier[0xf];
  handleIdentifier[0x12] = resourceIdentifier[0xe];
  handleIdentifier[0x13] = uint_result;
  uint_result = resourceIdentifier[0x11];
  handleIdentifier[0x14] = resourceIdentifier[SYSTEM_DATA_COMPARE_SIZE];
  handleIdentifier[0x15] = uint_result;
  uint_result = resourceIdentifier[0x13];
  handleIdentifier[0x16] = resourceIdentifier[0x12];
  handleIdentifier[0x17] = uint_result;
  uint_result = resourceIdentifier[0x15];
  handleIdentifier[0x18] = resourceIdentifier[0x14];
  handleIdentifier[NODE_INITIALIZED_OFFSET] = uint_result;
  uint_result = resourceIdentifier[0x17];
  handleIdentifier[0x1a] = resourceIdentifier[0x16];
  handleIdentifier[0x1b] = uint_result;
  uint_result = resourceIdentifier[NODE_INITIALIZED_OFFSET];
  handleIdentifier[0x1c] = resourceIdentifier[0x18];
  handleIdentifier[0x1d] = uint_result;
  uint_result = resourceIdentifier[0x1b];
  handleIdentifier[0x1e] = resourceIdentifier[0x1a];
  handleIdentifier[0x1f] = uint_result;
  *(uint32_t *)(handleIdentifier + 0x17) = *(uint32_t *)(resourceIdentifier + 0x13);
  return handleIdentifier;
}

uint32_t InitializeShaderSystem(longlong handleIdentifier)

{
  int int_result;
  uint32_t uint_result;

  int_result = _Mtx_lock(handleIdentifier + 0x9f0);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  uint_result = InitializeSystemResources();
  int_result = _Mtx_unlock(handleIdentifier + 0x9f0);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeDatabaseSystem(void)

{
  longlong long_result;
  longlong long_result;
  int compare_result;
  int int_result;
  int int_result;
  int int_result;
  int int_result;

  long_result = systemCoreData;
  long_result = systemCoreData + 0x770;
  compare_result = _Mtx_lock(long_result);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  compare_result = InitializeSystemResources();
  int_result = _Mtx_unlock(long_result);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  int_result = _Mtx_lock(long_result + 0x7c0);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  int_result = InitializeSystemResources();
  int_result = _Mtx_unlock(long_result + 0x7c0);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  int_result = InitializeShaderSystem(long_result);
  int_result = _Mtx_lock(long_result + 0x950);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  int_result = InitializeSystemResources();
  int_result = _Mtx_unlock(long_result + 0x950);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return int_result + int_result + compare_result + int_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule32(ulonglong handleIdentifier,longlong resourceIdentifier)
void InitializeSystemModule32(ulonglong handleIdentifier,longlong resourceIdentifier)

{
  char is_initialized;
  uint uint_result;
  ulonglong uint_result;
  ulonglong *ptr_uint_var;
  longlong allocation_size;
  longlong long_result;
  int int_result;
  int int_result;
  float float_result;
  float float_result;
  double dstack_var;
  ulonglong ustack_var;
  uint8_t localBuffer_478 [32];
  uint64_t uintStack_458;
  double *pdStack_450;
  char acStack_438 [1024];
  ulonglong uintStack_38;
  uint64_t uintStack_30;

  int_result = -1;
  int_result = -1;
  uint_result = (uint)handleIdentifier;
  uint_result = handleIdentifier & 0xffffffff;
  while (uint_result != 0) {
    int_result = int_result + 1;
    uint_result = (uint)uint_result >> 1;
    uint_result = (ulonglong)uint_result;
  }
  uint_result = 0x400;
  do {
    int_result = int_result + 1;
    uint_result = uint_result >> 1;
  } while (uint_result != 0);
  is_initialized = (&globalSystemVariable)[int_result / int_result];
  uintStack_30 = 0x18005d147;
  float_result = (float)powf(0x44800000);
  float_result = (float)(longlong)handleIdentifier;
  if ((longlong)handleIdentifier < 0) {
    float_result = float_result + 1.8446744e+19;
  }
  ustack_var = (ulonglong)(uint)(int)is_initialized;
  dstack_var = (double)(float_result * float_result);
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_478;
  ptr_uint_var = (ulonglong *)GetSystemPointerData();
  allocation_size = 0;
  uintStack_458 = 0;
  pdStack_450 = &dstack_var;
  int_result = __stdio_common_vsprintf(*ptr_uint_var | 1,0,0,&g_system_global_variable8);
  if (int_result < 0) {
    int_result = -1;
  }
  if (int_result < 0x400) {
    uintStack_458 = 0;
    pdStack_450 = &dstack_var;
    __stdio_common_vsprintf(*ptr_uint_var | 1,acStack_438,0x400,&g_system_global_variable8);
    allocation_size = -1;
    do {
      long_result = allocation_size;
      allocation_size = long_result + 1;
    } while (acStack_438[long_result + 1] != '\0');
    int_result = (int)(long_result + 1);
    if (0 < int_result) {
      ConfigureSystemParameters(resourceIdentifier,*(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + int_result);
                    // WARNING: Subroutine does not return
      memcpy((ulonglong)*(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + *(longlong *)(resourceIdentifier + 8),acStack_438,
             (longlong)((int)long_result + 2));
    }
  }
  else {
    int_result = int_result + 1;
    if (int_result != 0) {
      allocation_size = AllocateSystemResource(systemMemoryPool,(longlong)int_result,3);
    }
    InitializeSystemDataNode17(allocation_size,(longlong)int_result,&g_system_global_variable8,&dstack_var);
    ResizeSystemBuffer(resourceIdentifier,allocation_size);
    if (allocation_size != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(allocation_size);
    }
  }
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_478);
}

longlong InitializeTextureSystem(longlong handleIdentifier,longlong resourceIdentifier)

{
  if (*(longlong *)(handleIdentifier + 8) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  *(uint64_t *)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  *(uint64_t *)(handleIdentifier + 8) = *(uint64_t *)(resourceIdentifier + 8);
  *(uint32_t *)(handleIdentifier + 0x1c) = *(uint32_t *)(resourceIdentifier + 0x1c);
  *(uint32_t *)(handleIdentifier + 0x18) = *(uint32_t *)(resourceIdentifier + 0x18);
  *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint64_t *)(resourceIdentifier + 8) = 0;
  *(uint64_t *)(resourceIdentifier + 0x18) = 0;
  return handleIdentifier;
}
// void ConfigureGraphicsShader(uint64_t handleIdentifier,longlong resourceIdentifier)

void ConfigureGraphicsShader(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  *(uint64_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE) = &resourcePoolPointer;
  if (*(longlong *)(resourceIdentifier + 0x28) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(resourceIdentifier + 0x28) = 0;
  *(uint32_t *)(resourceIdentifier + 0x38) = 0;
  *(uint64_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE) = &globalSystemPointerData;
  if (resourceIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(resourceIdentifier);
  }
  return;
}
// void InitializeSystemDataNode28(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode28(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (resourceIdentifier == (uint64_t *)0x0) {
    return;
  }
  InitializeSystemDataNode28(handleIdentifier,*resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  resourceIdentifier[4] = &resourcePoolPointer;
  if (resourceIdentifier[5] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  resourceIdentifier[5] = 0;
  *(uint32_t *)(resourceIdentifier + 7) = 0;
  resourceIdentifier[4] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(resourceIdentifier);
}
// void InitializeAudioSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeAudioSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemDataNode28(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemDataNode23(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode23(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemDataNode28(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemDataNode29(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode29(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemDataNode28(handleIdentifier,*(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  return;
}
// void InitializeSystemModule19(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule19(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;
  uint64_t *node_root;
  uint64_t ustack_var;
  uint64_t flag_initialized;
  uint64_t ustack_var;

  ustack_var = resourceIdentifier;
  flag_initialized = systemConfig;
  ustack_var = systemFlags;
  uint_result = __acrt_iob_func(1);
  node_root = (uint64_t *)GetSystemPointerData();
  __stdio_common_vfprintf(*node_root,uint_result,handleIdentifier,0,&ustack_var);
  return;
}

uint64_t * InitializeSystemModule23(longlong handleIdentifier,char *resourceIdentifier)

{
  char *pis_initialized;
  char char_var;
  uint64_t *ptr_uint_var;
  char *ptr_char_var;
  longlong allocation_size;
  char *ptr_char_var;

  if (resourceIdentifier == (char *)0x0) {
    return *(uint64_t **)(handleIdentifier + 0x58);
  }
  char_var = *resourceIdentifier;
  ptr_char_var = resourceIdentifier;
  while (char_var != '\0') {
    ptr_char_var = ptr_char_var + 1;
    char_var = *ptr_char_var;
  }
  ptr_uint_var = *(uint64_t **)(handleIdentifier + 0x58);
  do {
    if (ptr_uint_var == (uint64_t *)0x0) {
      return (uint64_t *)0x0;
    }
    ptr_char_var = (char *)*ptr_uint_var;
    if (ptr_char_var == (char *)0x0) {
      allocation_size = 0;
      ptr_char_var = (char *)0x180d48d24;
    }
    else {
      allocation_size = ptr_uint_var[2];
    }
    if (allocation_size == (longlong)ptr_char_var - (longlong)resourceIdentifier) {
      pis_initialized = ptr_char_var + allocation_size;
      if (pis_initialized <= ptr_char_var) {
        return ptr_uint_var;
      }
      allocation_size = (longlong)resourceIdentifier - (longlong)ptr_char_var;
      while (*ptr_char_var == ptr_char_var[allocation_size]) {
        ptr_char_var = ptr_char_var + 1;
        if (pis_initialized <= ptr_char_var) {
          return ptr_uint_var;
        }
      }
    }
    ptr_uint_var = (uint64_t *)ptr_uint_var[0xb];
  } while( true );
}

uint64_t * InitializeSystemDataNode24(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  char *pis_initialized;
  char *ptr_char_var;
  longlong long_result;
  longlong in_R10;
  longlong in_R11;

  if (resourceIdentifier != (uint64_t *)0x0) {
    do {
      ptr_char_var = (char *)*resourceIdentifier;
      if (ptr_char_var == (char *)0x0) {
        long_result = 0;
        ptr_char_var = (char *)0x180d48d24;
      }
      else {
        long_result = resourceIdentifier[2];
      }
      if (long_result == in_R10) {
        pis_initialized = ptr_char_var + long_result;
        if (pis_initialized <= ptr_char_var) {
          return resourceIdentifier;
        }
        long_result = in_R11 - (longlong)ptr_char_var;
        while (*ptr_char_var == ptr_char_var[long_result]) {
          ptr_char_var = ptr_char_var + 1;
          if (pis_initialized <= ptr_char_var) {
            return resourceIdentifier;
          }
        }
      }
      resourceIdentifier = (uint64_t *)resourceIdentifier[0xb];
    } while (resourceIdentifier != (uint64_t *)0x0);
  }
  return (uint64_t *)0x0;
}

uint64_t * SystemFunction_8_4(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  char *pis_initialized;
  char *ptr_char_var;
  char *system_RBX;
  longlong long_result;
  longlong in_R10;
  longlong in_R11;

  while( true ) {
    do {
      resourceIdentifier = (uint64_t *)resourceIdentifier[0xb];
      if (resourceIdentifier == (uint64_t *)0x0) {
        return (uint64_t *)0x0;
      }
      if ((char *)*resourceIdentifier == (char *)0x0) {
        long_result = 0;
        ptr_char_var = system_RBX;
      }
      else {
        long_result = resourceIdentifier[2];
        ptr_char_var = (char *)*resourceIdentifier;
      }
    } while (long_result != in_R10);
    pis_initialized = ptr_char_var + long_result;
    if (pis_initialized <= ptr_char_var) break;
    long_result = in_R11 - (longlong)ptr_char_var;
    while (*ptr_char_var == ptr_char_var[long_result]) {
      ptr_char_var = ptr_char_var + 1;
      if (pis_initialized <= ptr_char_var) {
        return resourceIdentifier;
      }
    }
  }
  return resourceIdentifier;
}

uint64_t ConfigureSystemHandles(longlong handleIdentifier)

{
  return *(uint64_t *)(handleIdentifier + 0x58);
}

uint64_t * ConfigureSystemParameters(longlong handleIdentifier,char *resourceIdentifier,longlong systemConfig)

{
  char *pis_initialized;
  char char_var;
  uint64_t *ptr_uint_var;
  char *ptr_char_var;
  longlong allocation_size;

  if (resourceIdentifier == (char *)0x0) {
    return *(uint64_t **)(handleIdentifier + 0x30);
  }
  if (systemConfig == 0) {
    char_var = *resourceIdentifier;
    ptr_char_var = resourceIdentifier;
    while (char_var != '\0') {
      ptr_char_var = ptr_char_var + 1;
      char_var = *ptr_char_var;
    }
    systemConfig = (longlong)ptr_char_var - (longlong)resourceIdentifier;
  }
  ptr_uint_var = *(uint64_t **)(handleIdentifier + 0x30);
  do {
    if (ptr_uint_var == (uint64_t *)0x0) {
      return (uint64_t *)0x0;
    }
    ptr_char_var = (char *)*ptr_uint_var;
    if (ptr_char_var == (char *)0x0) {
      allocation_size = 0;
      ptr_char_var = (char *)0x180d48d24;
    }
    else {
      allocation_size = ptr_uint_var[2];
    }
    if (allocation_size == systemConfig) {
      pis_initialized = ptr_char_var + allocation_size;
      if (pis_initialized <= ptr_char_var) {
        return ptr_uint_var;
      }
      allocation_size = (longlong)resourceIdentifier - (longlong)ptr_char_var;
      while (*ptr_char_var == ptr_char_var[allocation_size]) {
        ptr_char_var = ptr_char_var + 1;
        if (pis_initialized <= ptr_char_var) {
          return ptr_uint_var;
        }
      }
    }
    ptr_uint_var = (uint64_t *)ptr_uint_var[0xb];
  } while( true );
}

uint64_t * SystemFunction_17_6(uint64_t handleIdentifier,uint64_t *resourceIdentifier,longlong systemConfig)

{
  char *pis_initialized;
  char *ptr_char_var;
  longlong long_result;
  longlong in_R11;

  if (resourceIdentifier != (uint64_t *)0x0) {
    do {
      ptr_char_var = (char *)*resourceIdentifier;
      if (ptr_char_var == (char *)0x0) {
        long_result = 0;
        ptr_char_var = (char *)0x180d48d24;
      }
      else {
        long_result = resourceIdentifier[2];
      }
      if (long_result == systemConfig) {
        pis_initialized = ptr_char_var + long_result;
        if (pis_initialized <= ptr_char_var) {
          return resourceIdentifier;
        }
        long_result = in_R11 - (longlong)ptr_char_var;
        while (*ptr_char_var == ptr_char_var[long_result]) {
          ptr_char_var = ptr_char_var + 1;
          if (pis_initialized <= ptr_char_var) {
            return resourceIdentifier;
          }
        }
      }
      resourceIdentifier = (uint64_t *)resourceIdentifier[0xb];
    } while (resourceIdentifier != (uint64_t *)0x0);
  }
  return (uint64_t *)0x0;
}

uint64_t * InitializeSystemModule55(uint64_t handleIdentifier,uint64_t *resourceIdentifier,longlong systemConfig)

{
  char *pis_initialized;
  char *ptr_char_var;
  char *system_RBX;
  longlong long_result;
  longlong in_R11;

  while( true ) {
    do {
      resourceIdentifier = (uint64_t *)resourceIdentifier[0xb];
      if (resourceIdentifier == (uint64_t *)0x0) {
        return (uint64_t *)0x0;
      }
      if ((char *)*resourceIdentifier == (char *)0x0) {
        long_result = 0;
        ptr_char_var = system_RBX;
      }
      else {
        long_result = resourceIdentifier[2];
        ptr_char_var = (char *)*resourceIdentifier;
      }
    } while (long_result != systemConfig);
    pis_initialized = ptr_char_var + long_result;
    if (pis_initialized <= ptr_char_var) break;
    long_result = in_R11 - (longlong)ptr_char_var;
    while (*ptr_char_var == ptr_char_var[long_result]) {
      ptr_char_var = ptr_char_var + 1;
      if (pis_initialized <= ptr_char_var) {
        return resourceIdentifier;
      }
    }
  }
  return resourceIdentifier;
}

uint64_t InitializeSystemModule41(longlong handleIdentifier)

{
  return *(uint64_t *)(handleIdentifier + 0x30);
}
// void InitializeSystemDataNode30(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode30(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 4) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializePhysicsSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializePhysicsSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 4) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}

uint64_t *
InitializeSystemDataNode18(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  *handleIdentifier = &globalSystemVariable;
  InitializeInputManagerSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xc0,systemConfig,systemFlags,uint_result);
  }
  return handleIdentifier;
}

uint8_t * InitializeSystemDataNode31(uint8_t *handleIdentifier)

{
  uint64_t uint_result;

  *(uint64_t *)(handleIdentifier + 8) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 3;
  *(uint64_t *)(handleIdentifier + 0x28) = 0;
  *(uint64_t *)(handleIdentifier + 0x30) = 0;
  *(uint64_t *)(handleIdentifier + 0x38) = 0;
  *(uint32_t *)(handleIdentifier + 0x40) = 3;
  *(uint64_t *)(handleIdentifier + 0x48) = 0;
  *(uint64_t *)(handleIdentifier + 0x50) = 0;
  *(uint64_t *)(handleIdentifier + 0x58) = 0;
  *(uint32_t *)(handleIdentifier + 0x60) = 3;
  uint_result = CreateSemaphoreW(0,0,0x7fffffff,0,INVALID_HANDLE_VALUE);
  *(uint64_t *)(handleIdentifier + 0x68) = uint_result;
  uint_result = CreateSemaphoreW(0,0,0x7fffffff,0);
  *(uint64_t *)(handleIdentifier + 0x70) = uint_result;
  InitializeSystemModule33(handleIdentifier + 0x78);
  InitializeSystemModule33(handleIdentifier + 0x2e0);
  InitializeSystemModule33(handleIdentifier + 0x548);
  *(uint32_t *)(handleIdentifier + 0x7b0) = 0;
  *(uint32_t *)(handleIdentifier + 0x7b4) = SYSTEM_DATA_COMPARE_SIZE00;
  *handleIdentifier = 0;
  return handleIdentifier;
}
// void InitializeSystemDataNode32(uint64_t *handleIdentifier)

void InitializeSystemDataNode32(uint64_t *handleIdentifier)

{
  CloseHandle(*handleIdentifier);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeDatabaseSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeDatabaseSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *ptr_data;
  longlong allocation_size;
  int int_result;
  longlong long_result;

  allocation_size = systemMemoryPool;
  if (*(code **)(systemMemoryPool + SYSTEM_NODE_HEADER_SIZE) != (code *)0x0) {
    (**(code **)(systemMemoryPool + SYSTEM_NODE_HEADER_SIZE))(systemMemoryPool + SYSTEM_DATA_COMPARE_SIZE,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  *(uint64_t *)(allocation_size + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(code **)(allocation_size + 0x28) = _guard_check_icall;
  int_result = 0;
  long_ptr = (longlong *)(handleIdentifier + 8);
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - *long_ptr >> 3 != 0) {
    allocation_size = 0;
    do {
      ReleaseGraphicsResource(*(uint64_t *)(*long_ptr + allocation_size));
      int_result = int_result + 1;
      allocation_size = allocation_size + 8;
    } while ((ulonglong)(longlong)int_result < (ulonglong)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - *long_ptr >> 3))
    ;
  }
  int_result = 0;
  long_ptr = (longlong *)(handleIdentifier + 0x28);
  if (*(longlong *)(handleIdentifier + 0x30) - *long_ptr >> 3 != 0) {
    allocation_size = 0;
    do {
      ReleaseGraphicsResource(*(uint64_t *)(*long_ptr + allocation_size));
      int_result = int_result + 1;
      allocation_size = allocation_size + 8;
    } while ((ulonglong)(longlong)int_result < (ulonglong)(*(longlong *)(handleIdentifier + 0x30) - *long_ptr >> 3))
    ;
  }
  int_result = 0;
  long_ptr = (longlong *)(handleIdentifier + 0x48);
  if (*(longlong *)(handleIdentifier + 0x50) - *long_ptr >> 3 != 0) {
    allocation_size = 0;
    do {
      ReleaseGraphicsResource(*(uint64_t *)(*long_ptr + allocation_size));
      int_result = int_result + 1;
      allocation_size = allocation_size + 8;
    } while ((ulonglong)(longlong)int_result < (ulonglong)(*(longlong *)(handleIdentifier + 0x50) - *long_ptr >> 3))
    ;
  }
  int_result = 0;
  allocation_size = *long_ptr;
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - allocation_size >> 3 != 0) {
    long_result = 0;
    do {
      ptr_data = *(longlong **)(long_result + allocation_size);
      if (ptr_data != (longlong *)0x0) {
        allocation_size = __RTCastToVoid(ptr_data);
        (**(code **)(*ptr_data + 0x28))(ptr_data,0);
        if (allocation_size != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(allocation_size);
        }
      }
      *(uint64_t *)(long_result + *long_ptr) = 0;
      int_result = int_result + 1;
      long_result = long_result + 8;
      allocation_size = *long_ptr;
    } while ((ulonglong)(longlong)int_result < (ulonglong)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - allocation_size >> 3));
  }
  int_result = 0;
  allocation_size = *long_ptr;
  if (*(longlong *)(handleIdentifier + 0x30) - allocation_size >> 3 != 0) {
    long_result = 0;
    do {
      ptr_data = *(longlong **)(allocation_size + long_result);
      if (ptr_data != (longlong *)0x0) {
        allocation_size = __RTCastToVoid(ptr_data);
        (**(code **)(*ptr_data + 0x28))(ptr_data,0);
        if (allocation_size != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(allocation_size);
        }
      }
      *(uint64_t *)(long_result + *long_ptr) = 0;
      int_result = int_result + 1;
      long_result = long_result + 8;
      allocation_size = *long_ptr;
    } while ((ulonglong)(longlong)int_result < (ulonglong)(*(longlong *)(handleIdentifier + 0x30) - allocation_size >> 3));
  }
  int_result = 0;
  allocation_size = *long_ptr;
  if (*(longlong *)(handleIdentifier + 0x50) - allocation_size >> 3 != 0) {
    long_result = 0;
    do {
      ptr_data = *(longlong **)(allocation_size + long_result);
      if (ptr_data != (longlong *)0x0) {
        allocation_size = __RTCastToVoid(ptr_data);
        (**(code **)(*ptr_data + 0x28))(ptr_data,0);
        if (allocation_size != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(allocation_size);
        }
      }
      *(uint64_t *)(long_result + *long_ptr) = 0;
      int_result = int_result + 1;
      long_result = long_result + 8;
      allocation_size = *long_ptr;
    } while ((ulonglong)(longlong)int_result < (ulonglong)(*(longlong *)(handleIdentifier + 0x50) - allocation_size >> 3));
  }
  InitializeEventSystem(handleIdentifier + 0x548);
  InitializeEventSystem(handleIdentifier + 0x2e0);
  InitializeEventSystem(handleIdentifier + 0x78);
  CloseHandle(*(uint64_t *)(handleIdentifier + 0x70));
  CloseHandle(*(uint64_t *)(handleIdentifier + 0x68));
  if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// void InitializeSystemModule34(longlong handleIdentifier)

void InitializeSystemModule34(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  int compare_result;
  longlong long_result;

  long_result = GetCurrentThread();
  compare_result = (int)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - *(longlong *)(handleIdentifier + 8) >> 3);
  if (0 < compare_result) {
    long_result = 0;
    do {
      long_result = *(longlong *)(*(longlong *)(*(longlong *)(handleIdentifier + 8) + long_result * 8) + 0x40);
      if ((long_result != 0) && (long_result != long_result)) {
        SuspendThread();
      }
      long_result = long_result + 1;
    } while (long_result < compare_result);
  }
  return;
}
// void SystemFunction_71_0(void)

void SystemFunction_71_0(void)

{
  longlong long_result;
  longlong long_result;
  longlong system_RBP;
  longlong system_RSI;
  longlong system_RDI;

  long_result = 0;
  do {
    long_result = *(longlong *)(*(longlong *)(*(longlong *)(system_RSI + 8) + long_result * 8) + 0x40);
    if ((long_result != 0) && (long_result != system_RBP)) {
      SuspendThread();
    }
    long_result = long_result + 1;
  } while (long_result < system_RDI);
  return;
}
// void SystemFunction_76_9(void)

void SystemFunction_76_9(void)

{
  return;
}
// void InitializeSystemDataNode29(longlong handleIdentifier)

void InitializeSystemDataNode29(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  int compare_result;
  longlong long_result;

  long_result = GetCurrentThread();
  compare_result = (int)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - *(longlong *)(handleIdentifier + 8) >> 3);
  if (0 < compare_result) {
    long_result = 0;
    do {
      long_result = *(longlong *)(*(longlong *)(*(longlong *)(handleIdentifier + 8) + long_result * 8) + 0x40);
      if ((long_result != 0) && (long_result != long_result)) {
        ResumeThread();
      }
      long_result = long_result + 1;
    } while (long_result < compare_result);
  }
  return;
}
// void SystemFunction_83_8(void)

void SystemFunction_83_8(void)

{
  longlong long_result;
  longlong long_result;
  longlong system_RBP;
  longlong system_RSI;
  longlong system_RDI;

  long_result = 0;
  do {
    long_result = *(longlong *)(*(longlong *)(*(longlong *)(system_RSI + 8) + long_result * 8) + 0x40);
    if ((long_result != 0) && (long_result != system_RBP)) {
      ResumeThread();
    }
    long_result = long_result + 1;
  } while (long_result < system_RDI);
  return;
}
// void SystemFunction_89_7(void)

void SystemFunction_89_7(void)

{
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_92_0(void)
void SystemFunction_92_0(void)

{
  longlong *long_ptr;
  int int_result;
  uint64_t uint_result;
  uint64_t *ptr_uint_var;
  longlong allocation_size;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  int int_result;
  uint uint_result;
  ulonglong uint_result;
  void **device_pointer_array;
  uint8_t localBuffer_1b8 [32];
  longlong longStack_198;
  longlong longStack_190;
  longlong longStack_188;
  longlong longStack_178;
  void **pbufferPtr_170;
  uint64_t uintStack_168;
  void *system_buffer_ptr_160;
  uint8_t *system_buffer_ptr_158;
  uint uintStack_150;
  uint8_t localBuffer_148 [16];
  void *system_buffer_ptr_138;
  uint8_t *system_buffer_ptr_130;
  uint32_t uintStack_128;
  uint8_t localBuffer_120 [24];
  void *asystem_buffer_ptr_108 [19];
  int intStack_70;
  uint64_t uintStack_58;
  char acStack_48 [16];
  ulonglong uintStack_38;
  longlong long_result;

  long_result = systemConfigurationData;
  uintStack_168 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_1b8;
  longStack_178 = systemConfigurationData;
  CleanupSystemBuffer(asystem_buffer_ptr_108);
  int_result = intStack_70 + -1;
  if (*(int *)(long_result + 0x7b4) < intStack_70 + -1) {
    int_result = *(int *)(long_result + 0x7b4);
  }
  int_result = 3;
  if (3 < int_result) {
    int_result = int_result;
  }
  device_pointer_array = (void **)(long_result + 8);
  long_result = (longlong)int_result;
  psystem_buffer_ptr_170 = device_pointer_array;
  InitializeSystemModule39(device_pointer_array,long_result);
  uint_result = AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
  uint_result = 0;
  system_buffer_ptr_160 = &g_system_data_nodeconfig;
  system_buffer_ptr_158 = localBuffer_148;
  localBuffer_148[0] = 0;
  uintStack_150 = 4;
  strcpy_s(localBuffer_148,SYSTEM_DATA_COMPARE_SIZE,&g_system_global_variable8);
  longStack_198 = long_result + 0x78;
  longStack_190 = long_result + 0x548;
  longStack_188 = long_result + 0x68;
  uint_result = ProcessSystemRequest(uint_result,&bufferPtr_160system_buffer_ptr_160,0,0);
  *(uint64_t *)*device_pointer_array = uint_result;
  system_buffer_ptr_160 = &globalSystemPointerData;
  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
  system_buffer_ptr_138 = &g_system_data_nodeconfig;
  system_buffer_ptr_130 = localBuffer_120;
  localBuffer_120[0] = 0;
  uintStack_128 = 6;
  uintStack_58 = ptr_uint_var;
  strcpy_s(localBuffer_120,SYSTEM_DATA_COMPARE_SIZE,&globalSystemVariable);
  longStack_198 = long_result + 0x78;
  longStack_190 = long_result + 0x548;
  longStack_188 = long_result + 0x68;
  ProcessSystemRequest(ptr_uint_var,&bufferPtr_138system_buffer_ptr_138,1);
  *ptr_uint_var = &globalSystemVariable;
  *(uint64_t **)((longlong)*device_pointer_array + 8) = ptr_uint_var;
  system_buffer_ptr_138 = &globalSystemPointerData;
  int_result = 2;
  *(uint32_t *)(longStack_178 + 0x7b0) = 2;
  if (2 < long_result) {
    long_result = 2;
    do {
      system_buffer_ptr_160 = &g_system_data_nodeconfig;
      system_buffer_ptr_158 = localBuffer_148;
      localBuffer_148[0] = 0;
      uintStack_150 = 7;
      strcpy_s(localBuffer_148,SYSTEM_DATA_COMPARE_SIZE,&g_system_global_variable8);
      SystemFunction_88_0(&uintStack_58,&globalSystemVariable,int_result + -1);
      long_result = -1;
      do {
        allocation_size = long_result + 1;
        long_result = long_result + 1;
        long_result = allocation_size;
      } while (*(char *)((longlong)&uintStack_58 + long_result) != '\0');
      int_result = (int)allocation_size;
      if ((0 < int_result) && (uintStack_150 + int_result < 0xf)) {
                    // WARNING: Subroutine does not return
        memcpy(system_buffer_ptr_158 + uintStack_150,&uintStack_58,(longlong)(int_result + 1));
      }
      uint_result = AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
      longStack_188 = longStack_178 + 0x68;
      longStack_190 = longStack_178 + 0x548;
      longStack_198 = longStack_178 + 0x78;
      uint_result = ProcessSystemRequest(uint_result,&bufferPtr_160system_buffer_ptr_160,2,int_result);
      *(uint64_t *)((longlong)*device_pointer_array + long_result * 8) = uint_result;
      system_buffer_ptr_160 = &globalSystemPointerData;
      int_result = int_result + 1;
      long_result = long_result + 1;
    } while (long_result < long_result);
  }
  long_result = longStack_178;
  int_result = (int)(intStack_70 + (intStack_70 >> 0x1f & 3U)) >> 2;
  int_result = 2;
  if ((1 < int_result) && (int_result = int_result, 4 < int_result)) {
    int_result = 4;
  }
  long_ptr = (longlong *)(longStack_178 + 0x28);
  long_result = (longlong)int_result;
  InitializeSystemModule39(long_ptr,long_result);
  if (0 < long_result) {
    uint_result = uint_result;
    uint_result = uint_result;
    do {
      system_buffer_ptr_160 = &g_system_data_nodeconfig;
      system_buffer_ptr_158 = localBuffer_148;
      localBuffer_148[0] = 0;
      uintStack_150 = 10;
      strcpy_s(localBuffer_148,SYSTEM_DATA_COMPARE_SIZE,&globalSystemVariable);
      SystemFunction_88_0(acStack_48,&globalSystemVariable,uint_result);
      long_result = -1;
      do {
        long_result = long_result;
        long_result = long_result + 1;
      } while (acStack_48[long_result + 1] != '\0');
      int_result = (int)(long_result + 1);
      if ((0 < int_result) && (uintStack_150 + int_result < 0xf)) {
                    // WARNING: Subroutine does not return
        memcpy(system_buffer_ptr_158 + uintStack_150,acStack_48,(longlong)((int)long_result + 2));
      }
      ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
      longStack_198 = long_result + 0x70;
      uintStack_58 = ptr_uint_var;
      InitializeGraphicsSystem(ptr_uint_var,&bufferPtr_160system_buffer_ptr_160,4,longStack_178 + 0x2e0);
      *ptr_uint_var = &g_system_global_variable8;
      *(uint64_t **)(*long_ptr + uint_result * 8) = ptr_uint_var;
      system_buffer_ptr_160 = &globalSystemPointerData;
      uint_result = (ulonglong)((int)uint_result + 1);
      uint_result = uint_result + 1;
      device_pointer_array = pbufferPtr_170;
    } while ((longlong)uint_result < long_result);
  }
  uint_result = uint_result;
  uint_result = uint_result;
  if (((longlong *)device_pointer_array)[1] - (longlong)*device_pointer_array >> 3 != 0) {
    do {
      ConfigureGraphicsDevice(*(uint64_t *)((longlong)*device_pointer_array + uint_result));
      uint_result = (int)uint_result + 1;
      uint_result = uint_result + 8;
      uint_result = (ulonglong)uint_result;
    } while ((ulonglong)(longlong)(int)uint_result <
             (ulonglong)(((longlong *)device_pointer_array)[1] - (longlong)*device_pointer_array >> 3));
  }
  uint_result = uint_result;
  if (*(longlong *)(long_result + 0x30) - *long_ptr >> 3 != 0) {
    do {
      ConfigureGraphicsDevice(*(uint64_t *)(*long_ptr + uint_result));
      uint_result = (int)uint_result + 1;
      uint_result = uint_result + 8;
      uint_result = (ulonglong)uint_result;
    } while ((ulonglong)(longlong)(int)uint_result <
             (ulonglong)(*(longlong *)(long_result + 0x30) - *long_ptr >> 3));
  }
  psystem_buffer_ptr_170 = abufferPtr_108;
  abufferPtr_108[0] = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_1b8);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule6(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemModule6(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint uint_result;
  int int_result;
  longlong long_result;
  longlong long_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  (**(code **)(*(longlong *)*resourceIdentifier + 0x78))();
  uint_result = *(uint *)(*(longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8)
                   + 0xc);
  if (uint_result == 0xffffffff) {
    long_result = InitializeVideoSystem(handleIdentifier + 0x78);
    if (long_result != 0) {
      InitializeSystemModule34(long_result,resourceIdentifier);
    }
  }
  else {
    long_result = *(longlong *)(*(longlong *)(*(longlong *)(handleIdentifier + 8) + (ulonglong)uint_result * 8) + 0x70);
    long_result = long_result + -8;
    if (long_result == 0) {
      long_result = 0;
    }
    InitializeSystemModule39(long_result,resourceIdentifier,(ulonglong)__tls_index,systemFlags,uint_result);
  }
  do {
    int_result = ReleaseSemaphore(*(uint64_t *)(handleIdentifier + 0x68),1);
  } while (int_result == 0);
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// void InitializeSystemDataNode22(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode22(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  longlong long_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  (**(code **)(*(longlong *)*resourceIdentifier + 0x78))();
  long_result = InitializeVideoSystem(handleIdentifier + 0x548);
  if (long_result != 0) {
    InitializeSystemModule34(long_result,resourceIdentifier);
  }
  do {
    int_result = ReleaseSemaphore(*(uint64_t *)(handleIdentifier + 0x68),1,0,systemFlags,uint_result);
  } while (int_result == 0);
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemResources(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)
void InitializeSystemResources(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  uint uint_result;
  int int_result;
  longlong long_result;
  longlong long_result;

  uint_result = *(uint *)(*(longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8)
                   + 0xc);
  if (uint_result == 0xffffffff) {
    long_result = InitializeVideoSystem(handleIdentifier + 0x78);
    if (long_result != 0) {
      InitializeSystemModule36(long_result,resourceIdentifier,(longlong)systemConfig);
    }
  }
  else {
    long_result = *(longlong *)(*(longlong *)(*(longlong *)(handleIdentifier + 8) + (ulonglong)uint_result * 8) + 0x70);
    long_result = long_result + -8;
    if (long_result == 0) {
      long_result = 0;
    }
    ConfigureGraphicsParameters(long_result,resourceIdentifier,(longlong)systemConfig);
  }
  do {
    int_result = ReleaseSemaphore(*(uint64_t *)(handleIdentifier + 0x68),systemConfig,0);
  } while (int_result == 0);
  return;
}
// void InitializeSystemDataNode29(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode29(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)**(uint64_t **)(handleIdentifier + 8);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)*resourceIdentifier;
  stack_long_ptr = resourceIdentifier;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr,systemConfig,systemFlags,uint_result);
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// void InitializeConfigSystem(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeConfigSystem(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = *(uint64_t **)(*(longlong *)(handleIdentifier + 8) + 8);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)*resourceIdentifier;
  stack_long_ptr = resourceIdentifier;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr,systemConfig,systemFlags,uint_result);
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// void InitializeSystemModule1(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule1(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = *(uint64_t **)(*(longlong *)(handleIdentifier + 8) + SYSTEM_DATA_COMPARE_SIZE);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)*resourceIdentifier;
  stack_long_ptr = resourceIdentifier;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr,systemConfig,systemFlags,uint_result);
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// void ConfigureSystemParameters(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void ConfigureSystemParameters(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  longlong long_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  (**(code **)(*(longlong *)*resourceIdentifier + 0x78))();
  long_result = InitializeVideoSystem(handleIdentifier + 0x2e0);
  if (long_result != 0) {
    InitializeSystemModule34(long_result,resourceIdentifier);
  }
  do {
    int_result = ReleaseSemaphore(*(uint64_t *)(handleIdentifier + 0x70),1,0,systemFlags,uint_result);
  } while (int_result == 0);
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemDataNode25(longlong handleIdentifier,uint64_t resourceIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t *pustack_var;

  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
  pustack_var = ptr_uint_var;
  InitializeGraphicsSystem(ptr_uint_var,resourceIdentifier,3,handleIdentifier + 0x2e0,handleIdentifier + 0x70);
  *ptr_uint_var = &globalSystemVariable;
  pustack_var = ptr_uint_var;
  ConfigureGraphicsDevice(ptr_uint_var);
  InitializeSystemModule44(handleIdentifier + 0x48,&pustack_var);
  return ptr_uint_var;
}
// void InitializeSystemModule47(longlong handleIdentifier,longlong *resourceIdentifier)

void InitializeSystemModule47(longlong handleIdentifier,longlong *resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong uint_result;
  longlong long_result;
  longlong *ptr_data;
  int int_result;
  ulonglong uint_result;

  int_result = 0;
  long_ptr = *(longlong **)(handleIdentifier + 0x48);
  uint_result = *(longlong *)(handleIdentifier + 0x50) - (longlong)long_ptr >> 3;
  ptr_data = long_ptr;
  if (uint_result != 0) {
    do {
      if ((longlong *)*ptr_data == resourceIdentifier) {
        ReleaseGraphicsResource(long_ptr[int_result]);
        uint_result = *(ulonglong *)(handleIdentifier + 0x50);
        long_result = *(longlong *)(handleIdentifier + 0x48) + (longlong)int_result * 8;
        uint_result = long_result + 8;
        if (uint_result < uint_result) {
                    // WARNING: Subroutine does not return
          memmove(long_result,uint_result,uint_result - uint_result);
        }
        *(ulonglong *)(handleIdentifier + 0x50) = uint_result - 8;
        break;
      }
      int_result = int_result + 1;
      ptr_data = ptr_data + 1;
    } while ((ulonglong)(longlong)int_result < uint_result);
  }
  if (resourceIdentifier != (longlong *)0x0) {
    long_result = __RTCastToVoid(resourceIdentifier);
    (**(code **)(*resourceIdentifier + 0x28))(resourceIdentifier,0);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
  }
  return;
}
// void SystemFunction_42_6(longlong handleIdentifier,longlong *resourceIdentifier)

void SystemFunction_42_6(longlong handleIdentifier,longlong *resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong uint_result;
  longlong long_result;
  longlong *ptr_data;
  int int_result;
  ulonglong uint_result;

  int_result = 0;
  long_ptr = *(longlong **)(handleIdentifier + 0x48);
  uint_result = *(longlong *)(handleIdentifier + 0x50) - (longlong)long_ptr >> 3;
  ptr_data = long_ptr;
  if (uint_result != 0) {
    do {
      if ((longlong *)*ptr_data == resourceIdentifier) {
        ReleaseGraphicsResource(long_ptr[int_result]);
        uint_result = *(ulonglong *)(handleIdentifier + 0x50);
        long_result = *(longlong *)(handleIdentifier + 0x48) + (longlong)int_result * 8;
        uint_result = long_result + 8;
        if (uint_result < uint_result) {
                    // WARNING: Subroutine does not return
          memmove(long_result,uint_result,uint_result - uint_result);
        }
        *(ulonglong *)(handleIdentifier + 0x50) = uint_result - 8;
        break;
      }
      int_result = int_result + 1;
      ptr_data = ptr_data + 1;
    } while ((ulonglong)(longlong)int_result < uint_result);
  }
  if (resourceIdentifier != (longlong *)0x0) {
    long_result = __RTCastToVoid(resourceIdentifier);
    (**(code **)(*resourceIdentifier + 0x28))(resourceIdentifier,0);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
  }
  return;
}
// void SystemFunction_55_9(void)

void SystemFunction_55_9(void)

{
  longlong long_result;
  longlong *system_RDI;

  long_result = __RTCastToVoid();
  (**(code **)(*system_RDI + 0x28))();
  if (long_result != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeFilesystemSystem(longlong handleIdentifier)
void InitializeFilesystemSystem(longlong handleIdentifier)

{
  int int_result;
  longlong long_result;

  ProcessGameData(*(uint64_t *)(*(longlong *)(handleIdentifier + 8) + 8));
  long_result = systemConfigurationData + SYSTEM_NODE_HEADER_SIZE;
  int_result = _Mtx_lock(long_result);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  int_result = _Mtx_unlock(long_result);
  if (int_result != 0) {
                    // WARNING: Could not recover jumptable at 0x00018005e68f. Too many branches
                    // WARNING: Treating indirect jump as call
    __Throw_C_error_std__YAXH_Z(int_result);
    return;
  }
  return;
}
// void InitializeSystemDataNode19(uint64_t handleIdentifier,longlong *resourceIdentifier,uint8_t systemConfig,uint64_t systemFlags)

void InitializeSystemDataNode19(uint64_t handleIdentifier,longlong *resourceIdentifier,uint8_t systemConfig,uint64_t systemFlags)

{
  code *pis_initialized;
  longlong *long_ptr;
  char char_var;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  while( true ) {
    pis_initialized = *(code **)(*(longlong *)*resourceIdentifier + 0x68);
    if (pis_initialized == (code *)&g_system_func_1) {
      char_var = (char)((longlong *)*resourceIdentifier)[2] != '\0';
    }
    else {
      char_var = (*pis_initialized)();
    }
    if (char_var != '\0') break;
    long_ptr = (longlong *)InitializeSystemModule10(handleIdentifier);
    char_var = (**(code **)(*long_ptr + SYSTEM_NODE_HEADER_SIZE))(long_ptr,systemConfig,*(code **)(*long_ptr + SYSTEM_NODE_HEADER_SIZE),systemFlags,uint_result);
    if (char_var == '\0') {
      pis_initialized = *(code **)(*(longlong *)*resourceIdentifier + 0x80);
      if (pis_initialized == (code *)&g_system_func_4) {
        InitializeSystemDataNode19((longlong *)*resourceIdentifier + 4);
      }
      else {
        (*pis_initialized)();
      }
    }
  }
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// void InitializeAuthenticationSystem(uint64_t handleIdentifier,longlong *resourceIdentifier,char systemConfig)

void InitializeAuthenticationSystem(uint64_t handleIdentifier,longlong *resourceIdentifier,char systemConfig)

{
  code *pis_initialized;
  bool bool_var;
  longlong *long_ptr;
  ulonglong uint_result;
  longlong allocation_size;
  longlong long_result;
  char char_var;

  long_result = resourceIdentifier[1];
  allocation_size = *resourceIdentifier;
  do {
    bool_var = false;
    uint_result = 0;
    if (long_result - allocation_size >> 3 == 0) {
      return;
    }
    do {
      long_ptr = *(longlong **)(uint_result * 8 + allocation_size);
      pis_initialized = *(code **)(*long_ptr + 0x68);
      if (pis_initialized == (code *)&g_system_func_1) {
        char_var = (char)long_ptr[2] != '\0';
      }
      else {
        char_var = (*pis_initialized)();
      }
      if (char_var == '\0') {
        bool_var = true;
        long_ptr = (longlong *)InitializeSystemModule10(handleIdentifier);
        if (systemConfig == '\0') {
          char_var = (**(code **)(*long_ptr + SYSTEM_NODE_HEADER_SIZE))(long_ptr,0);
        }
        else {
          char_var = ValidateGraphicsResource();
        }
        if (char_var == '\0') {
          long_ptr = *(longlong **)(uint_result * 8 + *resourceIdentifier);
          pis_initialized = *(code **)(*long_ptr + 0x80);
          if (pis_initialized == (code *)&g_system_func_4) {
            InitializeSystemDataNode19(long_ptr + 4);
          }
          else {
            (*pis_initialized)();
          }
        }
      }
      long_result = resourceIdentifier[1];
      uint_result = (ulonglong)((int)uint_result + 1);
      allocation_size = *resourceIdentifier;
    } while (uint_result < (ulonglong)(long_result - allocation_size >> 3));
  } while (bool_var);
  return;
}

longlong InitializeSystemModule10(longlong handleIdentifier)

{
  longlong long_result;
  int int_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = 0;
  uint_result = uint_result;
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - *(longlong *)(handleIdentifier + 8) >> 3 != 0) {
    do {
      int_result = _Thrd_id();
      long_result = *(longlong *)(*(longlong *)(handleIdentifier + 8) + uint_result * 8);
      if (*(int *)(long_result + 0x48) == int_result) {
        return long_result;
      }
      uint_result = (ulonglong)((int)uint_result + 1);
    } while (uint_result < (ulonglong)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) - *(longlong *)(handleIdentifier + 8) >> 3));
  }
  if (*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x28) >> 3 != 0) {
    do {
      int_result = _Thrd_id();
      long_result = *(longlong *)(*(longlong *)(handleIdentifier + 0x28) + uint_result * 8);
      if (*(int *)(long_result + 0x48) == int_result) {
        return long_result;
      }
      uint_result = (ulonglong)((int)uint_result + 1);
    } while (uint_result < (ulonglong)(*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x28) >> 3)
            );
  }
  return 0;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemModule33(uint64_t *handleIdentifier)

{
  uint64_t uint_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  uint64_t *node_current;
  longlong long_result;
  longlong long_result;

  uint_result = 0;
  ptr_uint_var = handleIdentifier + 0xb;
  *handleIdentifier = 0;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  handleIdentifier[2] = 0;
  handleIdentifier[5] = 0;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  node_current = ptr_uint_var;
  do {
    FreeSystemMemory(node_current);
    node_current = node_current + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  *(uint64_t *)((longlong)handleIdentifier + 0x25c) = 0;
  *(uint32_t *)(handleIdentifier + 0x4b) = 0;
  handleIdentifier[7] = 0;
  handleIdentifier[8] = SYSTEM_NODE_HEADER_SIZE;
  handleIdentifier[9] = ptr_uint_var;
  do {
    *(uint32_t *)ptr_uint_var = 0;
    uint_result = systemMemoryPool;
    ptr_uint_var = ptr_uint_var + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  long_result = 6;
  handleIdentifier[10] = 0;
  handleIdentifier[6] = handleIdentifier + 8;
  handleIdentifier[4] = 6;
  uint_result = AllocateSystemResource(uint_result,0x7b0,10);
  uint_result = uint_result;
  if (uint_result != 0) {
    ptr_uint_var = (uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE8);
    do {
      ptr_uint_var[-1] = 0;
      *ptr_uint_var = 0;
      *(uint32_t *)(ptr_uint_var + 5) = 0;
      ptr_uint_var[6] = 0;
      *(uint16_t *)(ptr_uint_var + 7) = SYSTEM_DATA_COMPARE_SIZE0;
      ptr_uint_var = ptr_uint_var + 0x29;
      long_result = long_result + -1;
      uint_result = uint_result;
    } while (long_result != 0);
  }
  handleIdentifier[3] = uint_result;
  if (uint_result == 0) {
    handleIdentifier[4] = 0;
    uint_result = uint_result;
  }
  else {
    uint_result = handleIdentifier[4];
  }
  uint_result = uint_result;
  if (uint_result != 0) {
    do {
      uint_result = uint_result + 1;
      *(uint8_t *)(uint_result + 0x141 + handleIdentifier[3]) = 0;
      uint_result = uint_result + 0x148;
    } while (uint_result < (ulonglong)handleIdentifier[4]);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule44(ulonglong *handleIdentifier,uint64_t *resourceIdentifier)
void InitializeSystemModule44(ulonglong *handleIdentifier,uint64_t *resourceIdentifier)

{
  longlong long_result;
  uint64_t *node_root;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;

  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  if (ptr_uint_var < (uint64_t *)handleIdentifier[2]) {
    handleIdentifier[1] = (ulonglong)(ptr_uint_var + 1);
    *ptr_uint_var = *resourceIdentifier;
    return;
  }
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  long_result = (longlong)ptr_uint_var - (longlong)ptr_uint_var >> 3;
  if (long_result == 0) {
    long_result = 1;
  }
  else {
    long_result = long_result * 2;
    if (long_result == 0) {
      node_root = (uint64_t *)0x0;
      goto LAB_18005eb20;
    }
  }
  node_root = (uint64_t *)AllocateSystemResource(systemMemoryPool,long_result * 8,(char)handleIdentifier[3]);
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
LAB_18005eb20:
  if (ptr_uint_var != ptr_uint_var) {
                    // WARNING: Subroutine does not return
    memmove(node_root,ptr_uint_var,(longlong)ptr_uint_var - (longlong)ptr_uint_var);
  }
  *node_root = *resourceIdentifier;
  if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = (ulonglong)node_root;
  handleIdentifier[1] = (ulonglong)(node_root + 1);
  handleIdentifier[2] = (ulonglong)(node_root + long_result);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong InitializeVideoSystem(longlong handleIdentifier)

{
  longlong *long_ptr;
  uint *node_root;
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  uint uint_result;
  ulonglong uint_result;
  ulonglong *node_previous;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint uint_result;
  bool node_initialization_flag;
  char acstack_var [16];

  uint_result = GetCurrentThreadId();
  uint_result = (uint_result >> SYSTEM_DATA_COMPARE_SIZE ^ uint_result) * -0x7a143595;
  uint_result = (uint_result >> 0xd ^ uint_result) * -0x3d4d51cb;
  uint_result = (ulonglong)(uint_result >> SYSTEM_DATA_COMPARE_SIZE ^ uint_result);
  node_previous = *(ulonglong **)(handleIdentifier + 0x30);
  for (ptr_uint_var = node_previous; uint_result = uint_result, ptr_uint_var != (ulonglong *)0x0; ptr_uint_var = (ulonglong *)ptr_uint_var[2])
  {
    while( true ) {
      uint_result = uint_result & *ptr_uint_var - 1;
      uint_result = *(uint *)(uint_result * SYSTEM_DATA_COMPARE_SIZE + ptr_uint_var[1]);
      if (uint_result == uint_result) {
        long_result = *(longlong *)(ptr_uint_var[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE);
        if (ptr_uint_var == node_previous) {
          return long_result;
        }
        do {
          uint_result = uint_result & *node_previous - 1;
          if (*(int *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
            node_root = (uint *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
            LOCK();
            node_initialization_flag = *node_root == 0;
            if (node_initialization_flag) {
              *node_root = uint_result;
            }
            UNLOCK();
            if (node_initialization_flag) {
              *(longlong *)(node_previous[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = long_result;
              return long_result;
            }
          }
          uint_result = uint_result + 1;
        } while( true );
      }
      if (uint_result == 0) break;
      uint_result = uint_result + 1;
    }
  }
  LOCK();
  long_ptr = (longlong *)(handleIdentifier + 0x38);
  long_result = *long_ptr;
  *long_ptr = *long_ptr + 1;
  UNLOCK();
  uint_result = long_result + 1;
  do {
    if (*node_previous >> 1 <= uint_result) {
      LOCK();
      node_root = (uint *)(handleIdentifier + 600);
      uint_result = *node_root;
      *node_root = *node_root | 1;
      UNLOCK();
      if ((uint_result & 1) == 0) {
        ptr_uint_var = *(ulonglong **)(handleIdentifier + 0x30);
        node_previous = ptr_uint_var;
        uint_result = *ptr_uint_var;
        if (*ptr_uint_var >> 1 <= uint_result) {
          do {
            uint_result = uint_result;
            uint_result = uint_result * 2;
          } while ((uint_result & 0x7fffffffffffffff) <= uint_result);
          node_previous = (ulonglong *)AllocateSystemResource(systemMemoryPool,uint_result * SYSTEM_NODE_HEADER_SIZE + 0x1f,10);
          if (node_previous == (ulonglong *)0x0) {
            LOCK();
            *(longlong *)(handleIdentifier + 0x38) = *(longlong *)(handleIdentifier + 0x38) + -1;
            UNLOCK();
            *(uint32_t *)(handleIdentifier + 600) = 0;
            return 0;
          }
          *node_previous = uint_result;
          node_previous[1] = (ulonglong)(-(int)(node_previous + 3) & 7) + (longlong)(node_previous + 3);
          long_result = 0;
          for (; uint_result != 0; uint_result = uint_result - 1) {
            *(uint64_t *)(long_result + 8 + node_previous[1]) = 0;
            *(uint32_t *)(long_result + node_previous[1]) = 0;
            long_result = long_result + SYSTEM_DATA_COMPARE_SIZE;
          }
          node_previous[2] = (ulonglong)ptr_uint_var;
          *(ulonglong **)(handleIdentifier + 0x30) = node_previous;
        }
        *(uint32_t *)(handleIdentifier + 600) = 0;
      }
    }
    if (uint_result < (*node_previous >> 2) + (*node_previous >> 1)) {
      long_result = InitializeRenderSystem(handleIdentifier,0,acstack_var);
      if (long_result == 0) {
        LOCK();
        *(longlong *)(handleIdentifier + 0x38) = *(longlong *)(handleIdentifier + 0x38) + -1;
        UNLOCK();
        return 0;
      }
      if (acstack_var[0] != '\0') {
        LOCK();
        *(longlong *)(handleIdentifier + 0x38) = *(longlong *)(handleIdentifier + 0x38) + -1;
        UNLOCK();
      }
      do {
        uint_result = uint_result & *node_previous - 1;
        if (*(int *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
          node_root = (uint *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
          LOCK();
          node_initialization_flag = *node_root == 0;
          if (node_initialization_flag) {
            *node_root = uint_result;
          }
          UNLOCK();
          if (node_initialization_flag) {
            *(longlong *)(node_previous[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = long_result;
            return long_result;
          }
        }
        uint_result = uint_result + 1;
      } while( true );
    }
    node_previous = *(ulonglong **)(handleIdentifier + 0x30);
  } while( true );
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong SystemFunction_11_3(void)

{
  longlong *long_ptr;
  uint *node_root;
  int *pcompare_result;
  uint uint_result;
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong system_RSI;
  ulonglong *system_RDI;
  longlong system_R14;
  int system_R15D;
  bool comparison_result_flag;
  char init_input_stack_50;

  LOCK();
  long_ptr = (longlong *)(system_R14 + 0x38);
  long_result = *long_ptr;
  *long_ptr = *long_ptr + 1;
  UNLOCK();
  uint_result = long_result + 1;
  while( true ) {
    if (*system_RDI >> 1 <= uint_result) {
      LOCK();
      node_root = (uint *)(system_R14 + 600);
      uint_result = *node_root;
      *node_root = *node_root | 1;
      UNLOCK();
      if ((uint_result & 1) == 0) {
        ptr_uint_var = *(ulonglong **)(system_R14 + 0x30);
        system_RDI = ptr_uint_var;
        uint_result = *ptr_uint_var;
        if (*ptr_uint_var >> 1 <= uint_result) {
          do {
            uint_result = uint_result;
            uint_result = uint_result * 2;
          } while ((uint_result & 0x7fffffffffffffff) <= uint_result);
          system_RDI = (ulonglong *)AllocateSystemResource(systemMemoryPool,uint_result * SYSTEM_NODE_HEADER_SIZE + 0x1f,10);
          if (system_RDI == (ulonglong *)0x0) {
            LOCK();
            *(longlong *)(system_R14 + 0x38) = *(longlong *)(system_R14 + 0x38) + -1;
            UNLOCK();
            *(uint32_t *)(system_R14 + 600) = 0;
            return 0;
          }
          *system_RDI = uint_result;
          system_RDI[1] = (ulonglong)(-(int)(system_RDI + 3) & 7) + (longlong)(system_RDI + 3);
          long_result = 0;
          for (; uint_result != 0; uint_result = uint_result - 1) {
            *(uint64_t *)(long_result + 8 + system_RDI[1]) = 0;
            *(uint32_t *)(long_result + system_RDI[1]) = 0;
            long_result = long_result + SYSTEM_DATA_COMPARE_SIZE;
          }
          system_RDI[2] = (ulonglong)ptr_uint_var;
          *(ulonglong **)(system_R14 + 0x30) = system_RDI;
        }
        *(uint32_t *)(system_R14 + 600) = 0;
      }
    }
    if (uint_result < (*system_RDI >> 2) + (*system_RDI >> 1)) break;
    system_RDI = *(ulonglong **)(system_R14 + 0x30);
  }
  long_result = InitializeRenderSystem();
  if (long_result == 0) {
    LOCK();
    *(longlong *)(system_R14 + 0x38) = *(longlong *)(system_R14 + 0x38) + -1;
    UNLOCK();
    return 0;
  }
  if (init_input_stack_50 != '\0') {
    LOCK();
    *(longlong *)(system_R14 + 0x38) = *(longlong *)(system_R14 + 0x38) + -1;
    UNLOCK();
  }
  do {
    uint_result = system_RSI & *system_RDI - 1;
    if (*(int *)(system_RDI[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
      pcompare_result = (int *)(system_RDI[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
      LOCK();
      comparison_result_flag = *pcompare_result == 0;
      if (comparison_result_flag) {
        *pcompare_result = system_R15D;
      }
      UNLOCK();
      if (comparison_result_flag) {
        *(longlong *)(system_RDI[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = long_result;
        return long_result;
      }
    }
    system_RSI = uint_result + 1;
  } while( true );
}

uint64_t SystemFunction_34_8(uint64_t handleIdentifier,uint64_t resourceIdentifier,longlong *systemConfig)

{
  int *ptr_int_var;
  uint64_t uint_result;
  longlong in_RAX;
  ulonglong system_RSI;
  ulonglong uint_result;
  longlong *system_RDI;
  int system_R15D;
  bool bool_var;

  uint_result = *(uint64_t *)(systemConfig[1] + 8 + in_RAX * SYSTEM_DATA_COMPARE_SIZE);
  if (systemConfig == system_RDI) {
    return uint_result;
  }
  do {
    uint_result = system_RSI & *system_RDI - 1U;
    if (*(int *)(system_RDI[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
      ptr_int_var = (int *)(system_RDI[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
      LOCK();
      bool_var = *ptr_int_var == 0;
      if (bool_var) {
        *ptr_int_var = system_R15D;
      }
      UNLOCK();
      if (bool_var) {
        *(uint64_t *)(system_RDI[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = uint_result;
        return uint_result;
      }
    }
    system_RSI = uint_result + 1;
  } while( true );
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong SystemFunction_43_6(void)

{
  uint *ptr_uint_var;
  int *ptr_int_var;
  uint uint_result;
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong system_RBP;
  ulonglong system_RSI;
  ulonglong *system_RDI;
  uint32_t uint_result;
  longlong system_R12;
  longlong system_R14;
  int system_R15D;
  bool bool_var;
  char init_input_stack_50;

  while( true ) {
    do {
      uint_result = (uint32_t)system_R12;
      *(uint32_t *)(system_R14 + 600) = uint_result;
      do {
        do {
          if (system_RBP < (*system_RDI >> 2) + (*system_RDI >> 1)) {
            long_result = InitializeRenderSystem();
            if (long_result == 0) {
              LOCK();
              *(longlong *)(system_R14 + 0x38) = *(longlong *)(system_R14 + 0x38) + -1;
              UNLOCK();
              return 0;
            }
            if (init_input_stack_50 != (char)system_R12) {
              LOCK();
              *(longlong *)(system_R14 + 0x38) = *(longlong *)(system_R14 + 0x38) + -1;
              UNLOCK();
            }
            do {
              uint_result = system_RSI & *system_RDI - 1;
              if (*(int *)(system_RDI[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
                ptr_int_var = (int *)(system_RDI[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
                LOCK();
                bool_var = *ptr_int_var == 0;
                if (bool_var) {
                  *ptr_int_var = system_R15D;
                }
                UNLOCK();
                if (bool_var) {
                  *(longlong *)(system_RDI[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = long_result;
                  return long_result;
                }
              }
              system_RSI = uint_result + 1;
            } while( true );
          }
          system_RDI = *(ulonglong **)(system_R14 + 0x30);
        } while (system_RBP < *system_RDI >> 1);
        LOCK();
        ptr_uint_var = (uint *)(system_R14 + 600);
        uint_result = *ptr_uint_var;
        *ptr_uint_var = *ptr_uint_var | 1;
        UNLOCK();
      } while ((uint_result & 1) != 0);
      ptr_uint_var = *(ulonglong **)(system_R14 + 0x30);
      system_RDI = ptr_uint_var;
      uint_result = *ptr_uint_var;
    } while (system_RBP < *ptr_uint_var >> 1);
    do {
      uint_result = uint_result;
      uint_result = uint_result * 2;
    } while ((uint_result & 0x7fffffffffffffff) <= system_RBP);
    system_RDI = (ulonglong *)AllocateSystemResource(systemMemoryPool,uint_result * SYSTEM_NODE_HEADER_SIZE + 0x1f,10);
    if (system_RDI == (ulonglong *)0x0) break;
    *system_RDI = uint_result;
    system_RDI[1] = (ulonglong)(-(int)(system_RDI + 3) & 7) + (longlong)(system_RDI + 3);
    long_result = system_R12;
    for (; uint_result != 0; uint_result = uint_result - 1) {
      *(longlong *)(long_result + 8 + system_RDI[1]) = system_R12;
      *(uint32_t *)(long_result + system_RDI[1]) = uint_result;
      long_result = long_result + SYSTEM_DATA_COMPARE_SIZE;
    }
    system_RDI[2] = (ulonglong)ptr_uint_var;
    *(ulonglong **)(system_R14 + 0x30) = system_RDI;
  }
  LOCK();
  *(longlong *)(system_R14 + 0x38) = *(longlong *)(system_R14 + 0x38) + -1;
  UNLOCK();
  *(uint32_t *)(system_R14 + 600) = uint_result;
  return 0;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeRenderSystem(longlong *handleIdentifier,char resourceIdentifier,uint8_t *systemConfig)

{
  longlong *long_ptr;
  uint64_t *node_root;
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  ulonglong uint_result;
  ulonglong uint_result;
  bool bool_var;

  node_current = (uint64_t *)0x0;
  node_root = (uint64_t *)*handleIdentifier;
  do {
    if (node_root == (uint64_t *)0x0) {
      *systemConfig = 0;
      if (resourceIdentifier == '\0') {
        node_root = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x68,10,0,INVALID_HANDLE_VALUE);
        if (node_root == (uint64_t *)0x0) {
          return (uint64_t *)0x0;
        }
        node_root[1] = 0;
        *(uint8_t *)(node_root + 2) = 0;
        node_root[3] = 0;
        *node_root = &globalSystemVariable;
        node_root[4] = 0;
        node_root[5] = 0;
        node_root[6] = 0;
        node_root[7] = 0;
        node_root[8] = 0;
        *(uint8_t *)(node_root + 9) = 0;
        node_root[10] = handleIdentifier;
        *node_root = &globalSystemVariable;
        node_root[0xb] = SYSTEM_NODE_HEADER_SIZE;
        node_root[0xc] = 0;
        InitializeShaderSystem(node_root);
      }
      else {
        node_root = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x88,10,0,INVALID_HANDLE_VALUE);
        if (node_root == (uint64_t *)0x0) {
          return (uint64_t *)0x0;
        }
        node_root[1] = 0;
        *(uint8_t *)(node_root + 2) = 0;
        node_root[3] = 0;
        *node_root = &globalSystemVariable;
        node_root[4] = 0;
        node_root[5] = 0;
        node_root[6] = 0;
        node_root[7] = 0;
        node_root[8] = 0;
        *(uint8_t *)(node_root + 9) = 1;
        node_root[10] = handleIdentifier;
        *node_root = &globalSystemVariable;
        node_root[0xb] = 0;
        node_root[0xc] = 0;
        node_root[0xd] = SYSTEM_DATA_COMPARE_SIZE;
        node_root[0xe] = 0;
        node_root[0xf] = 0;
        node_root[SYSTEM_DATA_COMPARE_SIZE] = 0;
        uint_result = handleIdentifier[4] - 1U | handleIdentifier[4] - 1U >> 1;
        uint_result = uint_result | uint_result >> 2;
        uint_result = uint_result | uint_result >> 4;
        uint_result = 1;
        do {
          uint_result = uint_result | uint_result >> (((byte)uint_result & 7) << 3);
          uint_result = uint_result * 2;
        } while (uint_result < 8);
        uint_result = uint_result + 1 >> 1;
        if ((ulonglong)node_root[0xd] < uint_result) {
          node_root[0xd] = uint_result;
        }
        InitializeSystemModule23(node_root,0);
      }
      ptr_uint_var = node_current;
      if (node_root != (uint64_t *)0x0) {
        LOCK();
        *(int *)(handleIdentifier + 1) = (int)handleIdentifier[1] + 1;
        UNLOCK();
        long_result = *handleIdentifier;
        do {
          ptr_uint_var = (uint64_t *)(long_result + 8);
          if (long_result == 0) {
            ptr_uint_var = node_current;
          }
          node_root[1] = ptr_uint_var;
          LOCK();
          long_result = *handleIdentifier;
          bool_var = long_result == long_result;
          if (bool_var) {
            *handleIdentifier = (longlong)node_root;
            long_result = long_result;
          }
          UNLOCK();
          long_result = long_result;
          ptr_uint_var = node_root;
        } while (!bool_var);
      }
      return ptr_uint_var;
    }
    if ((*(char *)(node_root + 2) != '\0') && (*(char *)(node_root + 9) == resourceIdentifier)) {
      LOCK();
      bool_var = *(char *)(node_root + 2) == '\x01';
      if (bool_var) {
        *(char *)(node_root + 2) = '\0';
      }
      UNLOCK();
      if (bool_var) {
        *systemConfig = 1;
        return node_root;
      }
    }
    long_ptr = node_root + 1;
    node_root = (uint64_t *)(*long_ptr + -8);
    if (*long_ptr == 0) {
      node_root = node_current;
    }
  } while( true );
}

uint64_t InitializeSystemModule39(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ulonglong uint_result;
  char char_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  uint_result = (ulonglong)((uint)uint_result & 0x1f);
  if ((uint_result & 0x1f) == 0) {
    uint_result = 0;
    if (*(longlong *)(handleIdentifier + 0x40) == 0) {
LAB_18005f0e6:
      if ((((*(longlong *)(handleIdentifier + 0x28) - uint_result) - SYSTEM_NODE_HEADER_SIZE < 0x8000000000000001) ||
          (((*(longlong *)(handleIdentifier + 0x80) == 0 ||
            (*(longlong *)(handleIdentifier + 0x60) == *(longlong *)(handleIdentifier + 0x68))) &&
           (char_var = InitializeSystemModule23(handleIdentifier,*(uint64_t *)(handleIdentifier + 0x60),uint_result,systemFlags,
                                  INVALID_HANDLE_VALUE), char_var == '\0')))) ||
         (long_result = InitializeSystemModule59(*(uint64_t *)(handleIdentifier + 0x50)), long_result == 0)) {
        return 0;
      }
      do {
        *(uint8_t *)(long_result + 0x110 + uint_result) = 0;
        uint_result = uint_result + 1;
      } while (uint_result != SYSTEM_NODE_HEADER_SIZE);
      if (*(longlong *)(handleIdentifier + 0x40) == 0) {
        *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE0) = long_result;
      }
      else {
        *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE0) = *(uint64_t *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0);
        *(longlong *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0) = long_result;
      }
      *(longlong *)(handleIdentifier + 0x40) = long_result;
      *(longlong *)(handleIdentifier + 0x60) = *(longlong *)(handleIdentifier + 0x60) + 1;
    }
    else {
      uint_result = uint_result;
      do {
        if (*(char *)(*(longlong *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0) + 0x110 + uint_result) == '\0')
        goto LAB_18005f0e6;
        uint_result = uint_result + 1;
      } while (uint_result < SYSTEM_NODE_HEADER_SIZE);
      long_result = *(longlong *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0);
      *(longlong *)(handleIdentifier + 0x40) = long_result;
      do {
        *(uint8_t *)(long_result + 0x110 + uint_result) = 0;
        uint_result = uint_result + 1;
      } while (uint_result != SYSTEM_NODE_HEADER_SIZE);
    }
    resourceIdentifier = (longlong *)*resourceIdentifier;
    **(longlong **)(handleIdentifier + 0x40) = (longlong)resourceIdentifier;
    if (resourceIdentifier != (longlong *)0x0) {
      (**(code **)(*resourceIdentifier + 0x28))();
    }
    ptr_uint_var = (ulonglong *)
             (*(longlong *)(handleIdentifier + 0x70) * SYSTEM_DATA_COMPARE_SIZE +
             *(longlong *)(*(longlong *)(handleIdentifier + 0x58) + SYSTEM_DATA_COMPARE_SIZE));
    *ptr_uint_var = uint_result;
    ptr_uint_var[1] = *(ulonglong *)(handleIdentifier + 0x40);
    *(uint64_t *)(*(longlong *)(handleIdentifier + 0x58) + 8) = *(uint64_t *)(handleIdentifier + 0x70);
    *(ulonglong *)(handleIdentifier + 0x70) =
         *(longlong *)(handleIdentifier + 0x68) - 1U & *(longlong *)(handleIdentifier + 0x70) + 1U;
  }
  else {
    resourceIdentifier = (longlong *)*resourceIdentifier;
    *(longlong **)(*(longlong *)(handleIdentifier + 0x40) + uint_result * 8) = resourceIdentifier;
    if (resourceIdentifier != (longlong *)0x0) {
      (**(code **)(*resourceIdentifier + 0x28))();
    }
  }
  *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = uint_result + 1;
  return 1;
}

uint64_t InitializeSystemModule34(longlong handleIdentifier,longlong *resourceIdentifier)

{
  ulonglong uint_result;
  char char_var;
  longlong *long_ptr;
  ulonglong uint_result;
  ulonglong flag_initialized;
  longlong *stack_long_ptr;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  uint_result = (ulonglong)((uint)uint_result & 0x1f);
  if ((uint_result & 0x1f) != 0) {
    resourceIdentifier = (longlong *)*resourceIdentifier;
    *(longlong **)(*(longlong *)(handleIdentifier + 0x40) + uint_result * 8) = resourceIdentifier;
    if (resourceIdentifier != (longlong *)0x0) {
      (**(code **)(*resourceIdentifier + 0x28))();
    }
LAB_18005f30a:
    *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = uint_result + 1;
    return 1;
  }
  if (0x8000000000000000 < (*(longlong *)(handleIdentifier + 0x28) - uint_result) - SYSTEM_NODE_HEADER_SIZE) {
    char_var = InitializeSystemModule17(handleIdentifier,&flag_initialized,uint_result,uint_result,INVALID_HANDLE_VALUE);
    if (char_var != '\0') {
      long_ptr = (longlong *)InitializeSystemModule59(*(uint64_t *)(handleIdentifier + 0x50));
      if (long_ptr != (longlong *)0x0) {
        long_ptr[0x21] = 0;
        resourceIdentifier = (longlong *)*resourceIdentifier;
        *long_ptr = (longlong)resourceIdentifier;
        if (resourceIdentifier != (longlong *)0x0) {
          stack_long_ptr = long_ptr;
          (**(code **)(*resourceIdentifier + 0x28))();
        }
        *(longlong **)(flag_initialized + 8) = long_ptr;
        *(longlong **)(handleIdentifier + 0x40) = long_ptr;
        goto LAB_18005f30a;
      }
      long_ptr = *(longlong **)(handleIdentifier + 0x60);
      long_ptr[1] = *long_ptr - 1U & long_ptr[1] - 1U;
      *(uint64_t *)(flag_initialized + 8) = 0;
    }
  }
  return 0;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t InitializeSystemModule23(longlong handleIdentifier,longlong resourceIdentifier)

{
  uint64_t *ptr_uint_var;
  longlong long_result;
  uint64_t uint_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  uint64_t *node_previous;
  uint64_t *node_next;
  longlong long_result;

  long_result = *(longlong *)(handleIdentifier + 0x68);
  *(longlong *)(handleIdentifier + 0x68) = long_result * 2;
  ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,long_result * SYSTEM_NODE_HEADER_SIZE + 0x27,10);
  if (ptr_uint_var == (uint64_t *)0x0) {
    *(ulonglong *)(handleIdentifier + 0x68) = *(ulonglong *)(handleIdentifier + 0x68) >> 1;
    return 0;
  }
  long_result = 0;
  node_previous = (uint64_t *)((ulonglong)(-(int)(ptr_uint_var + 4) & 7) + (longlong)(ptr_uint_var + 4));
  if (*(longlong *)(handleIdentifier + 0x60) != 0) {
    uint_result = *(longlong *)(handleIdentifier + 0x70) - *(longlong *)(handleIdentifier + 0x60) & long_result - 1U;
    node_next = node_previous;
    do {
      long_result = long_result + 1;
      uint_result = uint_result + 1 & long_result - 1U;
      ptr_uint_var = (uint64_t *)(*(longlong *)(handleIdentifier + 0x78) + uint_result * SYSTEM_DATA_COMPARE_SIZE);
      uint_result = ptr_uint_var[1];
      *node_next = *ptr_uint_var;
      node_next[1] = uint_result;
      uint_result = uint_result;
      node_next = node_next + 2;
    } while (uint_result != *(ulonglong *)(handleIdentifier + 0x70));
  }
  *ptr_uint_var = *(uint64_t *)(handleIdentifier + 0x68);
  ptr_uint_var[1] = resourceIdentifier + -1;
  ptr_uint_var[2] = node_previous;
  uint_result = *(uint64_t *)(handleIdentifier + 0x80);
  ptr_uint_var[3] = uint_result;
  *(longlong *)(handleIdentifier + 0x70) = long_result;
  *(uint64_t **)(handleIdentifier + 0x78) = node_previous;
  *(uint64_t **)(handleIdentifier + 0x80) = ptr_uint_var;
  *(uint64_t **)(handleIdentifier + 0x58) = ptr_uint_var;
  return CONCAT71((int7)((ulonglong)uint_result >> 8),1);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeShaderSystem(longlong handleIdentifier)

{
  longlong *long_ptr;
  ulonglong uint_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;

  long_ptr = *(longlong **)(handleIdentifier + 0x60);
  if (long_ptr == (longlong *)0x0) {
    long_result = *(longlong *)(handleIdentifier + 0x58);
    long_result = long_result;
    long_result = 0;
  }
  else {
    long_result = *long_ptr;
    long_result = *(longlong *)(handleIdentifier + 0x58);
    long_result = long_result;
  }
  ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,(long_result + long_result * 2) * 8 + 0x36,10);
  ptr_uint_var = ptr_uint_var;
  if (ptr_uint_var != (uint64_t *)0x0) {
    ptr_uint_var = (uint64_t *)((ulonglong)(-(int)(ptr_uint_var + 5) & 7) + (longlong)(ptr_uint_var + 5));
    ptr_uint_var = (uint64_t *)
              ((ulonglong)(-(int)(ptr_uint_var + long_result * 2) & 7) + (longlong)(ptr_uint_var + long_result * 2));
    if (long_ptr != (longlong *)0x0) {
      uint_result = long_ptr[1];
      uint_result = uint_result;
      node_current = ptr_uint_var;
      do {
        uint_result = *long_ptr - 1U & uint_result + 1;
        *node_current = *(uint64_t *)(long_ptr[3] + uint_result * 8);
        node_current = node_current + 1;
      } while (uint_result != uint_result);
    }
    if (long_result != 0) {
      node_current = ptr_uint_var + long_result;
      ptr_uint_var = ptr_uint_var;
      do {
        *ptr_uint_var = 1;
        *node_current = ptr_uint_var;
        node_current = node_current + 1;
        ptr_uint_var = ptr_uint_var + 2;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    ptr_uint_var[4] = long_ptr;
    ptr_uint_var[2] = ptr_uint_var;
    ptr_uint_var[3] = ptr_uint_var;
    *ptr_uint_var = *(uint64_t *)(handleIdentifier + 0x58);
    ptr_uint_var[1] = *(longlong *)(handleIdentifier + 0x58) - 1U & long_result - 1U;
    ptr_uint_var = (uint64_t *)CONCAT71((int7)(long_result - 1U >> 8),1);
    *(uint64_t **)(handleIdentifier + 0x60) = ptr_uint_var;
    *(longlong *)(handleIdentifier + 0x58) = *(longlong *)(handleIdentifier + 0x58) << 1;
  }
  return ptr_uint_var;
}

uint64_t InitializeResourceSystem(void)

{
  ulonglong uint_result;
  longlong in_RAX;
  uint64_t *node_root;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  longlong system_RBX;
  longlong system_RBP;
  longlong system_RSI;
  longlong *system_RDI;
  uint64_t *systemParam_;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;

  node_current = (uint64_t *)((ulonglong)(-(int)in_RAX & 7) + in_RAX);
  ptr_uint_var = (uint64_t *)
           ((ulonglong)(-(int)(node_current + system_RBX * 2) & 7) + (longlong)(node_current + system_RBX * 2));
  if (system_RDI != (longlong *)0x0) {
    uint_result = system_RDI[1];
    uint_result = uint_result;
    ptr_uint_var = ptr_uint_var;
    do {
      uint_result = *system_RDI - 1U & uint_result + 1;
      *ptr_uint_var = *(uint64_t *)(system_RDI[3] + uint_result * 8);
      ptr_uint_var = ptr_uint_var + 1;
    } while (uint_result != uint_result);
  }
  if (system_RBX != 0) {
    ptr_uint_var = ptr_uint_var + system_RBP;
    node_root = node_current;
    do {
      *node_root = 1;
      *ptr_uint_var = node_root;
      ptr_uint_var = ptr_uint_var + 1;
      node_root = node_root + 2;
      system_RBX = system_RBX + -1;
    } while (system_RBX != 0);
  }
  systemParam_[4] = system_RDI;
  systemParam_[2] = node_current;
  systemParam_[3] = ptr_uint_var;
  *systemParam_ = *(uint64_t *)(system_RSI + 0x58);
  systemParam_[1] = *(longlong *)(system_RSI + 0x58) - 1U & system_RBP - 1U;
  *(uint64_t **)(system_RSI + 0x60) = systemParam_;
  *(longlong *)(system_RSI + 0x58) = *(longlong *)(system_RSI + 0x58) << 1;
  return CONCAT71((int7)(system_RBP - 1U >> 8),1);
}
// void SystemFunction_47_6(void)

void SystemFunction_47_6(void)

{
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong ConfigureGraphicsParameters(longlong handleIdentifier,longlong *resourceIdentifier,longlong systemConfig)

{
  uint *ptr_uint_var;
  uint32_t *node_root;
  uint uint_result;
  uint uint_result;
  longlong *pallocation_size;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  longlong *long_ptr;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint32_t *node_root1;
  uint32_t *node_root2;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  bool handle_validation_flag;
  ulonglong uintStack_78;
  ulonglong uintStack_68;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  uint_result = *(ulonglong *)(handleIdentifier + 0x40);
  uint_result = *(ulonglong *)(handleIdentifier + 0x70);
  uint_result = *(ulonglong *)(handleIdentifier + 0x60);
  uint_result = 0;
  uint_result = systemConfig + uint_result;
  uintStack_78 = uint_result - 1 & 0xffffffffffffffe0;
  long_result = (uint_result - 1 & 0xffffffffffffffe0) - uintStack_78;
  uint_result = uint_result;
  uint_result = uint_result;
  uint_result = uint_result;
  if (long_result != 0) {
    do {
      uintStack_68 = uint_result;
      uint_result = uint_result;
      if ((*(longlong *)(handleIdentifier + 0x40) == 0) ||
         (uint_result = *(ulonglong *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0), uint_result = uint_result,
         uint_result == uint_result)) goto joined_r0x00018005f6ef;
      do {
        if (*(char *)(uint_result + 0x110 + uint_result) == '\0') goto joined_r0x00018005f6ef;
        uint_result = uint_result + 1;
      } while (uint_result < SYSTEM_NODE_HEADER_SIZE);
      uintStack_78 = uintStack_78 + SYSTEM_NODE_HEADER_SIZE;
      uint_result = *(ulonglong *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0);
      *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
      ptr_uint_var = (ulonglong *)
                (*(longlong *)(*(longlong *)(handleIdentifier + 0x58) + SYSTEM_DATA_COMPARE_SIZE) +
                *(longlong *)(handleIdentifier + 0x70) * SYSTEM_DATA_COMPARE_SIZE);
      *ptr_uint_var = uintStack_78;
      ptr_uint_var[1] = *(ulonglong *)(handleIdentifier + 0x40);
      *(ulonglong *)(handleIdentifier + 0x70) =
           *(longlong *)(handleIdentifier + 0x68) - 1U & *(longlong *)(handleIdentifier + 0x70) + 1U;
      if (uint_result != 0) {
        uint_result = uint_result;
      }
      long_result = long_result + -SYSTEM_NODE_HEADER_SIZE;
      uint_result = uint_result;
    } while (long_result != 0);
LAB_18005f6a2:
    long_result = 0;
    uint_result = uint_result;
    while( true ) {
      do {
        *(uint8_t *)(uint_result + 0x110 + long_result) = 0;
        long_result = long_result + 1;
      } while (long_result != SYSTEM_NODE_HEADER_SIZE);
      uint_result = *(ulonglong *)(handleIdentifier + 0x40);
      if (uint_result == uint_result) break;
      uint_result = *(ulonglong *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0);
      long_result = 0;
    }
  }
  *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
  if ((uint_result & 0x1f) == 0) {
    if (uint_result != 0) {
      uint_result = uint_result;
    }
    *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
  }
  while( true ) {
    uint_result = (uint_result & 0xffffffffffffffe0) + SYSTEM_NODE_HEADER_SIZE;
    uint_result = uint_result;
    if (uint_result - uint_result < 0x8000000000000001) {
      uint_result = uint_result;
    }
    for (; uint_result != uint_result; uint_result = uint_result + 1) {
      pallocation_size = (longlong *)*resourceIdentifier;
      *(longlong **)(*(longlong *)(handleIdentifier + 0x40) + (ulonglong)((uint)uint_result & 0x1f) * 8) = pallocation_size;
      if (pallocation_size != (longlong *)0x0) {
        (**(code **)(*pallocation_size + 0x28))();
      }
      resourceIdentifier = resourceIdentifier + 1;
    }
    uint_result = *(ulonglong *)(handleIdentifier + 0x40);
    if (uint_result == uint_result) break;
    *(uint64_t *)(handleIdentifier + 0x40) = *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0);
  }
  if (uint_result != 0) {
    uint_result = *(longlong *)(handleIdentifier + 0x68) - 1;
    *(ulonglong *)(*(longlong *)(handleIdentifier + 0x58) + 8) = *(longlong *)(handleIdentifier + 0x70) - 1U & uint_result;
  }
  *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = uint_result;
  return CONCAT71((int7)(uint_result >> 8),1);
joined_r0x00018005f6ef:
  if (long_result == 0) goto LAB_18005f6a2;
  long_result = long_result + -SYSTEM_NODE_HEADER_SIZE;
  uintStack_78 = uintStack_78 + SYSTEM_NODE_HEADER_SIZE;
  uint_result = (*(longlong *)(handleIdentifier + 0x28) - uintStack_78) - SYSTEM_NODE_HEADER_SIZE;
  pallocation_size = (longlong *)(handleIdentifier + 0x68);
  if ((*(longlong *)(handleIdentifier + 0x80) == 0) || (*(longlong *)(handleIdentifier + 0x60) == *pallocation_size)) {
    if (0x8000000000000000 < uint_result) {
      long_result = *pallocation_size;
      *pallocation_size = long_result * 2;
      long_ptr = (longlong *)AllocateSystemResource(systemMemoryPool,long_result * SYSTEM_NODE_HEADER_SIZE + 0x27,10);
      if (long_ptr != (longlong *)0x0) {
        node_root2 = (uint32_t *)((ulonglong)(-(int)(long_ptr + 4) & 7) + (longlong)(long_ptr + 4));
        long_result = 0;
        if (*(longlong *)(handleIdentifier + 0x60) != 0) {
          uint_result = *(longlong *)(handleIdentifier + 0x70) - *(longlong *)(handleIdentifier + 0x60) & long_result - 1U;
          node_root1 = node_root2;
          do {
            node_root = (uint32_t *)(*(longlong *)(handleIdentifier + 0x78) + uint_result * SYSTEM_DATA_COMPARE_SIZE);
            uint_result = node_root[1];
            uint_result = node_root[2];
            uint_result = node_root[3];
            *node_root1 = *node_root;
            node_root1[1] = uint_result;
            node_root1[2] = uint_result;
            node_root1[3] = uint_result;
            long_result = long_result + 1;
            node_root1 = node_root1 + 4;
            uint_result = uint_result + 1 & long_result - 1U;
          } while (uint_result != *(ulonglong *)(handleIdentifier + 0x70));
        }
        *long_ptr = *pallocation_size;
        long_ptr[1] = uint_result - 1;
        long_ptr[2] = (longlong)node_root2;
        long_ptr[3] = *(longlong *)(handleIdentifier + 0x80);
        *(longlong *)(handleIdentifier + 0x70) = long_result;
        *(uint32_t **)(handleIdentifier + 0x78) = node_root2;
        *(longlong **)(handleIdentifier + 0x80) = long_ptr;
        *(longlong **)(handleIdentifier + 0x58) = long_ptr;
        uint_result = uint_result;
        uintStack_68 = uint_result;
        goto LAB_18005f818;
      }
      *(ulonglong *)(handleIdentifier + 0x68) = *(ulonglong *)(handleIdentifier + 0x68) >> 1;
      uint_result = uintStack_68;
    }
LAB_18005fa1c:
    *(ulonglong *)(handleIdentifier + 0x70) = uint_result;
    *(ulonglong *)(handleIdentifier + 0x60) = uint_result;
    if (uint_result == 0) {
      uint_result = uint_result;
    }
    *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
LAB_18005fa01:
    return uint_result & 0xffffffffffffff00;
  }
  if (uint_result < 0x8000000000000001) goto LAB_18005fa1c;
LAB_18005f818:
  long_result = *(longlong *)(handleIdentifier + 0x50);
  if (*(ulonglong *)(long_result + SYSTEM_NODE_HEADER_SIZE) <= *(ulonglong *)(long_result + SYSTEM_DATA_COMPARE_SIZE)) {
LAB_18005f848:
    uint_result = *(ulonglong *)(long_result + 0x28);
LAB_18005f84c:
    uint_result = uint_result;
    if (uint_result != 0) {
      ptr_uint_var = (uint *)(uint_result + 0x130);
      uint_result = *ptr_uint_var;
      if ((uint_result & 0x7fffffff) == 0) {
LAB_18005f8c7:
        uint_result = *(ulonglong *)(long_result + 0x28);
      }
      else {
        LOCK();
        uint_result = *ptr_uint_var;
        if (uint_result == uint_result) {
          *ptr_uint_var = uint_result + 1;
        }
        UNLOCK();
        if (uint_result != uint_result) goto LAB_18005f8c7;
        LOCK();
        uint_result = *(ulonglong *)(long_result + 0x28);
        handle_validation_flag = uint_result == uint_result;
        if (handle_validation_flag) {
          *(ulonglong *)(long_result + 0x28) = *(ulonglong *)(uint_result + 0x138);
          uint_result = uint_result;
        }
        UNLOCK();
        if (handle_validation_flag) {
          LOCK();
          *ptr_uint_var = *ptr_uint_var - 2;
          UNLOCK();
          if (uint_result != 0) goto LAB_18005f92b;
          goto LAB_18005f8e3;
        }
        LOCK();
        uint_result = *ptr_uint_var;
        *ptr_uint_var = *ptr_uint_var - 1;
        UNLOCK();
        if (uint_result == 0x80000001) {
          uint_result = *(ulonglong *)(long_result + 0x28);
          do {
            *(ulonglong *)(uint_result + 0x138) = uint_result;
            *ptr_uint_var = 1;
            LOCK();
            uint_result = *(ulonglong *)(long_result + 0x28);
            handle_validation_flag = uint_result == uint_result;
            if (handle_validation_flag) {
              *(ulonglong *)(long_result + 0x28) = uint_result;
              uint_result = uint_result;
            }
            UNLOCK();
            if (handle_validation_flag) break;
            LOCK();
            uint_result = *ptr_uint_var;
            *ptr_uint_var = *ptr_uint_var + 0x7fffffff;
            UNLOCK();
            uint_result = uint_result;
          } while (uint_result == 1);
        }
      }
      goto LAB_18005f84c;
    }
LAB_18005f8e3:
    uint_result = AllocateSystemResource(systemMemoryPool,0x148,CONCAT71((int7)(uint_result >> 8),10));
    if (uint_result != 0) {
      *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0) = 0;
      *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE8) = 0;
      *(uint32_t *)(uint_result + 0x130) = 0;
      *(uint64_t *)(uint_result + 0x138) = 0;
      *(uint16_t *)(uint_result + 0x140) = SYSTEM_DATA_COMPARE_SIZE0;
      goto LAB_18005f92b;
    }
LAB_18005f9e1:
    *(ulonglong *)(handleIdentifier + 0x70) = uint_result;
    *(ulonglong *)(handleIdentifier + 0x60) = uint_result;
    uint_result = uint_result;
    if (uint_result == 0) {
      uint_result = uint_result;
    }
    *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
    goto LAB_18005fa01;
  }
  LOCK();
  ptr_uint_var = (ulonglong *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = *ptr_uint_var;
  *ptr_uint_var = *ptr_uint_var + 1;
  UNLOCK();
  if ((*(ulonglong *)(long_result + SYSTEM_NODE_HEADER_SIZE) <= uint_result) ||
     (uint_result = uint_result * 0x148 + *(longlong *)(long_result + 0x18), uint_result == 0)) goto LAB_18005f848;
LAB_18005f92b:
  long_result = 0;
  if (uint_result == 0) goto LAB_18005f9e1;
  do {
    *(uint8_t *)(uint_result + 0x110 + long_result) = 1;
    long_result = long_result + 1;
  } while (long_result != SYSTEM_NODE_HEADER_SIZE);
  if (*(longlong *)(handleIdentifier + 0x40) == 0) {
    *(ulonglong *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
  }
  else {
    *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0) = *(uint64_t *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0);
    *(ulonglong *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
  }
  *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
  if (uint_result != 0) {
    uint_result = uint_result;
  }
  *(longlong *)(handleIdentifier + 0x60) = *(longlong *)(handleIdentifier + 0x60) + 1;
  ptr_uint_var = (ulonglong *)
            (*(longlong *)(*(longlong *)(handleIdentifier + 0x58) + SYSTEM_DATA_COMPARE_SIZE) +
            *(longlong *)(handleIdentifier + 0x70) * SYSTEM_DATA_COMPARE_SIZE);
  *ptr_uint_var = uintStack_78;
  ptr_uint_var[1] = *(ulonglong *)(handleIdentifier + 0x40);
  *(ulonglong *)(handleIdentifier + 0x70) = *(longlong *)(handleIdentifier + 0x70) + 1U & *pallocation_size - 1U;
  uint_result = uint_result;
  goto joined_r0x00018005f6ef;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeSystemModule36(longlong handleIdentifier,longlong *resourceIdentifier,longlong systemConfig)

{
  ulonglong *ptr_uint_var;
  uint *node_root;
  uint uint_result;
  uint uint_result;
  longlong *pallocation_size;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  char char_var;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;
  ulonglong *node_root0;
  bool config_validation_flag;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  uint_result = *(ulonglong *)(handleIdentifier + 0x40);
  uint_result = uint_result + systemConfig;
  uint_result = uint_result - 1 & 0xffffffffffffffe0;
  long_result = (uint_result - 1 & 0xffffffffffffffe0) - uint_result;
  uint_result = uint_result;
  uint_result = uint_result;
  uint_result = 0;
  while( true ) {
    if (long_result == 0) {
      *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
      if ((uint_result & 0x1f) == 0) {
        if (uint_result != 0) {
          uint_result = uint_result;
        }
        *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
      }
      while( true ) {
        uint_result = (uint_result & 0xffffffffffffffe0) + SYSTEM_NODE_HEADER_SIZE;
        uint_result = uint_result;
        if (uint_result - uint_result < 0x8000000000000001) {
          uint_result = uint_result;
        }
        for (; uint_result != uint_result; uint_result = uint_result + 1) {
          pallocation_size = (longlong *)*resourceIdentifier;
          *(longlong **)(*(longlong *)(handleIdentifier + 0x40) + (ulonglong)((uint)uint_result & 0x1f) * 8) =
               pallocation_size;
          if (pallocation_size != (longlong *)0x0) {
            (**(code **)(*pallocation_size + 0x28))();
          }
          resourceIdentifier = resourceIdentifier + 1;
        }
        uint_result = *(ulonglong *)(handleIdentifier + 0x40);
        if (uint_result == uint_result) break;
        *(uint64_t *)(handleIdentifier + 0x40) = *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0);
      }
      *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = uint_result;
      return CONCAT71((int7)(uint_result >> 8),1);
    }
    long_result = long_result + -SYSTEM_NODE_HEADER_SIZE;
    uint_result = uint_result + SYSTEM_NODE_HEADER_SIZE;
    uint_result = uint_result;
    if (((*(longlong *)(handleIdentifier + 0x28) - uint_result) - SYSTEM_NODE_HEADER_SIZE < 0x8000000000000001) ||
       (pallocation_size = *(longlong **)(handleIdentifier + 0x60), pallocation_size == (longlong *)0x0))
    goto joined_r0x00018005fdcd;
    uint_result = *pallocation_size - 1U & pallocation_size[1] + 1U;
    node_root0 = *(ulonglong **)(pallocation_size[3] + uint_result * 8);
    if ((*node_root0 == 1) || (node_root0[1] == 0)) {
      *node_root0 = uint_result;
      pallocation_size[1] = uint_result;
    }
    else {
      char_var = InitializeShaderSystem(handleIdentifier);
      if (char_var == '\0') goto joined_r0x00018005fdcd;
      pallocation_size = *(longlong **)(handleIdentifier + 0x60);
      uint_result = *pallocation_size - 1U & pallocation_size[1] + 1U;
      node_root0 = *(ulonglong **)(pallocation_size[3] + uint_result * 8);
      *node_root0 = uint_result;
      pallocation_size[1] = uint_result;
    }
    long_result = *(longlong *)(handleIdentifier + 0x50);
    if (*(ulonglong *)(long_result + SYSTEM_NODE_HEADER_SIZE) <= *(ulonglong *)(long_result + SYSTEM_DATA_COMPARE_SIZE)) break;
    LOCK();
    ptr_uint_var = (ulonglong *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
    uint_result = *ptr_uint_var;
    *ptr_uint_var = *ptr_uint_var + 1;
    UNLOCK();
    if ((*(ulonglong *)(long_result + SYSTEM_NODE_HEADER_SIZE) <= uint_result) ||
       (uint_result = uint_result * 0x148 + *(longlong *)(long_result + 0x18), uint_result == 0)) break;
LAB_18005fd51:
    if (uint_result == 0) goto LAB_18005fda6;
LAB_18005fd56:
    *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE8) = 0;
    *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0) = 0;
    node_root0[1] = uint_result;
    if (((uint_result & 0x1f) != 0) || (uint_result != 0)) {
      *(ulonglong *)(*(longlong *)(handleIdentifier + 0x40) + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
    }
    *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
    if (uint_result == 0) {
      uint_result = uint_result;
    }
  }
  uint_result = *(ulonglong *)(long_result + 0x28);
LAB_18005fc81:
  uint_result = uint_result;
  if (uint_result != 0) {
    node_root = (uint *)(uint_result + 0x130);
    uint_result = *node_root;
    if ((uint_result & 0x7fffffff) == 0) {
LAB_18005fcf9:
      uint_result = *(ulonglong *)(long_result + 0x28);
    }
    else {
      LOCK();
      uint_result = *node_root;
      if (uint_result == uint_result) {
        *node_root = uint_result + 1;
      }
      UNLOCK();
      if (uint_result != uint_result) goto LAB_18005fcf9;
      LOCK();
      uint_result = *(ulonglong *)(long_result + 0x28);
      config_validation_flag = uint_result == uint_result;
      if (config_validation_flag) {
        *(ulonglong *)(long_result + 0x28) = *(ulonglong *)(uint_result + 0x138);
        uint_result = uint_result;
      }
      UNLOCK();
      if (config_validation_flag) {
        LOCK();
        *node_root = *node_root - 2;
        UNLOCK();
        if (uint_result != 0) goto LAB_18005fd56;
        goto LAB_18005fd0d;
      }
      LOCK();
      uint_result = *node_root;
      *node_root = *node_root - 1;
      UNLOCK();
      if (uint_result == 0x80000001) {
        uint_result = *(ulonglong *)(long_result + 0x28);
        do {
          *(ulonglong *)(uint_result + 0x138) = uint_result;
          *node_root = 1;
          LOCK();
          uint_result = *(ulonglong *)(long_result + 0x28);
          config_validation_flag = uint_result == uint_result;
          if (config_validation_flag) {
            *(ulonglong *)(long_result + 0x28) = uint_result;
            uint_result = uint_result;
          }
          UNLOCK();
          if (config_validation_flag) break;
          LOCK();
          uint_result = *node_root;
          *node_root = *node_root + 0x7fffffff;
          UNLOCK();
          uint_result = uint_result;
        } while (uint_result == 1);
      }
    }
    goto LAB_18005fc81;
  }
LAB_18005fd0d:
  uint_result = AllocateSystemResource(systemMemoryPool,0x148,CONCAT71((int7)((ulonglong)long_result >> 8),10));
  if (uint_result != 0) {
    *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0) = 0;
    *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE8) = 0;
    *(uint32_t *)(uint_result + 0x130) = 0;
    *(uint64_t *)(uint_result + 0x138) = 0;
    *(uint16_t *)(uint_result + 0x140) = SYSTEM_DATA_COMPARE_SIZE0;
    goto LAB_18005fd51;
  }
LAB_18005fda6:
  pallocation_size = *(longlong **)(handleIdentifier + 0x60);
  pallocation_size[1] = pallocation_size[1] - 1U & *pallocation_size - 1U;
  node_root0[1] = 0;
joined_r0x00018005fdcd:
  for (; uint_result != 0; uint_result = *(ulonglong *)(uint_result + SYSTEM_DATA_COMPARE_SIZE0)) {
    uint_result = uint_result + SYSTEM_NODE_HEADER_SIZE;
    pallocation_size = *(longlong **)(handleIdentifier + 0x60);
    *(uint64_t *)
     (*(longlong *)
       (pallocation_size[3] +
       ((uint_result - **(longlong **)(pallocation_size[3] + pallocation_size[1] * 8) >> 5) + pallocation_size[1] & *pallocation_size - 1U) * 8)
     + 8) = 0;
    pallocation_size = *(longlong **)(handleIdentifier + 0x60);
    pallocation_size[1] = pallocation_size[1] - 1U & *pallocation_size - 1U;
  }
  uint_result = InitializeSystemHandle(*(uint64_t *)(handleIdentifier + 0x50),uint_result);
  *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
  return uint_result & 0xffffffffffffff00;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong InitializeSystemModule59(longlong handleIdentifier)

{
  ulonglong *ptr_uint_var;
  uint *node_root;
  uint uint_result;
  ulonglong uint_result;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  bool comparison_result_flag;

  if (*(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) < *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) {
    LOCK();
    ptr_uint_var = (ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    uint_result = *ptr_uint_var;
    *ptr_uint_var = *ptr_uint_var + 1;
    UNLOCK();
    if ((uint_result < *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) &&
       (long_result = uint_result * 0x148 + *(longlong *)(handleIdentifier + 0x18), long_result != 0)) {
      return long_result;
    }
  }
  long_result = *(longlong *)(handleIdentifier + 0x28);
LAB_18005ff87:
  do {
    long_result = long_result;
    if (long_result == 0) {
LAB_180060026:
      long_result = AllocateSystemResource(systemMemoryPool,0x148,10);
      if (long_result == 0) {
        return 0;
      }
      *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE0) = 0;
      *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE8) = 0;
      *(uint32_t *)(long_result + 0x130) = 0;
      *(uint64_t *)(long_result + 0x138) = 0;
      *(uint16_t *)(long_result + 0x140) = SYSTEM_DATA_COMPARE_SIZE0;
      return long_result;
    }
    node_root = (uint *)(long_result + 0x130);
    uint_result = *node_root;
    if ((uint_result & 0x7fffffff) == 0) {
LAB_180060007:
      long_result = *(longlong *)(handleIdentifier + 0x28);
      goto LAB_18005ff87;
    }
    LOCK();
    uint_result = *node_root;
    if (uint_result == uint_result) {
      *node_root = uint_result + 1;
    }
    UNLOCK();
    if (uint_result != uint_result) goto LAB_180060007;
    LOCK();
    long_result = *(longlong *)(handleIdentifier + 0x28);
    comparison_result_flag = long_result == long_result;
    if (comparison_result_flag) {
      *(longlong *)(handleIdentifier + 0x28) = *(longlong *)(long_result + 0x138);
      long_result = long_result;
    }
    UNLOCK();
    if (comparison_result_flag) {
      LOCK();
      *node_root = *node_root - 2;
      UNLOCK();
      if (long_result != 0) {
        return long_result;
      }
      goto LAB_180060026;
    }
    LOCK();
    uint_result = *node_root;
    *node_root = *node_root - 1;
    UNLOCK();
    if (uint_result == 0x80000001) {
      long_result = *(longlong *)(handleIdentifier + 0x28);
      do {
        *(longlong *)(long_result + 0x138) = long_result;
        *node_root = 1;
        LOCK();
        long_result = *(longlong *)(handleIdentifier + 0x28);
        comparison_result_flag = long_result == long_result;
        if (comparison_result_flag) {
          *(longlong *)(handleIdentifier + 0x28) = long_result;
          long_result = long_result;
        }
        UNLOCK();
        if (comparison_result_flag) break;
        LOCK();
        uint_result = *node_root;
        *node_root = *node_root + 0x7fffffff;
        UNLOCK();
        long_result = long_result;
      } while (uint_result == 1);
    }
  } while( true );
}

ulonglong InitializeSystemModule17(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig)

{
  longlong *long_ptr;
  longlong *long_ptr;
  longlong long_result;
  uint64_t *ptr_uint_var;
  ulonglong in_RAX;
  ulonglong uint_result;

  long_ptr = *(longlong **)(handleIdentifier + 0x60);
  if (long_ptr != (longlong *)0x0) {
    uint_result = *long_ptr - 1U & long_ptr[1] + 1U;
    long_ptr = *(longlong **)(long_ptr[3] + uint_result * 8);
    *resourceIdentifier = (longlong)long_ptr;
    if ((*long_ptr == 1) || (*(longlong *)(*resourceIdentifier + 8) == 0)) {
      ptr_uint_var = (uint64_t *)*resourceIdentifier;
      *ptr_uint_var = systemConfig;
      long_ptr[1] = uint_result;
      return CONCAT71((int7)((ulonglong)ptr_uint_var >> 8),1);
    }
    in_RAX = InitializeShaderSystem();
    if ((char)in_RAX != '\0') {
      long_ptr = *(longlong **)(handleIdentifier + 0x60);
      uint_result = *long_ptr - 1U & long_ptr[1] + 1U;
      long_result = long_ptr[3];
      ptr_uint_var = *(uint64_t **)(long_result + uint_result * 8);
      *resourceIdentifier = (longlong)ptr_uint_var;
      *ptr_uint_var = systemConfig;
      long_ptr[1] = uint_result;
      return CONCAT71((int7)((ulonglong)long_result >> 8),1);
    }
  }
  return in_RAX & 0xffffffffffffff00;
}

uint64_t InitializeSystemModule34(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeSystemModule44();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x88);
  }
  return handleIdentifier;
}
// void InitializeSystemModule44(uint64_t *handleIdentifier)

void InitializeSystemModule44(uint64_t *handleIdentifier)

{
  longlong *long_ptr;
  int *ptr_int_var;
  int compare_result;
  uint uint_result;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  bool node_initialization_flag;

  *handleIdentifier = &globalSystemVariable;
  if (handleIdentifier[8] != 0) {
    long_result = 0;
    if ((handleIdentifier[5] & 0x1f) != 0) {
      uint_result = handleIdentifier[0xe] - handleIdentifier[0xc];
      uint_result = handleIdentifier[0xd] - 1;
      while( true ) {
        uint_result = uint_result & uint_result;
        if ((ulonglong)((*(longlong *)(handleIdentifier[0xf] + uint_result * SYSTEM_DATA_COMPARE_SIZE) + SYSTEM_NODE_HEADER_SIZE) - handleIdentifier[5]) <
            0x8000000000000001) break;
        uint_result = uint_result + 1;
        uint_result = handleIdentifier[0xd] - 1;
      }
      long_result = *(longlong *)(handleIdentifier[0xf] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE);
    }
    long_result = handleIdentifier[8];
LAB_1800602a0:
    long_result = *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE0);
    uint_result = 0;
    do {
      if (*(char *)(long_result + 0x110 + uint_result) == '\0') {
        uint_result = 0;
        if (long_result == long_result) {
          uint_result = (ulonglong)((uint)handleIdentifier[5] & 0x1f);
        }
        if ((handleIdentifier[4] & 0x1f) == 0) {
          uint_result = SYSTEM_NODE_HEADER_SIZE;
        }
        else {
          uint_result = (ulonglong)((uint)handleIdentifier[4] & 0x1f);
        }
        goto LAB_1800602f0;
      }
      uint_result = uint_result + 1;
    } while (uint_result < SYSTEM_NODE_HEADER_SIZE);
    goto LAB_18006031a;
  }
LAB_18006039b:
  if (handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] == 0) {
    *handleIdentifier = &globalSystemVariable;
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
  while( true ) {
    uint_result = (uint)uint_result;
    uint_result = uint_result + 1;
    long_ptr = *(longlong **)(long_result + (ulonglong)(uint_result & 0x1f) * 8);
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))();
    }
    if (uint_result == SYSTEM_NODE_HEADER_SIZE) break;
LAB_1800602f0:
    if ((long_result == handleIdentifier[8]) && (uint_result == uint_result)) break;
  }
LAB_18006031a:
  long_result = handleIdentifier[8];
  if (long_result == long_result) goto code_r0x000180060327;
  goto LAB_1800602a0;
code_r0x000180060327:
  if (long_result != 0) {
    do {
      long_result = *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE0);
      if (*(char *)(long_result + 0x141) != '\0') {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      long_result = handleIdentifier[10];
      LOCK();
      ptr_int_var = (int *)(long_result + 0x130);
      compare_result = *ptr_int_var;
      *ptr_int_var = *ptr_int_var + -0x80000000;
      UNLOCK();
      if (compare_result == 0) {
        long_result = *(longlong *)(long_result + 0x28);
        do {
          *(longlong *)(long_result + 0x138) = long_result;
          *(uint32_t *)(long_result + 0x130) = 1;
          long_ptr = (longlong *)(long_result + 0x28);
          LOCK();
          long_result = *long_ptr;
          node_initialization_flag = long_result == long_result;
          if (node_initialization_flag) {
            *long_ptr = long_result;
            long_result = long_result;
          }
          UNLOCK();
          if (node_initialization_flag) break;
          LOCK();
          ptr_int_var = (int *)(long_result + 0x130);
          compare_result = *ptr_int_var;
          *ptr_int_var = *ptr_int_var + 0x7fffffff;
          UNLOCK();
          long_result = long_result;
        } while (compare_result == 1);
      }
      long_result = long_result;
    } while (long_result != handleIdentifier[8]);
  }
  goto LAB_18006039b;
}

uint64_t InitializeSystemModule24(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeSystemModule2();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x68);
  }
  return handleIdentifier;
}
// void InitializeSystemModule2(uint64_t *handleIdentifier)

void InitializeSystemModule2(uint64_t *handleIdentifier)

{
  int *ptr_int_var;
  int int_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong *pallocation_size;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  bool system_comparison_flag;

  *handleIdentifier = &globalSystemVariable;
  uint_result = handleIdentifier[4];
  long_result = 0;
  uint_result = handleIdentifier[5];
  for (uint_result = uint_result; uint_result != uint_result; uint_result = uint_result + 1) {
    if ((uint_result & 0x1f) == 0) {
      if (long_result != 0) {
        long_result = handleIdentifier[10];
        LOCK();
        ptr_int_var = (int *)(long_result + 0x130);
        int_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + -0x80000000;
        UNLOCK();
        if (int_result == 0) {
          long_result = *(longlong *)(long_result + 0x28);
          do {
            *(longlong *)(long_result + 0x138) = long_result;
            *(uint32_t *)(long_result + 0x130) = 1;
            pallocation_size = (longlong *)(long_result + 0x28);
            LOCK();
            long_result = *pallocation_size;
            system_comparison_flag = long_result == long_result;
            if (system_comparison_flag) {
              *pallocation_size = long_result;
              long_result = long_result;
            }
            UNLOCK();
            if (system_comparison_flag) break;
            LOCK();
            ptr_int_var = (int *)(long_result + 0x130);
            int_result = *ptr_int_var;
            *ptr_int_var = *ptr_int_var + 0x7fffffff;
            UNLOCK();
            long_result = long_result;
          } while (int_result == 1);
        }
      }
LAB_1800604d1:
      pallocation_size = (longlong *)handleIdentifier[0xc];
      long_result = *(longlong *)
               (*(longlong *)
                 (pallocation_size[3] +
                 (((uint_result & 0xffffffffffffffe0) - **(longlong **)(pallocation_size[3] + pallocation_size[1] * 8) >> 5)
                  + pallocation_size[1] & *pallocation_size - 1U) * 8) + 8);
    }
    else if (long_result == 0) goto LAB_1800604d1;
    pallocation_size = *(longlong **)(long_result + (ulonglong)((uint)uint_result & 0x1f) * 8);
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x38))();
    }
  }
  long_result = handleIdentifier[8];
  if ((long_result != 0) && ((uint_result != uint_result || ((uint_result & 0x1f) != 0)))) {
    long_result = handleIdentifier[10];
    LOCK();
    ptr_int_var = (int *)(long_result + 0x130);
    int_result = *ptr_int_var;
    *ptr_int_var = *ptr_int_var + -0x80000000;
    UNLOCK();
    if (int_result == 0) {
      long_result = *(longlong *)(long_result + 0x28);
      do {
        *(longlong *)(long_result + 0x138) = long_result;
        *(uint32_t *)(long_result + 0x130) = 1;
        pallocation_size = (longlong *)(long_result + 0x28);
        LOCK();
        long_result = *pallocation_size;
        system_comparison_flag = long_result == long_result;
        if (system_comparison_flag) {
          *pallocation_size = long_result;
          long_result = long_result;
        }
        UNLOCK();
        if (system_comparison_flag) break;
        LOCK();
        ptr_int_var = (int *)(long_result + 0x130);
        int_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + 0x7fffffff;
        UNLOCK();
        long_result = long_result;
      } while (int_result == 1);
    }
  }
  if (handleIdentifier[0xc] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &globalSystemVariable;
  return;
}

uint64_t * InitializeSystemModule9(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x58);
  }
  return handleIdentifier;
}
// void InitializeSecuritySystem(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSecuritySystem(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  char is_initialized;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  *handleIdentifier = &g_system_unknown_data_3;
  is_initialized = CreateGraphicsResource(handleIdentifier,1,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  while (is_initialized != '\0') {
    is_initialized = CreateGraphicsResource(handleIdentifier,1,systemConfig,systemFlags,uint_result);
  }
  if (handleIdentifier[1] == 0) {
    handleIdentifier[1] = 0;
    _Mtx_destroy_in_situ();
    _Cnd_destroy_in_situ(handleIdentifier + 0x2a);
    _Mtx_destroy_in_situ();
    ConfigureGraphicsResource();
    if (handleIdentifier[0xe] != 0) {
      *(uint64_t *)(handleIdentifier[0xe] + SYSTEM_DATA_COMPARE_SIZE) = 0;
      *(uint8_t *)(handleIdentifier[0xe] + 8) = 1;
    }
    handleIdentifier[2] = &globalSystemPointerData;
    return;
  }
  if (*(int *)(handleIdentifier[1] + 8) == 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
                    // WARNING: Subroutine does not return
  terminate();
}

uint64_t InitializeStringManager(uint64_t handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeGraphicsEngine();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,SYSTEM_NODE_HEADER_SIZE8,systemConfig,systemFlags,uint_result);
  }
  return handleIdentifier;
}

int SystemFunction_88_0(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  ulonglong *node_root;
  uint64_t flag_initialized;
  uint64_t ustack_var;

  flag_initialized = systemConfig;
  ustack_var = systemFlags;
  node_root = (ulonglong *)GetSystemPointerData();
  int_result = __stdio_common_vsprintf(*node_root | 1,handleIdentifier,0xffffffffffffffff,resourceIdentifier,0,&flag_initialized);
  if (int_result < 0) {
    int_result = -1;
  }
  return int_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule58(longlong *handleIdentifier)
void InitializeSystemModule58(longlong *handleIdentifier)

{
  longlong *long_ptr;
  char char_var;
  int compare_result;
  uint64_t ustack_var;
  longlong *stack_long_ptr;
  char cStack_18;

  if ((char)handleIdentifier[0xb] != '\0') {
    long_ptr = (longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8);
    do {
      char_var = (**(code **)(*handleIdentifier + SYSTEM_NODE_HEADER_SIZE))(handleIdentifier,1);
      if (char_var == '\0') {
        ValidateGraphicsMemory(*(uint64_t *)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE),0);
        stack_long_ptr = handleIdentifier + 0x33;
        cStack_18 = 0;
        compare_result = _Mtx_lock();
        if (compare_result != 0) {
          __Throw_C_error_std__YAXH_Z(compare_result);
        }
        cStack_18 = '\x01';
        if ((char)handleIdentifier[0x3d] == '\x01') {
          *(uint8_t *)(handleIdentifier + 0x3d) = 0;
        }
        else {
          ustack_var = 0x32;
          InitializeSystemModule46(handleIdentifier + 0x2a,&stack_long_ptr,&ustack_var);
          *(uint8_t *)(handleIdentifier + 0x3d) = 0;
          if (cStack_18 == '\0') goto LAB_1800607cc;
        }
        compare_result = _Mtx_unlock(stack_long_ptr);
        if (compare_result != 0) {
          __Throw_C_error_std__YAXH_Z(compare_result);
        }
      }
LAB_1800607cc:
    } while ((char)handleIdentifier[0xb] != '\0');
  }
  return;
}

uint64_t InitializeVideoSystem(longlong handleIdentifier,char resourceIdentifier)

{
  longlong long_result;
  int int_result;
  longlong *long_ptr;
  uint64_t uint_result;
  longlong *stack_long_ptr;

  stack_long_ptr = (longlong *)0x0;
  long_ptr = (longlong *)0x0;
  if (resourceIdentifier != '\0') {
    if (*(int *)(handleIdentifier + 0x140) < 1) {
      long_ptr = (longlong *)0x0;
    }
    else {
      int_result = _Mtx_lock(handleIdentifier + 0xf0);
      if (int_result != 0) {
        __Throw_C_error_std__YAXH_Z(int_result);
      }
      if ((*(longlong *)(handleIdentifier + 200) - *(longlong *)(handleIdentifier + 0xd0) >> 3) +
          ((*(longlong *)(handleIdentifier + 0xe0) - *(longlong *)(handleIdentifier + 0xc0) >> 3) + -1) * SYSTEM_NODE_HEADER_SIZE +
          (*(longlong *)(handleIdentifier + 0xb8) - (longlong)*(longlong **)(handleIdentifier + 0xa8) >> 3) != 0) {
        stack_long_ptr = (longlong *)**(longlong **)(handleIdentifier + 0xa8);
        if (stack_long_ptr != (longlong *)0x0) {
          (**(code **)(*stack_long_ptr + 0x28))(stack_long_ptr);
        }
        long_ptr = *(longlong **)(handleIdentifier + 0xa8);
        if (long_ptr + 1 == *(longlong **)(handleIdentifier + 0xb8)) {
          if ((longlong *)*long_ptr != (longlong *)0x0) {
            (**(code **)(*(longlong *)*long_ptr + 0x38))();
          }
          if (*(longlong *)(handleIdentifier + 0xb0) != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          long_ptr = (longlong *)(*(longlong *)(handleIdentifier + 0xc0) + 8);
          *(longlong **)(handleIdentifier + 0xc0) = long_ptr;
          long_result = *long_ptr;
          *(longlong *)(handleIdentifier + 0xb0) = long_result;
          *(longlong *)(handleIdentifier + 0xb8) = long_result + SYSTEM_DATA_COMPARE_SIZE0;
          *(uint64_t *)(handleIdentifier + 0xa8) = *(uint64_t *)(handleIdentifier + 0xb0);
        }
        else {
          *(longlong **)(handleIdentifier + 0xa8) = long_ptr + 1;
          if ((longlong *)*long_ptr != (longlong *)0x0) {
            (**(code **)(*(longlong *)*long_ptr + 0x38))();
          }
        }
      }
      int_result = _Mtx_unlock(handleIdentifier + 0xf0);
      if (int_result != 0) {
        __Throw_C_error_std__YAXH_Z(int_result);
      }
      long_ptr = stack_long_ptr;
      if (stack_long_ptr != (longlong *)0x0) {
        (**(code **)(*stack_long_ptr + 0x60))(stack_long_ptr);
        (**(code **)(*stack_long_ptr + 0x70))(stack_long_ptr);
        LOCK();
        *(int *)(handleIdentifier + 0x140) = *(int *)(handleIdentifier + 0x140) + -1;
        UNLOCK();
        uint_result = 1;
        goto LAB_180060993;
      }
    }
  }
  stack_long_ptr = long_ptr;
  uint_result = 0;
LAB_180060993:
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x38))(stack_long_ptr);
  }
  return uint_result;
}

bool InitializeAudioSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  char char_var;
  longlong *stack_long_ptr;

  stack_long_ptr = (longlong *)0x0;
  WaitForSingleObject(**(uint64_t **)(handleIdentifier + 0x1f0),1,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  char_var = InitializeDatabaseSystem(*(uint64_t *)(handleIdentifier + 0x60),handleIdentifier + 0x78,&stack_long_ptr);
  long_ptr = stack_long_ptr;
  if (char_var != '\0') {
    (**(code **)(*stack_long_ptr + 0x60))(stack_long_ptr);
    (**(code **)(*long_ptr + 0x70))(long_ptr);
  }
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  return char_var != '\0';
}

ulonglong InitializeSystemModule19(longlong *handleIdentifier,uint *resourceIdentifier)

{
  uint uint_result;
  uint uint_result;
  longlong long_result;
  ulonglong in_RAX;
  ulonglong *ptr_uint_var;
  ulonglong *ptr_uint_var;
  ulonglong *node_current;
  ulonglong uint_result;
  ulonglong *node_next;
  uint uint_result;
  ulonglong uint_result;

  long_result = *handleIdentifier;
  if ((*(longlong *)(resourceIdentifier + 6) == 0) && (long_result == 0)) {
    return in_RAX & 0xffffffffffffff00;
  }
  uint_result = *(uint *)(handleIdentifier + 1);
  uint_result = *(uint *)(handleIdentifier + 0x4c);
  node_next = (ulonglong *)0x0;
  ptr_uint_var = *(ulonglong **)(resourceIdentifier + 6);
  if (*(ulonglong **)(resourceIdentifier + 6) == (ulonglong *)0x0) {
    ptr_uint_var = (ulonglong *)(long_result + 8);
    if (long_result == 0) {
      ptr_uint_var = node_next;
    }
    *(ulonglong **)(resourceIdentifier + 6) = ptr_uint_var;
    uint_result = (uint_result - *resourceIdentifier % uint_result) - 1;
    uint_result = (ulonglong)uint_result;
    ptr_uint_var = ptr_uint_var;
    if (uint_result != 0) {
      do {
        if (ptr_uint_var == (ulonglong *)0x0) {
          ptr_uint_var = (ulonglong *)&g_system_constant_size;;
        }
        node_current = (ulonglong *)(*ptr_uint_var - 8);
        if (*ptr_uint_var == 0) {
          node_current = node_next;
        }
        ptr_uint_var = node_current + 1;
        if (node_current == (ulonglong *)0x0) {
          ptr_uint_var = node_next;
        }
        *(ulonglong **)(resourceIdentifier + 6) = ptr_uint_var;
        if (ptr_uint_var == (ulonglong *)0x0) {
          *(ulonglong **)(resourceIdentifier + 6) = ptr_uint_var;
          ptr_uint_var = ptr_uint_var;
        }
        uint_result = uint_result - 1;
      } while (uint_result != 0);
    }
  }
  uint_result = uint_result - resourceIdentifier[1];
  uint_result = (ulonglong)uint_result;
  if (uint_result <= uint_result) {
    uint_result = (ulonglong)uint_result % (ulonglong)uint_result;
  }
  uint_result = uint_result;
  if ((int)uint_result != 0) {
    do {
      if (ptr_uint_var == (ulonglong *)0x0) {
        ptr_uint_var = (ulonglong *)&g_system_constant_size;;
      }
      uint_result = *ptr_uint_var;
      ptr_uint_var = (ulonglong *)(uint_result - 8);
      if (uint_result == 0) {
        ptr_uint_var = node_next;
      }
      ptr_uint_var = node_next;
      if (ptr_uint_var != (ulonglong *)0x0) {
        ptr_uint_var = ptr_uint_var + 1;
      }
      *(ulonglong **)(resourceIdentifier + 6) = ptr_uint_var;
      if (ptr_uint_var == (ulonglong *)0x0) {
        ptr_uint_var = (ulonglong *)(long_result + 8);
        if (long_result == 0) {
          ptr_uint_var = node_next;
        }
        *(ulonglong **)(resourceIdentifier + 6) = ptr_uint_var;
      }
      uint_result = uint_result - 1;
    } while (uint_result != 0);
  }
  resourceIdentifier[1] = uint_result;
  resourceIdentifier[2] = 0;
  *(ulonglong **)(resourceIdentifier + 4) = ptr_uint_var;
  return CONCAT71((int7)(uint_result >> 8),1);
}

longlong * SystemFunction_16_0(longlong *handleIdentifier,longlong *resourceIdentifier)

{
  longlong long_result;
  longlong *long_ptr;

  long_result = *resourceIdentifier;
  *resourceIdentifier = 0;
  long_ptr = (longlong *)*handleIdentifier;
  *handleIdentifier = long_result;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  return handleIdentifier;
}

longlong * InitializeAudioMutex(longlong *handleIdentifier)

{
  if ((longlong *)*handleIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*handleIdentifier + 0x38))();
  }
  return handleIdentifier;
}

uint64_t InitializeSystemComponents(longlong handleIdentifier,uint64_t resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong *node_root;
  longlong long_result;
  ulonglong uint_result;
  longlong allocation_size;
  longlong long_result;
  ulonglong uint_result;

  if (*(char *)(handleIdentifier + 0x48) == '\0') {
    if ((ulonglong)
        ((*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x38)) -
        *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) < 0x8000000000000001) {
      return 0;
    }
    LOCK();
    long_ptr = (longlong *)(handleIdentifier + 0x30);
    long_result = *long_ptr;
    *long_ptr = *long_ptr + 1;
    UNLOCK();
    if (0x8000000000000000 <
        (ulonglong)((long_result - *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) - *(longlong *)(handleIdentifier + 0x38))) {
      LOCK();
      node_root = (ulonglong *)(handleIdentifier + 0x28);
      uint_result = *node_root;
      *node_root = *node_root + 1;
      UNLOCK();
      long_ptr = *(longlong **)(handleIdentifier + 0x60);
      long_result = *(longlong *)
               (long_ptr[3] +
               (((uint_result & 0xffffffffffffffe0) - **(longlong **)(long_ptr[3] + long_ptr[1] * 8) >> 5) +
                long_ptr[1] & *long_ptr - 1U) * 8);
      long_result = *(longlong *)(long_result + 8);
      long_ptr = (longlong *)(long_result + (ulonglong)((uint)uint_result & 0x1f) * 8);
      SystemFunction_16_0(resourceIdentifier,long_ptr);
      long_ptr = (longlong *)*long_ptr;
      if (long_ptr != (longlong *)0x0) {
        (**(code **)(*long_ptr + 0x38))();
      }
      LOCK();
      long_ptr = (longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE8);
      allocation_size = *long_ptr;
      *long_ptr = *long_ptr + 1;
      UNLOCK();
      if (allocation_size == 0x1f) {
        *(uint64_t *)(long_result + 8) = 0;
        ConfigureSystemHandle(*(uint64_t *)(handleIdentifier + 0x50),long_result);
      }
      return 1;
    }
  }
  else {
    if ((ulonglong)
        ((*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x38)) -
        *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) < 0x8000000000000001) {
      return 0;
    }
    LOCK();
    long_ptr = (longlong *)(handleIdentifier + 0x30);
    long_result = *long_ptr;
    *long_ptr = *long_ptr + 1;
    UNLOCK();
    if (0x8000000000000000 <
        (ulonglong)((long_result - *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) - *(longlong *)(handleIdentifier + 0x38))) {
      LOCK();
      node_root = (ulonglong *)(handleIdentifier + 0x28);
      uint_result = *node_root;
      *node_root = *node_root + 1;
      UNLOCK();
      long_ptr = *(longlong **)(handleIdentifier + 0x58);
      uint_result = (ulonglong)((uint)uint_result & 0x1f);
      long_result = *(longlong *)
               (long_ptr[2] + 8 +
               (((uint_result & 0xffffffffffffffe0) - *(longlong *)(long_ptr[2] + long_ptr[1] * SYSTEM_DATA_COMPARE_SIZE) >> 5) +
                long_ptr[1] & *long_ptr - 1U) * SYSTEM_DATA_COMPARE_SIZE);
      long_ptr = (longlong *)(long_result + uint_result * 8);
      SystemFunction_16_0(resourceIdentifier,long_ptr);
      long_ptr = (longlong *)*long_ptr;
      if (long_ptr != (longlong *)0x0) {
        (**(code **)(*long_ptr + 0x38))();
      }
      *(uint8_t *)((long_result - uint_result) + 0x12f) = 1;
      return 1;
    }
  }
  LOCK();
  *(longlong *)(handleIdentifier + 0x38) = *(longlong *)(handleIdentifier + 0x38) + 1;
  UNLOCK();
  return 0;
}

uint64_t SystemFunction_66_2(void)

{
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  longlong long_result;
  longlong *ptr_data;
  longlong allocation_size;
  longlong long_result;
  ulonglong system_RSI;
  longlong system_RDI;

  LOCK();
  ptr_uint_var = (ulonglong *)(system_RDI + 0x28);
  uint_result = *ptr_uint_var;
  *ptr_uint_var = *ptr_uint_var + (system_RSI & 0xffffffff);
  UNLOCK();
  ptr_data = *(longlong **)(system_RDI + 0x60);
  allocation_size = *(longlong *)
           (ptr_data[3] +
           (((uint_result & 0xffffffffffffffe0) - **(longlong **)(ptr_data[3] + ptr_data[1] * 8) >> 5) +
            ptr_data[1] & *ptr_data - 1U) * 8);
  long_result = *(longlong *)(allocation_size + 8);
  SystemFunction_16_0();
  ptr_data = *(longlong **)(long_result + (ulonglong)((uint)uint_result & 0x1f) * 8);
  if (ptr_data != (longlong *)0x0) {
    (**(code **)(*ptr_data + 0x38))();
  }
  LOCK();
  ptr_data = (longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE8);
  long_result = *ptr_data;
  *ptr_data = *ptr_data + system_RSI;
  UNLOCK();
  if (long_result == 0x1f) {
    *(uint64_t *)(allocation_size + 8) = 0;
    ConfigureSystemHandle(*(uint64_t *)(system_RDI + 0x50),long_result);
  }
  return 1;
}

uint8_t SystemFunction_83_4(void)

{
  longlong system_RSI;
  longlong system_RDI;

  LOCK();
  *(longlong *)(system_RDI + 0x38) = *(longlong *)(system_RDI + 0x38) + system_RSI;
  UNLOCK();
  return 0;
}

uint64_t InitializeDatabaseSystem(uint64_t *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig)

{
  char is_initialized;
  longlong *long_ptr;
  longlong long_result;
  longlong *ptr_data;
  longlong *pallocation_size;
  longlong *long_ptr;

  if (((*(longlong *)(resourceIdentifier + 0x18) == 0) || (*(int *)(resourceIdentifier + 4) != *(int *)(handleIdentifier + 0x4c)))
     && (is_initialized = InitializeSystemModule19(), is_initialized == '\0')) {
    return 0;
  }
  long_ptr = (longlong *)0x0;
  ptr_data = (longlong *)(*(longlong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + -8);
  if (*(longlong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) == 0) {
    ptr_data = long_ptr;
  }
  is_initialized = InitializeSystemComponents(ptr_data,systemConfig);
  if (is_initialized == '\0') {
    ptr_data = (longlong *)*handleIdentifier;
    long_ptr = *(longlong **)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    if (long_ptr == (longlong *)0x0) {
      long_ptr = (longlong *)&g_system_constant_size;;
    }
    long_result = *long_ptr;
    while( true ) {
      long_ptr = (longlong *)(long_result + -8);
      if (long_result == 0) {
        long_ptr = long_ptr;
      }
      pallocation_size = ptr_data;
      if (long_ptr != (longlong *)0x0) {
        pallocation_size = long_ptr;
      }
      long_ptr = (longlong *)(*(longlong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + -8);
      if (*(longlong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        long_ptr = long_ptr;
      }
      if (pallocation_size == long_ptr) {
        return 0;
      }
      is_initialized = InitializeSystemComponents(pallocation_size,systemConfig);
      if (is_initialized != '\0') break;
      long_result = pallocation_size[1];
    }
    *(uint32_t *)(resourceIdentifier + 8) = 1;
    ptr_data = pallocation_size + 1;
    if (pallocation_size == (longlong *)0x0) {
      ptr_data = long_ptr;
    }
    *(longlong **)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = ptr_data;
  }
  else {
    *(int *)(resourceIdentifier + 8) = *(int *)(resourceIdentifier + 8) + 1;
    if (*(int *)(resourceIdentifier + 8) == SYSTEM_DATA_COMPARE_SIZE0) {
      LOCK();
      *(int *)(handleIdentifier + 0x4c) = *(int *)(handleIdentifier + 0x4c) + 1;
      UNLOCK();
    }
  }
  return 1;
}

bool ValidateSystemConfiguration(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  char char_var;
  longlong *stack_long_ptr;

  stack_long_ptr = (longlong *)0x0;
  char_var = InitializeDatabaseSystem(*(uint64_t *)(handleIdentifier + 0x60),handleIdentifier + 0x78,&stack_long_ptr,systemFlags,
                        INVALID_HANDLE_VALUE);
  long_ptr = stack_long_ptr;
  if (char_var != '\0') {
    (**(code **)(*stack_long_ptr + 0x60))(stack_long_ptr);
    (**(code **)(*long_ptr + 0x70))(long_ptr);
  }
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  return char_var != '\0';
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeVideoSystem(longlong *handleIdentifier,longlong *resourceIdentifier)
void InitializeVideoSystem(longlong *handleIdentifier,longlong *resourceIdentifier)

{
  longlong *long_ptr;
  longlong long_result;
  longlong *long_ptr;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  long_ptr = (longlong *)handleIdentifier[6];
  long_ptr = long_ptr + 1;
  if (long_ptr == (longlong *)handleIdentifier[8]) {
    resourceIdentifier = (longlong *)*resourceIdentifier;
    if (resourceIdentifier != (longlong *)0x0) {
      (**(code **)(*resourceIdentifier + 0x28))(resourceIdentifier);
    }
    long_result = *handleIdentifier;
    long_result = handleIdentifier[1];
    if (long_result <= (handleIdentifier[9] - long_result >> 3) + 1) {
      long_result = handleIdentifier[5];
      uint_result = long_result - long_result >> 3;
      long_result = handleIdentifier[9] - long_result >> 3;
      long_result = long_result * 8 + 8;
      if (uint_result != 0) {
        uint_result = uint_result >> 1;
        if (uint_result < 2) {
          uint_result = 1;
        }
                    // WARNING: Subroutine does not return
        memmove(long_result + (uint_result - uint_result) * 8,long_result,long_result);
      }
      long_result = long_result;
      if (long_result == 0) {
        long_result = 1;
      }
      long_result = long_result + 2 + long_result;
      long_result = AllocateSystemResource(systemMemoryPool,long_result * 8,(char)handleIdentifier[10],long_result,uint_result);
      long_ptr = (longlong *)(long_result + (handleIdentifier[5] - *handleIdentifier >> 3) * 8);
      if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
        memcpy(long_ptr,handleIdentifier[5],long_result);
      }
      *handleIdentifier = long_result;
      handleIdentifier[1] = long_result;
      handleIdentifier[5] = (longlong)long_ptr;
      long_result = *long_ptr;
      handleIdentifier[3] = long_result;
      handleIdentifier[4] = long_result + SYSTEM_DATA_COMPARE_SIZE0;
      handleIdentifier[9] = (longlong)(long_ptr + long_result);
      long_result = long_ptr[long_result];
      handleIdentifier[7] = long_result;
      handleIdentifier[8] = long_result + SYSTEM_DATA_COMPARE_SIZE0;
    }
    uint_result = AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE0,(char)handleIdentifier[10]);
    *(uint64_t *)(handleIdentifier[9] + 8) = uint_result;
    *(longlong **)handleIdentifier[6] = resourceIdentifier;
    long_result = handleIdentifier[9];
    handleIdentifier[9] = long_result + 8;
    long_result = *(longlong *)(long_result + 8);
    handleIdentifier[7] = long_result;
    handleIdentifier[8] = long_result + SYSTEM_DATA_COMPARE_SIZE0;
    handleIdentifier[6] = long_result;
  }
  else {
    handleIdentifier[6] = (longlong)long_ptr;
    resourceIdentifier = (longlong *)*resourceIdentifier;
    *long_ptr = (longlong)resourceIdentifier;
    if (resourceIdentifier != (longlong *)0x0) {
      (**(code **)(*resourceIdentifier + 0x28))();
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule44(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemModule44(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong long_result;
  int int_result;
  longlong allocation_size;
  uint64_t uint_result;
  uint8_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  allocation_size = handleIdentifier + 0xf0;
  int_result = _Mtx_lock();
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  uint_result = 1;
  InitializeVideoSystem(handleIdentifier + 0x98,resourceIdentifier);
  LOCK();
  *(int *)(handleIdentifier + 0x140) = *(int *)(handleIdentifier + 0x140) + 1;
  UNLOCK();
  ptr_uint_var = *(uint64_t **)(handleIdentifier + 0x1f0);
  long_result = *(longlong *)(systemConfigurationData + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(systemConfigurationData + 8);
  do {
    int_result = ReleaseSemaphore(*ptr_uint_var,long_result - long_result >> 3 & 0xffffffff,0,systemFlags,uint_result,allocation_size,uint_result);
  } while (int_result == 0);
  InitializeSystemDataNode18(handleIdentifier + 0x150);
  int_result = _Mtx_unlock(allocation_size);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*resourceIdentifier + 0x38))();
  }
  return;
}
// void InitializeVideoSystem(uint64_t *handleIdentifier)

void InitializeVideoSystem(uint64_t *handleIdentifier)

{
  CloseHandle(*handleIdentifier);
  return;
}
// void InitializeSystemDataNode24(uint64_t *handleIdentifier)

void InitializeSystemDataNode24(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  if (*(char *)((longlong)handleIdentifier + 0xb1) != '\0') {
    ProcessGraphicsCommand();
  }
  _Mtx_destroy_in_situ();
  *handleIdentifier = &g_system_unknown_data_4;
  handleIdentifier[7] = &resourcePoolPointer;
  if (handleIdentifier[8] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[8] = 0;
  *(uint32_t *)(handleIdentifier + 10) = 0;
  handleIdentifier[7] = &globalSystemPointerData;
  handleIdentifier[1] = &resourcePoolPointer;
  if (handleIdentifier[2] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[2] = 0;
  *(uint32_t *)(handleIdentifier + 4) = 0;
  handleIdentifier[1] = &globalSystemPointerData;
  return;
}

uint64_t *
InitializeSystemModule29(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  *handleIdentifier = &globalSystemVariable;
  if (*(char *)((longlong)handleIdentifier + 0xb1) != '\0') {
    ProcessGraphicsCommand();
  }
  _Mtx_destroy_in_situ();
  ExecuteGraphicsCommand(handleIdentifier);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xb8,systemConfig,systemFlags,uint_result);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule24(uint64_t handleIdentifier,longlong resourceIdentifier)
void InitializeSystemModule24(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint8_t localBuffer_268 [32];
  longlong longStack_248;
  uint64_t *system_buffer_ptr_238;
  uint8_t localBuffer_230 [8];
  longlong longStack_228;
  uint uintStack_220;
  longlong longStack_210;
  uint8_t localBuffer_208 [80];
  uint64_t uintStack_1b8;
  void *system_buffer_ptr_1a8;
  uint8_t *system_buffer_ptr_1a0;
  uint32_t uintStack_198;
  uint8_t localBuffer_190 [88];
  uint8_t system_local_buffer_138 [256];
  ulonglong uintStack_38;

  long_result = g_system_context_1;
  long_result = systemConfigurationData;
  uintStack_1b8 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_268;
  longStack_210 = g_system_context_1;
  system_buffer_ptr_1a8 = &g_system_data_nodeconfig;
  system_buffer_ptr_1a0 = localBuffer_190;
  localBuffer_190[0] = 0;
  uintStack_198 = 6;
  strcpy_s(localBuffer_190,SYSTEM_DATA_COMPARE_SIZE,&g_system_unknown_data_5);
  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE8,8,3);
  longStack_248 = long_result + 0x70;
  system_buffer_ptr_238 = ptr_uint_var;
  InitializeGraphicsSystem(ptr_uint_var,&bufferPtr_1a8system_buffer_ptr_1a8,3,long_result + 0x2e0);
  *ptr_uint_var = &globalSystemVariable;
  system_buffer_ptr_238 = ptr_uint_var;
  ConfigureGraphicsDevice(ptr_uint_var);
  InitializeSystemModule44(long_result + 0x48,&bufferPtr_238system_buffer_ptr_238);
  *(uint64_t **)(long_result + 400) = ptr_uint_var;
  system_buffer_ptr_1a8 = &globalSystemPointerData;
  InitializeSharedMemory(g_system_base_1 + 0x170,localBuffer_230,&g_system_shared_memory;);
  if (0 < *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE)) {
    ConfigureSystemParameters(localBuffer_230,uintStack_220 + *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE));
                    // WARNING: Subroutine does not return
    memcpy((ulonglong)uintStack_220 + longStack_228,*(uint64_t *)(resourceIdentifier + 8),
           (longlong)(*(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + 1));
  }
  ConfigureSharedMemory(localBuffer_208,localBuffer_230);
  ActivateSharedMemory(localBuffer_208,1);
                    // WARNING: Subroutine does not return
  memset(system_local_buffer_138,0,SYSTEM_DATA_COMPARE_SIZE0);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeEventSystem(longlong *handleIdentifier)
void InitializeEventSystem(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong long_result;
  uint64_t uint_result;
  longlong *pallocation_size;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;

  long_result = g_system_context_1;
  stack_long_ptr = handleIdentifier;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3,INVALID_HANDLE_VALUE);
  pallocation_size = (longlong *)InitializeSystemModule41(uint_result,0,long_result);
  stack_long_ptr = pallocation_size;
  if (pallocation_size != (longlong *)0x0) {
    (**(code **)(*pallocation_size + 0x28))(pallocation_size);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = pallocation_size;
  if (pallocation_size != (longlong *)0x0) {
    (**(code **)(*pallocation_size + 0x28))(pallocation_size);
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3);
  long_ptr = (longlong *)InitializeSystemModule41(uint_result,4,long_result);
  stack_long_ptr = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3);
  long_ptr = (longlong *)InitializeSystemModule41(uint_result,0,long_result);
  if (long_ptr != (longlong *)0x0) {
    pstack_long_ptr = (longlong **)long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  stack_long_ptr = long_ptr;
  if (pallocation_size != (longlong *)0x0) {
    pstack_long_ptr = (longlong **)pallocation_size;
    (**(code **)(*pallocation_size + 0x38))(pallocation_size);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
  ProcessGameData(*(uint64_t *)(long_result + 400));
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode32(longlong *handleIdentifier)
void InitializeSystemDataNode32(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong long_result;
  uint64_t uint_result;
  longlong *pallocation_size;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;

  long_result = g_system_context_1;
  stack_long_ptr = handleIdentifier;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3,INVALID_HANDLE_VALUE);
  pallocation_size = (longlong *)InitializeSystemModule41(uint_result,0,long_result);
  stack_long_ptr = pallocation_size;
  if (pallocation_size != (longlong *)0x0) {
    (**(code **)(*pallocation_size + 0x28))(pallocation_size);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = pallocation_size;
  if (pallocation_size != (longlong *)0x0) {
    (**(code **)(*pallocation_size + 0x28))(pallocation_size);
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3);
  long_ptr = (longlong *)InitializeSystemModule41(uint_result,3,long_result);
  stack_long_ptr = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
  uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3);
  long_ptr = (longlong *)InitializeSystemModule41(uint_result,0,long_result);
  if (long_ptr != (longlong *)0x0) {
    pstack_long_ptr = (longlong **)long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  stack_long_ptr = long_ptr;
  if (pallocation_size != (longlong *)0x0) {
    pstack_long_ptr = (longlong **)pallocation_size;
    (**(code **)(*pallocation_size + 0x38))(pallocation_size);
  }
  ptr_uint_var = *(uint64_t **)(long_result + 400);
  ptr_char_var = *(code **)*ptr_uint_var;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
  ProcessGameData(*(uint64_t *)(long_result + 400));
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  return;
}
// void InitializeSystemModule41(void)

void InitializeSystemModule41(void)

{
                    // WARNING: Subroutine does not return
  InitializeSystemCore();
}
// void ConfigureSystemParameters(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint32_t systemConfig,uint64_t systemFlags)

void ConfigureSystemParameters(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint32_t systemConfig,uint64_t systemFlags)

{
  InitializeSystemModule41(handleIdentifier,resourceIdentifier,0xffffffff00000000,systemConfig,systemFlags,&stack0x00000028);
  return;
}
// void SystemFunction_17_6(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void SystemFunction_17_6(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t flag_initialized;
  uint64_t ustack_var;

  flag_initialized = systemConfig;
  ustack_var = systemFlags;
  InitializeSystemModule41(handleIdentifier,0,0xffffffff00000000,0xd,resourceIdentifier,&flag_initialized);
  return;
}
// void InitializeAudioMutex(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeAudioMutex(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t ustack_var;

  ustack_var = systemFlags;
  InitializeSystemModule41(handleIdentifier,resourceIdentifier,0xffffffff00000000,0xd,systemConfig,&ustack_var);
  return;
}
// void InitializeSystemDataNode30(void)

void InitializeSystemDataNode30(void)

{
  InitializeSystemModule41();
  return;
}
// void InitializeEventSystem(void)

void InitializeEventSystem(void)

{
  InitializeSystemModule41();
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeGraphicsMemory(longlong *handleIdentifier)
void InitializeGraphicsMemory(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  longlong long_result;
  uint64_t uint_result;
  longlong *pallocation_size;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;

  long_result = g_system_context_1;
  if (*(char *)(g_system_context_1 + 0x18) != '\0') {
    stack_long_ptr = handleIdentifier;
    uint_result = AllocateSystemMemory(systemMemoryPool,0x70,8,3,INVALID_HANDLE_VALUE);
    pallocation_size = (longlong *)InitializeSystemModule41(uint_result,6,long_result);
    stack_long_ptr = pallocation_size;
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x28))(pallocation_size);
    }
    ptr_uint_var = *(uint64_t **)(long_result + 400);
    ptr_char_var = *(code **)*ptr_uint_var;
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = pallocation_size;
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x28))(pallocation_size);
    }
    (*ptr_char_var)(ptr_uint_var,&stack_long_ptr);
    ProcessGameData(*(uint64_t *)(long_result + 400));
    if (pallocation_size != (longlong *)0x0) {
      (**(code **)(*pallocation_size + 0x38))(pallocation_size);
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeUISystem(void)
void InitializeUISystem(void)

{
  uint8_t localBuffer_208 [48];
  uint32_t uintStack_1d8;
  uint64_t uintStack_190;
  uint64_t uintStack_188;
  uint64_t uintStack_180;
  uint64_t uintStack_178;
  uint8_t system_local_buffer_138 [256];
  ulonglong uintStack_38;

  uintStack_178 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_208;
  uintStack_1d8 = 0;
  uintStack_180 = g_system_context_1;
  uintStack_190 = _time64(0);
  uintStack_188 = _localtime64(&uintStack_190);
                    // WARNING: Subroutine does not return
  memset(system_local_buffer_138,0,0xff);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode23(int *handleIdentifier)
void InitializeSystemDataNode23(int *handleIdentifier)

{
  char is_initialized;
  char char_var;
  uint32_t uint_result;
  longlong long_result;
  uint32_t *ptr_uint_var;
  char *ptr_char_var;
  uint64_t *node_previous;
  int int_result;
  ulonglong uint_result;
  uint8_t localBuffer_1f8 [64];
  uint16_t localBuffer_1b8 [4];
  void *system_buffer_ptr_1b0;
  uint32_t *system_buffer_ptr_1a8;
  uint32_t uintStack_1a0;
  uint64_t uintStack_198;
  uint32_t uintStack_190;
  void *system_buffer_ptr_188;
  longlong longStack_180;
  uint32_t uintStack_170;
  longlong longStack_168;
  longlong longStack_160;
  uint64_t uintStack_158;
  uint32_t uintStack_150;
  uint64_t uintStack_148;
  ulonglong uintStack_38;

  uintStack_148 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_1f8;
  int_result = 0;
  uintStack_190 = 0;
  *handleIdentifier = *handleIdentifier + 1;
  if ((*(longlong *)(handleIdentifier + 4) != 0) && (*(longlong *)(handleIdentifier + 2) != 0)) {
                    // WARNING: Subroutine does not return
    InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_1f8);
  }
  longStack_168 = 0;
  longStack_160 = 0;
  uintStack_158 = 0;
  uintStack_150 = 3;
  long_result = ProcessResourceData(&bufferPtr_18system_buffer_ptr_188,g_system_base_1 + 0x2c0);
  uintStack_190 = 1;
  localBuffer_1b8[0] = SYSTEM_NODE_HEADER_SIZE;
  if (*(longlong *)(long_result + 8) != 0) {
    InitializeSystemModule4(long_result,&longStack_168,localBuffer_1b8);
  }
  uintStack_190 = 0;
  system_buffer_ptr_188 = &resourcePoolPointer;
  if (longStack_180 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_180 = 0;
  uintStack_170 = 0;
  system_buffer_ptr_188 = &globalSystemPointerData;
  system_buffer_ptr_1b0 = &resourcePoolPointer;
  uintStack_198 = 0;
  system_buffer_ptr_1a8 = (uint32_t *)0x0;
  uintStack_1a0 = 0;
  ptr_uint_var = (uint32_t *)AllocateSystemResource(systemMemoryPool,0x13,0x13);
  *(uint8_t *)ptr_uint_var = 0;
  system_buffer_ptr_1a8 = ptr_uint_var;
  uint_result = ValidateResourceAllocation(ptr_uint_var);
  uintStack_198 = CONCAT44(uintStack_198._4_4_,uint_result);
  *ptr_uint_var = 0x5f657375;
  ptr_uint_var[1] = 0x65726170;
  ptr_uint_var[2] = 0x635f746e;
  ptr_uint_var[3] = 0x6f736e6f;
  *(uint16_t *)(ptr_uint_var + 4) = 0x656c;
  *(uint8_t *)((longlong)ptr_uint_var + 0x12) = 0;
  uintStack_1a0 = 0x12;
  uint_result = longStack_160 - longStack_168 >> 5;
  if (uint_result != 0) {
    node_previous = (uint64_t *)(longStack_168 + 8);
    do {
      if (*(int *)(node_previous + 1) == 0x12) {
        ptr_char_var = (char *)*node_previous;
        long_result = (longlong)ptr_uint_var - (longlong)ptr_char_var;
        do {
          is_initialized = *ptr_char_var;
          char_var = ptr_char_var[long_result];
          if (is_initialized != char_var) break;
          ptr_char_var = ptr_char_var + 1;
        } while (char_var != '\0');
        if (is_initialized == char_var) break;
      }
      int_result = int_result + 1;
      node_previous = node_previous + 4;
    } while ((ulonglong)(longlong)int_result < uint_result);
  }
  system_buffer_ptr_1b0 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t InitializeSystemModule10(uint64_t handleIdentifier,uint32_t resourceIdentifier)

{
  uint16_t uint_result;
  int int_result;

  switch(resourceIdentifier) {
  case 0:
    uint_result = 4;
    break;
  case 1:
    uint_result = 2;
    break;
  case 2:
    uint_result = 1;
    break;
  case 3:
    uint_result = 0xc;
    break;
  case 4:
    uint_result = 10;
    break;
  case 5:
    uint_result = 9;
    break;
  case 6:
    uint_result = 3;
    break;
  case 7:
    uint_result = 0xb;
    break;
  case 8:
    uint_result = 6;
    break;
  case 9:
    uint_result = 0xe;
    break;
  case 10:
    uint_result = 5;
    break;
  case 0xb:
    uint_result = 0xd;
    break;
  case 0xc:
    uint_result = 7;
    break;
  default:
    uint_result = 0xf;
  }
  int_result = SetConsoleTextAttribute(g_system_stack_buffer;,uint_result);
  if (int_result == 0) {
    InitializeSystemModule19(&g_system_callback_data_1);
    return 0;
  }
  return 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemProfiler(longlong handleIdentifier)
void InitializeSystemProfiler(longlong handleIdentifier)

{
  uint uint_result;
  uint uint_result;
  uint32_t uint_result;
  int int_result;
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong *long_ptr;
  int int_result;
  void *ptr_uint_var;
  void *ptr_uint_var;
  uint localBuffer_X8 [4];
  uint8_t aflag_initialized [8];
  uint localBuffer_X20 [2];
  void *system_buffer_ptr_70;
  uint64_t *system_buffer_ptr_68;
  uint32_t uintStack_60;
  uint64_t uintStack_58;

  uint_result = *(uint *)(handleIdentifier + 0x28);
  if (uint_result < 9) {
    switch(uint_result) {
    case 1:
      localBuffer_X8[0] = localBuffer_X8[0] & 0xffffff00;
      ptr_uint_var = &g_system_data_variable3;
      if (*(void **)(handleIdentifier + 0x38) != (void *)0x0) {
        ptr_uint_var = *(void **)(handleIdentifier + 0x38);
      }
      ProcessMemoryBlock(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_NODE_HEADER_SIZE,ptr_uint_var,localBuffer_X8);
      long_ptr = (longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_NODE_HEADER_SIZE);
      (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE8))(long_ptr,1);
      long_ptr = (longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_NODE_HEADER_SIZE);
      (**(code **)(*long_ptr + 0x70))(long_ptr,&g_system_config_data_1);
      system_buffer_ptr_70 = &resourcePoolPointer;
      uintStack_58 = 0;
      system_buffer_ptr_68 = (uint64_t *)0x0;
      uintStack_60 = 0;
      ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
      *(uint8_t *)ptr_uint_var = 0;
      system_buffer_ptr_68 = ptr_uint_var;
      uint_result = ValidateResourceAllocation(ptr_uint_var);
      uintStack_58 = CONCAT44(uintStack_58._4_4_,uint_result);
      *ptr_uint_var = 0x73726f7272655f;
      uintStack_60 = 7;
      int_result = *(int *)(handleIdentifier + 0x40) + -1;
      if (-1 < int_result) {
        long_result = (longlong)int_result;
        do {
          if (*(char *)(long_result + *(longlong *)(handleIdentifier + 0x38)) == '_') goto code_r0x0001800630e9;
          int_result = int_result + -1;
          long_result = long_result + -1;
        } while (-1 < long_result);
      }
      int_result = -1;
code_r0x0001800630e9:
      ValidateMemoryAccess(handleIdentifier + 0x30,int_result,&bufferPtr_70system_buffer_ptr_70);
      system_buffer_ptr_70 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    case 2:
      long_ptr = (longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8);
      (**(code **)(*long_ptr + 0x70))(long_ptr,&globalSystemVariable);
      ProcessGraphicsCommand(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8);
      long_ptr = (longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_NODE_HEADER_SIZE);
      (**(code **)(*long_ptr + 0x70))(long_ptr,&globalSystemVariable);
      ProcessGraphicsCommand(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_NODE_HEADER_SIZE);
      if (((*(byte *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 8) & 2) != 0) &&
         (iRam0000000180c912e0 = iRam0000000180c912e0 + -1, iRam0000000180c912e0 == 0)) {
        g_system_stack_buffer; = 0;
        lRam0000000180c912e8 = 0;
        LOCK();
        g_system_io_buffer; = 0;
        UNLOCK();
        FreeConsole();
      }
      *(uint32_t *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 8) = 0xe;
      *(uint64_t *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_DATA_COMPARE_SIZE) = 0xffffffff00000000;
      *(uint8_t *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0x18) = 0;
      **(uint64_t **)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
      break;
    case 3:
      long_ptr = (longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8);
      (**(code **)(*long_ptr + 0x70))(long_ptr,&globalSystemVariable);
      ProcessGraphicsCommand(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8);
      ReleaseMemoryBlock(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xe0);
      break;
    case 4:
      aflag_initialized[0] = 0;
      ptr_uint_var = *(void **)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xe8);
      ptr_uint_var = &g_system_data_variable3;
      if (ptr_uint_var != (void *)0x0) {
        ptr_uint_var = ptr_uint_var;
      }
      ProcessMemoryBlock(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8,ptr_uint_var,aflag_initialized);
      long_ptr = (longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8);
      (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE8))(long_ptr,1);
      long_ptr = (longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8);
      (**(code **)(*long_ptr + 0x70))(long_ptr,&g_system_config_data_1);
      break;
    case 5:
      int_result = *(int *)(handleIdentifier + 0x58);
      if ((*(int *)(systemConfigurationData + 0x150) <= int_result) &&
         (ptr_uint_var = *(uint64_t **)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE),
         (*(ulonglong *)(handleIdentifier + 0x60) & ptr_uint_var[2]) != 0)) {
        uint_result = *(uint *)(handleIdentifier + 0x40);
        ptr_uint_var = &g_system_data_variable3;
        if (*(void **)(handleIdentifier + 0x38) != (void *)0x0) {
          ptr_uint_var = *(void **)(handleIdentifier + 0x38);
        }
        if ((*(byte *)(ptr_uint_var + 1) & 2) != 0) {
          InitializeSystemModule10((ulonglong)*(uint *)(&g_system_data_variable0 + (longlong)(int)uint_result * 4) +
                        0x180000000,*(uint32_t *)(handleIdentifier + 0x50));
          int_result = WriteConsoleA(g_system_stack_buffer;,ptr_uint_var,uint_result,localBuffer_X20,0);
          if ((int_result == 0) || (localBuffer_X20[0] < uint_result)) {
            InitializeSystemModule19(&g_system_global_variablec,ptr_uint_var);
          }
          int_result = SetConsoleTextAttribute(g_system_stack_buffer;,0xf);
          if (int_result == 0) {
            InitializeSystemModule19(&g_system_callback_data_1);
          }
        }
        if ((*(byte *)(ptr_uint_var + 1) & 8) != 0) {
          (**(code **)(ptr_uint_var[4] + 0x70))(ptr_uint_var + 4,ptr_uint_var);
          if (1 < int_result) {
            (**(code **)(ptr_uint_var[0x1b] + 0x70))(ptr_uint_var + 0x1b,ptr_uint_var);
          }
        }
        if ((code *)*ptr_uint_var != (code *)0x0) {
          (*(code *)*ptr_uint_var)(ptr_uint_var);
        }
      }
      break;
    case 6:
      if ((*(byte *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 8) & 8) != 0) {
        (**(code **)(*(longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_NODE_HEADER_SIZE) + 0x118))();
        (**(code **)(*(longlong *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0xd8) + 0x118))();
      }
      break;
    case 7:
      *(uint64_t *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_DATA_COMPARE_SIZE) = *(uint64_t *)(handleIdentifier + 0x60);
      break;
    case 8:
      if ((g_system_stack_buffer; != 0) && (lRam0000000180c912e8 != 0)) {
        localBuffer_X8[0] = *(uint *)(handleIdentifier + 0x68);
        SetConsoleScreenBufferSize(g_system_stack_buffer;,localBuffer_X8[0]);
      }
    }
  }
  else {
    ProcessSystemDataHeader(&g_system_global_variable8);
  }
  return;
}

int InitializeSystemModule9(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  uint64_t *node_root;
  uint64_t ustack_var;

  ustack_var = systemFlags;
  node_root = (uint64_t *)GetSystemPointerData();
  int_result = __stdio_common_vsprintf_s(*node_root,handleIdentifier,resourceIdentifier,systemConfig,0,&ustack_var);
  if (int_result < 0) {
    int_result = -1;
  }
  return int_result;
}

ulonglong InitializeStringManager(longlong *handleIdentifier,longlong resourceIdentifier)

{
  byte *ptr_byte_var;
  uint uint_result;
  uint uint_result;
  longlong long_result;
  ulonglong in_RAX;
  byte *ptr_byte_var;
  uint uint_result;
  ulonglong uint_result;
  longlong long_result;
  int int_result;
  longlong long_result;

  long_result = *handleIdentifier;
  int_result = 0;
  uint_result = handleIdentifier[1] - long_result >> 5;
  if (uint_result != 0) {
    uint_result = *(uint *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    long_result = 0;
    do {
      uint_result = *(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result);
      ptr_byte_var = (byte *)(ulonglong)uint_result;
      uint_result = uint_result;
      if (uint_result == uint_result) {
        if (uint_result != 0) {
          ptr_byte_var = *(byte **)(long_result + 8 + long_result);
          long_result = *(longlong *)(resourceIdentifier + 8) - (longlong)ptr_byte_var;
          do {
            ptr_byte_var = ptr_byte_var + long_result;
            uint_result = (uint)*ptr_byte_var - (uint)*ptr_byte_var;
            if (uint_result != 0) break;
            ptr_byte_var = ptr_byte_var + 1;
          } while (*ptr_byte_var != 0);
        }
LAB_18006357e:
        if (uint_result == 0) {
          return CONCAT71((int7)((ulonglong)ptr_byte_var >> 8),1);
        }
      }
      else if (uint_result == 0) goto LAB_18006357e;
      int_result = int_result + 1;
      long_result = long_result + SYSTEM_NODE_HEADER_SIZE;
      in_RAX = (ulonglong)int_result;
    } while (in_RAX < uint_result);
  }
  return in_RAX & 0xffffffffffffff00;
}
// void InitializeSystemModule58(void)

void InitializeSystemModule58(void)

{
  InitializePhysicsSystem();
  return;
}

int InitializePhysicsSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  ulonglong *node_root;

  node_root = (ulonglong *)GetSystemPointerData();
  int_result = __stdio_common_vsprintf(*node_root | 2,handleIdentifier,resourceIdentifier,systemConfig,0,systemFlags);
  if (int_result < 0) {
    int_result = -1;
  }
  return int_result;
}

uint64_t *
SetupGraphicsDevice(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  handleIdentifier[6] = &resourcePoolPointer;
  if (handleIdentifier[7] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[7] = 0;
  *(uint32_t *)(handleIdentifier + 9) = 0;
  handleIdentifier[6] = &globalSystemPointerData;
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x70,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}

uint64_t *
InitializeSystemModule41(uint64_t *handleIdentifier,uint32_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;

  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *handleIdentifier = &globalSystemOutputData;
  LOCK();
  *(uint8_t *)(handleIdentifier + 2) = 0;
  UNLOCK();
  handleIdentifier[3] = 0xffffffffffffffff;
  *handleIdentifier = &globalSystemVariable;
  long_ptr = handleIdentifier + 6;
  *long_ptr = (longlong)&globalSystemPointerData;
  handleIdentifier[7] = 0;
  *(uint32_t *)(handleIdentifier + 8) = 0;
  *long_ptr = (longlong)&resourcePoolPointer;
  handleIdentifier[9] = 0;
  handleIdentifier[7] = 0;
  *(uint32_t *)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + 5) = resourceIdentifier;
  handleIdentifier[4] = systemConfig;
  (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,&g_system_data_variable3,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  *(uint32_t *)(handleIdentifier + 10) = 0xd;
  *(uint64_t *)((longlong)handleIdentifier + 0x54) = 0xe;
  handleIdentifier[0xc] = 0xffffffff00000000;
  *(uint32_t *)(handleIdentifier + 0xd) = 0;
  return handleIdentifier;
}

longlong initialize_audio_subsystem(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(code **)(handleIdentifier + 0x18) = InitializeTextureSystem;
  return handleIdentifier;
}

longlong initialize_input_subsystem(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(code **)(handleIdentifier + 0x18) = _guard_check_icall;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeStringManagerSystem(uint64_t handleIdentifier)
void InitializeStringManagerSystem(uint64_t handleIdentifier)

{
  uint8_t localBuffer_2e8 [96];
  uint8_t localBuffer_288 [64];
  uint64_t uintStack_248;
  uint64_t uintStack_240;
  uint8_t localBuffer_238 [512];
  ulonglong uintStack_38;

  uintStack_248 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_2e8;
  uintStack_240 = handleIdentifier;
  ProcessResourceData(localBuffer_288,g_system_context_1 + 0x28);
                    // WARNING: Subroutine does not return
  memset(localBuffer_238,0,SYSTEM_NODE_HEADER_SIZE0);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_36_8(uint64_t handleIdentifier,longlong resourceIdentifier)
void SystemFunction_36_8(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  char *pis_initialized;
  void *node_root;
  longlong long_result;
  longlong long_result;
  longlong allocation_size;
  longlong long_result;
  uint64_t uintStack_48;
  longlong longStack_40;
  void *system_buffer_ptr_30;
  void *system_buffer_ptr_28;
  uint32_t uintStack_18;

  uintStack_48 = 0;
  longStack_40 = 0;
  InitializeSharedMemory(handleIdentifier,&bufferPtr_30system_buffer_ptr_30,&g_module_data_1);
  node_root = &g_system_data_variable3;
  if (system_buffer_ptr_28 != (void *)0x0) {
    node_root = bufferPtr_28;
  }
  ProcessSystemNode(&uintStack_48,node_root,&g_module_data_2);
  long_result = longStack_40;
  allocation_size = -1;
  long_result = allocation_size;
  long_result = allocation_size;
  if (resourceIdentifier != 0) {
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    if (long_result != 0) {
      fwrite(resourceIdentifier,long_result,1,longStack_40);
    }
  }
  do {
    long_result = long_result + 1;
    pis_initialized = (char *)(long_result + 0x180c84871);
    long_result = long_result;
  } while (*pis_initialized != '\0');
  if (long_result != 0) {
    fwrite(&g_game_data_buffer;,0x30,1,long_result);
    fwrite(&g_system_data_variable0,long_result,1,long_result);
// void InitializeSystemDataNode32(void)

void InitializeSystemDataNode32(void)

{
  void *ptr_uint_var;
  bool bool_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  int int_result;
  longlong long_result;
  longlong long_result;
  void *ptr_uint_var;
  uint uint_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  int int_result;
  longlong long_result;
  uint uint_result;
  uint8_t localBuffer_2f8 [32];
  uint64_t *system_buffer_ptr_2d8;
  uint64_t *system_buffer_ptr_2d0;
  uint64_t uintStack_2c8;
  uint32_t uintStack_2c0;
  uint64_t *system_buffer_ptr_2b0;
  uint64_t *system_buffer_ptr_2a8;
  uint64_t uintStack_2a0;
  uint32_t uintStack_298;
  void *system_buffer_ptr_290;
  longlong longStack_288;
  uint32_t uintStack_278;
  uint64_t uintStack_270;
  uint8_t localBuffer_268 [32];
  longlong longStack_248;
  uint8_t localBuffer_238 [512];
  ulonglong uintStack_38;
  ulonglong uint_result;

  uintStack_270 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_2f8;
  uint_result = 0;
  InitializeResourceSystem(&bufferPtr_290system_buffer_ptr_290);
  system_buffer_ptr_2d8 = (uint64_t *)0x0;
  system_buffer_ptr_2d0 = (uint64_t *)0x0;
  uintStack_2c8 = 0;
  uintStack_2c0 = 3;
  system_buffer_ptr_2b0 = (uint64_t *)0x0;
  system_buffer_ptr_2a8 = (uint64_t *)0x0;
  uintStack_2a0 = 0;
  uintStack_298 = 3;
  SystemDataProcessFunction(&bufferPtr_290system_buffer_ptr_290,&bufferPtr_2d8system_buffer_ptr_2d8,&bufferPtr_2b0system_buffer_ptr_2b0);
  int_result = -1;
  long_result = -0x8000000000000000;
  uint_result = (uint)((longlong)system_buffer_ptr_2d0 - (longlong)system_buffer_ptr_2d8 >> 5);
  uint_result = uint_result;
  ptr_uint_var = bufferPtr_2d0;
  ptr_uint_var = bufferPtr_2b0;
  ptr_uint_var = bufferPtr_2a8;
  if (uint_result != 0) {
    do {
      int_result = *(int *)((longlong)system_buffer_ptr_2d8 + uint_result + SYSTEM_DATA_COMPARE_SIZE);
      if (int_result < 4) {
LAB_180063de9:
        bool_var = false;
      }
      else {
        long_result = 0;
        do {
          long_result = long_result + 1;
          if (*(char *)(*(longlong *)((longlong)system_buffer_ptr_2d8 + uint_result + 8) + (longlong)(int_result + -4) +
                       long_result) != (&g_module_data_3)[long_result]) goto LAB_180063de9;
          long_result = long_result;
        } while (long_result != 5);
        bool_var = true;
      }
      if (bool_var) {
        ptr_uint_var = *(void **)((longlong)system_buffer_ptr_2d8 + uint_result + 8);
        ptr_uint_var = &g_system_data_variable3;
        if (ptr_uint_var != (void *)0x0) {
          ptr_uint_var = ptr_uint_var;
        }
        int_result = _stat64i32(ptr_uint_var,localBuffer_268);
        if ((int_result != -1) && (long_result < longStack_248)) {
          long_result = longStack_248;
          int_result = (int)uint_result;
        }
      }
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      uint_result = uint_result + SYSTEM_NODE_HEADER_SIZE;
    } while (uint_result < uint_result);
    ptr_uint_var = bufferPtr_2d0;
    ptr_uint_var = bufferPtr_2b0;
    ptr_uint_var = bufferPtr_2a8;
    if (-1 < int_result) {
                    // WARNING: Subroutine does not return
      memset(localBuffer_238,0,SYSTEM_NODE_HEADER_SIZE0);
    }
  }
  for (; ptr_uint_var = new_var, system_buffer_ptr_2d0 = ptr_uint_var, ptr_uint_var != bufferPtr_2a8; ptr_uint_var = ptr_uint_var + 4)
  {
    system_buffer_ptr_2a8 = ptr_uint_var;
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    ptr_uint_var = bufferPtr_2d0;
    ptr_uint_var = bufferPtr_2a8;
    system_buffer_ptr_2a8 = ptr_uint_var;
  }
  if (system_buffer_ptr_2b0 == (uint64_t *)0x0) {
    system_buffer_ptr_2b0 = (uint64_t *)0x0;
    system_buffer_ptr_2a8 = ptr_uint_var;
    for (ptr_uint_var = bufferPtr_2d8; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    }
    if (system_buffer_ptr_2d8 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_290 = &resourcePoolPointer;
    if (longStack_288 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_288 = 0;
    uintStack_278 = 0;
    system_buffer_ptr_290 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
    InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_2f8);
  }
  system_buffer_ptr_2a8 = ptr_uint_var;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemResources(uint64_t handleIdentifier)
void InitializeSystemResources(uint64_t handleIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  void *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint8_t localBuffer_358 [64];
  uint64_t *system_buffer_ptr_318;
  uint64_t *system_buffer_ptr_310;
  uint64_t uintStack_308;
  uint32_t uintStack_300;
  uint64_t uintStack_2f8;
  longlong longStack_2f0;
  uint64_t uintStack_2e0;
  longlong longStack_2d8;
  uint64_t *system_buffer_ptr_2c0;
  uint64_t *system_buffer_ptr_2b8;
  uint64_t uintStack_2b0;
  uint32_t uintStack_2a8;
  void *system_buffer_ptr_2a0;
  longlong longStack_298;
  uint32_t uintStack_288;
  void *system_buffer_ptr_280;
  void *system_buffer_ptr_278;
  uint32_t uintStack_268;
  void *system_buffer_ptr_260;
  void *system_buffer_ptr_258;
  uint32_t uintStack_248;
  uint64_t uintStack_240;
  uint8_t localBuffer_238 [512];
  ulonglong uintStack_38;

  uintStack_240 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_358;
  InitializeInputSystem(&bufferPtr_2a0system_buffer_ptr_2a0);
  system_buffer_ptr_318 = (uint64_t *)0x0;
  system_buffer_ptr_310 = (uint64_t *)0x0;
  uintStack_308 = 0;
  uintStack_300 = 3;
  system_buffer_ptr_2c0 = (uint64_t *)0x0;
  system_buffer_ptr_2b8 = (uint64_t *)0x0;
  uintStack_2b0 = 0;
  uintStack_2a8 = 3;
  SystemDataProcessFunction(&bufferPtr_2a0system_buffer_ptr_2a0,&bufferPtr_318system_buffer_ptr_318,&bufferPtr_2c0system_buffer_ptr_2c0);
  node_root = bufferPtr_2b8;
  ptr_uint_var = bufferPtr_310;
  ptr_uint_var = bufferPtr_2c0;
  if ((int)((longlong)system_buffer_ptr_310 - (longlong)system_buffer_ptr_318 >> 5) != 0) {
                    // WARNING: Subroutine does not return
    memset(localBuffer_238,0,SYSTEM_NODE_HEADER_SIZE0);
  }
  for (; system_buffer_ptr_310 = ptr_uint_var, ptr_uint_var != node_root; ptr_uint_var = ptr_uint_var + 4) {
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    ptr_uint_var = bufferPtr_310;
  }
  if (system_buffer_ptr_2c0 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_2c0 = (uint64_t *)0x0;
  for (ptr_uint_var = bufferPtr_318; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
  }
  if (system_buffer_ptr_318 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_2a0 = &resourcePoolPointer;
  if (longStack_298 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_298 = 0;
  uintStack_288 = 0;
  system_buffer_ptr_2a0 = &globalSystemPointerData;
  uintStack_2f8 = 0;
  longStack_2f0 = 0;
  InitializeSharedMemory(handleIdentifier,&bufferPtr_28system_buffer_ptr_280,&g_module_data_4);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_278 != (void *)0x0) {
    ptr_uint_var = bufferPtr_278;
  }
  ProcessSystemNode(&uintStack_2f8,ptr_uint_var,&g_module_data_2);
  InitializeTextureSystem(systemCoreData,&uintStack_2f8);
  if (longStack_2f0 != 0) {
    fclose();
    longStack_2f0 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
  system_buffer_ptr_280 = &resourcePoolPointer;
  if (system_buffer_ptr_278 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_278 = (void *)0x0;
  uintStack_268 = 0;
  system_buffer_ptr_280 = &globalSystemPointerData;
  if (longStack_2f0 != 0) {
    fclose();
    longStack_2f0 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
  uintStack_2e0 = 0;
  longStack_2d8 = 0;
  InitializeSharedMemory(handleIdentifier,&bufferPtr_260system_buffer_ptr_260,&g_module_data_5);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_258 != (void *)0x0) {
    ptr_uint_var = bufferPtr_258;
  }
  ProcessSystemNode(&uintStack_2e0,ptr_uint_var,&g_module_data_2);
  InitializeTextureSystem(systemCoreData,&uintStack_2e0);
  if (longStack_2d8 != 0) {
    fclose();
    longStack_2d8 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
  system_buffer_ptr_260 = &resourcePoolPointer;
  if (system_buffer_ptr_258 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_258 = (void *)0x0;
  uintStack_248 = 0;
  system_buffer_ptr_260 = &globalSystemPointerData;
  if (longStack_2d8 != 0) {
    fclose();
    longStack_2d8 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_358);
}
// void InitializeUISystem(void)

void InitializeUISystem(void)

{
                    // WARNING: Subroutine does not return
  InitializeSystemCore();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeSystemResources(uint64_t handleIdentifier)

{
  char is_initialized;
  ulonglong uint_result;
  void *ptr_uint_var;
  uint64_t *ptr_uint_var;
  longlong allocation_size;
  uint64_t *node_current;
  uint64_t *node_previous;
  void *system_buffer_ptr_b8;
  longlong longStack_b0;
  int intStack_a8;
  ulonglong uintStack_a0;
  uint64_t *system_buffer_ptr_98;
  uint64_t *system_buffer_ptr_90;
  uint64_t uintStack_88;
  uint32_t uintStack_80;
  uint64_t uintStack_78;
  longlong longStack_70;
  void *system_buffer_ptr_58;
  void *system_buffer_ptr_50;
  uint32_t uintStack_40;
  uint64_t uintStack_38;

  uintStack_38 = INVALID_HANDLE_VALUE;
  system_buffer_ptr_98 = (uint64_t *)0x0;
  system_buffer_ptr_90 = (uint64_t *)0x0;
  uintStack_88 = 0;
  uintStack_80 = 3;
  is_initialized = InitializeUISystem(&bufferPtr_98system_buffer_ptr_98);
  node_previous = bufferPtr_90;
  node_current = bufferPtr_98;
  if ((is_initialized == '\0') || (system_buffer_ptr_98 == system_buffer_ptr_90)) {
    ConfigureSystemParameters(g_system_context_1,5,3,&globalSystemVariable);
    uint_result = InitializeGraphicsMemory();
    ptr_uint_var = node_current;
  }
  else {
    uintStack_78 = 0;
    longStack_70 = 0;
    InitializeSharedMemory(handleIdentifier,&bufferPtr_58system_buffer_ptr_58,&g_system_global_variable8);
    ptr_uint_var = &g_system_data_variable3;
    if (system_buffer_ptr_50 != (void *)0x0) {
      ptr_uint_var = bufferPtr_50;
    }
    ProcessSystemNode(&uintStack_78,ptr_uint_var,&g_module_data_2);
    uint_result = (longlong)node_previous - (longlong)node_current >> 5;
    system_buffer_ptr_b8 = &resourcePoolPointer;
    uintStack_a0 = 0;
    longStack_b0 = 0;
    intStack_a8 = 0;
    if ((int)uint_result != 0) {
      ptr_uint_var = node_current + 1;
      uint_result = uint_result & 0xffffffff;
      do {
        ptr_uint_var = &g_system_data_variable3;
        if ((void *)*ptr_uint_var != (void *)0x0) {
          ptr_uint_var = (void *)*ptr_uint_var;
        }
        ConfigureBufferAttributes(&bufferPtr_b8system_buffer_ptr_b8,&g_system_global_variablec,ptr_uint_var);
        ptr_uint_var = ptr_uint_var + 4;
        uint_result = uint_result - 1;
      } while (uint_result != 0);
    }
    allocation_size = longStack_70;
    uint_result = fwrite(longStack_b0,1,(longlong)intStack_a8,longStack_70);
    if (allocation_size != 0) {
      fclose(allocation_size);
      longStack_70 = 0;
      LOCK();
      uint_result = (ulonglong)systemCoreData;
      UNLOCK();
      allocation_size = 0;
      node_current = bufferPtr_98;
      node_previous = bufferPtr_90;
      systemCoreData = systemCoreData - 1;
    }
    system_buffer_ptr_b8 = &resourcePoolPointer;
    if (longStack_b0 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_b0 = 0;
    uintStack_a0 = uintStack_a0 & 0xffffffff00000000;
    system_buffer_ptr_b8 = &globalSystemPointerData;
    system_buffer_ptr_58 = &resourcePoolPointer;
    if (system_buffer_ptr_50 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_50 = (void *)0x0;
    uintStack_40 = 0;
    system_buffer_ptr_58 = &globalSystemPointerData;
    ptr_uint_var = node_current;
    if (allocation_size != 0) {
      uint_result = fclose(allocation_size);
      longStack_70 = 0;
      LOCK();
      systemCoreData = systemCoreData - 1;
      UNLOCK();
      node_current = bufferPtr_98;
      node_previous = bufferPtr_90;
      ptr_uint_var = bufferPtr_98;
    }
  }
  for (; node_current != node_previous; node_current = node_current + 4) {
    uint_result = (**(code **)*node_current)(node_current,0);
  }
  if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_67_2(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void SystemFunction_67_2(longlong *handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  uint uint_result;
  int int_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint8_t *ptr_uint_var;
  void *node_current;
  uint *node_previous;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  uint8_t system_local_buffer_138 [32];
  longlong longStack_118;
  void *system_buffer_ptr_108;
  uint8_t *system_buffer_ptr_100;
  uint32_t uintStack_f8;
  uint64_t uintStack_f0;
  uint32_t uintStack_e8;
  uint64_t *system_buffer_ptr_e0;
  uint64_t uintStack_d8;
  uint64_t *system_buffer_ptr_d0;
  uint8_t uintStack_c8;
  undefined7 uintStack_c7;
  uint64_t *system_buffer_ptr_b8;
  ulonglong uintStack_b0;
  uint uintStack_a8;
  uint32_t uintStack_a4;
  uint32_t uintStack_a0;
  uint32_t uintStack_9c;
  ulonglong uintStack_98;
  ulonglong uintStack_90;
  uint8_t uintStack_88;
  undefined7 uintStack_87;
  longlong longStack_78;
  ulonglong uintStack_70;
  uint uintStack_68;
  uint32_t uintStack_64;
  uint32_t uintStack_60;
  uint32_t uintStack_5c;
  ulonglong uintStack_58;
  ulonglong uintStack_50;
  ulonglong uintStack_48;

  uintStack_d8 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)system_local_buffer_138;
  uintStack_e8 = 0;
  InitializeUISystem();
  node_current = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    node_current = *(void **)(resourceIdentifier + 8);
  }
  system_buffer_ptr_b8 = (uint64_t *)0x0;
  uintStack_b0 = 0xf;
  uintStack_c8 = 0;
  long_result = -1;
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (node_current[long_result] != '\0');
  InitializeSystemModule14(&uintStack_c8);
  node_current = &g_system_data_variable3;
  if (*(void **)(systemConfig + 8) != (void *)0x0) {
    node_current = *(void **)(systemConfig + 8);
  }
  longStack_78 = 0;
  uintStack_70 = 0xf;
  uintStack_88 = 0;
  do {
    long_result = long_result + 1;
  } while (node_current[long_result] != '\0');
  InitializeSystemModule14(&uintStack_88,node_current,long_result);
  long_result = longStack_78;
  uint_result = uintStack_a8;
  uintStack_98 = 0;
  module_type_id = MODULE_TYPE_SHADER_INIT;
  uintStack_a8 = uintStack_a8 & 0xffffff00;
  long_result = CONCAT71(uintStack_87,uintStack_88);
  uint_result = CONCAT44(uintStack_a4,uint_result) & 0xffffffffffffff00;
  ptr_uint_var = &uintStack_c8;
  if (0xf < uintStack_b0) {
    ptr_uint_var = (uint8_t *)CONCAT71(uintStack_c7,uintStack_c8);
  }
  longStack_118 = longStack_78;
  ptr_uint_var = (uint64_t *)InitializeSecuritySystem(ptr_uint_var,system_buffer_ptr_b8);
  system_buffer_ptr_e0 = ptr_uint_var;
  if (ptr_uint_var == (uint64_t *)0xffffffffffffffff) {
    if (0xf < uintStack_90) {
      uint_result = uintStack_90 + 1;
      uint_result = uint_result;
      if (0xfff < uint_result) {
        uint_result = uintStack_90 + 0x28;
        uint_result = *(ulonglong *)(uint_result - 8);
        if (0x1f < (uint_result - uint_result) - 8) {
                    // WARNING: Subroutine does not return
          _invalid_parameter_noinfo_noreturn();
        }
      }
      free(uint_result,uint_result);
    }
    uintStack_98 = 0;
    module_type_id = MODULE_TYPE_SHADER_INIT;
    uintStack_a8 = uintStack_a8 & 0xffffff00;
    if (0xf < uintStack_70) {
      uint_result = uintStack_70 + 1;
      long_result = long_result;
      if (0xfff < uint_result) {
        uint_result = uintStack_70 + 0x28;
        long_result = *(longlong *)(long_result + -8);
        if (0x1f < (long_result - long_result) - 8U) {
                    // WARNING: Subroutine does not return
          _invalid_parameter_noinfo_noreturn();
        }
      }
      free(long_result,uint_result);
    }
    longStack_78 = 0;
    uintStack_70 = 0xf;
    uintStack_88 = 0;
    if (0xf < uintStack_b0) {
      uint_result = uintStack_b0 + 1;
      long_result = CONCAT71(uintStack_c7,uintStack_c8);
      long_result = long_result;
      if (0xfff < uint_result) {
        uint_result = uintStack_b0 + 0x28;
        long_result = *(longlong *)(long_result + -8);
        if (0x1f < (long_result - long_result) - 8U) {
                    // WARNING: Subroutine does not return
          _invalid_parameter_noinfo_noreturn();
        }
      }
      free(long_result,uint_result);
    }
    system_buffer_ptr_b8 = (uint64_t *)0x0;
    uintStack_b0 = 0xf;
    uintStack_c8 = 0;
                    // WARNING: Subroutine does not return
    InitializeSystemStack(uintStack_48 ^ (ulonglong)system_local_buffer_138);
  }
  uintStack_58 = 0;
  uintStack_50 = 0xf;
  uintStack_68 = uintStack_68 & 0xffffff00;
  ptr_uint_var = ptr_uint_var;
  if (system_buffer_ptr_b8 < ptr_uint_var) {
    ptr_uint_var = bufferPtr_b8;
  }
  ptr_uint_var = &uintStack_c8;
  if (0xf < uintStack_b0) {
    ptr_uint_var = (uint8_t *)CONCAT71(uintStack_c7,uintStack_c8);
  }
  InitializeSystemModule14(&uintStack_68,ptr_uint_var,ptr_uint_var);
  uintStack_e8 = 1;
  InitializeSystemDataNode24(&uintStack_a8);
  uint_result = uintStack_58;
  uint_result = uintStack_68;
  uintStack_a8 = uintStack_68;
  uintStack_a4 = uintStack_64;
  uintStack_a0 = uintStack_60;
  uintStack_9c = uintStack_5c;
  uintStack_90 = uintStack_50;
  uintStack_e8 = 0;
  uintStack_58 = 0;
  uintStack_50 = 0xf;
  uintStack_68 = uintStack_68 & 0xffffff00;
  uintStack_98 = uint_result;
  if (uint_result == 0) goto LAB_180065009;
  long_result = 0;
  system_buffer_ptr_108 = &resourcePoolPointer;
  uintStack_f0 = 0;
  system_buffer_ptr_100 = (uint8_t *)0x0;
  uintStack_f8 = 0;
  uintStack_98._0_4_ = (int)uint_result;
  int_result = (int)uintStack_98;
  uintStack_98 = uint_result;
  ConfigureSystemParameters(&bufferPtr_108system_buffer_ptr_108,uint_result & 0xffffffff);
  if (int_result != 0) {
    node_previous = &uintStack_a8;
    if (0xf < uintStack_90) {
      node_previous = (uint *)CONCAT44(uintStack_64,uint_result);
    }
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_100,node_previous,uint_result & 0xffffffff);
  }
  uintStack_f8 = 0;
  if (system_buffer_ptr_100 != (uint8_t *)0x0) {
    *system_buffer_ptr_100 = 0;
  }
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  if (ptr_uint_var < (uint64_t *)handleIdentifier[2]) {
    handleIdentifier[1] = (longlong)(ptr_uint_var + 4);
    *ptr_uint_var = &globalSystemPointerData;
    ptr_uint_var[1] = 0;
    *(uint32_t *)(ptr_uint_var + 2) = 0;
    *ptr_uint_var = &resourcePoolPointer;
    ptr_uint_var[3] = 0;
    ptr_uint_var[1] = 0;
    *(uint32_t *)(ptr_uint_var + 2) = 0;
    *(uint32_t *)(ptr_uint_var + 2) = 0;
    ptr_uint_var[1] = bufferPtr_100;
    *(uint32_t *)((longlong)ptr_uint_var + 0x1c) = uintStack_f0._4_4_;
    *(uint32_t *)(ptr_uint_var + 3) = (uint32_t)uintStack_f0;
    uintStack_f8 = 0;
    system_buffer_ptr_100 = (uint8_t *)0x0;
    uintStack_f0 = 0;
    system_buffer_ptr_e0 = ptr_uint_var;
  }
  else {
    long_result = *handleIdentifier;
    long_result = (longlong)ptr_uint_var - long_result >> 5;
    if (long_result == 0) {
      long_result = 1;
LAB_180064eed:
      long_result = AllocateSystemResource(systemMemoryPool,long_result << 5,(char)handleIdentifier[3]);
      ptr_uint_var = (uint64_t *)handleIdentifier[1];
      long_result = *handleIdentifier;
    }
    else {
      long_result = long_result * 2;
      if (long_result != 0) goto LAB_180064eed;
    }
    system_buffer_ptr_d0 = (uint64_t *)InitializeSystemDataNode18(long_result,ptr_uint_var,long_result);
    *system_buffer_ptr_d0 = &globalSystemPointerData;
    bufferPtr_d0[1] = 0;
    *(uint32_t *)(system_buffer_ptr_d0 + 2) = 0;
    *system_buffer_ptr_d0 = &resourcePoolPointer;
    bufferPtr_d0[3] = 0;
    bufferPtr_d0[1] = 0;
    *(uint32_t *)(system_buffer_ptr_d0 + 2) = 0;
    *(uint32_t *)(system_buffer_ptr_d0 + 2) = uintStack_f8;
    bufferPtr_d0[1] = bufferPtr_100;
    *(uint32_t *)((longlong)system_buffer_ptr_d0 + 0x1c) = uintStack_f0._4_4_;
    *(uint32_t *)(system_buffer_ptr_d0 + 3) = (uint32_t)uintStack_f0;
    uintStack_f8 = 0;
    system_buffer_ptr_100 = (uint8_t *)0x0;
    uintStack_f0 = 0;
    ptr_uint_var = system_buffer_ptr_d0 + 4;
    ptr_uint_var = (uint64_t *)handleIdentifier[1];
    ptr_uint_var = (uint64_t *)*handleIdentifier;
    if (ptr_uint_var != ptr_uint_var) {
      do {
        (**(code **)*ptr_uint_var)(ptr_uint_var,0);
        ptr_uint_var = ptr_uint_var + 4;
      } while (ptr_uint_var != ptr_uint_var);
      ptr_uint_var = (uint64_t *)*handleIdentifier;
    }
    if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    *handleIdentifier = long_result;
    handleIdentifier[1] = (longlong)ptr_uint_var;
    handleIdentifier[2] = long_result * SYSTEM_NODE_HEADER_SIZE + long_result;
    long_result = longStack_78;
    ptr_uint_var = bufferPtr_e0;
  }
  system_buffer_ptr_108 = &resourcePoolPointer;
  if (system_buffer_ptr_100 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_100 = (uint8_t *)0x0;
  uintStack_f0 = uintStack_f0 & 0xffffffff00000000;
  system_buffer_ptr_108 = &globalSystemPointerData;
LAB_180065009:
  ptr_uint_var = (uint64_t *)(long_result + (longlong)ptr_uint_var);
  if (system_buffer_ptr_b8 < (uint64_t *)(long_result + (longlong)ptr_uint_var)) {
    ptr_uint_var = bufferPtr_b8;
  }
  ptr_uint_var = &uintStack_c8;
  if (0xf < uintStack_b0) {
    ptr_uint_var = (uint8_t *)CONCAT71(uintStack_c7,uintStack_c8);
  }
  system_buffer_ptr_b8 = (uint64_t *)((longlong)system_buffer_ptr_b8 - (longlong)ptr_uint_var);
                    // WARNING: Subroutine does not return
  memmove(ptr_uint_var,ptr_uint_var + (longlong)ptr_uint_var,(longlong)system_buffer_ptr_b8 + 1);
}
// WARNING: Removing unreachable block (ram,0x0001800654e7)

// WARNING: Removing unreachable block (ram,0x0001800654f0)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeFontSystem(uint64_t handleIdentifier)
void InitializeFontSystem(uint64_t handleIdentifier)

{
  byte *ptr_byte_var;
  int int_result;
  bool bool_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  char char_var;
  int int_result;
  longlong long_result;
  ulonglong uint_result;
  uint64_t uint_result;
  ulonglong uint_result;
  byte *ptr_byte_var;
  longlong long_result;
  int int_result;
  void *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint32_t uint_result;
  uint8_t localBuffer_368 [32];
  void *system_buffer_ptr_348;
  uint16_t localBuffer_338 [2];
  uint16_t localBuffer_334 [2];
  void *system_buffer_ptr_330;
  longlong longStack_328;
  int intStack_320;
  ulonglong uintStack_318;
  uint32_t uintStack_310;
  void *system_buffer_ptr_308;
  void *system_buffer_ptr_300;
  uint32_t uintStack_2f8;
  ulonglong uintStack_2f0;
  void *system_buffer_ptr_2e8;
  void *system_buffer_ptr_2e0;
  uint32_t uintStack_2d8;
  ulonglong uintStack_2d0;
  ulonglong uintStack_2c8;
  void *system_buffer_ptr_2c0;
  uint64_t uintStack_2b8;
  uint32_t uintStack_2b0;
  ulonglong uintStack_2a8;
  void *system_buffer_ptr_2a0;
  char *stack_char_ptr;
  int intStack_290;
  uint32_t uintStack_288;
  uint64_t uintStack_280;
  longlong longStack_278;
  longlong longStack_268;
  uint64_t *system_buffer_ptr_260;
  uint64_t *system_buffer_ptr_258;
  uint64_t uintStack_250;
  uint32_t uintStack_248;
  void *system_buffer_ptr_240;
  longlong longStack_238;
  uint32_t uintStack_228;
  uint64_t *system_buffer_ptr_220;
  uint64_t *system_buffer_ptr_218;
  uint64_t uintStack_210;
  uint32_t uintStack_208;
  void *system_buffer_ptr_200;
  void *system_buffer_ptr_1f8;
  uint32_t uintStack_1e8;
  void *system_buffer_ptr_1e0;
  void *system_buffer_ptr_1d8;
  uint32_t uintStack_1c8;
  void *system_buffer_ptr_1c0;
  void *system_buffer_ptr_1b8;
  uint32_t uintStack_1a8;
  void *system_buffer_ptr_1a0;
  void *system_buffer_ptr_198;
  uint32_t uintStack_188;
  void *system_buffer_ptr_180;
  void *system_buffer_ptr_178;
  uint32_t uintStack_168;
  uint64_t *system_buffer_ptr_160;
  uint64_t *system_buffer_ptr_158;
  uint64_t uintStack_150;
  uint32_t uintStack_148;
  uint64_t *system_buffer_ptr_140;
  uint64_t *system_buffer_ptr_138;
  uint64_t uintStack_130;
  uint32_t uintStack_128;
  uint64_t uintStack_120;
  void *system_buffer_ptr_118;
  uint8_t *system_buffer_ptr_110;
  uint32_t uintStack_108;
  uint8_t localBuffer_100 [16];
  void *system_buffer_ptr_f0;
  uint8_t *system_buffer_ptr_e8;
  uint32_t uintStack_e0;
  uint8_t localBuffer_d8 [16];
  void *system_buffer_ptr_c8;
  void *system_buffer_ptr_c0;
  uint32_t uintStack_b8;
  undefined localBuffer_b0 [40];
  uint32_t system_local_buffer_88 [14];
  ulonglong uintStack_50;
  ulonglong uintStack_38;

  uintStack_120 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_368;
  uintStack_310 = 0;
  InitializeSharedMemory(handleIdentifier,&bufferPtr_18system_buffer_ptr_180,&globalSystemVariable);
  uintStack_280 = 0;
  longStack_278 = 0;
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_178 != (void *)0x0) {
    ptr_uint_var = bufferPtr_178;
  }
  uint_result = ProcessSystemNode(&uintStack_280,ptr_uint_var,&g_module_data_2);
  system_buffer_ptr_330 = &resourcePoolPointer;
  uintStack_318 = 0;
  longStack_328 = 0;
  intStack_320 = 0;
  InitializeConfigSystem(uint_result,&bufferPtr_20system_buffer_ptr_200);
  if ((systemConfigurationData == (longlong *)0x0) ||
     (char_var = (**(code **)(*systemConfigurationData + 0x28))(), char_var == '\0')) {
    ptr_uint_var = &globalSystemVariable;
  }
  else {
    long_result = (**(code **)(systemCoreData + 0x30))();
    ptr_uint_var = &g_system_data_variable3;
    if (*(void **)(long_result + 8) != (void *)0x0) {
      ptr_uint_var = *(void **)(long_result + 8);
    }
  }
  UpdateSystemBuffer(&bufferPtr_1c0system_buffer_ptr_1c0,ptr_uint_var);
  if ((systemConfigurationData == (longlong *)0x0) ||
     (char_var = (**(code **)(*systemConfigurationData + 0x28))(), char_var == '\0')) {
    ptr_uint_var = &g_system_global_variable8;
  }
  else {
    long_result = (**(code **)(systemCoreData + SYSTEM_NODE_HEADER_SIZE))();
    ptr_uint_var = &g_system_data_variable3;
    if (*(void **)(long_result + 8) != (void *)0x0) {
      ptr_uint_var = *(void **)(long_result + 8);
    }
  }
  UpdateSystemBuffer(&bufferPtr_1e0system_buffer_ptr_1e0,ptr_uint_var);
  system_buffer_ptr_c8 = &g_system_data_main;
  system_buffer_ptr_c0 = localBuffer_b0;
  uintStack_b8 = 0;
  localBuffer_b0[0] = 0;
  uintStack_310 = 4;
  InitializeSystemModule17(&bufferPtr_c8system_buffer_ptr_c8,&globalSystemVariable,0x130a7);
  system_buffer_ptr_348 = &g_system_data_variable3;
  if (system_buffer_ptr_c0 != (void *)0x0) {
    system_buffer_ptr_348 = bufferPtr_c0;
  }
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_data_5);
  uintStack_310 = 0;
  system_buffer_ptr_c8 = &globalSystemPointerData;
  system_buffer_ptr_348 = &g_system_data_6;
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_data_7);
  system_buffer_ptr_348 = &g_system_constant_4;
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_data_1);
  system_buffer_ptr_348 = &g_system_data_variable3;
  if (system_buffer_ptr_1b8 != (void *)0x0) {
    system_buffer_ptr_348 = bufferPtr_1b8;
  }
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_data_4);
  system_buffer_ptr_348 = &g_system_data_variable3;
  if (system_buffer_ptr_1d8 != (void *)0x0) {
    system_buffer_ptr_348 = bufferPtr_1d8;
  }
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_data_3);
  system_buffer_ptr_1e0 = &resourcePoolPointer;
  if (system_buffer_ptr_1d8 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_1d8 = (void *)0x0;
  uintStack_1c8 = 0;
  system_buffer_ptr_1e0 = &globalSystemPointerData;
  system_buffer_ptr_1c0 = &resourcePoolPointer;
  if (system_buffer_ptr_1b8 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_1b8 = (void *)0x0;
  uintStack_1a8 = 0;
  system_buffer_ptr_1c0 = &globalSystemPointerData;
  system_buffer_ptr_2c0 = &resourcePoolPointer;
  uintStack_2a8 = 0;
  uintStack_2b8 = 0;
  uintStack_2b0 = 0;
  system_buffer_ptr_2e8 = &resourcePoolPointer;
  uintStack_2d0 = 0;
  system_buffer_ptr_2e0 = (void *)0x0;
  uintStack_2d8 = 0;
  system_buffer_ptr_308 = &resourcePoolPointer;
  uintStack_2f0 = 0;
  system_buffer_ptr_300 = (void *)0x0;
  uintStack_2f8 = 0;
  uint_result = GetSystemStatus();
  ConfigureBufferAttributes(&bufferPtr_2e8system_buffer_ptr_2e8,&g_system_global_variable8,uint_result / SYSTEM_DATA_COMPARE_SIZE0000 & 0xffffffff);
  system_local_buffer_88[0] = 0x48;
  uint_result = GetCurrentProcess();
  int_result = K32GetProcessMemoryInfo(uint_result,system_local_buffer_88,0x48);
  uint_result = 0;
  if (int_result != 0) {
    uint_result = uintStack_50;
  }
  ConfigureBufferAttributes(&bufferPtr_30system_buffer_ptr_308,&g_system_global_variable8,uint_result / SYSTEM_DATA_COMPARE_SIZE0000 & 0xffffffff);
  system_buffer_ptr_348 = &g_system_data_variable3;
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&globalSystemVariable);
  system_buffer_ptr_348 = &g_system_data_variable3;
  if (system_buffer_ptr_2e0 != (void *)0x0) {
    system_buffer_ptr_348 = bufferPtr_2e0;
  }
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_global_variable8);
  system_buffer_ptr_348 = &g_system_data_variable3;
  if (system_buffer_ptr_300 != (void *)0x0) {
    system_buffer_ptr_348 = bufferPtr_300;
  }
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_global_variable8);
  long_result = g_system_base_1;
  system_buffer_ptr_308 = &resourcePoolPointer;
  if (system_buffer_ptr_300 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_300 = (void *)0x0;
  uintStack_2f0 = uintStack_2f0 & 0xffffffff00000000;
  system_buffer_ptr_308 = &globalSystemPointerData;
  system_buffer_ptr_2e8 = &resourcePoolPointer;
  if (system_buffer_ptr_2e0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_2e0 = (void *)0x0;
  uintStack_2d0 = uintStack_2d0 & 0xffffffff00000000;
  system_buffer_ptr_2e8 = &globalSystemPointerData;
  uintStack_2b8 = 0;
  uintStack_2a8 = uintStack_2a8 & 0xffffffff00000000;
  system_buffer_ptr_2c0 = &globalSystemPointerData;
  long_result = systemConfigurationData;
  if (systemConfigurationData == 0) {
    QueryPerformanceCounter(&longStack_268);
    long_result = longStack_268;
  }
  system_buffer_ptr_348 = (void *)
                ((double)(long_result - systemConfigurationData) * systemCoreData - *(double *)(long_result + 0x210));
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&g_system_global_variable8,&g_ptr_data_2,&g_system_global_variable8);
  system_buffer_ptr_348 = &g_system_data_variable3;
  if (system_buffer_ptr_1f8 != (void *)0x0) {
    system_buffer_ptr_348 = bufferPtr_1f8;
  }
  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_ptr_data_2,&g_system_data_2);
  system_buffer_ptr_220 = (uint64_t *)0x0;
  system_buffer_ptr_218 = (uint64_t *)0x0;
  uintStack_210 = 0;
  uintStack_208 = 3;
  system_buffer_ptr_160 = (uint64_t *)0x0;
  system_buffer_ptr_158 = (uint64_t *)0x0;
  uintStack_150 = 0;
  uintStack_148 = 3;
  system_buffer_ptr_f0 = &g_system_data_nodeconfig;
  system_buffer_ptr_e8 = localBuffer_d8;
  localBuffer_d8[0] = 0;
  uintStack_e0 = 9;
  strcpy_s(localBuffer_d8,SYSTEM_DATA_COMPARE_SIZE,&g_system_global_variable8);
  SystemFunction_67_2(&bufferPtr_160system_buffer_ptr_160,&bufferPtr_20system_buffer_ptr_200,&bufferPtr_f0system_buffer_ptr_f0);
  ptr_uint_var = bufferPtr_158;
  ptr_uint_var = bufferPtr_160;
  if (1 < (ulonglong)((longlong)system_buffer_ptr_158 - (longlong)system_buffer_ptr_160 >> 5)) {
    system_buffer_ptr_118 = &g_system_data_nodeconfig;
    system_buffer_ptr_110 = localBuffer_100;
    localBuffer_100[0] = 0;
    uintStack_108 = 1;
    strcpy_s(localBuffer_100,SYSTEM_DATA_COMPARE_SIZE,&g_system_constant_5);
    SystemFunction_67_2(&bufferPtr_220system_buffer_ptr_220,ptr_uint_var + 4,&bufferPtr_118system_buffer_ptr_118);
    system_buffer_ptr_118 = &globalSystemPointerData;
  }
  system_buffer_ptr_f0 = &globalSystemPointerData;
  ptr_uint_var = bufferPtr_220;
  for (ptr_uint_var = ptr_uint_var; system_buffer_ptr_220 = ptr_uint_var, ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    ptr_uint_var = bufferPtr_220;
  }
  if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  uint_result = (longlong)system_buffer_ptr_218 - (longlong)ptr_uint_var >> 5;
  if (uint_result != 0) {
    if ((systemConfigurationData == (longlong *)0x0) ||
       (char_var = (**(code **)(*systemConfigurationData + 0x28))(), char_var == '\0')) {
      ptr_uint_var = &g_system_global_variable8;
    }
    else {
      long_result = (**(code **)(systemCoreData + 0x28))();
      ptr_uint_var = &g_system_data_variable3;
      if (*(void **)(long_result + 8) != (void *)0x0) {
        ptr_uint_var = *(void **)(long_result + 8);
      }
    }
    UpdateSystemBuffer(&bufferPtr_240system_buffer_ptr_240,ptr_uint_var);
    system_buffer_ptr_260 = (uint64_t *)0x0;
    system_buffer_ptr_258 = (uint64_t *)0x0;
    uintStack_250 = 0;
    uintStack_248 = 3;
    localBuffer_338[0] = 10;
    if (longStack_238 != 0) {
      InitializeSystemModule4(&bufferPtr_240system_buffer_ptr_240,&bufferPtr_260system_buffer_ptr_260,localBuffer_338);
    }
    uint_result = (longlong)system_buffer_ptr_258 - (longlong)system_buffer_ptr_260 >> 5;
    ptr_uint_var = bufferPtr_260;
    ptr_uint_var = bufferPtr_260;
    ptr_uint_var = bufferPtr_258;
    if ((int)uint_result != 0) {
      uintStack_2c8 = uint_result & 0xffffffff;
      do {
        system_buffer_ptr_140 = (uint64_t *)0x0;
        system_buffer_ptr_138 = (uint64_t *)0x0;
        uintStack_130 = 0;
        uintStack_128 = 3;
        localBuffer_334[0] = 0x23;
        if (ptr_uint_var[1] != 0) {
          InitializeSystemModule4(ptr_uint_var,&bufferPtr_140system_buffer_ptr_140,localBuffer_334);
        }
        ptr_uint_var = bufferPtr_138;
        ptr_uint_var = bufferPtr_140;
        ptr_uint_var = bufferPtr_140;
        if (((longlong)system_buffer_ptr_138 - (longlong)system_buffer_ptr_140 & 0xffffffffffffffe0U) == 0x40) {
          ProcessResourceData(&bufferPtr_2a0system_buffer_ptr_2a0,system_buffer_ptr_140);
          if (stack_char_ptr != (char *)0x0) {
            intStack_290 = 0;
            long_result = 0;
            long_result = 0;
            char_var = *stack_char_ptr;
            while (char_var != '\0') {
              if (' ' < stack_char_ptr[long_result]) {
                if (long_result != long_result) {
                  stack_char_ptr[long_result] = stack_char_ptr[long_result];
                }
                intStack_290 = intStack_290 + 1;
                long_result = long_result + 1;
              }
              long_result = long_result + 1;
              char_var = stack_char_ptr[long_result];
            }
            stack_char_ptr[long_result] = '\0';
          }
          int_result = 0;
          if (uint_result != 0) {
            ptr_uint_var = ptr_uint_var + 1;
            do {
              int_result = *(int *)(ptr_uint_var + 1);
              int_result = intStack_290;
              if (int_result == intStack_290) {
                if (int_result != 0) {
                  ptr_byte_var = (byte *)*ptr_uint_var;
                  long_result = (longlong)stack_char_ptr - (longlong)ptr_byte_var;
                  do {
                    ptr_byte_var = ptr_byte_var + long_result;
                    int_result = (uint)*ptr_byte_var - (uint)*ptr_byte_var;
                    if (int_result != 0) break;
                    ptr_byte_var = ptr_byte_var + 1;
                  } while (*ptr_byte_var != 0);
                }
LAB_180065a3e:
                if (int_result == 0) {
                  system_buffer_ptr_348 = &g_system_data_variable3;
                  if ((void *)ptr_uint_var[5] != (void *)0x0) {
                    system_buffer_ptr_348 = (void *)ptr_uint_var[5];
                  }
                  ptr_uint_var = &g_system_data_variable3;
                  if ((void *)ptr_uint_var[1] != (void *)0x0) {
                    ptr_uint_var = (void *)ptr_uint_var[1];
                  }
                  ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&globalSystemVariable,&g_system_global_variable8,ptr_uint_var);
                  break;
                }
              }
              else if (int_result == 0) goto LAB_180065a3e;
              int_result = int_result + 1;
              ptr_uint_var = ptr_uint_var + 4;
            } while ((ulonglong)(longlong)int_result < uint_result);
          }
          system_buffer_ptr_2a0 = &resourcePoolPointer;
          if (stack_char_ptr != (char *)0x0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          stack_char_ptr = (char *)0x0;
          uintStack_288 = 0;
          system_buffer_ptr_2a0 = &globalSystemPointerData;
          for (ptr_uint_var = ptr_uint_var; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
            (**(code **)*ptr_uint_var)(ptr_uint_var,0);
          }
        }
        else {
          for (; ptr_uint_var != ptr_uint_var; ptr_uint_var = ptr_uint_var + 4) {
            (**(code **)*ptr_uint_var)(ptr_uint_var,0);
          }
        }
        if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(ptr_uint_var);
        }
        ptr_uint_var = ptr_uint_var + 4;
        uintStack_2c8 = uintStack_2c8 - 1;
      } while (uintStack_2c8 != 0);
      uintStack_2c8 = 0;
      ptr_uint_var = bufferPtr_260;
      ptr_uint_var = bufferPtr_260;
      ptr_uint_var = bufferPtr_258;
    }
    for (; node_current = new_var, ptr_uint_var = new_var, ptr_uint_var != bufferPtr_258; ptr_uint_var = ptr_uint_var + 4
        ) {
      system_buffer_ptr_260 = ptr_uint_var;
      system_buffer_ptr_258 = ptr_uint_var;
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
      ptr_uint_var = bufferPtr_260;
      ptr_uint_var = bufferPtr_258;
      system_buffer_ptr_258 = node_current;
      system_buffer_ptr_260 = ptr_uint_var;
    }
    if (system_buffer_ptr_260 != (uint64_t *)0x0) {
      system_buffer_ptr_260 = ptr_uint_var;
      system_buffer_ptr_258 = ptr_uint_var;
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    system_buffer_ptr_240 = &resourcePoolPointer;
    if (longStack_238 != 0) {
      system_buffer_ptr_260 = ptr_uint_var;
      system_buffer_ptr_258 = ptr_uint_var;
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_238 = 0;
    uintStack_228 = 0;
    system_buffer_ptr_240 = &globalSystemPointerData;
    system_buffer_ptr_260 = ptr_uint_var;
    system_buffer_ptr_258 = ptr_uint_var;
  }
  if ((systemCoreData == 0) || (*(int *)(g_system_base_1 + 0x340) == 0)) {
    bool_var = false;
  }
  else {
    bool_var = true;
  }
  if (((g_system_base_1 != 0) && (*(int *)(g_system_base_1 + 0x340) == 1)) && (bool_var)) {
    long_result = (**(code **)(systemCoreData + 0x18))();
    ptr_uint_var = &g_system_data_variable3;
    if (*(void **)(long_result + 8) != (void *)0x0) {
      ptr_uint_var = *(void **)(long_result + 8);
    }
    UpdateSystemBuffer(&bufferPtr_1a0system_buffer_ptr_1a0,ptr_uint_var);
    ptr_uint_var = &g_system_data_variable3;
    if (system_buffer_ptr_198 != (void *)0x0) {
      ptr_uint_var = bufferPtr_198;
    }
    ConfigureBufferAttributes(&bufferPtr_330system_buffer_ptr_330,&g_system_global_variable8,ptr_uint_var);
    system_buffer_ptr_1a0 = &resourcePoolPointer;
    if (system_buffer_ptr_198 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_198 = (void *)0x0;
    uintStack_188 = 0;
    system_buffer_ptr_1a0 = &globalSystemPointerData;
  }
  long_result = longStack_278;
  fwrite(longStack_328,1,(longlong)intStack_320,longStack_278);
  ptr_uint_var = bufferPtr_218;
  ptr_uint_var = ptr_uint_var;
  if (long_result != 0) {
    fclose(long_result);
    longStack_278 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
    long_result = 0;
    ptr_uint_var = bufferPtr_220;
    ptr_uint_var = bufferPtr_218;
    ptr_uint_var = bufferPtr_220;
  }
  for (; ptr_uint_var = new_var, ptr_uint_var != bufferPtr_218; ptr_uint_var = ptr_uint_var + 4) {
    system_buffer_ptr_218 = ptr_uint_var;
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    ptr_uint_var = bufferPtr_218;
    system_buffer_ptr_218 = ptr_uint_var;
  }
  if (ptr_uint_var != (uint64_t *)0x0) {
    system_buffer_ptr_218 = ptr_uint_var;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  system_buffer_ptr_200 = &resourcePoolPointer;
  if (system_buffer_ptr_1f8 != (void *)0x0) {
    system_buffer_ptr_218 = ptr_uint_var;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_1f8 = (void *)0x0;
  uintStack_1e8 = 0;
  system_buffer_ptr_200 = &globalSystemPointerData;
  system_buffer_ptr_330 = &resourcePoolPointer;
  if (longStack_328 == 0) {
    longStack_328 = 0;
    uintStack_318 = uintStack_318 & 0xffffffff00000000;
    system_buffer_ptr_330 = &globalSystemPointerData;
    system_buffer_ptr_218 = ptr_uint_var;
    if (long_result != 0) {
      fclose(long_result);
      longStack_278 = 0;
      LOCK();
      systemCoreData = systemCoreData + -1;
      UNLOCK();
    }
    system_buffer_ptr_180 = &resourcePoolPointer;
    if (system_buffer_ptr_178 == (void *)0x0) {
      system_buffer_ptr_178 = (void *)0x0;
      uintStack_168 = 0;
      system_buffer_ptr_180 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
      InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_368);
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_218 = ptr_uint_var;
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureSystemHandles(void)
void ConfigureSystemHandles(void)

{
  uint8_t localBuffer_2c8 [104];
  uint64_t uintStack_260;
  uint64_t uintStack_258;
  uint32_t uintStack_250;
  uint32_t uintStack_24c;
  uint32_t uintStack_248;
  uint32_t uintStack_244;
  uint32_t uintStack_240;
  uint32_t uintStack_23c;
  uint32_t uintStack_238;
  uint32_t uintStack_234;
  uint32_t uintStack_230;
  uint8_t uintStack_22c;
  uint8_t localBuffer_228 [512];
  ulonglong uintStack_28;

  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_2c8;
  uintStack_230 = 0x22657865;
  uintStack_260 = 0x736172435c2e2e22;
  uintStack_258 = 0x6564616f6c705568;
  uintStack_22c = 0;
  uintStack_240 = 0x616f6c70;
  uintStack_23c = 0x2e726564;
  uintStack_238 = 0x6c627550;
  uintStack_234 = 0x2e687369;
  uintStack_250 = 0x75502e72;
  uintStack_24c = 0x73696c62;
  uintStack_248 = 0x72435c68;
  uintStack_244 = 0x55687361;
                    // WARNING: Subroutine does not return
  memset(localBuffer_228,0,0x80);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode28(uint64_t handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemDataNode28(uint64_t handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  code *pis_initialized;
  char char_var;
  uint64_t uint_result;
  longlong long_result;
  int int_result;
  longlong *stack_long_ptr;
  void *system_buffer_ptr_a8;
  longlong longStack_a0;
  uint uintStack_98;
  void *system_buffer_ptr_88;
  longlong longStack_80;
  uint32_t uintStack_70;
  void **pbufferPtr_68;
  longlong **pstack_long_ptr;
  uint32_t uintStack_50;
  uint64_t uintStack_48;

  uintStack_48 = INVALID_HANDLE_VALUE;
  stack_long_ptr = *(longlong **)(systemConfigurationData + 0x18);
  ProcessResourceData(&bufferPtr_a8system_buffer_ptr_a8,g_system_base_1 + 0x170,systemConfig,systemFlags,0);
  int_result = uintStack_98 + 3;
  ConfigureSystemParameters(&bufferPtr_a8system_buffer_ptr_a8,int_result);
  *(uint32_t *)((ulonglong)uintStack_98 + longStack_a0) = 0x706d74;
  uintStack_98 = int_result;
  char_var = ValidateSystemData(&bufferPtr_a8system_buffer_ptr_a8);
  if (char_var == '\0') {
    CleanupSystemData(&bufferPtr_a8system_buffer_ptr_a8);
  }
  psystem_buffer_ptr_68 = &bufferPtr_a8system_buffer_ptr_a8;
  pstack_long_ptr = &stack_long_ptr;
  InitializeSystemResources(&pnew_var,systemCoreData,&g_system_configuration_data_ptr);
  InitializeSystemResources(&pnew_var,systemCoreData,&g_system_data_variable0);
  pis_initialized = *(code **)(*stack_long_ptr + 0x40);
  uint_result = ProcessResourceData(&pnew_var,g_system_context_1 + 0x28);
  (*pis_initialized)(stack_long_ptr,uint_result);
  psystem_buffer_ptr_68 = (void **)&resourcePoolPointer;
  if (pstack_long_ptr != (longlong **)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  pstack_long_ptr = (longlong **)0x0;
  uintStack_50 = 0;
  psystem_buffer_ptr_68 = (void **)&globalSystemPointerData;
  pis_initialized = *(code **)(*stack_long_ptr + 0x40);
  uint_result = ProcessResourceData(&bufferPtr_88system_buffer_ptr_88,g_system_context_1 + 0xe0);
  (*pis_initialized)(stack_long_ptr,uint_result);
  system_buffer_ptr_88 = &resourcePoolPointer;
  if (longStack_80 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_80 = 0;
  uintStack_70 = 0;
  system_buffer_ptr_88 = &globalSystemPointerData;
  if (resourceIdentifier == 0) {
    long_result = InitializeSystemModule10(systemConfigurationData);
    (**(code **)(*stack_long_ptr + 8))(stack_long_ptr,handleIdentifier,*(uint32_t *)(long_result + 0x38));
  }
  else {
    pis_initialized = *(code **)(*stack_long_ptr + SYSTEM_DATA_COMPARE_SIZE);
    uint_result = UpdateSystemBuffer(&bufferPtr_88system_buffer_ptr_88,resourceIdentifier);
    (*pis_initialized)(stack_long_ptr,handleIdentifier,uint_result);
    system_buffer_ptr_88 = &resourcePoolPointer;
    if (longStack_80 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_80 = 0;
    uintStack_70 = 0;
    system_buffer_ptr_88 = &globalSystemPointerData;
  }
  SystemValidateFunction(&bufferPtr_a8system_buffer_ptr_a8);
  system_buffer_ptr_a8 = &resourcePoolPointer;
  if (longStack_a0 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemResources(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemResources(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint uint_result;
  longlong long_result;
  void *ptr_uint_var;
  ulonglong uint_result;
  uint64_t uintStack_88;
  longlong longStack_80;
  void *system_buffer_ptr_70;
  longlong longStack_68;
  uint uintStack_60;
  uint64_t uintStack_58;
  void *system_buffer_ptr_50;
  void *system_buffer_ptr_48;
  uint32_t uintStack_38;

  uintStack_88 = 0;
  longStack_80 = 0;
  long_result = *handleIdentifier;
  system_buffer_ptr_70 = &resourcePoolPointer;
  uintStack_58 = 0;
  longStack_68 = 0;
  uintStack_60 = 0;
  uint_result = *(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = (ulonglong)uint_result;
  if (*(longlong *)(long_result + 8) != 0) {
    ConfigureSystemParameters(&bufferPtr_70system_buffer_ptr_70,uint_result,systemConfig,systemFlags,1,INVALID_HANDLE_VALUE);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memcpy(longStack_68,*(uint64_t *)(long_result + 8),uint_result);
  }
  if (longStack_68 != 0) {
    *(uint8_t *)(uint_result + longStack_68) = 0;
  }
  uintStack_60 = uint_result;
  uintStack_58._4_4_ = *(uint *)(long_result + 0x1c);
  ConfigureSystemParameters(&bufferPtr_70system_buffer_ptr_70,1);
  *(uint16_t *)((ulonglong)uintStack_60 + longStack_68) = 0x5c;
  uintStack_60 = 1;
  InitializeSharedMemory(&bufferPtr_70system_buffer_ptr_70,&bufferPtr_50system_buffer_ptr_50,systemConfig);
  system_buffer_ptr_70 = &resourcePoolPointer;
  if (longStack_68 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_68 = 0;
  uintStack_58 = (ulonglong)uintStack_58._4_4_ << SYSTEM_NODE_HEADER_SIZE;
  system_buffer_ptr_70 = &globalSystemPointerData;
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_48 != (void *)0x0) {
    ptr_uint_var = bufferPtr_48;
  }
  ProcessSystemNode(&uintStack_88,ptr_uint_var,&g_module_data_2,systemFlags,0);
  InitializeTextureSystem(resourceIdentifier,&uintStack_88);
  if (longStack_80 != 0) {
    fclose();
    longStack_80 = 0;
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
  (**(code **)(**(longlong **)handleIdentifier[1] + 0x40))(*(longlong **)handleIdentifier[1],&bufferPtr_50system_buffer_ptr_50);
  system_buffer_ptr_50 = &resourcePoolPointer;
  if (system_buffer_ptr_48 != (void *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_48 = (void *)0x0;
  uintStack_38 = 0;
  system_buffer_ptr_50 = &globalSystemPointerData;
  if (longStack_80 != 0) {
    fclose();
    LOCK();
    systemCoreData = systemCoreData + -1;
    UNLOCK();
  }
  return;
}
// WARNING: Removing unreachable block (ram,0x0001800665ec)

// WARNING: Removing unreachable block (ram,0x0001800665f5)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule30(uint64_t handleIdentifier,uint64_t resourceIdentifier,char systemConfig,char systemFlags,
void InitializeSystemModule30(uint64_t handleIdentifier,uint64_t resourceIdentifier,char systemConfig,char systemFlags,
                  uint64_t parameter_5)

{
  char is_initialized;
  int int_result;
  uint32_t uint_result;
  int int_result;
  uint64_t uint_result;
  ulonglong uint_result;
  uint8_t localBuffer_1f8 [32];
  void *system_buffer_ptr_1d8;
  void *system_buffer_ptr_1d0;
  void *system_buffer_ptr_1c8;
  void *system_buffer_ptr_1b8;
  longlong longStack_1b0;
  uint32_t uintStack_1a8;
  uint64_t uintStack_1a0;
  void *system_buffer_ptr_198;
  longlong longStack_190;
  uint32_t uintStack_180;
  void *system_buffer_ptr_178;
  void *system_buffer_ptr_170;
  uint32_t uintStack_168;
  ulonglong uintStack_160;
  void *system_buffer_ptr_158;
  void *system_buffer_ptr_150;
  uint32_t uintStack_148;
  ulonglong uintStack_140;
  void *system_buffer_ptr_138;
  longlong longStack_130;
  uint32_t uintStack_120;
  void *system_buffer_ptr_110;
  longlong longStack_108;
  uint32_t uintStack_f8;
  void *system_buffer_ptr_f0;
  longlong longStack_e8;
  uint32_t uintStack_d8;
  void *system_buffer_ptr_d0;
  void *system_buffer_ptr_c8;
  uint32_t uintStack_b8;
  uint64_t uintStack_b0;
  void **pbufferPtr_a8;
  uint32_t localBuffer_98 [14];
  ulonglong uintStack_60;
  ulonglong uintStack_48;

  uintStack_b0 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_1f8;
  is_initialized = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
  int_result = 0;
  if (is_initialized != '\0') {
    UpdateSystemBuffer(&bufferPtr_1b8system_buffer_ptr_1b8,&g_system_data_variable0);
    InitializeSystemDataNode28(&bufferPtr_1b8system_buffer_ptr_1b8,0);
    system_buffer_ptr_1b8 = &resourcePoolPointer;
    if (longStack_1b0 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_1b0 = 0;
    uintStack_1a0 = (ulonglong)uintStack_1a0._4_4_ << SYSTEM_NODE_HEADER_SIZE;
    system_buffer_ptr_1b8 = &globalSystemPointerData;
    goto LAB_180066971;
  }
  if (((g_system_initialized_flag != '\0') || (g_engine_ready_flag != '\0')) ||
     (*(int *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZEe0) == 1)) {
    ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
    InitializeGraphicsMemory();
    goto LAB_180066971;
  }
  if ((systemConfig == '\0') && (g_system_data_variable1 == '\0')) {
    if (((g_system_data_variable0 == '\0') || (int_result = IsDebuggerPresent(), int_result != 0)) &&
       (g_graphics_initialized_flag == '\0')) {
      uint_result = MessageBoxA(0,&globalSystemVariable,&g_system_global_variable4,0x40004);
      switch(uint_result) {
      case 1:
        break;
      default:
        int_result = 1;
        break;
      case 4:
        int_result = 2;
        break;
      case 5:
        int_result = 3;
        break;
      case 6:
        int_result = 4;
        break;
      case 7:
        int_result = 5;
      }
      if (int_result == 4) goto LAB_18006650a;
    }
    else if (*(char *)(g_system_context_1 + 0x18) != '\0') {
      system_buffer_ptr_1c8 = &globalSystemVariable;
      system_buffer_ptr_1d0 = &g_system_global_variable4;
      system_buffer_ptr_1d8 = &g_system_global_variable8;
      InitializeEventSystem(g_system_context_1,3,0xffffffff00000000,0xd);
    }
    ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
  }
  else {
LAB_18006650a:
    InitializeSystemModule36(&bufferPtr_198system_buffer_ptr_198);
    uint_result = UpdateSystemBuffer(&bufferPtr_138system_buffer_ptr_138,&g_system_data_variable0);
    int_result = CompareSystemBuffers(&bufferPtr_198system_buffer_ptr_198,uint_result);
    system_buffer_ptr_138 = &resourcePoolPointer;
    if (longStack_130 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_130 = 0;
    uintStack_120 = 0;
    system_buffer_ptr_138 = &globalSystemPointerData;
    CompareSystemData(&bufferPtr_198system_buffer_ptr_198,&bufferPtr_d0system_buffer_ptr_d0,int_result + 7,0xffffffff);
    system_buffer_ptr_1b8 = &resourcePoolPointer;
    uintStack_1a0 = 0;
    longStack_1b0 = 0;
    uintStack_1a8 = 0;
    system_buffer_ptr_158 = &resourcePoolPointer;
    uintStack_140 = 0;
    system_buffer_ptr_150 = (void *)0x0;
    uintStack_148 = 0;
    system_buffer_ptr_178 = &resourcePoolPointer;
    uintStack_160 = 0;
    system_buffer_ptr_170 = (void *)0x0;
    uintStack_168 = 0;
    uint_result = GetSystemStatus();
    ConfigureBufferAttributes(&bufferPtr_158system_buffer_ptr_158,&g_system_global_variable8,uint_result / SYSTEM_DATA_COMPARE_SIZE0000 & 0xffffffff);
    localBuffer_98[0] = 0x48;
    uint_result = GetCurrentProcess();
    int_result = K32GetProcessMemoryInfo(uint_result,localBuffer_98,0x48);
    uint_result = 0;
    if (int_result != 0) {
      uint_result = uintStack_60;
    }
    ConfigureBufferAttributes(&bufferPtr_178system_buffer_ptr_178,&g_system_global_variable8,uint_result / SYSTEM_DATA_COMPARE_SIZE0000 & 0xffffffff);
    ConfigureSystemParameters(g_system_context_1,5,3,&g_system_configuration_data_ptr);
    system_buffer_ptr_1d8 = &g_system_data_variable3;
    if (system_buffer_ptr_150 != (void *)0x0) {
      system_buffer_ptr_1d8 = bufferPtr_150;
    }
    ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
    system_buffer_ptr_1d8 = &g_system_data_variable3;
    if (system_buffer_ptr_170 != (void *)0x0) {
      system_buffer_ptr_1d8 = bufferPtr_170;
    }
    ConfigureSystemParameters(g_system_context_1,5,3,&globalSystemVariable);
    system_buffer_ptr_1d8 = &g_system_data_variable3;
    ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
    system_buffer_ptr_1d8 = &g_system_data_variable3;
    if (system_buffer_ptr_c8 != (void *)0x0) {
      system_buffer_ptr_1d8 = bufferPtr_c8;
    }
    ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
    system_buffer_ptr_1d8 = &g_system_global_variable8;
    if (systemConfig != '\0') {
      system_buffer_ptr_1d8 = &globalSystemVariable;
    }
    ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
    InitializeGraphicsMemory();
    if (((systemFlags == '\0') || (g_audio_initialized_flag != '\0')) || (*(int *)(systemCoreData + 0x1150) != 0))
    {
      ConfigureSystemParameters(g_system_context_1,5,3,&globalSystemVariable);
      InitializeGraphicsMemory();
    }
    else {
      SystemInitializeFunction(&bufferPtr_198system_buffer_ptr_198);
    }
    psystem_buffer_ptr_a8 = &bufferPtr_138system_buffer_ptr_138;
    uint_result = ProcessResourceData(&bufferPtr_138system_buffer_ptr_138,&bufferPtr_198system_buffer_ptr_198);
    InitializeStringManagerSystem(uint_result);
    SystemFunction_36_8(&bufferPtr_198system_buffer_ptr_198,parameter_5);
    InitializeSystemDataNode32(&bufferPtr_198system_buffer_ptr_198);
    InitializeInputSystem(&bufferPtr_138system_buffer_ptr_138);
    InitializeSharedMemory(&bufferPtr_138system_buffer_ptr_138,&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variable8);
    InitializeSharedMemory(&bufferPtr_198system_buffer_ptr_198,&bufferPtr_110system_buffer_ptr_110,&g_system_global_variable8);
    UpdateBufferData(&bufferPtr_110system_buffer_ptr_110,&bufferPtr_f0system_buffer_ptr_f0);
    system_buffer_ptr_110 = &resourcePoolPointer;
    if (longStack_108 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_108 = 0;
    uintStack_f8 = 0;
    system_buffer_ptr_110 = &globalSystemPointerData;
    system_buffer_ptr_f0 = &resourcePoolPointer;
    if (longStack_e8 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_e8 = 0;
    uintStack_d8 = 0;
    system_buffer_ptr_f0 = &globalSystemPointerData;
    system_buffer_ptr_138 = &resourcePoolPointer;
    if (longStack_130 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_130 = 0;
    uintStack_120 = 0;
    system_buffer_ptr_138 = &globalSystemPointerData;
    InitializeSystemResources(&bufferPtr_198system_buffer_ptr_198);
    InitializeSystemResources(&bufferPtr_198system_buffer_ptr_198);
    InitializeFontSystem(&bufferPtr_198system_buffer_ptr_198);
    ConfigureSystemHandles(&bufferPtr_198system_buffer_ptr_198,resourceIdentifier,systemConfig,0);
    system_buffer_ptr_178 = &resourcePoolPointer;
    if (system_buffer_ptr_170 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_170 = (void *)0x0;
    uintStack_160 = uintStack_160 & 0xffffffff00000000;
    system_buffer_ptr_178 = &globalSystemPointerData;
    system_buffer_ptr_158 = &resourcePoolPointer;
    if (system_buffer_ptr_150 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_150 = (void *)0x0;
    uintStack_140 = uintStack_140 & 0xffffffff00000000;
    system_buffer_ptr_158 = &globalSystemPointerData;
    longStack_1b0 = 0;
    uintStack_1a0 = uintStack_1a0 & 0xffffffff00000000;
    system_buffer_ptr_1b8 = &globalSystemPointerData;
    system_buffer_ptr_d0 = &resourcePoolPointer;
    if (system_buffer_ptr_c8 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_c8 = (void *)0x0;
    uintStack_b8 = 0;
    system_buffer_ptr_d0 = &globalSystemPointerData;
    system_buffer_ptr_198 = &resourcePoolPointer;
    if (longStack_190 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_190 = 0;
    uintStack_180 = 0;
    system_buffer_ptr_198 = &globalSystemPointerData;
  }
LAB_180066971:
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_1f8);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeResourceSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,char systemConfig,uint64_t systemFlags,
void InitializeResourceSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,char systemConfig,uint64_t systemFlags,
                  uint64_t parameter_5)

{
  longlong long_result;
  char char_var;
  int compare_result;
  uint32_t uint_result;
  uint64_t *ptr_uint_var;
  int int_result;
  longlong long_result;
  void *thread_parameter_ptr;
  uint64_t *system_buffer_ptr_98;
  uint32_t module_type_id;
  uint64_t uintStack_88;
  uint8_t localBuffer_80 [72];

  char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
  if (char_var == '\0') {
    if ((g_system_initialized_flag == '\0') && (*(int *)(systemCoreData + SYSTEM_DATA_COMPARE_SIZEe0) != 1)) {
      compare_result = 0;
      if ((systemConfig != '\0') || (g_system_data_variable1 != '\0')) {
LAB_180066bf4:
        InitializeSystemModule36(localBuffer_80);
        thread_parameter_ptr = &resourcePoolPointer;
        uintStack_88 = 0;
        system_buffer_ptr_98 = (uint64_t *)0x0;
        uintStack_90 = 0;
        ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
        *(uint8_t *)ptr_uint_var = 0;
        system_buffer_ptr_98 = ptr_uint_var;
        uint_result = ValidateResourceAllocation(ptr_uint_var);
        uintStack_88 = CONCAT44(uintStack_88._4_4_,uint_result);
        *ptr_uint_var = 0x73656873617263;
        module_type_id = MODULE_TYPE_AUDIO_INIT;
        CompareSystemBuffers(localBuffer_80,&thread_parameter_ptr);
        thread_parameter_ptr = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(ptr_uint_var);
      }
      if (((g_system_data_variable0 == '\0') || (int_result = IsDebuggerPresent(), int_result != 0)) &&
         (g_graphics_initialized_flag == '\0')) {
        uint_result = MessageBoxA(0,&globalSystemVariable,&g_system_global_variable4,0x40004);
        switch(uint_result) {
        case 1:
          break;
        default:
          compare_result = 1;
          break;
        case 4:
          compare_result = 2;
          break;
        case 5:
          compare_result = 3;
          break;
        case 6:
          compare_result = 4;
          break;
        case 7:
          compare_result = 5;
        }
        if (compare_result == 4) goto LAB_180066bf4;
      }
      else if (*(char *)(g_system_context_1 + 0x18) != '\0') {
        InitializeEventSystem(g_system_context_1,3,0xffffffff00000000,0xd,&g_system_global_variable8,&g_system_global_variable4,
                      &globalSystemVariable);
      }
      ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
    }
    else {
      ConfigureSystemParameters(g_system_context_1,5,3,&g_system_global_variable8);
      InitializeGraphicsMemory();
    }
  }
  else {
    thread_parameter_ptr = &resourcePoolPointer;
    uintStack_88 = 0;
    system_buffer_ptr_98 = (uint64_t *)0x0;
    uintStack_90 = 0;
    long_result = -1;
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (*(char *)(long_result + 0x180c84871) != '\0');
    if ((int)(long_result + 1) != 0) {
      int_result = (int)long_result + 2;
      compare_result = int_result;
      if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
        compare_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_98 = (uint64_t *)AllocateSystemResource(systemMemoryPool,(longlong)compare_result,0x13);
      *(uint8_t *)system_buffer_ptr_98 = 0;
      uint_result = ValidateResourceAllocation(system_buffer_ptr_98);
      uintStack_88 = CONCAT44(uintStack_88._4_4_,uint_result);
                    // WARNING: Subroutine does not return
      memcpy(system_buffer_ptr_98,&g_system_data_variable0,int_result);
    }
    uintStack_90 = 0;
    InitializeSystemDataNode28(&thread_parameter_ptr,parameter_5);
    thread_parameter_ptr = &resourcePoolPointer;
    if (system_buffer_ptr_98 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  return;
}
// void InitializeTextureSystem(void)

void InitializeTextureSystem(void)

{
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SetupSystemMemory(longlong *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void SetupSystemMemory(longlong *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  uint64_t *node_root;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  longlong long_result;

  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  long_result = 0;
  if (ptr_uint_var < (uint64_t *)handleIdentifier[2]) {
    handleIdentifier[1] = (longlong)(ptr_uint_var + 4);
    *ptr_uint_var = &globalSystemPointerData;
    ptr_uint_var[1] = 0;
    *(uint32_t *)(ptr_uint_var + 2) = 0;
    *ptr_uint_var = &resourcePoolPointer;
    ptr_uint_var[3] = 0;
    ptr_uint_var[1] = 0;
    *(uint32_t *)(ptr_uint_var + 2) = 0;
    *(uint32_t *)(ptr_uint_var + 2) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    ptr_uint_var[1] = *(uint64_t *)(resourceIdentifier + 8);
    *(uint32_t *)((longlong)ptr_uint_var + 0x1c) = *(uint32_t *)(resourceIdentifier + 0x1c);
    *(uint32_t *)(ptr_uint_var + 3) = *(uint32_t *)(resourceIdentifier + 0x18);
    *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    *(uint64_t *)(resourceIdentifier + 8) = 0;
    *(uint64_t *)(resourceIdentifier + 0x18) = 0;
    return;
  }
  long_result = *handleIdentifier;
  long_result = (longlong)ptr_uint_var - long_result >> 5;
  if (long_result == 0) {
    long_result = 1;
  }
  else {
    long_result = long_result * 2;
    if (long_result == 0) goto LAB_180066ec4;
  }
  long_result = AllocateSystemResource(systemMemoryPool,long_result << 5,(char)handleIdentifier[3],systemFlags,INVALID_HANDLE_VALUE);
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  long_result = *handleIdentifier;
LAB_180066ec4:
  node_root = (uint64_t *)InitializeSystemDataNode18(long_result,ptr_uint_var,long_result);
  *node_root = &globalSystemPointerData;
  node_root[1] = 0;
  *(uint32_t *)(node_root + 2) = 0;
  *node_root = &resourcePoolPointer;
  node_root[3] = 0;
  node_root[1] = 0;
  *(uint32_t *)(node_root + 2) = 0;
  *(uint32_t *)(node_root + 2) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  node_root[1] = *(uint64_t *)(resourceIdentifier + 8);
  *(uint32_t *)((longlong)node_root + 0x1c) = *(uint32_t *)(resourceIdentifier + 0x1c);
  *(uint32_t *)(node_root + 3) = *(uint32_t *)(resourceIdentifier + 0x18);
  *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint64_t *)(resourceIdentifier + 8) = 0;
  *(uint64_t *)(resourceIdentifier + 0x18) = 0;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != ptr_uint_var) {
    do {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
      ptr_uint_var = ptr_uint_var + 4;
    } while (ptr_uint_var != ptr_uint_var);
    ptr_uint_var = (uint64_t *)*handleIdentifier;
  }
  if (ptr_uint_var == (uint64_t *)0x0) {
    *handleIdentifier = long_result;
    handleIdentifier[1] = (longlong)(node_root + 4);
    handleIdentifier[2] = long_result * SYSTEM_NODE_HEADER_SIZE + long_result;
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation(ptr_uint_var);
}

longlong InitializeSecuritySystem(longlong handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,char *systemFlags,
                      ulonglong parameter_5)

{
  char is_initialized;
  int int_result;
  longlong long_result;
  longlong long_result;

  if (parameter_5 <= resourceIdentifier) {
    if (parameter_5 == 0) {
      return 0;
    }
    is_initialized = *systemFlags;
    long_result = (handleIdentifier - parameter_5) + resourceIdentifier;
    for (long_result = memchr(handleIdentifier,(int)is_initialized,(long_result + 1) - handleIdentifier); long_result != 0;
        long_result = memchr(long_result + 1,(int)is_initialized,(long_result + 1) - (long_result + 1))) {
      int_result = memcmp(long_result,systemFlags,parameter_5);
      if (int_result == 0) {
        return long_result - handleIdentifier;
      }
    }
  }
  return -1;
}
// void InitializeVideoSystem(void)

void InitializeVideoSystem(void)

{
  code *pis_initialized;

  __Xout_of_range_std__YAXPEBD_Z(&g_system_global_variable8);
  pis_initialized = (code *)swi(3);
  (*pis_initialized)();
  return;
}
// void InitializeSystemDataNode24(longlong *handleIdentifier)

void InitializeSystemDataNode24(longlong *handleIdentifier)

{
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;

  uint_result = handleIdentifier[3];
  if (0xf < uint_result) {
    long_result = *handleIdentifier;
    long_result = long_result;
    if (0xfff < uint_result + 1) {
      long_result = *(longlong *)(long_result + -8);
      if (0x1f < (long_result - long_result) - 8U) {
                    // WARNING: Subroutine does not return
        _invalid_parameter_noinfo_noreturn(long_result - long_result,uint_result + 0x28);
      }
    }
    free(long_result);
  }
  handleIdentifier[2] = 0;
  handleIdentifier[3] = 0xf;
  *(uint8_t *)handleIdentifier = 0;
  return;
}
// void InitializeThreadManagerSystem(void)

void InitializeThreadManagerSystem(void)

{
  InitializeSystemDataNode24();
  return;
}
// void ConfigureSystemParameters(void)

void ConfigureSystemParameters(void)

{
  code *pis_initialized;

  __Xlength_error_std__YAXPEBD_Z(&globalSystemVariable);
  pis_initialized = (code *)swi(3);
  (*pis_initialized)();
  return;
}
// void SystemFunction_16_0(ulonglong handleIdentifier)

void SystemFunction_16_0(ulonglong handleIdentifier)

{
  code *pis_initialized;
  int int_result;
  longlong long_result;
  ulonglong uint_result;

  if (0xfff < handleIdentifier) {
    uint_result = handleIdentifier + 0x27;
    if (uint_result <= handleIdentifier) {
      uint_result = 0xffffffffffffffff;
    }
    long_result = SystemCheckFunction(uint_result);
    if (long_result == 0) {
                    // WARNING: Subroutine does not return
      _invalid_parameter_noinfo_noreturn();
    }
    *(longlong *)((long_result + 0x27U & 0xffffffffffffffe0) - 8) = long_result;
    return;
  }
  if (handleIdentifier == 0) {
    return;
  }
  do {
    long_result = malloc(handleIdentifier);
    if (long_result != 0) {
      return;
    }
    int_result = _callnewh(handleIdentifier);
  } while (int_result != 0);
  if (handleIdentifier == 0xffffffffffffffff) {
    SystemCleanupCompleteFunction();
    pis_initialized = (code *)swi(3);
    (*pis_initialized)();
    return;
  }
  SystemResetFunction();
  pis_initialized = (code *)swi(3);
  (*pis_initialized)();
  return;
}
// void InitializeSystemDataNode25(longlong handleIdentifier,ulonglong resourceIdentifier)

void InitializeSystemDataNode25(longlong handleIdentifier,ulonglong resourceIdentifier)

{
  longlong long_result;

  long_result = handleIdentifier;
  if (0xfff < resourceIdentifier) {
    long_result = *(longlong *)(handleIdentifier + -8);
    if (0x1f < (handleIdentifier - long_result) - 8U) {
                    // WARNING: Subroutine does not return
      _invalid_parameter_noinfo_noreturn(handleIdentifier - long_result,resourceIdentifier + 0x27);
    }
  }
                    // WARNING: Could not recover jumptable at 0x0001808ffc83. Too many branches
                    // WARNING: Treating indirect jump as call
  free(long_result);
  return;
}
// void InitializeSystemModule14(uint64_t *handleIdentifier,uint64_t resourceIdentifier,ulonglong systemConfig)

void InitializeSystemModule14(uint64_t *handleIdentifier,uint64_t resourceIdentifier,ulonglong systemConfig)

{
  ulonglong uint_result;
  code *ptr_char_var;
  uint64_t uint_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;

  uint_result = handleIdentifier[3];
  if (systemConfig <= uint_result) {
    ptr_uint_var = handleIdentifier;
    if (0xf < uint_result) {
      ptr_uint_var = (uint64_t *)*handleIdentifier;
    }
    handleIdentifier[2] = systemConfig;
                    // WARNING: Subroutine does not return
    memmove(ptr_uint_var);
  }
  if (systemConfig < 0x8000000000000000) {
    uint_result = systemConfig | 0xf;
    uint_result = 0x7fffffffffffffff;
    if (((uint_result < 0x8000000000000000) && (uint_result <= 0x7fffffffffffffff - (uint_result >> 1))) &&
       (uint_result = (uint_result >> 1) + uint_result, uint_result = uint_result, uint_result < uint_result)) {
      uint_result = uint_result;
    }
    uint_result = SystemFunction_16_0(uint_result + 1);
    handleIdentifier[2] = systemConfig;
    handleIdentifier[3] = uint_result;
                    // WARNING: Subroutine does not return
    memcpy(uint_result,resourceIdentifier,systemConfig);
  }
  ConfigureSystemParameters();
  ptr_char_var = (code *)swi(3);
  (*ptr_char_var)();
  return;
}
// void SystemFunction_41_1(ulonglong handleIdentifier)

void SystemFunction_41_1(ulonglong handleIdentifier)

{
  ulonglong uint_result;
  uint64_t uint_result;
  longlong system_RBX;
  ulonglong system_RBP;
  uint64_t system_RSI;
  ulonglong system_RDI;

  handleIdentifier = handleIdentifier | 0xf;
  if (((handleIdentifier <= system_RDI) && (system_RBP <= system_RDI - (system_RBP >> 1))) &&
     (uint_result = (system_RBP >> 1) + system_RBP, system_RDI = handleIdentifier, handleIdentifier < uint_result)) {
    system_RDI = uint_result;
  }
  uint_result = SystemFunction_16_0(system_RDI + 1);
  *(uint64_t *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE) = system_RSI;
  *(ulonglong *)(system_RBX + 0x18) = system_RDI;
                    // WARNING: Subroutine does not return
  memcpy(uint_result);
}
// void SystemFunction_55_4(void)

void SystemFunction_55_4(void)

{
  return;
}
// void ProcessSystemData(void)

void ProcessSystemData(void)

{
                    // WARNING: Subroutine does not return
  _invalid_parameter_noinfo_noreturn();
}
// void SystemFunction_58_3(void)

void SystemFunction_58_3(void)

{
  code *pis_initialized;

  ConfigureSystemParameters();
  pis_initialized = (code *)swi(3);
  (*pis_initialized)();
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule30(longlong handleIdentifier)
void InitializeSystemModule30(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  int compare_result;
  uint64_t uint_result;
  uint64_t uint_result;
  longlong *long_ptr;
  uint localBuffer_X8 [2];
  longlong lstack_var;
  longlong lstack_var;
  longlong *stack_long_ptr;
  uint32_t uintStack_70;
  uint32_t uintStack_6c;
  uint32_t uintStack_68;
  uint32_t uintStack_64;
  uint32_t uintStack_60;
  uint32_t uintStack_5c;
  uint32_t uintStack_58;
  uint32_t uintStack_54;
  void *system_buffer_ptr_50;
  void *system_buffer_ptr_48;

  uint_result = GetCurrentThread();
  SetThreadPriority(uint_result,0);
  localBuffer_X8[0] = 0;
  lstack_var = 0;
  lstack_var = 0;
  while( true ) {
    while( true ) {
      compare_result = GetQueuedCompletionStatus
                        (*(uint64_t *)(handleIdentifier + 0x28),localBuffer_X8,&lstack_var,&lstack_var,
                         0xffffffff);
      long_result = lstack_var;
      if (compare_result == 0) break;
      if (lstack_var == -1) {
        return;
      }
      *(longlong *)(lstack_var + 0x1c8) =
           *(longlong *)(lstack_var + 0x1c8) - (ulonglong)localBuffer_X8[0];
      uint_result = systemCoreData;
      if (*(longlong *)(lstack_var + 0x1c8) < 1) {
        long_result = *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
        uint_result = AllocateSystemMemory(systemMemoryPool,0x40,8,10);
        stack_long_ptr = (longlong *)&uintStack_60;
        system_buffer_ptr_50 = &g_system_func_13;
        system_buffer_ptr_48 = &g_system_func_12;
        uintStack_70 = (uint32_t)uint_result;
        uintStack_6c = (uint32_t)((ulonglong)uint_result >> SYSTEM_NODE_HEADER_SIZE);
        uintStack_68 = (uint32_t)long_result;
        uintStack_64 = (uint32_t)((ulonglong)long_result >> SYSTEM_NODE_HEADER_SIZE);
        uintStack_60 = uintStack_70;
        uintStack_5c = uintStack_6c;
        uintStack_58 = uintStack_68;
        uintStack_54 = uintStack_64;
        long_ptr = (longlong *)InitializeSystemDataNode17(uint_result,&uintStack_60);
        if (long_ptr != (longlong *)0x0) {
          (**(code **)(*long_ptr + 0x28))(long_ptr);
        }
        uint_result = systemConfigurationData;
        stack_long_ptr = long_ptr;
        if (*(char *)(long_result + 0x368) == '\0') {
          long_ptr[3] = -4;
          (**(code **)(*long_ptr + 0x28))(long_ptr);
          InitializeSystemModule6(uint_result,&stack_long_ptr);
        }
        else {
          if (long_ptr != (longlong *)0x0) {
            (**(code **)(*long_ptr + 0x28))(long_ptr);
          }
          ConfigureSystemParameters(uint_result,&stack_long_ptr);
        }
        if (long_ptr != (longlong *)0x0) {
          (**(code **)(*long_ptr + 0x38))(long_ptr);
        }
      }
    }
    compare_result = GetLastError();
    if (compare_result == 0x2df) {
      return;
    }
    if (lstack_var == 0) break;
    InitializeSystemModule59(*(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE));
  }
                    // WARNING: Subroutine does not return
  SystemFunction_17_6(g_system_context_1,&globalSystemVariable,compare_result);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule59(uint64_t handleIdentifier,longlong resourceIdentifier)
void InitializeSystemModule59(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  void *ptr_uint_var;
  void *node_root;

  ptr_uint_var = *(void **)(*(longlong *)(resourceIdentifier + 0x1f8) + SYSTEM_DATA_COMPARE_SIZE);
  node_root = &g_system_data_variable3;
  if (ptr_uint_var != (void *)0x0) {
    node_root = ptr_uint_var;
  }
                    // WARNING: Subroutine does not return
  SystemFunction_17_6(g_system_context_1,&globalSystemVariable,node_root);
}
// void InitializeSystemModule23(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule23(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (*(code **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != (code *)0x0) {
    (**(code **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE))(handleIdentifier,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode24(longlong *handleIdentifier)
void InitializeSystemDataNode24(longlong *handleIdentifier)

{
  int *ptr_int_var;
  longlong *long_ptr;
  longlong long_result;
  longlong long_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t *node_previous;
  longlong *long_ptr;
  int int_result;
  longlong lstack_var;
  uint64_t *node_new;
  longlong longStack_c8;
  longlong longStack_c0;
  uint64_t uintStack_b8;
  uint16_t uintStack_b0;
  uint8_t uintStack_ae;
  uint8_t system_local_buffer_88 [64];
  uint64_t uintStack_48;
  uint64_t uintStack_40;

  uintStack_48 = INVALID_HANDLE_VALUE;
  long_result = handleIdentifier[1];
  int_result = *(int *)(long_result + 0x138) - *(int *)(long_result + 0x1d8);
  long_result = *(longlong *)(long_result + 0x150);
  long_ptr = (longlong *)0x0;
  if (long_result != 0) {
    uint_result = *(uint64_t *)(long_result + 0x158);
    uint_result = *(uint64_t *)(long_result + 0x1e0);
    lstack_var = *(longlong *)(long_result + 0x140);
    long_result = *(longlong *)(long_result + 0x1f0);
    if (long_result - 2U < 2) {
      long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,8,3);
      *long_ptr = (longlong)&globalSystemVariable;
      *(bool *)(long_ptr + 1) = long_result == 3;
    }
    (**(code **)(*long_ptr + 0x18))(long_ptr,system_local_buffer_88,int_result + long_result,lstack_var,uint_result,uint_result);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_ptr);
  }
  uintStack_ae = 3;
  long_result = handleIdentifier[1];
  uintStack_b8 = *(uint64_t *)(long_result + 0x140);
  longStack_c8 = (longlong)int_result + *(longlong *)(long_result + 0x1f0);
  uintStack_b0 = 1;
  longStack_c0 = longStack_c8;
  (**(code **)(long_result + 0x180))(&longStack_c8,*(longlong *)(long_result + 0x1f8) + 8);
  if (((char)uintStack_b0 == '\0') && (longStack_c8 != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  LOCK();
  ptr_int_var = (int *)(*(longlong *)(handleIdentifier[1] + 0x1f8) + 0x120);
  *ptr_int_var = *ptr_int_var + -1;
  UNLOCK();
  lstack_var = *(longlong *)(handleIdentifier[1] + 0x1a8);
  long_result = *handleIdentifier;
  InitializeSystemModule17(long_result + SYSTEM_DATA_COMPARE_SIZE,&lstack_var);
  int_result = _Cnd_signal(long_result + 0x278);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  node_new = *(uint64_t **)(handleIdentifier[1] + 0x1b0);
  long_result = *handleIdentifier;
  InitializeSystemModule17(long_result + SYSTEM_DATA_COMPARE_SIZE,&node_new);
  int_result = _Cnd_signal(long_result + 0x278);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  long_result = *(longlong *)(handleIdentifier[1] + 0x1c0);
  if (*(longlong *)(handleIdentifier[1] + 0x1b8) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (long_result != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  long_result = handleIdentifier[1];
  if (*(longlong *)(long_result + 0x150) == 0) {
    if (*(longlong *)(long_result + 0x148) == 0) {
      long_ptr = *(longlong **)(long_result + 0x140);
    }
  }
  else {
    long_ptr = *(longlong **)(long_result + 0x140);
    if (*(longlong *)(long_result + 0x148) == 0) {
      long_ptr = (longlong *)((longlong)long_ptr + *(longlong *)(long_result + 0x158));
    }
  }
  LOCK();
  long_ptr = (longlong *)(*(longlong *)(*handleIdentifier + 8) + 0x3f0);
  *long_ptr = *long_ptr - (longlong)long_ptr;
  UNLOCK();
  LOCK();
  ptr_int_var = (int *)(*(longlong *)(*handleIdentifier + 8) + 0x3f8);
  *ptr_int_var = *ptr_int_var + -1;
  UNLOCK();
  long_result = *handleIdentifier;
  node_previous = (uint64_t *)handleIdentifier[1];
  long_result = long_result + SYSTEM_NODE_HEADER_SIZE0380;
  uintStack_40 = 0x180068808;
  lstack_var = long_result;
  node_new = node_previous;
  int_result = _Mtx_lock(long_result);
  if (int_result != 0) {
    uintStack_40 = 0x180068815;
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  uintStack_40 = 0x18006881f;
  InitializeSystemModule33(node_previous + 4);
  *node_previous = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE0378);
  *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE0378) = node_previous;
  uintStack_40 = 0x18006883a;
  int_result = _Mtx_unlock(long_result);
  if (int_result != 0) {
    uintStack_40 = 0x180068847;
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureSystemSettings(uint64_t *handleIdentifier)
void ConfigureSystemSettings(uint64_t *handleIdentifier)

{
  uint8_t localBuffer_b8 [48];
  uint64_t *system_buffer_ptr_88;
  uint64_t uintStack_70;
  uint64_t *system_buffer_ptr_68;
  ulonglong uintStack_30;

  uintStack_70 = INVALID_HANDLE_VALUE;
  uintStack_30 = systemConfigurationData ^ (ulonglong)localBuffer_b8;
  system_buffer_ptr_68 = handleIdentifier;
  SetupSystemServices();
  *handleIdentifier = &globalSystemVariable;
  system_buffer_ptr_88 = handleIdentifier + 0x6e;
                    // WARNING: Subroutine does not return
  memset(system_buffer_ptr_88,0,SYSTEM_NODE_HEADER_SIZE0000);
}
// void InitializeSystemModule44(void)

void InitializeSystemModule44(void)

{
  _Mtx_destroy_in_situ();
  return;
}
// void InitializeSecuritySystem(void)

void InitializeSecuritySystem(void)

{
  _Mtx_destroy_in_situ();
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule45(longlong handleIdentifier,longlong resourceIdentifier)
void InitializeSystemModule45(longlong handleIdentifier,longlong resourceIdentifier)

{
  int int_result;
  longlong long_result;
  longlong long_result;
  void *ptr_uint_var;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  uint uint_result;
  uint8_t localBuffer_2e8 [32];
  ulonglong uintStack_2c8;
  uint32_t uintStack_2c0;
  uint64_t uintStack_2b8;
  longlong longStack_2a8;
  uint64_t uintStack_2a0;
  longlong alongStack_288 [4];
  void *system_buffer_ptr_268;
  void *system_buffer_ptr_260;
  ulonglong uintStack_48;
  ulonglong uint_result;

  uintStack_2a0 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_2e8;
  ValidateModuleHandle(&bufferPtr_268system_buffer_ptr_268);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_260 != (void *)0x0) {
    ptr_uint_var = bufferPtr_260;
  }
  uint_result = 0;
  uintStack_2b8 = 0;
  uintStack_2c0 = 0x60000001;
  uintStack_2c8 = CONCAT44(uintStack_2c8._4_4_,3);
  long_result = CreateFileA(ptr_uint_var,0x80000000,1,0);
  if (long_result == -1) {
    ptr_uint_var = &g_system_data_variable3;
    if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
      ptr_uint_var = *(void **)(resourceIdentifier + 8);
    }
                    // WARNING: Subroutine does not return
    SystemFunction_17_6(g_system_context_1,&g_system_global_variable8,ptr_uint_var);
  }
  long_result = CreateIoCompletionPort(long_result,*(uint64_t *)(handleIdentifier + 0x213430),0,0);
  if (long_result != *(longlong *)(handleIdentifier + 0x213430)) {
    ptr_uint_var = &g_system_data_variable3;
    if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
      ptr_uint_var = *(void **)(resourceIdentifier + 8);
    }
                    // WARNING: Subroutine does not return
    SystemFunction_17_6(g_system_context_1,&globalSystemVariable,ptr_uint_var);
  }
  long_result = handleIdentifier + 0x2133e0;
  longStack_2a8 = long_result;
  int_result = _Mtx_lock(long_result);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  ptr_uint_var = *(uint64_t **)(handleIdentifier + 0x2133d8);
  if (ptr_uint_var == (uint64_t *)0x0) {
    uint_result = *(ulonglong *)(handleIdentifier + 0x2133d0);
    if (0xff < uint_result) {
      int_result = _Mtx_unlock(long_result);
      if (int_result != 0) {
        __Throw_C_error_std__YAXH_Z(int_result);
      }
      local_varvartemp_var_18 = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
      ptr_uint_var = &g_system_data_variable3;
      if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
        ptr_uint_var = *(void **)(resourceIdentifier + 8);
      }
      strcpy_s(local_varvartemp_var_10,SYSTEM_DATA_COMPARE_SIZE0,ptr_uint_var);
      uint_result = uint_result;
      if (0 < *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE)) {
        do {
          uint_result = uint_result * 0x1f + (longlong)*(char *)(uint_result + *(longlong *)(resourceIdentifier + 8));
          uint_result = (int)uint_result + 1;
          uint_result = (ulonglong)uint_result;
        } while ((int)uint_result < *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE));
      }
      lRam0000000000000128 = long_result;
      uintStack_2c8 = uint_result;
      ConfigureSystemParameters(handleIdentifier + 0x330,alongStack_288,uint_result,resourceIdentifier);
      *(uint64_t *)(alongStack_288[0] + 0x118) = 0;
      system_buffer_ptr_268 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
      InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_2e8);
    }
    ptr_uint_var = (uint64_t *)(uint_result * 0x130 + handleIdentifier + SYSTEM_NODE_HEADER_SIZE03d0);
    *(ulonglong *)(handleIdentifier + 0x2133d0) = uint_result + 1;
  }
  else {
    *(uint64_t *)(handleIdentifier + 0x2133d8) = *ptr_uint_var;
  }
                    // WARNING: Subroutine does not return
  memset(ptr_uint_var + 1,0,0x128);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t ProcessSystemData(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  ulonglong uint_result;
  char char_var;
  int compare_result;
  uint64_t uint_result;
  ulonglong uint_result;
  uint64_t *node_current;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(systemConfig + 0x118) & 0xfffffffffffff000;
  uint_result = (*(longlong *)(systemConfig + 0x120) - uint_result) + *(ulonglong *)(systemConfig + 0x118);
  uint_result = (ulonglong)(-(uint)((uint_result & 0xfff) != 0) & SYSTEM_DATA_COMPARE_SIZE00) + (uint_result & 0xfffffffffffff000);
  compare_result = _Mtx_lock(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0380);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  node_current = *(uint64_t **)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0378);
  if (node_current == (uint64_t *)0x0) {
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0370);
    if (0xfff < uint_result) {
      compare_result = _Mtx_unlock(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0380);
      if (compare_result != 0) {
        __Throw_C_error_std__YAXH_Z(compare_result);
      }
      InitializeSystemModule32(SYSTEM_NODE_HEADER_SIZE,systemConfig);
      uRam00000000000001f0 = 0;
      uRam00000000000001e8 = 0;
      uRam00000000000001e0 = 0;
      char_var = InitializeNetworkSystem(handleIdentifier,SYSTEM_NODE_HEADER_SIZE,0x1e0,0x1e8,0x1f0);
      if (char_var == '\0') {
        InitializeSystemModule36(handleIdentifier + 0x370,0);
        uint_result = 0;
      }
      else {
        local_varvartemp_var_00 = 0;
        g_system_constant_size; = 0;
        local_varvartemp_var_18 = 0;
        LOCK();
        local_varvartemp_var_10 = uint_result;
        uRam00000000000001c8 = uint_result;
        uRam00000000000001d0 = uint_result;
        uRam00000000000001d8 = uint_result;
        lRam00000000000001f8 = resourceIdentifier;
        *(int *)(resourceIdentifier + 0x120) = *(int *)(resourceIdentifier + 0x120) + 1;
        UNLOCK();
        compare_result = ReadFile(*(uint64_t *)(resourceIdentifier + 0x128),uRam00000000000001f0,uint_result & 0xffffffff,0,
                         0);
        if (compare_result != 0) {
                    // WARNING: Subroutine does not return
          SystemFunction_17_6(g_system_context_1,&g_system_global_variable8);
        }
        compare_result = GetLastError();
        if (compare_result != 0x3e5) {
                    // WARNING: Subroutine does not return
          SystemFunction_17_6(g_system_context_1,&globalSystemVariable,compare_result);
        }
        uint_result = 1;
      }
      return uint_result;
    }
    node_current = (uint64_t *)(uint_result * SYSTEM_NODE_HEADER_SIZE0 + handleIdentifier + 0x370);
    *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0370) = uint_result + 1;
  }
  else {
    *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0378) = *node_current;
    *node_current = 0;
  }
                    // WARNING: Subroutine does not return
  memset(node_current,0,SYSTEM_NODE_HEADER_SIZE0);
}

longlong InitializeSystemModule32(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;
  code *ptr_char_var;
  void *ptr_uint_var;

  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  strcpy_s(*(uint64_t *)(handleIdentifier + 8),SYSTEM_DATA_COMPARE_SIZE0,ptr_uint_var);
  *(uint64_t *)(handleIdentifier + 0x118) = *(uint64_t *)(resourceIdentifier + 0x118);
  long_result = handleIdentifier + 0x148;
  *(uint64_t *)(handleIdentifier + 0x120) = *(uint64_t *)(resourceIdentifier + 0x120);
  *(uint64_t *)(handleIdentifier + 0x128) = *(uint64_t *)(resourceIdentifier + 0x128);
  *(uint64_t *)(handleIdentifier + 0x130) = *(uint64_t *)(resourceIdentifier + 0x130);
  *(uint64_t *)(handleIdentifier + 0x138) = *(uint64_t *)(resourceIdentifier + 0x138);
  *(uint8_t *)(handleIdentifier + 0x140) = *(uint8_t *)(resourceIdentifier + 0x140);
  if (long_result != resourceIdentifier + 0x148) {
    if (*(code **)(handleIdentifier + 0x158) != (code *)0x0) {
      (**(code **)(handleIdentifier + 0x158))(long_result,0,0);
    }
    ptr_char_var = *(code **)(resourceIdentifier + 0x158);
    if (ptr_char_var != (code *)0x0) {
      (*ptr_char_var)(long_result,resourceIdentifier + 0x148,1);
      ptr_char_var = *(code **)(resourceIdentifier + 0x158);
    }
    *(code **)(handleIdentifier + 0x158) = ptr_char_var;
    *(uint64_t *)(handleIdentifier + 0x160) = *(uint64_t *)(resourceIdentifier + 0x160);
  }
  long_result = handleIdentifier + 0x168;
  if (long_result != resourceIdentifier + 0x168) {
    if (*(code **)(handleIdentifier + 0x178) != (code *)0x0) {
      (**(code **)(handleIdentifier + 0x178))(long_result,0,0);
    }
    ptr_char_var = *(code **)(resourceIdentifier + 0x178);
    if (ptr_char_var != (code *)0x0) {
      (*ptr_char_var)(long_result,resourceIdentifier + 0x168,1);
      ptr_char_var = *(code **)(resourceIdentifier + 0x178);
    }
    *(code **)(handleIdentifier + 0x178) = ptr_char_var;
    *(uint64_t *)(handleIdentifier + 0x180) = *(uint64_t *)(resourceIdentifier + 0x180);
  }
  *(uint64_t *)(handleIdentifier + 0x188) = *(uint64_t *)(resourceIdentifier + 0x188);
  *(uint64_t *)(handleIdentifier + 400) = *(uint64_t *)(resourceIdentifier + 400);
  *(uint64_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET8) = *(uint64_t *)(resourceIdentifier + NODE_INITIALIZED_OFFSET8);
  *(uint64_t *)(handleIdentifier + 0x1a0) = *(uint64_t *)(resourceIdentifier + 0x1a0);
  return handleIdentifier;
}
// void InitializeSystemModule42(longlong handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule42(longlong handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  CloseHandle(resourceIdentifier[0x25]);
  int_result = _Mtx_lock(handleIdentifier + 0x2133e0);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  (**(code **)*resourceIdentifier)(resourceIdentifier,0,systemConfig,systemFlags,uint_result);
  *resourceIdentifier = *(uint64_t *)(handleIdentifier + 0x2133d8);
  *(uint64_t **)(handleIdentifier + 0x2133d8) = resourceIdentifier;
  int_result = _Mtx_unlock(handleIdentifier + 0x2133e0);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void InitializeSystemModule43(longlong handleIdentifier)

void InitializeSystemModule43(longlong handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;
  longlong long_result;
  char char_var;
  longlong *pallocation_size;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *stack_long_ptr;

  char_var = ValidateSystemConfiguration(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE,&stack_long_ptr);
  do {
    if (char_var == '\0') {
      return;
    }
    long_ptr = *(longlong **)(handleIdentifier + 0x318);
    if (stack_long_ptr != (longlong *)0x0) {
      *(uint8_t *)(stack_long_ptr + 4) = 0;
      *long_ptr = *long_ptr - stack_long_ptr[1];
      long_ptr[2] = long_ptr[2] + stack_long_ptr[1];
      long_ptr = (longlong *)stack_long_ptr[3];
      long_ptr = (longlong *)long_ptr[3];
      pallocation_size = stack_long_ptr;
      if (long_ptr != long_ptr) {
        do {
          if ((long_ptr == (longlong *)0x0) || ((char)long_ptr[4] != '\0')) break;
          long_result = pallocation_size[2];
          long_ptr[2] = long_result;
          if (long_result != 0) {
            *(longlong **)(long_result + 0x18) = long_ptr;
          }
          long_ptr[1] = long_ptr[1] + pallocation_size[1];
          *pallocation_size = long_ptr[0x28005];
          long_ptr[0x28005] = (longlong)pallocation_size;
          long_ptr = (longlong *)long_ptr[3];
          long_ptr = long_ptr + 3;
          pallocation_size = long_ptr;
          long_ptr = (longlong *)*long_ptr;
        } while ((longlong *)*long_ptr != long_ptr);
      }
      long_ptr = (longlong *)pallocation_size[2];
      while (((pallocation_size != long_ptr && (long_ptr != (longlong *)0x0)) && ((char)long_ptr[4] == '\0'))) {
        long_result = long_ptr[2];
        pallocation_size[2] = long_result;
        if (long_result != 0) {
          *(longlong **)(long_result + 0x18) = pallocation_size;
        }
        pallocation_size[1] = pallocation_size[1] + long_ptr[1];
        *long_ptr = long_ptr[0x28005];
        long_ptr[0x28005] = (longlong)long_ptr;
        long_ptr = (longlong *)long_ptr[3];
        long_ptr = (longlong *)pallocation_size[2];
      }
    }
    char_var = ValidateSystemConfiguration(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE,&stack_long_ptr);
  } while( true );
}
// void InitializeSystemModule36(longlong handleIdentifier,uint64_t *resourceIdentifier)

void InitializeSystemModule36(longlong handleIdentifier,uint64_t *resourceIdentifier)

{
  int int_result;

  int_result = _Mtx_lock(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0010);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  InitializeSystemModule33(resourceIdentifier + 4);
  *resourceIdentifier = *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0008);
  *(uint64_t **)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0008) = resourceIdentifier;
  int_result = _Mtx_unlock(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0010);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong *
ConfigureSystemParameters(longlong handleIdentifier,longlong *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags,
             ulonglong parameter_5)

{
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  uint64_t uint_result;

  uint_result = parameter_5 % (ulonglong)*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = InitializeResourceHandle(handleIdentifier,*(uint64_t *)(*(longlong *)(handleIdentifier + 8) + uint_result * 8),
                              systemFlags);
  if (long_result == 0) {
    SystemHandleCreateFunction(handleIdentifier + SYSTEM_NODE_HEADER_SIZE,&parameter_5,*(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE),
                  *(uint32_t *)(handleIdentifier + 0x18),1);
    long_result = AllocateSystemResource(systemMemoryPool,0x128,*(uint8_t *)(handleIdentifier + 0x2c));
    InitializeSystemModule13(long_result,systemFlags);
    *(uint64_t *)(long_result + 0x118) = 0;
    *(uint64_t *)(long_result + 0x120) = 0;
    if ((char)parameter_5 != '\0') {
      uint_result = AllocateSystemMemory(systemMemoryPool,(ulonglong)parameter_5._4_4_ * 8 + 8,8,
                            *(uint8_t *)(handleIdentifier + 0x2c));
                    // WARNING: Subroutine does not return
      memset(uint_result,0,(ulonglong)parameter_5._4_4_ * 8);
    }
    *(uint64_t *)(long_result + 0x120) = *(uint64_t *)(*(longlong *)(handleIdentifier + 8) + uint_result * 8);
    *(longlong *)(*(longlong *)(handleIdentifier + 8) + uint_result * 8) = long_result;
    *(longlong *)(handleIdentifier + 0x18) = *(longlong *)(handleIdentifier + 0x18) + 1;
    long_result = *(longlong *)(handleIdentifier + 8);
    *resourceIdentifier = long_result;
    resourceIdentifier[1] = long_result + uint_result * 8;
    *(uint8_t *)(resourceIdentifier + 2) = 1;
  }
  else {
    long_result = *(longlong *)(handleIdentifier + 8);
    *resourceIdentifier = long_result;
    resourceIdentifier[1] = long_result + uint_result * 8;
    *(uint8_t *)(resourceIdentifier + 2) = 0;
  }
  return resourceIdentifier;
}

uint64_t ValidateSystemConfiguration(ulonglong *handleIdentifier,uint64_t *resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong *node_root;
  longlong long_result;
  longlong long_result;
  char char_var;
  bool bool_var;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *handleIdentifier;
  uint_result = 0;
  uint_result = uint_result;
  uint_result = uint_result;
  uint_result = uint_result;
  do {
    uint_result = uint_result;
    if (uint_result == 0) break;
    uint_result = *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE) - *(longlong *)(uint_result + 0x28);
    if ((ulonglong)(*(longlong *)(uint_result + 0x28) - *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE)) <
        0x8000000000000001) {
      uint_result = uint_result;
    }
    uint_result = uint_result;
    if ((uint_result != 0) && (uint_result = uint_result + 1, uint_result = uint_result, uint_result = uint_result, uint_result <= uint_result)) {
      uint_result = uint_result;
      uint_result = uint_result;
    }
    long_ptr = (longlong *)(uint_result + 8);
    uint_result = *long_ptr - 8;
    if (*long_ptr == 0) {
      uint_result = uint_result;
    }
    uint_result = uint_result;
    uint_result = uint_result;
  } while (uint_result < 3);
  if (uint_result != 0) {
    char_var = InitializeSystemModule41(uint_result,resourceIdentifier);
    if (char_var != '\0') {
      return 1;
    }
    uint_result = *handleIdentifier;
    while (uint_result != 0) {
      if (uint_result != uint_result) {
        long_result = *(longlong *)(uint_result + 0x38);
        if (*(char *)(uint_result + 0x48) == '\0') {
          if ((ulonglong)((*(longlong *)(uint_result + 0x30) - long_result) - *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE)) <
              0x8000000000000001) goto LAB_180068c92;
          LOCK();
          long_ptr = (longlong *)(uint_result + 0x30);
          long_result = *long_ptr;
          *long_ptr = *long_ptr + 1;
          UNLOCK();
          if ((ulonglong)((long_result - *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE)) - long_result) < 0x8000000000000001)
          goto LAB_180068c87;
          LOCK();
          node_root = (ulonglong *)(uint_result + 0x28);
          uint_result = *node_root;
          *node_root = *node_root + 1;
          UNLOCK();
          long_ptr = *(longlong **)(uint_result + 0x60);
          long_result = *(longlong *)
                   (long_ptr[3] +
                   (((uint_result & 0xffffffffffffffe0) - **(longlong **)(long_ptr[3] + long_ptr[1] * 8) >> 5)
                    + long_ptr[1] & *long_ptr - 1U) * 8);
          long_result = *(longlong *)(long_result + 8);
          *resourceIdentifier = *(uint64_t *)(long_result + (ulonglong)((uint)uint_result & 0x1f) * 8);
          LOCK();
          long_ptr = (longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE8);
          long_result = *long_ptr;
          *long_ptr = *long_ptr + 1;
          UNLOCK();
          if (long_result == 0x1f) {
            *(uint64_t *)(long_result + 8) = 0;
            ConfigureSystemHandle(*(uint64_t *)(uint_result + 0x50));
          }
          bool_var = true;
        }
        else {
          if (0x8000000000000000 <
              (ulonglong)((*(longlong *)(uint_result + 0x30) - long_result) - *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE))) {
            LOCK();
            long_ptr = (longlong *)(uint_result + 0x30);
            long_result = *long_ptr;
            *long_ptr = *long_ptr + 1;
            UNLOCK();
            if (0x8000000000000000 < (ulonglong)((long_result - *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE)) - long_result)) {
              LOCK();
              node_root = (ulonglong *)(uint_result + 0x28);
              uint_result = *node_root;
              *node_root = *node_root + 1;
              UNLOCK();
              long_ptr = *(longlong **)(uint_result + 0x58);
              uint_result = (ulonglong)((uint)uint_result & 0x1f);
              long_result = *(longlong *)
                       (long_ptr[2] + 8 +
                       (((uint_result & 0xffffffffffffffe0) - *(longlong *)(long_ptr[2] + long_ptr[1] * SYSTEM_DATA_COMPARE_SIZE)
                        >> 5) + long_ptr[1] & *long_ptr - 1U) * SYSTEM_DATA_COMPARE_SIZE);
              *resourceIdentifier = *(uint64_t *)(long_result + uint_result * 8);
              *(uint8_t *)((long_result - uint_result) + 0x12f) = 1;
              bool_var = true;
              goto LAB_180068c94;
            }
LAB_180068c87:
            LOCK();
            *(longlong *)(uint_result + 0x38) = *(longlong *)(uint_result + 0x38) + 1;
            UNLOCK();
          }
LAB_180068c92:
          bool_var = false;
        }
LAB_180068c94:
        if (bool_var) {
          return 1;
        }
      }
      long_ptr = (longlong *)(uint_result + 8);
      uint_result = *long_ptr - 8;
      if (*long_ptr == 0) {
        uint_result = uint_result;
      }
    }
  }
  return 0;
}

uint64_t InitializeSystemModule41(longlong handleIdentifier,uint64_t *resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong *node_root;
  longlong long_result;
  ulonglong uint_result;
  longlong allocation_size;
  ulonglong uint_result;

  if (*(char *)(handleIdentifier + 0x48) == '\0') {
    if ((ulonglong)
        ((*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x38)) -
        *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) < 0x8000000000000001) {
      return 0;
    }
    LOCK();
    long_ptr = (longlong *)(handleIdentifier + 0x30);
    long_result = *long_ptr;
    *long_ptr = *long_ptr + 1;
    UNLOCK();
    if (0x8000000000000000 <
        (ulonglong)((long_result - *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) - *(longlong *)(handleIdentifier + 0x38))) {
      LOCK();
      node_root = (ulonglong *)(handleIdentifier + 0x28);
      uint_result = *node_root;
      *node_root = *node_root + 1;
      UNLOCK();
      long_ptr = *(longlong **)(handleIdentifier + 0x60);
      allocation_size = *(longlong *)
               (long_ptr[3] +
               (((uint_result & 0xffffffffffffffe0) - **(longlong **)(long_ptr[3] + long_ptr[1] * 8) >> 5) +
                long_ptr[1] & *long_ptr - 1U) * 8);
      long_result = *(longlong *)(allocation_size + 8);
      *resourceIdentifier = *(uint64_t *)(long_result + (ulonglong)((uint)uint_result & 0x1f) * 8);
      LOCK();
      long_ptr = (longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE8);
      long_result = *long_ptr;
      *long_ptr = *long_ptr + 1;
      UNLOCK();
      if (long_result == 0x1f) {
        *(uint64_t *)(allocation_size + 8) = 0;
        ConfigureSystemHandle(*(uint64_t *)(handleIdentifier + 0x50));
      }
      return 1;
    }
  }
  else {
    if ((ulonglong)
        ((*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x38)) -
        *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) < 0x8000000000000001) {
      return 0;
    }
    LOCK();
    long_ptr = (longlong *)(handleIdentifier + 0x30);
    long_result = *long_ptr;
    *long_ptr = *long_ptr + 1;
    UNLOCK();
    if (0x8000000000000000 <
        (ulonglong)((long_result - *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) - *(longlong *)(handleIdentifier + 0x38))) {
      LOCK();
      node_root = (ulonglong *)(handleIdentifier + 0x28);
      uint_result = *node_root;
      *node_root = *node_root + 1;
      UNLOCK();
      long_ptr = *(longlong **)(handleIdentifier + 0x58);
      uint_result = (ulonglong)((uint)uint_result & 0x1f);
      long_result = *(longlong *)
               (long_ptr[2] + 8 +
               (((uint_result & 0xffffffffffffffe0) - *(longlong *)(long_ptr[2] + long_ptr[1] * SYSTEM_DATA_COMPARE_SIZE) >> 5) +
                long_ptr[1] & *long_ptr - 1U) * SYSTEM_DATA_COMPARE_SIZE);
      *resourceIdentifier = *(uint64_t *)(long_result + uint_result * 8);
      *(uint8_t *)((long_result - uint_result) + 0x12f) = 1;
      return 1;
    }
  }
  LOCK();
  *(longlong *)(handleIdentifier + 0x38) = *(longlong *)(handleIdentifier + 0x38) + 1;
  UNLOCK();
  return 0;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong InitializeNetworkSystem(longlong *handleIdentifier,longlong *resourceIdentifier,int systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  longlong long_result;
  code *ptr_char_var;

  if (systemConfig == 3) {
    long_result = 0x180bfd400;
  }
  else if (systemConfig == 4) {
    long_result = *handleIdentifier;
  }
  else {
    if (systemConfig == 0) {
      long_result = *handleIdentifier;
      if (long_result != 0) {
        if (*(code **)(long_result + SYSTEM_DATA_COMPARE_SIZE) != (code *)0x0) {
          (**(code **)(long_result + SYSTEM_DATA_COMPARE_SIZE))(long_result,0,0,systemFlags,INVALID_HANDLE_VALUE);
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation(long_result);
      }
    }
    else {
      if (systemConfig == 1) {
        long_result = AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE,8,g_system_audio_initialized);
        long_result = *resourceIdentifier;
        *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
        *(code **)(long_result + 0x18) = _guard_check_icall;
        if (long_result != long_result) {
          ptr_char_var = *(code **)(long_result + SYSTEM_DATA_COMPARE_SIZE);
          if (ptr_char_var != (code *)0x0) {
            (*ptr_char_var)(long_result,long_result,1);
            ptr_char_var = *(code **)(long_result + SYSTEM_DATA_COMPARE_SIZE);
          }
          *(code **)(long_result + SYSTEM_DATA_COMPARE_SIZE) = ptr_char_var;
          *(uint64_t *)(long_result + 0x18) = *(uint64_t *)(long_result + 0x18);
        }
        *handleIdentifier = long_result;
        return 0;
      }
      if (systemConfig == 2) {
        *handleIdentifier = *resourceIdentifier;
        *resourceIdentifier = 0;
        return 0;
      }
    }
    long_result = 0;
  }
  return long_result;
}

uint64_t *
InitializeSystemModule13(uint64_t *handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  void *ptr_uint_var;

  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  *(uint32_t *)(handleIdentifier + 2) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    ptr_uint_var = *(void **)(resourceIdentifier + 8);
  }
  strcpy_s(handleIdentifier[1],SYSTEM_DATA_COMPARE_SIZE0,ptr_uint_var,systemFlags,INVALID_HANDLE_VALUE);
  return handleIdentifier;
}

uint64_t * InitializeShaderSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemPointerData;
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[1] = handleIdentifier + 3;
  *(uint32_t *)(handleIdentifier + 2) = 0;
  *(uint8_t *)(handleIdentifier + 3) = 0;
  handleIdentifier[0x2b] = 0;
  handleIdentifier[0x2c] = _guard_check_icall;
  handleIdentifier[0x2f] = 0;
  handleIdentifier[0x30] = _guard_check_icall;
  handleIdentifier[0x27] = 0xffffffffffffffff;
  handleIdentifier[0x24] = 0xffffffffffffffff;
  handleIdentifier[0x23] = 0xffffffffffffffff;
  handleIdentifier[0x25] = 0;
  handleIdentifier[0x26] = 0;
  *(uint8_t *)(handleIdentifier + 0x28) = 0;
  return handleIdentifier;
}
// void InitializeSystemComponents(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeSystemComponents(longlong handleIdentifier,longlong resourceIdentifier)

{
  code *pis_initialized;

  pis_initialized = *(code **)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  if (pis_initialized != (code *)0x0) {
    (*pis_initialized)(handleIdentifier,resourceIdentifier,2);
    pis_initialized = *(code **)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(code **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = pis_initialized;
  *(uint64_t *)(handleIdentifier + 0x18) = *(uint64_t *)(resourceIdentifier + 0x18);
  *(code **)(resourceIdentifier + 0x18) = _guard_check_icall;
  *(uint64_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}

longlong InitializeNetworkSystem(longlong handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *(void **)(handleIdentifier + 8) = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x128,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}

uint64_t *
InitializeSystemDataNode31(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x118,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeUISystem(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

void InitializeUISystem(longlong handleIdentifier,uint64_t resourceIdentifier,int systemConfig)

{
  if (systemConfig + 1 < SYSTEM_DATA_COMPARE_SIZE0) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint8_t **)(handleIdentifier + 8),resourceIdentifier,(longlong)systemConfig);
  }
  **(uint8_t **)(handleIdentifier + 8) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// void SystemFunction_65_7(void)

void SystemFunction_65_7(void)

{
                    // WARNING: Subroutine does not return
  memcpy();
}
// void SystemFunction_69_4(uint8_t *handleIdentifier)

void SystemFunction_69_4(uint8_t *handleIdentifier)

{
  longlong system_RDI;

  *handleIdentifier = 0;
  *(uint32_t *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) = 0;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode19(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void InitializeSystemDataNode19(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint8_t localBuffer_198 [32];
  uint64_t uintStack_178;
  void *system_buffer_ptr_168;
  uint8_t *system_buffer_ptr_160;
  uint32_t uintStack_158;
  uint8_t localBuffer_150 [264];
  ulonglong uintStack_48;

  uintStack_178 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_198;
  system_buffer_ptr_168 = &g_system_global_variable8;
  system_buffer_ptr_160 = localBuffer_150;
  uintStack_158 = 0;
  localBuffer_150[0] = 0;
  long_result = strstr(*(uint64_t *)(handleIdentifier + 8));
  if (long_result != 0) {
    long_result = -1;
    long_result = -1;
    do {
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    do {
      long_result = long_result + 1;
    } while (*(char *)(long_result + systemConfig) != '\0');
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_160,*(longlong *)(handleIdentifier + 8),long_result - *(longlong *)(handleIdentifier + 8));
  }
  system_buffer_ptr_168 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_198);
}
// void InitializeSystemModule16(longlong handleIdentifier,longlong resourceIdentifier)

void InitializeSystemModule16(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;

  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
    **(uint8_t **)(handleIdentifier + 8) = 0;
    return;
  }
  long_result = -1;
  do {
    long_result = long_result + 1;
  } while (*(char *)(resourceIdentifier + long_result) != '\0');
  if ((int)long_result < SYSTEM_DATA_COMPARE_SIZE0) {
    *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = (int)long_result;
                    // WARNING: Could not recover jumptable at 0x000180069429. Too many branches
                    // WARNING: Treating indirect jump as call
    strcpy_s(*(uint64_t *)(handleIdentifier + 8),SYSTEM_DATA_COMPARE_SIZE0);
    return;
  }
  ProcessSystemDataHeader(&g_system_data_header,SYSTEM_DATA_COMPARE_SIZE0,resourceIdentifier);
  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  **(uint8_t **)(handleIdentifier + 8) = 0;
  return;
}

longlong InitializeSystemModule10(longlong handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *(void **)(handleIdentifier + 8) = &globalSystemPointerData;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x130,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}
// void InitializeSystemModule33(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule33(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if ((code *)handleIdentifier[0x2f] != (code *)0x0) {
    (*(code *)handleIdentifier[0x2f])(handleIdentifier + 0x2d,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  if ((code *)handleIdentifier[0x2b] != (code *)0x0) {
    (*(code *)handleIdentifier[0x2b])(handleIdentifier + 0x29,0,0);
  }
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeUISystem(longlong handleIdentifier)

void InitializeUISystem(longlong handleIdentifier)

{
  *(void **)(handleIdentifier + 8) = &globalSystemPointerData;
  return;
}

uint64_t *
InitializeSystemModule45(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &globalSystemOutputData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x30,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}

uint64_t * InitializeConfigSystem(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x58);
  }
  return handleIdentifier;
}

uint64_t InitializeVideoSystem(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeAuthenticationSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x68);
  }
  return handleIdentifier;
}
// void InitializeAuthenticationSystem(uint64_t *handleIdentifier)

void InitializeAuthenticationSystem(uint64_t *handleIdentifier)

{
  int *ptr_int_var;
  int int_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong *pallocation_size;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  bool system_comparison_flag;

  *handleIdentifier = &g_system_global_variable8;
  uint_result = handleIdentifier[4];
  long_result = 0;
  uint_result = handleIdentifier[5];
  for (uint_result = uint_result; uint_result != uint_result; uint_result = uint_result + 1) {
    if ((uint_result & 0x1f) == 0) {
      if (long_result != 0) {
        long_result = handleIdentifier[10];
        LOCK();
        ptr_int_var = (int *)(long_result + 0x130);
        int_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + -0x80000000;
        UNLOCK();
        if (int_result == 0) {
          long_result = *(longlong *)(long_result + 0x28);
          do {
            *(longlong *)(long_result + 0x138) = long_result;
            *(uint32_t *)(long_result + 0x130) = 1;
            pallocation_size = (longlong *)(long_result + 0x28);
            LOCK();
            long_result = *pallocation_size;
            system_comparison_flag = long_result == long_result;
            if (system_comparison_flag) {
              *pallocation_size = long_result;
              long_result = long_result;
            }
            UNLOCK();
            if (system_comparison_flag) break;
            LOCK();
            ptr_int_var = (int *)(long_result + 0x130);
            int_result = *ptr_int_var;
            *ptr_int_var = *ptr_int_var + 0x7fffffff;
            UNLOCK();
            long_result = long_result;
          } while (int_result == 1);
        }
      }
LAB_180069842:
      pallocation_size = (longlong *)handleIdentifier[0xc];
      long_result = *(longlong *)
               (*(longlong *)
                 (pallocation_size[3] +
                 (pallocation_size[1] +
                  ((uint_result & 0xffffffffffffffe0) - **(longlong **)(pallocation_size[3] + pallocation_size[1] * 8) >> 5)
                 & *pallocation_size - 1U) * 8) + 8);
    }
    else if (long_result == 0) goto LAB_180069842;
  }
  long_result = handleIdentifier[8];
  if ((long_result != 0) && ((uint_result != uint_result || ((uint_result & 0x1f) != 0)))) {
    long_result = handleIdentifier[10];
    LOCK();
    ptr_int_var = (int *)(long_result + 0x130);
    int_result = *ptr_int_var;
    *ptr_int_var = *ptr_int_var + -0x80000000;
    UNLOCK();
    if (int_result == 0) {
      long_result = *(longlong *)(long_result + 0x28);
      do {
        *(longlong *)(long_result + 0x138) = long_result;
        *(uint32_t *)(long_result + 0x130) = 1;
        pallocation_size = (longlong *)(long_result + 0x28);
        LOCK();
        long_result = *pallocation_size;
        system_comparison_flag = long_result == long_result;
        if (system_comparison_flag) {
          *pallocation_size = long_result;
          long_result = long_result;
        }
        UNLOCK();
        if (system_comparison_flag) break;
        LOCK();
        ptr_int_var = (int *)(long_result + 0x130);
        int_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + 0x7fffffff;
        UNLOCK();
        long_result = long_result;
      } while (int_result == 1);
    }
  }
  if (handleIdentifier[0xc] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &g_system_global_variable8;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemModule47(longlong *handleIdentifier)

{
  longlong *long_ptr;
  uint *node_root;
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  uint uint_result;
  ulonglong uint_result;
  ulonglong *node_previous;
  uint64_t *node_next;
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  uint uint_result;
  uint64_t *ptr_uint_var;
  bool thread_operation_flag;
  bool node_validation_flag;

  uint_result = GetCurrentThreadId();
  uint_result = (uint_result >> SYSTEM_DATA_COMPARE_SIZE ^ uint_result) * -0x7a143595;
  uint_result = (uint_result >> 0xd ^ uint_result) * -0x3d4d51cb;
  uint_result = (ulonglong)(uint_result >> SYSTEM_DATA_COMPARE_SIZE ^ uint_result);
  node_previous = (ulonglong *)handleIdentifier[6];
  for (ptr_uint_var = node_previous; uint_result = uint_result, ptr_uint_var != (ulonglong *)0x0; ptr_uint_var = (ulonglong *)ptr_uint_var[2])
  {
    while( true ) {
      uint_result = uint_result & *ptr_uint_var - 1;
      uint_result = *(uint *)(uint_result * SYSTEM_DATA_COMPARE_SIZE + ptr_uint_var[1]);
      if (uint_result == uint_result) {
        ptr_uint_var = *(uint64_t **)(ptr_uint_var[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE);
        if (ptr_uint_var == node_previous) {
          return ptr_uint_var;
        }
        do {
          uint_result = uint_result & *node_previous - 1;
          if (*(int *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
            node_root = (uint *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
            LOCK();
            node_validation_flag = *node_root == 0;
            if (node_validation_flag) {
              *node_root = uint_result;
            }
            UNLOCK();
            if (node_validation_flag) {
              *(uint64_t **)(node_previous[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = ptr_uint_var;
              return ptr_uint_var;
            }
          }
          uint_result = uint_result + 1;
        } while( true );
      }
      if (uint_result == 0) break;
      uint_result = uint_result + 1;
    }
  }
  LOCK();
  long_ptr = handleIdentifier + 7;
  long_result = *long_ptr;
  *long_ptr = *long_ptr + 1;
  UNLOCK();
  uint_result = long_result + 1;
  ptr_uint_var = (uint64_t *)0x0;
  while( true ) {
    if (*node_previous >> 1 <= uint_result) {
      LOCK();
      node_root = (uint *)(handleIdentifier + 0x4b);
      uint_result = *node_root;
      *node_root = *node_root | 1;
      UNLOCK();
      if ((uint_result & 1) == 0) {
        ptr_uint_var = (ulonglong *)handleIdentifier[6];
        node_previous = ptr_uint_var;
        uint_result = *ptr_uint_var;
        if (*ptr_uint_var >> 1 <= uint_result) {
          do {
            uint_result = uint_result;
            uint_result = uint_result * 2;
          } while ((uint_result & 0x7fffffffffffffff) <= uint_result);
          node_previous = (ulonglong *)AllocateSystemResource(systemMemoryPool,uint_result * SYSTEM_NODE_HEADER_SIZE + 0x1f,10);
          if (node_previous == (ulonglong *)0x0) {
            LOCK();
            handleIdentifier[7] = handleIdentifier[7] + -1;
            UNLOCK();
            *(uint32_t *)(handleIdentifier + 0x4b) = 0;
            return (uint64_t *)0x0;
          }
          *node_previous = uint_result;
          node_previous[1] = (ulonglong)(-(int)(node_previous + 3) & 7) + (longlong)(node_previous + 3);
          ptr_uint_var = ptr_uint_var;
          for (; uint_result != 0; uint_result = uint_result - 1) {
            *(uint64_t *)((longlong)ptr_uint_var + node_previous[1] + 8) = 0;
            *(uint32_t *)((longlong)ptr_uint_var + node_previous[1]) = 0;
            ptr_uint_var = ptr_uint_var + 2;
          }
          node_previous[2] = (ulonglong)ptr_uint_var;
          handleIdentifier[6] = (longlong)node_previous;
        }
        *(uint32_t *)(handleIdentifier + 0x4b) = 0;
      }
    }
    if (uint_result < (*node_previous >> 2) + (*node_previous >> 1)) break;
    node_previous = (ulonglong *)handleIdentifier[6];
  }
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  while (ptr_uint_var != (uint64_t *)0x0) {
    if ((*(char *)(ptr_uint_var + 2) != '\0') && (*(char *)(ptr_uint_var + 9) == '\0')) {
      node_validation_flag = true;
      LOCK();
      thread_operation_flag = *(char *)(ptr_uint_var + 2) == '\x01';
      if (thread_operation_flag) {
        *(char *)(ptr_uint_var + 2) = '\0';
      }
      UNLOCK();
      if (thread_operation_flag) goto LAB_180069c2b;
    }
    long_ptr = ptr_uint_var + 1;
    ptr_uint_var = (uint64_t *)(*long_ptr + -8);
    if (*long_ptr == 0) {
      ptr_uint_var = ptr_uint_var;
    }
  }
  node_validation_flag = false;
  node_next = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x68,10);
  ptr_uint_var = ptr_uint_var;
  if (node_next != (uint64_t *)0x0) {
    node_next[1] = 0;
    *(uint8_t *)(node_next + 2) = 0;
    node_next[3] = 0;
    *node_next = &g_system_global_variable8;
    node_next[4] = 0;
    node_next[5] = 0;
    node_next[6] = 0;
    node_next[7] = 0;
    node_next[8] = 0;
    *(uint8_t *)(node_next + 9) = 0;
    node_next[10] = handleIdentifier;
    *node_next = &g_system_global_variable8;
    node_next[0xb] = SYSTEM_NODE_HEADER_SIZE;
    node_next[0xc] = 0;
    InitializeShaderSystem(node_next);
    LOCK();
    *(int *)(handleIdentifier + 1) = (int)handleIdentifier[1] + 1;
    UNLOCK();
    long_result = *handleIdentifier;
    do {
      ptr_uint_var = (uint64_t *)(long_result + 8);
      if (long_result == 0) {
        ptr_uint_var = ptr_uint_var;
      }
      node_next[1] = ptr_uint_var;
      LOCK();
      long_result = *handleIdentifier;
      thread_operation_flag = long_result == long_result;
      if (thread_operation_flag) {
        *handleIdentifier = (longlong)node_next;
        long_result = long_result;
      }
      UNLOCK();
      long_result = long_result;
      ptr_uint_var = node_next;
    } while (!thread_operation_flag);
  }
LAB_180069c2b:
  if (ptr_uint_var == (uint64_t *)0x0) {
    LOCK();
    handleIdentifier[7] = handleIdentifier[7] + -1;
    UNLOCK();
    return (uint64_t *)0x0;
  }
  if (node_validation_flag) {
    LOCK();
    handleIdentifier[7] = handleIdentifier[7] + -1;
    UNLOCK();
  }
  do {
    uint_result = uint_result & *node_previous - 1;
    if (*(int *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
      node_root = (uint *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
      LOCK();
      node_validation_flag = *node_root == 0;
      if (node_validation_flag) {
        *node_root = uint_result;
      }
      UNLOCK();
      if (node_validation_flag) {
        *(uint64_t **)(node_previous[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = ptr_uint_var;
        return ptr_uint_var;
      }
    }
    uint_result = uint_result + 1;
  } while( true );
}

ulonglong InitializeSystemModule17(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  ulonglong uint_result;
  longlong *long_ptr;
  uint64_t uint_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong *node_current;

  long_result = InitializeSystemModule47();
  if (long_result == 0) {
    return 0;
  }
  uint_result = *(ulonglong *)(long_result + SYSTEM_NODE_HEADER_SIZE);
  if ((uint_result & 0x1f) == 0) {
    uint_result = (*(longlong *)(long_result + 0x28) - uint_result) - SYSTEM_NODE_HEADER_SIZE;
    if ((0x8000000000000000 < uint_result) &&
       (long_ptr = *(longlong **)(long_result + 0x60), long_ptr != (longlong *)0x0)) {
      uint_result = *long_ptr - 1U & long_ptr[1] + 1U;
      node_current = *(ulonglong **)(long_ptr[3] + uint_result * 8);
      if ((*node_current == 1) || (node_current[1] == 0)) {
        *node_current = uint_result;
        long_ptr[1] = uint_result;
      }
      else {
        uint_result = InitializeShaderSystem(long_result);
        if ((char)uint_result == '\0') goto LAB_180069dc3;
        long_ptr = *(longlong **)(long_result + 0x60);
        uint_result = *long_ptr - 1U & long_ptr[1] + 1U;
        node_current = *(ulonglong **)(long_ptr[3] + uint_result * 8);
        *node_current = uint_result;
        long_ptr[1] = uint_result;
      }
      uint_result = InitializeSystemModule59(*(uint64_t *)(long_result + 0x50));
      if (uint_result != 0) {
        *(uint64_t *)(uint_result + SYSTEM_DATA_COMPARE_SIZE8) = 0;
        node_current[1] = uint_result;
        *(ulonglong *)(long_result + 0x40) = uint_result;
        goto LAB_180069dda;
      }
      long_ptr = *(longlong **)(long_result + 0x60);
      uint_result = long_ptr[1] - 1;
      long_ptr[1] = *long_ptr - 1U & uint_result;
      node_current[1] = 0;
    }
LAB_180069dc3:
    uint_result = uint_result & 0xffffffffffffff00;
  }
  else {
LAB_180069dda:
    uint_result = *resourceIdentifier;
    *(uint64_t *)(*(longlong *)(long_result + 0x40) + (ulonglong)((uint)uint_result & 0x1f) * 8) = uint_result;
    *(ulonglong *)(long_result + SYSTEM_NODE_HEADER_SIZE) = uint_result + 1;
    uint_result = CONCAT71((int7)((ulonglong)uint_result >> 8),1);
  }
  return uint_result;
}

uint64_t *
InitializeSystemDataNode17(uint64_t *handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  code *pis_initialized;

  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *handleIdentifier = &globalSystemOutputData;
  LOCK();
  *(uint8_t *)(handleIdentifier + 2) = 0;
  UNLOCK();
  handleIdentifier[3] = 0xffffffffffffffff;
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[6] = 0;
  handleIdentifier[7] = _guard_check_icall;
  if (handleIdentifier + 4 != resourceIdentifier) {
    pis_initialized = (code *)resourceIdentifier[2];
    if (pis_initialized != (code *)0x0) {
      (*pis_initialized)(handleIdentifier + 4,resourceIdentifier,1,systemFlags,INVALID_HANDLE_VALUE);
      pis_initialized = (code *)resourceIdentifier[2];
    }
    handleIdentifier[6] = pis_initialized;
    handleIdentifier[7] = resourceIdentifier[3];
  }
  if ((code *)resourceIdentifier[2] != (code *)0x0) {
    (*(code *)resourceIdentifier[2])(resourceIdentifier,0,0);
  }
  return handleIdentifier;
}

uint64_t
SystemFunction_92_0(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;
  uint32_t uint_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  uint_result = 0;
  uint_result = GetBufferData();
  ProcessResourceData(resourceIdentifier,uint_result,systemConfig,systemFlags,uint_result,uint_result);
  return resourceIdentifier;
}

uint64_t * InitializeSystemModule1(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  *resourceIdentifier = 0;
  resourceIdentifier[1] = 0;
  resourceIdentifier[2] = 0;
  *(uint32_t *)(resourceIdentifier + 3) = 3;
  return resourceIdentifier;
}

uint64_t * InitializeThreadManagerSystem(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  *resourceIdentifier = 0;
  return resourceIdentifier;
}

uint64_t InitializeInputManagerSystem(uint64_t handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  SystemFinalizeFunction();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x260,systemConfig,systemFlags,uint_result);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t InitializeSystemDataNode25(int handleIdentifier)

{
  if ((handleIdentifier != -0x3fffff03) && (handleIdentifier != -0x3ffffffb)) {
    return 0;
  }
  (**(code **)(*(longlong *)*systemConfigurationData + 0x68))();
  return 1;
}

uint64_t * InitializeSystemModule14(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  handleIdentifier[0x18] = &resourcePoolPointer;
  if (handleIdentifier[NODE_INITIALIZED_OFFSET] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[NODE_INITIALIZED_OFFSET] = 0;
  *(uint32_t *)(handleIdentifier + 0x1b) = 0;
  handleIdentifier[0x18] = &globalSystemPointerData;
  InitializeInputManagerSystem(handleIdentifier);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xe8);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeNetworkSystem(longlong handleIdentifier)
void InitializeNetworkSystem(longlong handleIdentifier)

{
  longlong *long_ptr;
  char char_var;
  uint64_t uint_result;
  uint64_t *ptr_uint_var;
  void *ptr_uint_var;
  uint8_t localBuffer_278 [40];
  longlong *stack_long_ptr;
  int intStack_248;
  char cStack_1fc;
  uint64_t uintStack_98;

  uintStack_98 = INVALID_HANDLE_VALUE;
  SetErrorMode(1);
  char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
  if (char_var == '\0') {
    SetUnhandledExceptionFilter(&g_system_func_14);
  }
  uint_result = AllocateSystemMemory(systemMemoryPool,0x170,8,3);
  g_system_handle_1 = InitializeSystemDataNode19(uint_result);
  InitializeSystemResources(localBuffer_278);
  uint_result = AllocateSystemMemory(systemMemoryPool,1000,8,3);
  g_system_base_1 = InitializeFontSystem(uint_result);
  CreateMonitoringResources();
  ConfigureGraphicsShader();
  if ((*(char *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE) == '\0') && (*(char *)(systemCoreData + 0x21) == '\0')) {
    uint_result = SystemCheckFunction(0x428);
    stack_long_ptr = (longlong *)EngineFunction_40_0(uint_result);
  }
  else {
    stack_long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,0x28,8,3);
    *stack_long_ptr = (longlong)&globalSystemVariable;
    *stack_long_ptr = (longlong)&g_system_global_variable8;
    stack_long_ptr[4] = 0;
    *(uint8_t *)(stack_long_ptr + 1) = 0;
    stack_long_ptr[2] = 0;
    *(uint8_t *)(stack_long_ptr + 3) = 0;
    long_ptr = (longlong *)stack_long_ptr[4];
    stack_long_ptr[4] = 0;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))();
    }
  }
  ptr_uint_var = &g_system_data_variable3;
  if (*(void **)(handleIdentifier + 200) != (void *)0x0) {
    ptr_uint_var = *(void **)(handleIdentifier + 200);
  }
  (**(code **)(*stack_long_ptr + 0x50))(stack_long_ptr,ptr_uint_var);
  (**(code **)(*stack_long_ptr + 0x60))(stack_long_ptr,localBuffer_278);
  if (cStack_1fc == '\0') {
    intStack_248 = 0;
  }
  else if (g_system_data_variable1 == '\0') {
    intStack_248 = (g_system_status_flag != '\0') + 2;
  }
  else {
    intStack_248 = 1;
  }
  systemConfigurationData = AllocateSystemMemory(systemMemoryPool,0x28,8,3);
  *(uint64_t *)(systemConfigurationData + 8) = 0;
  *(uint64_t *)(systemConfigurationData + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint64_t *)(systemConfigurationData + 0x18) = 0;
  *(uint32_t *)(systemConfigurationData + SYSTEM_NODE_HEADER_SIZE) = 3;
  SystemShutdownFunction();
  ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x478,8,3);
  *ptr_uint_var = 0;
  ptr_uint_var[1] = 0;
  ptr_uint_var[2] = 0;
  *(uint32_t *)(ptr_uint_var + 3) = 3;
  ptr_uint_var[4] = 0;
  ptr_uint_var[5] = 0;
  ptr_uint_var[6] = 0;
  *(uint32_t *)(ptr_uint_var + 7) = 3;
  ptr_uint_var[8] = 0;
  ptr_uint_var[9] = 0;
  ptr_uint_var[10] = 0;
  *(uint32_t *)(ptr_uint_var + 0xb) = 3;
  *(uint8_t *)(ptr_uint_var + 0xc) = 0;
  *(uint64_t *)((longlong)ptr_uint_var + 100) = 0xffffffffffffffff;
  *(uint32_t *)((longlong)ptr_uint_var + 0x6c) = 0;
  *(uint16_t *)(ptr_uint_var + 0xe) = 0;
  *(uint8_t *)((longlong)ptr_uint_var + 0x72) = 0;
                    // WARNING: Subroutine does not return
  memset((longlong)ptr_uint_var + 0x74,0,0x400);
}
// void InitializeSystemDataNode32(longlong handleIdentifier)

void InitializeSystemDataNode32(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + 0xa0) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0xa8) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0xa8) = 0;
  *(uint32_t *)(handleIdentifier + 0xb8) = 0;
  *(uint64_t *)(handleIdentifier + 0xa0) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0x80) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x88) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x88) = 0;
  *(uint32_t *)(handleIdentifier + 0x98) = 0;
  *(uint64_t *)(handleIdentifier + 0x80) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0x58) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x60) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x60) = 0;
  *(uint32_t *)(handleIdentifier + 0x70) = 0;
  *(uint64_t *)(handleIdentifier + 0x58) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 0x38) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x40) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x40) = 0;
  *(uint32_t *)(handleIdentifier + 0x50) = 0;
  *(uint64_t *)(handleIdentifier + 0x38) = &globalSystemPointerData;
  *(uint64_t *)(handleIdentifier + 8) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint64_t *)(handleIdentifier + 8) = &globalSystemPointerData;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong SetupGraphicsDevice(longlong *handleIdentifier,longlong *resourceIdentifier,int systemConfig)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;

  if (systemConfig == 3) {
    return 0x180bfd730;
  }
  if (systemConfig == 4) {
    return *handleIdentifier;
  }
  if (systemConfig == 0) {
    if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  else {
    if (systemConfig == 1) {
      node_root = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE,8,g_system_audio_initialized,INVALID_HANDLE_VALUE);
      ptr_uint_var = (uint64_t *)*resourceIdentifier;
      *node_root = *ptr_uint_var;
      *(uint32_t *)(node_root + 1) = *(uint32_t *)(ptr_uint_var + 1);
      node_root[2] = ptr_uint_var[2];
      node_root[3] = ptr_uint_var[3];
      *handleIdentifier = (longlong)node_root;
      return 0;
    }
    if (systemConfig == 2) {
      *handleIdentifier = *resourceIdentifier;
      *resourceIdentifier = 0;
      return 0;
    }
  }
  return 0;
}
// void SetupSystemMemory(longlong handleIdentifier,uint32_t resourceIdentifier)

void SetupSystemMemory(longlong handleIdentifier,uint32_t resourceIdentifier)

{
  char is_initialized;
  void *node_root;
  uint32_t localBuffer_X10 [6];

  if ((*(longlong *)(handleIdentifier + 0x1e20) != 0) &&
     (localBuffer_X10[0] = resourceIdentifier, is_initialized = (**(code **)(handleIdentifier + 0x1e28))(localBuffer_X10),
     resourceIdentifier = localBuffer_X10[0], is_initialized == '\0')) {
    if (g_system_data_variable0 == '\0') {
      node_root = &g_system_data_variable3;
      if (*(void **)(handleIdentifier + 0x1dd0) != (void *)0x0) {
        node_root = *(void **)(handleIdentifier + 0x1dd0);
      }
      ProcessSystemDataHeader(&g_system_data_config,node_root);
    }
    *(uint32_t *)(handleIdentifier + 0x1dc0) = *(uint32_t *)(handleIdentifier + 0x1e08);
    return;
  }
  *(uint32_t *)(handleIdentifier + 0x1dc0) = resourceIdentifier;
  return;
}
// void InitializeSystemDataNode22(longlong handleIdentifier,uint32_t resourceIdentifier)

void InitializeSystemDataNode22(longlong handleIdentifier,uint32_t resourceIdentifier)

{
  char is_initialized;
  void *node_root;
  uint32_t localBuffer_X10 [6];

  if ((*(longlong *)(handleIdentifier + 0x1db0) != 0) &&
     (localBuffer_X10[0] = resourceIdentifier, is_initialized = (**(code **)(handleIdentifier + 0x1db8))(localBuffer_X10),
     resourceIdentifier = localBuffer_X10[0], is_initialized == '\0')) {
    if (g_system_data_variable0 == '\0') {
      node_root = &g_system_data_variable3;
      if (*(void **)(handleIdentifier + 0x1d60) != (void *)0x0) {
        node_root = *(void **)(handleIdentifier + 0x1d60);
      }
      ProcessSystemDataHeader(&g_system_data_config,node_root);
    }
    *(uint32_t *)(handleIdentifier + 0x1d50) = *(uint32_t *)(handleIdentifier + 0x1d98);
    return;
  }
  *(uint32_t *)(handleIdentifier + 0x1d50) = resourceIdentifier;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemResources(uint64_t handleIdentifier,uint32_t resourceIdentifier)
void InitializeSystemResources(uint64_t handleIdentifier,uint32_t resourceIdentifier)

{
  longlong long_result;
  char char_var;
  void *ptr_uint_var;
  uint32_t localBuffer_X10 [6];

  long_result = systemCoreData;
  if ((*(longlong *)(systemCoreData + 0x1870) != 0) &&
     (localBuffer_X10[0] = resourceIdentifier, char_var = (**(code **)(systemCoreData + 0x1878))(localBuffer_X10),
     resourceIdentifier = localBuffer_X10[0], char_var == '\0')) {
    if (g_system_data_variable0 == '\0') {
      ptr_uint_var = &g_system_data_variable3;
      if (*(void **)(long_result + 0x1820) != (void *)0x0) {
        ptr_uint_var = *(void **)(long_result + 0x1820);
      }
      ProcessSystemDataHeader(&g_system_data_config,ptr_uint_var);
    }
    *(uint32_t *)(long_result + 0x1810) = *(uint32_t *)(long_result + 0x1858);
    return;
  }
  *(uint32_t *)(long_result + 0x1810) = resourceIdentifier;
  return;
}

longlong InitializeSystemDataNode23(longlong handleIdentifier,uint resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (*(code **)(handleIdentifier + 0xd0) != (code *)0x0) {
    (**(code **)(handleIdentifier + 0xd0))(handleIdentifier + 0xc0,0,0,systemFlags,INVALID_HANDLE_VALUE);
  }
  InitializeInputManagerSystem(handleIdentifier);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xe0);
  }
  return handleIdentifier;
}

uint64_t *
InitializeInputMutex(uint64_t *handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  code *pis_initialized;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ConfigureSystemHandles();
  *handleIdentifier = &globalSystemVariable;
  handleIdentifier[0x1a] = 0;
  handleIdentifier[0x1b] = _guard_check_icall;
  if (handleIdentifier + 0x18 != resourceIdentifier) {
    pis_initialized = (code *)resourceIdentifier[2];
    if (pis_initialized != (code *)0x0) {
      (*pis_initialized)(handleIdentifier + 0x18,resourceIdentifier,1,systemFlags,uint_result);
      pis_initialized = (code *)resourceIdentifier[2];
    }
    handleIdentifier[0x1a] = pis_initialized;
    handleIdentifier[0x1b] = resourceIdentifier[3];
  }
  if ((code *)resourceIdentifier[2] != (code *)0x0) {
    (*(code *)resourceIdentifier[2])(resourceIdentifier,0,0);
  }
  return handleIdentifier;
}
// void InitializeFontSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeFontSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 0x13) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_16_0(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void SystemFunction_16_0(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 0x13) {
    (**(code **)*node_root)(node_root,0,systemConfig,systemFlags,uint_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeShaderSystem(void)
void InitializeShaderSystem(void)

{
  longlong *long_ptr;
  longlong long_result;
  char char_var;

  if (systemConfigurationData != 0) {
    (**(code **)(systemConfigurationData + 0x88))(1);
  }
// void InitializeSystemDataNode31(longlong handleIdentifier)

void InitializeSystemDataNode31(longlong handleIdentifier)

{
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = &resourcePoolPointer;
  if (*(longlong *)(handleIdentifier + 0x28) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(handleIdentifier + 0x28) = 0;
  *(uint32_t *)(handleIdentifier + 0x38) = 0;
  *(uint64_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = &globalSystemPointerData;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SetupSystemServices(uint64_t *handleIdentifier)
void SetupSystemServices(uint64_t *handleIdentifier)

{
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong long_result;
  uint8_t localBuffer_b8 [48];
  uint64_t *system_buffer_ptr_88;
  uint64_t *system_buffer_ptr_80;
  uint64_t uintStack_68;
  uint64_t *system_buffer_ptr_60;
  ulonglong uintStack_30;

  uintStack_68 = INVALID_HANDLE_VALUE;
  uintStack_30 = systemConfigurationData ^ (ulonglong)localBuffer_b8;
  *handleIdentifier = &g_system_global_variable8;
  uint_result = 0;
  handleIdentifier[1] = 0;
  system_buffer_ptr_80 = handleIdentifier + 2;
  *system_buffer_ptr_80 = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  handleIdentifier[4] = 0;
  handleIdentifier[7] = 0;
  ptr_uint_var = handleIdentifier + 0xd;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  ptr_uint_var = ptr_uint_var;
  system_buffer_ptr_60 = handleIdentifier;
  do {
    FreeSystemMemory(ptr_uint_var);
    ptr_uint_var = ptr_uint_var + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  *(uint64_t *)((longlong)handleIdentifier + 0x26c) = 0;
  *(uint32_t *)(handleIdentifier + 0x4d) = 0;
  handleIdentifier[9] = 0;
  handleIdentifier[10] = SYSTEM_NODE_HEADER_SIZE;
  handleIdentifier[0xb] = ptr_uint_var;
  do {
    *(uint32_t *)ptr_uint_var = 0;
    ptr_uint_var = ptr_uint_var + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  handleIdentifier[0xc] = 0;
  handleIdentifier[8] = handleIdentifier + 10;
  handleIdentifier[6] = 0x15;
  long_result = InitializeSystemModule42();
  handleIdentifier[5] = long_result;
  if (long_result == 0) {
    handleIdentifier[6] = 0;
    uint_result = uint_result;
  }
  else {
    uint_result = handleIdentifier[6];
  }
  uint_result = uint_result;
  if (uint_result != 0) {
    do {
      *(uint8_t *)(uint_result + 0x141 + handleIdentifier[5]) = 0;
      uint_result = uint_result + 1;
      uint_result = uint_result + 0x148;
    } while (uint_result < (ulonglong)handleIdentifier[6]);
  }
  system_buffer_ptr_88 = handleIdentifier + 0x4f;
  _Cnd_init_in_situ();
  system_buffer_ptr_88 = handleIdentifier + 0x58;
  _Mtx_init_in_situ(system_buffer_ptr_88,2);
  *(uint32_t *)(handleIdentifier + 0x65) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x32c) = 0x80;
  system_buffer_ptr_80 = handleIdentifier + 0x66;
  *(uint32_t *)(handleIdentifier + 0x6a) = 0x3f800000;
  *(uint64_t *)((longlong)handleIdentifier + 0x354) = 0x40000000;
  *(uint32_t *)((longlong)handleIdentifier + 0x35c) = 3;
  handleIdentifier[0x68] = 1;
  handleIdentifier[0x67] = &g_system_data_variable0;
  handleIdentifier[0x69] = 0;
  *(uint32_t *)(handleIdentifier + 0x6b) = 0;
  *(uint8_t *)(handleIdentifier + 0x6d) = 1;
  long_result = AllocateSystemMemory(systemMemoryPool,0x140038,8,3);
                    // WARNING: Subroutine does not return
  memset(long_result + SYSTEM_NODE_HEADER_SIZE,0,0x140000);
}

uint64_t InitializeAudioManagerSystem(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializePhysicsSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x370);
  }
  return handleIdentifier;
}
// void InitializeSystemModule43(longlong handleIdentifier)

void InitializeSystemModule43(longlong handleIdentifier)

{
  longlong long_result;
  uint64_t *node_root;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      node_root = *(uint64_t **)(long_result + uint_result * 8);
      if (node_root != (uint64_t *)0x0) {
        *node_root = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (*(longlong *)(handleIdentifier + 8) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// void InitializeSystemModule44(longlong handleIdentifier)

void InitializeSystemModule44(longlong handleIdentifier)

{
  longlong long_result;
  uint64_t *node_root;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      node_root = *(uint64_t **)(long_result + uint_result * 8);
      if (node_root != (uint64_t *)0x0) {
        *node_root = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (*(longlong *)(handleIdentifier + 8) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t
InitializeNetworkSystem(longlong handleIdentifier,longlong resourceIdentifier,longlong *systemConfig,longlong *systemFlags,
             longlong *parameter_5)

{
  longlong long_result;
  longlong *long_ptr;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  undefined7 uint_result;

  long_result = *(longlong *)(resourceIdentifier + 0x128);
  if (long_result != 0) {
    *systemConfig = long_result;
    long_result = *(longlong *)(resourceIdentifier + 0x128);
  }
  long_result = *(longlong *)(resourceIdentifier + 0x130);
  uint_result = 0;
  if (long_result == 0) {
    if (long_result == 0) {
      uint_result = *(ulonglong *)(resourceIdentifier + 0x120);
    }
  }
  else {
    uint_result = *(ulonglong *)(resourceIdentifier + 0x120);
    if (long_result == 0) {
      uint_result = uint_result + *(longlong *)(resourceIdentifier + 0x138);
    }
  }
  *(uint64_t *)(resourceIdentifier + 0x1a0) = 0;
  *(uint64_t *)(resourceIdentifier + NODE_INITIALIZED_OFFSET8) = 0;
  *(uint64_t *)(resourceIdentifier + 400) = 0;
  *(uint64_t *)(resourceIdentifier + 0x188) = 0;
  uint_result = (*(longlong *)(resourceIdentifier + 0x120) - (*(ulonglong *)(resourceIdentifier + 0x118) & 0xfffffffffffff000))
          + *(ulonglong *)(resourceIdentifier + 0x118);
  uint_result = uint_result & 0xfffffffffffff000;
  long_result = (-(uint)((uint_result & 0xfff) != 0) & SYSTEM_DATA_COMPARE_SIZE00) + uint_result;
  if (*(ulonglong *)(handleIdentifier + 0x360) < uint_result) {
    uint_result = (undefined7)(uint_result >> 8);
    if (long_result == 0) {
      if (*systemConfig == 0) {
        long_result = AllocateSystemResource(systemMemoryPool,long_result,CONCAT71(uint_result,3));
        *systemConfig = long_result;
        *(longlong *)(resourceIdentifier + NODE_INITIALIZED_OFFSET8) = long_result;
        *parameter_5 = *systemConfig;
      }
    }
    else {
      long_result = AllocateSystemResource(systemMemoryPool,long_result,CONCAT71(uint_result,3));
      *systemFlags = long_result;
      *(longlong *)(resourceIdentifier + NODE_INITIALIZED_OFFSET8) = long_result;
      *parameter_5 = *systemFlags;
      if (*systemConfig == 0) {
        long_result = AllocateSystemResource(systemMemoryPool,*(uint64_t *)(resourceIdentifier + 0x138),3);
        *systemConfig = long_result;
        *(longlong *)(resourceIdentifier + 0x1a0) = long_result;
      }
    }
  }
  else if (long_result == 0) {
    if (*systemConfig == 0) {
      long_ptr = (longlong *)InitializeSystemDataNode31(handleIdentifier,long_result);
      *(longlong **)(resourceIdentifier + 400) = long_ptr;
      if (long_ptr == (longlong *)0x0) goto LAB_18006bf7f;
      long_result = *(longlong *)(handleIdentifier + 800) + *long_ptr;
      *systemConfig = long_result;
      *parameter_5 = long_result;
    }
  }
  else {
    long_ptr = (longlong *)InitializeSystemDataNode31(handleIdentifier,long_result);
    *(longlong **)(resourceIdentifier + 0x188) = long_ptr;
    if (long_ptr == (longlong *)0x0) {
LAB_18006bf7f:
      ConfigureResourceHandle(handleIdentifier,*(uint64_t *)(resourceIdentifier + 0x188));
      ConfigureResourceHandle(handleIdentifier,*(uint64_t *)(resourceIdentifier + 400));
      return 0;
    }
    long_result = *long_ptr + *(longlong *)(handleIdentifier + 800);
    *systemFlags = long_result;
    *parameter_5 = long_result;
    if (*systemConfig == 0) {
      long_ptr = (longlong *)InitializeSystemDataNode31(handleIdentifier,*(uint64_t *)(resourceIdentifier + 0x138));
      *(longlong **)(resourceIdentifier + 400) = long_ptr;
      if (long_ptr == (longlong *)0x0) goto LAB_18006bf7f;
      *systemConfig = *long_ptr + *(longlong *)(handleIdentifier + 800);
    }
  }
  return 1;
}
// void InitializePhysicsSystem(uint64_t *handleIdentifier)

void InitializePhysicsSystem(uint64_t *handleIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  InitializeTextureSystem();
  _Mtx_destroy_in_situ();
  _Cnd_destroy_in_situ();
  InitializeEventSystem(handleIdentifier + 2);
  if ((longlong *)handleIdentifier[1] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[1] + 0x38))();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeNetworkSystem(longlong handleIdentifier)
void InitializeNetworkSystem(longlong handleIdentifier)

{
  longlong *long_ptr;
  int *ptr_int_var;
  byte *ptr_byte_var;
  uint64_t uint_result;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  bool bool_var;
  longlong long_result;
  char char_var;
  longlong long_result;
  longlong *long_ptr;
  byte *ptr_byte_var;
  longlong long_result;
  longlong long_result;
  longlong *long_ptr;
  uint uint_result;
  int int_result;
  longlong *long_ptr;
  uint64_t *node_root0;
  longlong long_result;
  code *ptr_char_var;
  longlong *long_ptr;
  void *node_root4;
  ulonglong uint_result;
  uint8_t localBuffer_278 [32];
  ulonglong uintStack_258;
  void **pbufferPtr_248;
  longlong *stack_long_ptr;
  longlong longStack_238;
  longlong longStack_230;
  uint8_t uintStack_228;
  uint64_t uintStack_218;
  int intStack_210;
  uint32_t uintStack_20c;
  uint64_t uintStack_208;
  void *system_buffer_ptr_1f8;
  byte *pbStack_1f0;
  int intStack_1e8;
  byte abStack_1e0 [256];
  uint64_t uintStack_e0;
  ulonglong uintStack_d8;
  longlong longStack_d0;
  longlong longStack_c8;
  longlong longStack_c0;
  uint8_t uintStack_b8;
  uint8_t localBuffer_b0 [16];
  code *stack_char_ptr;
  code *stack_char_ptr;
  uint8_t localBuffer_90 [16];
  code *stack_char_ptr;
  code *stack_char_ptr;
  uint64_t uintStack_70;
  uint64_t uintStack_68;
  uint64_t uintStack_60;
  uint64_t uintStack_58;
  int intStack_48;
  uint32_t uintStack_44;
  int intStack_40;
  uint32_t uintStack_3c;
  ulonglong uintStack_38;
  ulonglong uint_result;

  uintStack_208 = INVALID_HANDLE_VALUE;
  uintStack_38 = systemConfigurationData ^ (ulonglong)localBuffer_278;
  char_var = *(char *)(*(longlong *)(handleIdentifier + 1000) + 0x58);
  do {
    if ((char_var == '\0') || (uint_result = 0, *(char *)(handleIdentifier + 0x400) != '\0')) {
                    // WARNING: Subroutine does not return
      InitializeSystemStack(uintStack_38 ^ (ulonglong)localBuffer_278);
    }
    system_buffer_ptr_1f8 = &g_system_global_variable8;
    pbStack_1f0 = abStack_1e0;
    intStack_1e8 = 0;
    abStack_1e0[0] = 0;
    stack_char_ptr = (code *)0x0;
    stack_char_ptr = _guard_check_icall;
    psystem_buffer_ptr_248 = (void **)localBuffer_90;
    stack_char_ptr = (code *)0x0;
    stack_char_ptr = _guard_check_icall;
    longStack_c0 = -1;
    uintStack_d8 = 0xffffffffffffffff;
    uintStack_e0 = 0xffffffffffffffff;
    longStack_d0 = 0;
    longStack_c8 = 0;
    uintStack_b8 = 0;
    long_result = *(longlong *)(handleIdentifier + 0x3c8);
    long_result = *(longlong *)(handleIdentifier + 0x3d0) - long_result;
    long_result = long_result >> 0x3f;
    if (long_result / 0x1a8 + long_result == long_result) {
      char_var = InitializeAudioSystem(handleIdentifier + 200,&bufferPtr_1f8system_buffer_ptr_1f8);
      if (char_var == '\0') {
        long_result = handleIdentifier + 0x378;
        uintStack_228 = 0;
        longStack_230 = long_result;
        int_result = _Mtx_lock(long_result);
        if (int_result != 0) {
          __Throw_C_error_std__YAXH_Z(int_result);
        }
        uintStack_228 = 1;
        long_result = _Xtime_get_ticks();
        long_result = (long_result + 50000) * 100;
        long_result = long_result / 1000000000;
        intStack_48 = (int)long_result;
        intStack_210 = (int)long_result + intStack_48 * -1000000000;
        uintStack_218._4_4_ = (uint32_t)((ulonglong)long_result >> SYSTEM_NODE_HEADER_SIZE);
        uintStack_44 = uintStack_218._4_4_;
        uintStack_3c = uintStack_20c;
        uintStack_218 = long_result;
        intStack_40 = intStack_210;
        int_result = _Mtx_current_owns(long_result);
        if (int_result == 0) {
          __Throw_Cpp_error_std__YAXH_Z(4);
        }
        uint_result = _Cnd_timedwait(handleIdentifier + 0x330,long_result,&intStack_48);
        if ((uint_result & 0xfffffffd) != 0) {
          __Throw_C_error_std__YAXH_Z(uint_result);
        }
        char_var = InitializeAudioSystem(handleIdentifier + 200,&bufferPtr_1f8system_buffer_ptr_1f8);
        if (char_var == '\0') {
          int_result = _Mtx_unlock(long_result);
          if (int_result != 0) {
            __Throw_C_error_std__YAXH_Z(int_result);
          }
          bool_var = false;
        }
        else {
          int_result = _Mtx_unlock();
          if (int_result != 0) {
            __Throw_C_error_std__YAXH_Z(int_result);
          }
          bool_var = true;
        }
      }
      else {
        bool_var = true;
      }
    }
    else {
      intStack_1e8 = *(int *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
      node_root4 = &g_system_data_variable3;
      if (*(void **)(long_result + 8) != (void *)0x0) {
        node_root4 = *(void **)(long_result + 8);
      }
      strcpy_s(pbStack_1f0,SYSTEM_DATA_COMPARE_SIZE0,node_root4);
      uintStack_e0 = *(uint64_t *)(long_result + 0x118);
      uintStack_d8 = *(ulonglong *)(long_result + 0x120);
      longStack_d0 = *(longlong *)(long_result + 0x128);
      longStack_c8 = *(longlong *)(long_result + 0x130);
      longStack_c0 = *(longlong *)(long_result + 0x138);
      uintStack_b8 = *(uint8_t *)(long_result + 0x140);
      if (localBuffer_b0 != (uint8_t *)(long_result + 0x148)) {
        if (stack_char_ptr != (code *)0x0) {
          (*stack_char_ptr)(localBuffer_b0,0,0);
        }
        ptr_char_var = *(code **)(long_result + 0x158);
        if (ptr_char_var != (code *)0x0) {
          (*ptr_char_var)(localBuffer_b0,(uint8_t *)(long_result + 0x148),1);
          ptr_char_var = *(code **)(long_result + 0x158);
        }
        stack_char_ptr = *(code **)(long_result + 0x160);
        stack_char_ptr = ptr_char_var;
      }
      if (localBuffer_90 != (uint8_t *)(long_result + 0x168)) {
        if (stack_char_ptr != (code *)0x0) {
          (*stack_char_ptr)(localBuffer_90,0,0);
        }
        ptr_char_var = *(code **)(long_result + 0x178);
        if (ptr_char_var != (code *)0x0) {
          (*ptr_char_var)(localBuffer_90,(uint8_t *)(long_result + 0x168),1);
          ptr_char_var = *(code **)(long_result + 0x178);
        }
        stack_char_ptr = *(code **)(long_result + 0x180);
        stack_char_ptr = ptr_char_var;
      }
      uintStack_70 = *(uint64_t *)(long_result + 0x188);
      uintStack_68 = *(uint64_t *)(long_result + 400);
      uintStack_60 = *(uint64_t *)(long_result + NODE_INITIALIZED_OFFSET8);
      uintStack_58 = *(uint64_t *)(long_result + 0x1a0);
      *(longlong *)(handleIdentifier + 0x3d0) = *(longlong *)(handleIdentifier + 0x3d0) + -0x1a8;
      InitializeSystemModule33();
      bool_var = true;
    }
    node_root0 = *(uint64_t **)(handleIdentifier + 0xc0);
    if ((void *)*node_root0 == &globalSystemVariable) {
      char_var = ValidateSystemConfiguration(node_root0 + 2,&stack_long_ptr);
      while (char_var != '\0') {
        long_ptr = (longlong *)node_root0[99];
        if (stack_long_ptr != (longlong *)0x0) {
          *(uint8_t *)(stack_long_ptr + 4) = 0;
          *long_ptr = *long_ptr - stack_long_ptr[1];
          long_ptr[2] = long_ptr[2] + stack_long_ptr[1];
          long_ptr = (longlong *)stack_long_ptr[3];
          long_ptr = (longlong *)long_ptr[3];
          long_ptr = stack_long_ptr;
          if (long_ptr != long_ptr) {
            do {
              if ((long_ptr == (longlong *)0x0) || ((char)long_ptr[4] != '\0')) break;
              long_result = long_ptr[2];
              long_ptr[2] = long_result;
              if (long_result != 0) {
                *(longlong **)(long_result + 0x18) = long_ptr;
              }
              long_ptr[1] = long_ptr[1] + long_ptr[1];
              *long_ptr = long_ptr[0x28005];
              long_ptr[0x28005] = (longlong)long_ptr;
              long_ptr = long_ptr + 3;
              long_ptr = (longlong *)long_ptr[3];
              long_ptr = long_ptr;
              long_ptr = (longlong *)*long_ptr;
            } while ((longlong *)*long_ptr != long_ptr);
          }
          long_ptr = (longlong *)long_ptr[2];
          while (((long_ptr != long_ptr && (long_ptr != (longlong *)0x0)) && ((char)long_ptr[4] == '\0')
                 )) {
            long_result = long_ptr[2];
            long_ptr[2] = long_result;
            if (long_result != 0) {
              *(longlong **)(long_result + 0x18) = long_ptr;
            }
            long_ptr[1] = long_ptr[1] + long_ptr[1];
            *long_ptr = long_ptr[0x28005];
            long_ptr[0x28005] = (longlong)long_ptr;
            long_ptr = (longlong *)long_ptr[3];
            long_ptr = (longlong *)long_ptr[2];
          }
        }
        char_var = ValidateSystemConfiguration(node_root0 + 2,&stack_long_ptr);
      }
    }
    else {
      (**(code **)((void *)*node_root0 + 0x18))(node_root0);
    }
    if (bool_var) {
      long_ptr = *(longlong **)(handleIdentifier + 0xc0);
      uint_result = uint_result;
      if (0 < intStack_1e8) {
        do {
          uint_result = uint_result * 0x1f + (longlong)(char)pbStack_1f0[uint_result];
          uint_result = (int)uint_result + 1;
          uint_result = (ulonglong)uint_result;
        } while ((int)uint_result < intStack_1e8);
      }
      long_ptr = (longlong *)long_ptr[0x67];
      for (long_result = long_ptr[uint_result % (ulonglong)*(uint *)(long_ptr + 0x68)]; long_result != 0;
          long_result = *(longlong *)(long_result + 0x120)) {
        int_result = *(int *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
        if (intStack_1e8 == int_result) {
          if (intStack_1e8 != 0) {
            ptr_byte_var = pbStack_1f0;
            do {
              ptr_byte_var = ptr_byte_var + (*(longlong *)(long_result + 8) - (longlong)pbStack_1f0);
              int_result = (uint)*ptr_byte_var - (uint)*ptr_byte_var;
              if (int_result != 0) break;
              ptr_byte_var = ptr_byte_var + 1;
            } while (*ptr_byte_var != 0);
          }
LAB_18006c61e:
          if (int_result == 0) {
            if (long_result != 0) {
              long_result = long_ptr[0x68];
              goto LAB_18006c642;
            }
            break;
          }
        }
        else if (intStack_1e8 == 0) goto LAB_18006c61e;
      }
      long_result = long_ptr[0x68];
      long_result = long_ptr[long_result];
LAB_18006c642:
      if ((long_result != long_ptr[long_result]) && (long_result = *(longlong *)(long_result + 0x118), long_result != 0)) {
LAB_18006c852:
        if (longStack_c8 == 0) {
          uint_result = 0;
          if (longStack_d0 == 0) {
            uint_result = uintStack_d8;
          }
        }
        else {
          uint_result = uintStack_d8;
          if (longStack_d0 == 0) {
            uint_result = uintStack_d8 + longStack_c0;
          }
        }
        LOCK();
        long_ptr = (longlong *)(handleIdentifier + 0x3f0);
        long_result = *long_ptr;
        *long_ptr = *long_ptr + uint_result;
        UNLOCK();
        LOCK();
        ptr_int_var = (int *)(handleIdentifier + 0x3f8);
        int_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + 1;
        UNLOCK();
        node_root0 = *(uint64_t **)(handleIdentifier + 0xc0);
        uintStack_258 = node_root0[0x6c];
        if (uintStack_258 < uint_result) {
          ptr_byte_var = &g_system_data_variable3;
          if (pbStack_1f0 != (byte *)0x0) {
            ptr_byte_var = pbStack_1f0;
          }
                    // WARNING: Subroutine does not return
          SystemFunction_17_6(g_system_context_1,&globalSystemVariable,uint_result,ptr_byte_var);
        }
        if (((uintStack_258 < long_result + uint_result) ||
            ((ulonglong)(longlong)*(int *)(handleIdentifier + 0x3fc) < (longlong)int_result + 1U)) ||
           (char_var = (**(code **)*node_root0)(node_root0,long_result,&bufferPtr_1f8system_buffer_ptr_1f8), char_var == '\0')) {
          LOCK();
          *(longlong *)(handleIdentifier + 0x3f0) = *(longlong *)(handleIdentifier + 0x3f0) - uint_result;
          UNLOCK();
          LOCK();
          *(int *)(handleIdentifier + 0x3f8) = *(int *)(handleIdentifier + 0x3f8) + -1;
          UNLOCK();
          InitializeUISystem(handleIdentifier + 0x3c8,&bufferPtr_1f8system_buffer_ptr_1f8);
LAB_18006ca44:
          ptr_char_var = *(code **)(**(longlong **)(handleIdentifier + 0xc0) + 0x28);
          if (ptr_char_var != _guard_check_icall) {
            (*ptr_char_var)();
          }
          Sleep(1);
        }
        ptr_char_var = *(code **)(**(longlong **)(handleIdentifier + 0xc0) + SYSTEM_NODE_HEADER_SIZE);
        if (ptr_char_var != _guard_check_icall) {
          (*ptr_char_var)();
        }
        goto LAB_18006ca95;
      }
      if (*(int *)((longlong)long_ptr + 0x32c) < (int)long_ptr[0x65]) {
        node_root0 = (uint64_t *)*long_ptr;
        long_ptr = long_ptr;
        if (node_root0 == (uint64_t *)0x0) {
          long_ptr = long_ptr + 1;
          node_root0 = (uint64_t *)*long_ptr;
          if (node_root0 == (uint64_t *)0x0) {
            do {
              long_ptr = long_ptr + 1;
              node_root0 = (uint64_t *)*long_ptr;
            } while (node_root0 == (uint64_t *)0x0);
            long_result = long_ptr[0x68];
          }
        }
        if (node_root0 != (uint64_t *)long_ptr[long_result]) {
          do {
            if (*(int *)(node_root0[0x23] + 0x120) == 0) {
              uint_result = node_root0[0x23];
              *(int *)(long_ptr + 0x65) = (int)long_ptr[0x65] + -1;
              (**(code **)(*long_ptr + SYSTEM_DATA_COMPARE_SIZE))(long_ptr,uint_result);
              long_result = node_root0[0x24];
              long_ptr = long_ptr;
              while (long_result == 0) {
                long_ptr = long_ptr + 1;
                long_result = *long_ptr;
              }
              ptr_uint_var = (uint64_t *)*long_ptr;
              node_current = (uint64_t *)ptr_uint_var[0x24];
              if (ptr_uint_var == node_root0) {
                *long_ptr = (longlong)node_current;
              }
              else {
                for (; node_current != node_root0; node_current = (uint64_t *)node_current[0x24]) {
                  ptr_uint_var = node_current;
                }
                ptr_uint_var[0x24] = node_current[0x24];
              }
              *node_root0 = &globalSystemPointerData;
              psystem_buffer_ptr_248 = (void **)node_root0;
                    // WARNING: Subroutine does not return
              ProcessSystemOperation(node_root0);
            }
            node_root0 = (uint64_t *)node_root0[0x24];
            while (node_root0 == (uint64_t *)0x0) {
              long_ptr = long_ptr + 1;
              node_root0 = (uint64_t *)*long_ptr;
            }
          } while (node_root0 != *(uint64_t **)(long_ptr[0x67] + long_ptr[0x68] * 8));
        }
      }
      long_ptr = (longlong *)(handleIdentifier + 0x3c8);
      long_result = 0;
      long_ptr = *(longlong **)(handleIdentifier + 0xc0);
      if (*(int *)((longlong)long_ptr + 0x32c) < (int)long_ptr[0x65]) {
        uint_result = *(ulonglong *)(handleIdentifier + 0x3d0);
        if (uint_result < *(ulonglong *)(handleIdentifier + 0x3d8)) {
          *(ulonglong *)(handleIdentifier + 0x3d0) = uint_result + 0x1a8;
          InitializeSystemModule45(uint_result,&bufferPtr_1f8system_buffer_ptr_1f8);
          goto LAB_18006ca44;
        }
        long_result = *long_ptr;
        long_result = (longlong)(uint_result - long_result) / 0x1a8;
        if (long_result == 0) {
          long_result = 1;
LAB_18006c9ac:
          long_result = AllocateSystemResource(systemMemoryPool,long_result * 0x1a8,*(uint8_t *)(handleIdentifier + 0x3e0));
          uint_result = *(ulonglong *)(handleIdentifier + 0x3d0);
          long_result = *long_ptr;
        }
        else {
          long_result = long_result * 2;
          if (long_result != 0) goto LAB_18006c9ac;
        }
        InitializeFontSystem(&longStack_238,long_result,uint_result,long_result);
        long_result = longStack_238;
        InitializeSystemModule45(longStack_238,&bufferPtr_1f8system_buffer_ptr_1f8);
        long_result = *(longlong *)(handleIdentifier + 0x3d0);
        long_result = *long_ptr;
        if (long_result != long_result) {
          do {
            InitializeSystemModule33(long_result);
            long_result = long_result + 0x1a8;
          } while (long_result != long_result);
          long_result = *long_ptr;
        }
        if (long_result != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(long_result);
        }
        *long_ptr = long_result;
        *(longlong *)(handleIdentifier + 0x3d0) = long_result + 0x1a8;
        *(longlong *)(handleIdentifier + 0x3d8) = long_result * 0x1a8 + long_result;
        goto LAB_18006ca44;
      }
      *(int *)(long_ptr + 0x65) = (int)long_ptr[0x65] + 1;
      long_result = (**(code **)(*long_ptr + 8))(long_ptr,&bufferPtr_1f8system_buffer_ptr_1f8);
      if (long_result != 0) goto LAB_18006c852;
      (*stack_char_ptr)(localBuffer_90);
      psystem_buffer_ptr_248 = (void **)localBuffer_90;
      if (stack_char_ptr != (code *)0x0) {
        (*stack_char_ptr)(localBuffer_90,0,0);
      }
      psystem_buffer_ptr_248 = (void **)localBuffer_b0;
      if (stack_char_ptr != (code *)0x0) {
        (*stack_char_ptr)(localBuffer_b0,0,0);
      }
    }
    else {
      ptr_char_var = *(code **)(**(longlong **)(handleIdentifier + 0xc0) + 0x28);
      if (ptr_char_var != _guard_check_icall) {
        (*ptr_char_var)();
      }
LAB_18006ca95:
      psystem_buffer_ptr_248 = (void **)localBuffer_90;
      if (stack_char_ptr != (code *)0x0) {
        (*stack_char_ptr)(localBuffer_90,0,0);
      }
      psystem_buffer_ptr_248 = (void **)localBuffer_b0;
      if (stack_char_ptr != (code *)0x0) {
        (*stack_char_ptr)(localBuffer_b0,0,0);
      }
    }
    psystem_buffer_ptr_248 = &bufferPtr_1f8system_buffer_ptr_1f8;
    system_buffer_ptr_1f8 = &globalSystemPointerData;
    char_var = *(char *)(*(longlong *)(handleIdentifier + 1000) + 0x58);
  } while( true );
}
// void InitializeTextureSystem(longlong handleIdentifier)

void InitializeTextureSystem(longlong handleIdentifier)

{
  longlong long_result;
  uint64_t *node_root;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_result = *(longlong *)(handleIdentifier + 8);
  uint_result = 0;
  if (uint_result != 0) {
    do {
      node_root = *(uint64_t **)(long_result + uint_result * 8);
      if (node_root != (uint64_t *)0x0) {
        *node_root = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(uint64_t *)(long_result + uint_result * 8) = 0;
      uint_result = uint_result + 1;
    } while (uint_result < uint_result);
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  }
  *(uint64_t *)(handleIdentifier + 0x18) = 0;
  if ((1 < uint_result) && (*(longlong *)(handleIdentifier + 8) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeUISystem(longlong *handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  code *ptr_char_var;
  longlong long_result;
  ulonglong ustack_var;

  uint_result = handleIdentifier[1];
  if (uint_result < (ulonglong)handleIdentifier[2]) {
    handleIdentifier[1] = uint_result + 0x1a8;
    ustack_var = uint_result;
    InitializeSystemModule13();
    *(uint64_t *)(uint_result + 0x118) = *(uint64_t *)(resourceIdentifier + 0x118);
    *(uint64_t *)(uint_result + 0x120) = *(uint64_t *)(resourceIdentifier + 0x120);
    *(uint64_t *)(uint_result + 0x128) = *(uint64_t *)(resourceIdentifier + 0x128);
    *(uint64_t *)(uint_result + 0x130) = *(uint64_t *)(resourceIdentifier + 0x130);
    *(uint64_t *)(uint_result + 0x138) = *(uint64_t *)(resourceIdentifier + 0x138);
    *(uint8_t *)(uint_result + 0x140) = *(uint8_t *)(resourceIdentifier + 0x140);
    *(uint64_t *)(uint_result + 0x158) = 0;
    *(code **)(uint_result + 0x160) = _guard_check_icall;
    if (uint_result + 0x148 != resourceIdentifier + 0x148) {
      ptr_char_var = *(code **)(resourceIdentifier + 0x158);
      if (ptr_char_var != (code *)0x0) {
        (*ptr_char_var)(uint_result + 0x148,resourceIdentifier + 0x148,1);
        ptr_char_var = *(code **)(resourceIdentifier + 0x158);
      }
      *(code **)(uint_result + 0x158) = ptr_char_var;
      *(uint64_t *)(uint_result + 0x160) = *(uint64_t *)(resourceIdentifier + 0x160);
    }
    *(uint64_t *)(uint_result + 0x178) = 0;
    *(code **)(uint_result + 0x180) = _guard_check_icall;
    if (uint_result + 0x168 != resourceIdentifier + 0x168) {
      ptr_char_var = *(code **)(resourceIdentifier + 0x178);
      if (ptr_char_var != (code *)0x0) {
        (*ptr_char_var)(uint_result + 0x168,resourceIdentifier + 0x168,1);
        ptr_char_var = *(code **)(resourceIdentifier + 0x178);
      }
      *(code **)(uint_result + 0x178) = ptr_char_var;
      *(uint64_t *)(uint_result + 0x180) = *(uint64_t *)(resourceIdentifier + 0x180);
    }
    *(uint64_t *)(uint_result + 0x188) = *(uint64_t *)(resourceIdentifier + 0x188);
    *(uint64_t *)(uint_result + 400) = *(uint64_t *)(resourceIdentifier + 400);
    *(uint64_t *)(uint_result + NODE_INITIALIZED_OFFSET8) = *(uint64_t *)(resourceIdentifier + NODE_INITIALIZED_OFFSET8);
    *(uint64_t *)(uint_result + 0x1a0) = *(uint64_t *)(resourceIdentifier + 0x1a0);
    return uint_result;
  }
  long_result = *handleIdentifier;
  long_result = (longlong)(uint_result - long_result) / 0x1a8;
  if (long_result == 0) {
    long_result = 1;
  }
  else {
    long_result = long_result * 2;
    if (long_result == 0) {
      long_result = 0;
      goto LAB_18006ccef;
    }
  }
  long_result = AllocateSystemResource(systemMemoryPool,long_result * 0x1a8,(char)handleIdentifier[3]);
  uint_result = handleIdentifier[1];
  long_result = *handleIdentifier;
LAB_18006ccef:
  InitializeFontSystem(&ustack_var,long_result,uint_result,long_result);
  InitializeSystemModule45(ustack_var,resourceIdentifier);
  long_result = handleIdentifier[1];
  long_result = *handleIdentifier;
  if (long_result != long_result) {
    do {
      InitializeSystemModule33(long_result);
      long_result = long_result + 0x1a8;
    } while (long_result != long_result);
    long_result = *handleIdentifier;
  }
  if (long_result != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  uint_result = long_result * 0x1a8 + long_result;
  *handleIdentifier = long_result;
  handleIdentifier[1] = ustack_var + 0x1a8;
  handleIdentifier[2] = uint_result;
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_58_1(uint64_t handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig)
void SystemFunction_58_1(uint64_t handleIdentifier,uint64_t resourceIdentifier,longlong systemConfig)

{
  longlong long_result;
  longlong long_result;
  longlong in_RAX;
  longlong long_result;
  longlong long_result;
  longlong allocation_size;
  longlong *system_RDI;
  longlong in_R10;
  longlong init_input_stack_50;

  long_result = SUB168(SEXT816(in_RAX) * SEXT816(systemConfig - in_R10),8);
  long_result = (long_result >> 7) - (long_result >> 0x3f);
  if (long_result == 0) {
    long_result = 1;
  }
  else {
    long_result = long_result * 2;
    if (long_result == 0) {
      long_result = 0;
      goto LAB_18006ccef;
    }
  }
  long_result = AllocateSystemResource(systemMemoryPool,long_result * 0x1a8,(char)system_RDI[3]);
  systemConfig = system_RDI[1];
  in_R10 = *system_RDI;
LAB_18006ccef:
  InitializeFontSystem(&stack0x00000050,in_R10,systemConfig,long_result);
  long_result = init_input_stack_50;
  InitializeSystemModule45(init_input_stack_50);
  long_result = system_RDI[1];
  allocation_size = *system_RDI;
  if (allocation_size != long_result) {
    do {
      InitializeSystemModule33(allocation_size);
      allocation_size = allocation_size + 0x1a8;
    } while (allocation_size != long_result);
    allocation_size = *system_RDI;
  }
  if (allocation_size != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(allocation_size);
  }
  *system_RDI = long_result;
  system_RDI[1] = long_result + 0x1a8;
  system_RDI[2] = long_result * 0x1a8 + long_result;
  return;
}
// void SystemFunction_76_3(void)

void SystemFunction_76_3(void)

{
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}

longlong InitializeSystemModule45(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  code *pis_initialized;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeSystemModule13();
  *(uint64_t *)(handleIdentifier + 0x118) = *(uint64_t *)(resourceIdentifier + 0x118);
  *(uint64_t *)(handleIdentifier + 0x120) = *(uint64_t *)(resourceIdentifier + 0x120);
  *(uint64_t *)(handleIdentifier + 0x128) = *(uint64_t *)(resourceIdentifier + 0x128);
  *(uint64_t *)(handleIdentifier + 0x130) = *(uint64_t *)(resourceIdentifier + 0x130);
  *(uint64_t *)(handleIdentifier + 0x138) = *(uint64_t *)(resourceIdentifier + 0x138);
  *(uint8_t *)(handleIdentifier + 0x140) = *(uint8_t *)(resourceIdentifier + 0x140);
  *(uint64_t *)(handleIdentifier + 0x158) = 0;
  *(code **)(handleIdentifier + 0x160) = _guard_check_icall;
  if (handleIdentifier + 0x148 != resourceIdentifier + 0x148) {
    pis_initialized = *(code **)(resourceIdentifier + 0x158);
    if (pis_initialized != (code *)0x0) {
      (*pis_initialized)(handleIdentifier + 0x148,resourceIdentifier + 0x148,1,systemFlags,uint_result);
      pis_initialized = *(code **)(resourceIdentifier + 0x158);
    }
    *(code **)(handleIdentifier + 0x158) = pis_initialized;
    *(uint64_t *)(handleIdentifier + 0x160) = *(uint64_t *)(resourceIdentifier + 0x160);
  }
  *(uint64_t *)(handleIdentifier + 0x178) = 0;
  *(code **)(handleIdentifier + 0x180) = _guard_check_icall;
  if (handleIdentifier + 0x168 != resourceIdentifier + 0x168) {
    pis_initialized = *(code **)(resourceIdentifier + 0x178);
    if (pis_initialized != (code *)0x0) {
      (*pis_initialized)(handleIdentifier + 0x168,resourceIdentifier + 0x168,1);
      pis_initialized = *(code **)(resourceIdentifier + 0x178);
    }
    *(code **)(handleIdentifier + 0x178) = pis_initialized;
    *(uint64_t *)(handleIdentifier + 0x180) = *(uint64_t *)(resourceIdentifier + 0x180);
  }
  *(uint64_t *)(handleIdentifier + 0x188) = *(uint64_t *)(resourceIdentifier + 0x188);
  *(uint64_t *)(handleIdentifier + 400) = *(uint64_t *)(resourceIdentifier + 400);
  *(uint64_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET8) = *(uint64_t *)(resourceIdentifier + NODE_INITIALIZED_OFFSET8);
  *(uint64_t *)(handleIdentifier + 0x1a0) = *(uint64_t *)(resourceIdentifier + 0x1a0);
  return handleIdentifier;
}
// void InitializeSystemModule24(uint64_t *handleIdentifier)

void InitializeSystemModule24(uint64_t *handleIdentifier)

{
  int *ptr_int_var;
  int int_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong *pallocation_size;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  bool system_comparison_flag;

  *handleIdentifier = &g_system_global_variable8;
  uint_result = handleIdentifier[4];
  long_result = 0;
  uint_result = handleIdentifier[5];
  for (uint_result = uint_result; uint_result != uint_result; uint_result = uint_result + 1) {
    if ((uint_result & 0x1f) == 0) {
      if (long_result != 0) {
        long_result = handleIdentifier[10];
        LOCK();
        ptr_int_var = (int *)(long_result + 0x3530);
        int_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + -0x80000000;
        UNLOCK();
        if (int_result == 0) {
          long_result = *(longlong *)(long_result + 0x28);
          do {
            *(longlong *)(long_result + 0x3538) = long_result;
            *(uint32_t *)(long_result + 0x3530) = 1;
            pallocation_size = (longlong *)(long_result + 0x28);
            LOCK();
            long_result = *pallocation_size;
            system_comparison_flag = long_result == long_result;
            if (system_comparison_flag) {
              *pallocation_size = long_result;
              long_result = long_result;
            }
            UNLOCK();
            if (system_comparison_flag) break;
            LOCK();
            ptr_int_var = (int *)(long_result + 0x3530);
            int_result = *ptr_int_var;
            *ptr_int_var = *ptr_int_var + 0x7fffffff;
            UNLOCK();
            long_result = long_result;
          } while (int_result == 1);
        }
      }
LAB_18006cfb1:
      pallocation_size = (longlong *)handleIdentifier[0xc];
      long_result = *(longlong *)
               (*(longlong *)
                 (pallocation_size[3] +
                 (((uint_result & 0xffffffffffffffe0) - **(longlong **)(pallocation_size[3] + pallocation_size[1] * 8) >> 5)
                  + pallocation_size[1] & *pallocation_size - 1U) * 8) + 8);
    }
    else if (long_result == 0) goto LAB_18006cfb1;
    InitializeSystemModule33((ulonglong)((uint)uint_result & 0x1f) * 0x1a8 + long_result);
  }
  long_result = handleIdentifier[8];
  if ((long_result != 0) && ((uint_result != uint_result || ((uint_result & 0x1f) != 0)))) {
    long_result = handleIdentifier[10];
    LOCK();
    ptr_int_var = (int *)(long_result + 0x3530);
    int_result = *ptr_int_var;
    *ptr_int_var = *ptr_int_var + -0x80000000;
    UNLOCK();
    if (int_result == 0) {
      long_result = *(longlong *)(long_result + 0x28);
      do {
        *(longlong *)(long_result + 0x3538) = long_result;
        *(uint32_t *)(long_result + 0x3530) = 1;
        pallocation_size = (longlong *)(long_result + 0x28);
        LOCK();
        long_result = *pallocation_size;
        system_comparison_flag = long_result == long_result;
        if (system_comparison_flag) {
          *pallocation_size = long_result;
          long_result = long_result;
        }
        UNLOCK();
        if (system_comparison_flag) break;
        LOCK();
        ptr_int_var = (int *)(long_result + 0x3530);
        int_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + 0x7fffffff;
        UNLOCK();
        long_result = long_result;
      } while (int_result == 1);
    }
  }
  if (handleIdentifier[0xc] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &g_system_global_variable8;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * SetupSystemServices(longlong *handleIdentifier)

{
  longlong *long_ptr;
  uint *node_root;
  ulonglong *ptr_uint_var;
  ulonglong uint_result;
  uint uint_result;
  ulonglong uint_result;
  ulonglong *node_previous;
  uint64_t *node_next;
  longlong long_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  uint uint_result;
  uint64_t *ptr_uint_var;
  bool thread_operation_flag;
  bool node_validation_flag;

  uint_result = GetCurrentThreadId();
  uint_result = (uint_result >> SYSTEM_DATA_COMPARE_SIZE ^ uint_result) * -0x7a143595;
  uint_result = (uint_result >> 0xd ^ uint_result) * -0x3d4d51cb;
  uint_result = (ulonglong)(uint_result >> SYSTEM_DATA_COMPARE_SIZE ^ uint_result);
  node_previous = (ulonglong *)handleIdentifier[6];
  for (ptr_uint_var = node_previous; uint_result = uint_result, ptr_uint_var != (ulonglong *)0x0; ptr_uint_var = (ulonglong *)ptr_uint_var[2])
  {
    while( true ) {
      uint_result = uint_result & *ptr_uint_var - 1;
      uint_result = *(uint *)(uint_result * SYSTEM_DATA_COMPARE_SIZE + ptr_uint_var[1]);
      if (uint_result == uint_result) {
        ptr_uint_var = *(uint64_t **)(ptr_uint_var[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE);
        if (ptr_uint_var == node_previous) {
          return ptr_uint_var;
        }
        do {
          uint_result = uint_result & *node_previous - 1;
          if (*(int *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
            node_root = (uint *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
            LOCK();
            node_validation_flag = *node_root == 0;
            if (node_validation_flag) {
              *node_root = uint_result;
            }
            UNLOCK();
            if (node_validation_flag) {
              *(uint64_t **)(node_previous[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = ptr_uint_var;
              return ptr_uint_var;
            }
          }
          uint_result = uint_result + 1;
        } while( true );
      }
      if (uint_result == 0) break;
      uint_result = uint_result + 1;
    }
  }
  LOCK();
  long_ptr = handleIdentifier + 7;
  long_result = *long_ptr;
  *long_ptr = *long_ptr + 1;
  UNLOCK();
  uint_result = long_result + 1;
  ptr_uint_var = (uint64_t *)0x0;
  while( true ) {
    if (*node_previous >> 1 <= uint_result) {
      LOCK();
      node_root = (uint *)(handleIdentifier + 0x4b);
      uint_result = *node_root;
      *node_root = *node_root | 1;
      UNLOCK();
      if ((uint_result & 1) == 0) {
        ptr_uint_var = (ulonglong *)handleIdentifier[6];
        node_previous = ptr_uint_var;
        uint_result = *ptr_uint_var;
        if (*ptr_uint_var >> 1 <= uint_result) {
          do {
            uint_result = uint_result;
            uint_result = uint_result * 2;
          } while ((uint_result & 0x7fffffffffffffff) <= uint_result);
          node_previous = (ulonglong *)AllocateSystemResource(systemMemoryPool,uint_result * SYSTEM_NODE_HEADER_SIZE + 0x1f,10);
          if (node_previous == (ulonglong *)0x0) {
            LOCK();
            handleIdentifier[7] = handleIdentifier[7] + -1;
            UNLOCK();
            *(uint32_t *)(handleIdentifier + 0x4b) = 0;
            return (uint64_t *)0x0;
          }
          *node_previous = uint_result;
          node_previous[1] = (ulonglong)(-(int)(node_previous + 3) & 7) + (longlong)(node_previous + 3);
          ptr_uint_var = ptr_uint_var;
          for (; uint_result != 0; uint_result = uint_result - 1) {
            *(uint64_t *)((longlong)ptr_uint_var + node_previous[1] + 8) = 0;
            *(uint32_t *)((longlong)ptr_uint_var + node_previous[1]) = 0;
            ptr_uint_var = ptr_uint_var + 2;
          }
          node_previous[2] = (ulonglong)ptr_uint_var;
          handleIdentifier[6] = (longlong)node_previous;
        }
        *(uint32_t *)(handleIdentifier + 0x4b) = 0;
      }
    }
    if (uint_result < (*node_previous >> 2) + (*node_previous >> 1)) break;
    node_previous = (ulonglong *)handleIdentifier[6];
  }
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  while (ptr_uint_var != (uint64_t *)0x0) {
    if ((*(char *)(ptr_uint_var + 2) != '\0') && (*(char *)(ptr_uint_var + 9) == '\0')) {
      node_validation_flag = true;
      LOCK();
      thread_operation_flag = *(char *)(ptr_uint_var + 2) == '\x01';
      if (thread_operation_flag) {
        *(char *)(ptr_uint_var + 2) = '\0';
      }
      UNLOCK();
      if (thread_operation_flag) goto LAB_18006d3bb;
    }
    long_ptr = ptr_uint_var + 1;
    ptr_uint_var = (uint64_t *)(*long_ptr + -8);
    if (*long_ptr == 0) {
      ptr_uint_var = ptr_uint_var;
    }
  }
  node_validation_flag = false;
  node_next = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x68,10);
  ptr_uint_var = ptr_uint_var;
  if (node_next != (uint64_t *)0x0) {
    node_next[1] = 0;
    *(uint8_t *)(node_next + 2) = 0;
    node_next[3] = 0;
    *node_next = &g_system_global_variable8;
    node_next[4] = 0;
    node_next[5] = 0;
    node_next[6] = 0;
    node_next[7] = 0;
    node_next[8] = 0;
    *(uint8_t *)(node_next + 9) = 0;
    node_next[10] = handleIdentifier;
    *node_next = &g_system_global_variable8;
    node_next[0xb] = SYSTEM_NODE_HEADER_SIZE;
    node_next[0xc] = 0;
    InitializeShaderSystem(node_next);
    LOCK();
    *(int *)(handleIdentifier + 1) = (int)handleIdentifier[1] + 1;
    UNLOCK();
    long_result = *handleIdentifier;
    do {
      ptr_uint_var = (uint64_t *)(long_result + 8);
      if (long_result == 0) {
        ptr_uint_var = ptr_uint_var;
      }
      node_next[1] = ptr_uint_var;
      LOCK();
      long_result = *handleIdentifier;
      thread_operation_flag = long_result == long_result;
      if (thread_operation_flag) {
        *handleIdentifier = (longlong)node_next;
        long_result = long_result;
      }
      UNLOCK();
      long_result = long_result;
      ptr_uint_var = node_next;
    } while (!thread_operation_flag);
  }
LAB_18006d3bb:
  if (ptr_uint_var == (uint64_t *)0x0) {
    LOCK();
    handleIdentifier[7] = handleIdentifier[7] + -1;
    UNLOCK();
    return (uint64_t *)0x0;
  }
  if (node_validation_flag) {
    LOCK();
    handleIdentifier[7] = handleIdentifier[7] + -1;
    UNLOCK();
  }
  do {
    uint_result = uint_result & *node_previous - 1;
    if (*(int *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE) == 0) {
      node_root = (uint *)(node_previous[1] + uint_result * SYSTEM_DATA_COMPARE_SIZE);
      LOCK();
      node_validation_flag = *node_root == 0;
      if (node_validation_flag) {
        *node_root = uint_result;
      }
      UNLOCK();
      if (node_validation_flag) {
        *(uint64_t **)(node_previous[1] + 8 + uint_result * SYSTEM_DATA_COMPARE_SIZE) = ptr_uint_var;
        return ptr_uint_var;
      }
    }
    uint_result = uint_result + 1;
  } while( true );
}

uint64_t InitializeSystemModule27(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeSystemModule24();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x68);
  }
  return handleIdentifier;
}

uint64_t InitializeAudioSystem(ulonglong *handleIdentifier,uint64_t resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong *node_root;
  longlong long_result;
  longlong long_result;
  char char_var;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;

  uint_result = 0;
  uint_result = *handleIdentifier;
  uint_result = uint_result;
  uint_result = uint_result;
  uint_result = uint_result;
  do {
    uint_result = uint_result;
    uint_result = uint_result;
    if (uint_result == 0) break;
    uint_result = *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE) - *(longlong *)(uint_result + 0x28);
    if ((ulonglong)(*(longlong *)(uint_result + 0x28) - *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE)) < 0x8000000000000001)
    {
      uint_result = uint_result;
    }
    if ((uint_result != 0) && (uint_result = uint_result + 1, uint_result = uint_result, uint_result = uint_result, uint_result <= uint_result)) {
      uint_result = uint_result;
      uint_result = uint_result;
    }
    long_ptr = (longlong *)(uint_result + 8);
    uint_result = *long_ptr - 8;
    if (*long_ptr == 0) {
      uint_result = uint_result;
    }
    uint_result = uint_result;
    uint_result = uint_result;
  } while (uint_result < 3);
  if (uint_result != 0) {
    char_var = InitializeSystemModule3(uint_result,resourceIdentifier,uint_result,uint_result,INVALID_HANDLE_VALUE);
    if (char_var != '\0') {
      return 1;
    }
    uint_result = *handleIdentifier;
    while (uint_result != 0) {
      if (uint_result != uint_result) {
        if (*(char *)(uint_result + 0x48) == '\0') {
          char_var = InitializeSystemDataNode15(uint_result,resourceIdentifier);
        }
        else {
          if (0x8000000000000000 <
              (ulonglong)
              ((*(longlong *)(uint_result + 0x30) - *(longlong *)(uint_result + 0x38)) -
              *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE))) {
            LOCK();
            long_ptr = (longlong *)(uint_result + 0x30);
            long_result = *long_ptr;
            *long_ptr = *long_ptr + 1;
            UNLOCK();
            if (0x8000000000000000 <
                (ulonglong)((long_result - *(longlong *)(uint_result + SYSTEM_NODE_HEADER_SIZE)) - *(longlong *)(uint_result + 0x38))) {
              LOCK();
              node_root = (ulonglong *)(uint_result + 0x28);
              uint_result = *node_root;
              *node_root = *node_root + 1;
              UNLOCK();
              long_ptr = *(longlong **)(uint_result + 0x58);
              long_result = *(longlong *)
                       (long_ptr[2] + 8 +
                       (((uint_result & 0xffffffffffffffe0) - *(longlong *)(long_ptr[2] + long_ptr[1] * SYSTEM_DATA_COMPARE_SIZE)
                        >> 5) + long_ptr[1] & *long_ptr - 1U) * SYSTEM_DATA_COMPARE_SIZE);
              uint_result = (ulonglong)((uint)uint_result & 0x1f);
              long_result = uint_result * 0x1a8 + long_result;
              InitializeAudioSystem(resourceIdentifier,long_result);
              InitializeSystemModule33(long_result);
              *(uint8_t *)((long_result - uint_result) + 0x352f) = 1;
              char_var = '\x01';
              goto LAB_18006d67d;
            }
            LOCK();
            *(longlong *)(uint_result + 0x38) = *(longlong *)(uint_result + 0x38) + 1;
            UNLOCK();
          }
          char_var = '\0';
        }
LAB_18006d67d:
        if (char_var != '\0') {
          return 1;
        }
      }
      long_ptr = (longlong *)(uint_result + 8);
      uint_result = *long_ptr - 8;
      if (*long_ptr == 0) {
        uint_result = uint_result;
      }
    }
  }
  return 0;
}

uint64_t InitializeShaderSystem(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  ulonglong uint_result;
  longlong *long_ptr;
  char char_var;
  ulonglong uint_result;
  ulonglong *ptr_uint_var;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  if ((uint_result & 0x1f) != 0) {
    InitializeSystemModule45((ulonglong)((uint)uint_result & 0x1f) * 0x1a8 + *(longlong *)(handleIdentifier + 0x40));
LAB_18006d7fb:
    *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = uint_result + 1;
    return 1;
  }
  if ((0x8000000000000000 < (*(longlong *)(handleIdentifier + 0x28) - uint_result) - SYSTEM_NODE_HEADER_SIZE) &&
     (long_ptr = *(longlong **)(handleIdentifier + 0x60), long_ptr != (longlong *)0x0)) {
    uint_result = *long_ptr - 1U & long_ptr[1] + 1U;
    ptr_uint_var = *(ulonglong **)(long_ptr[3] + uint_result * 8);
    if ((*ptr_uint_var == 1) || (ptr_uint_var[1] == 0)) {
      *ptr_uint_var = uint_result;
      long_ptr[1] = uint_result;
    }
    else {
      char_var = InitializeShaderSystem(handleIdentifier);
      if (char_var == '\0') {
        return 0;
      }
      long_ptr = *(longlong **)(handleIdentifier + 0x60);
      uint_result = *long_ptr - 1U & long_ptr[1] + 1U;
      ptr_uint_var = *(ulonglong **)(long_ptr[3] + uint_result * 8);
      *ptr_uint_var = uint_result;
      long_ptr[1] = uint_result;
    }
    uint_result = InitializeStringManager(*(uint64_t *)(handleIdentifier + 0x50));
    if (uint_result != 0) {
      *(uint64_t *)(uint_result + 0x3508) = 0;
      InitializeSystemModule45(uint_result,resourceIdentifier,systemConfig,systemFlags,uint_result);
      ptr_uint_var[1] = uint_result;
      *(ulonglong *)(handleIdentifier + 0x40) = uint_result;
      goto LAB_18006d7fb;
    }
    long_ptr = *(longlong **)(handleIdentifier + 0x60);
    long_ptr[1] = *long_ptr - 1U & long_ptr[1] - 1U;
    ptr_uint_var[1] = 0;
  }
  return 0;
}

uint64_t InitializeSystemModule3(longlong handleIdentifier,uint64_t resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong *node_root;
  longlong long_result;
  ulonglong uint_result;
  longlong allocation_size;
  longlong long_result;
  uint64_t uint_result;
  ulonglong uint_result;

  if (*(char *)(handleIdentifier + 0x48) == '\0') {
    uint_result = InitializeSystemDataNode15();
  }
  else {
    if (0x8000000000000000 <
        (ulonglong)
        ((*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x38)) -
        *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE))) {
      LOCK();
      long_ptr = (longlong *)(handleIdentifier + 0x30);
      long_result = *long_ptr;
      *long_ptr = *long_ptr + 1;
      UNLOCK();
      if (0x8000000000000000 <
          (ulonglong)((long_result - *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) - *(longlong *)(handleIdentifier + 0x38))) {
        LOCK();
        node_root = (ulonglong *)(handleIdentifier + 0x28);
        uint_result = *node_root;
        *node_root = *node_root + 1;
        UNLOCK();
        long_ptr = *(longlong **)(handleIdentifier + 0x58);
        allocation_size = long_ptr[2];
        long_result = *(longlong *)
                 (allocation_size + 8 +
                 (((uint_result & 0xffffffffffffffe0) - *(longlong *)(allocation_size + long_ptr[1] * SYSTEM_DATA_COMPARE_SIZE) >> 5) +
                  long_ptr[1] & *long_ptr - 1U) * SYSTEM_DATA_COMPARE_SIZE);
        uint_result = (ulonglong)((uint)uint_result & 0x1f);
        long_result = uint_result * 0x1a8 + long_result;
        InitializeAudioSystem(resourceIdentifier,long_result,long_ptr,allocation_size,INVALID_HANDLE_VALUE,long_result,uint_result);
        InitializeSystemModule33(long_result);
        *(uint8_t *)((long_result - uint_result) + 0x352f) = 1;
        return 1;
      }
      LOCK();
      *(longlong *)(handleIdentifier + 0x38) = *(longlong *)(handleIdentifier + 0x38) + 1;
      UNLOCK();
    }
    uint_result = 0;
  }
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong InitializeStringManager(longlong handleIdentifier)

{
  ulonglong *ptr_uint_var;
  uint *node_root;
  uint uint_result;
  ulonglong uint_result;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  bool comparison_result_flag;

  if (*(ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) < *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) {
    LOCK();
    ptr_uint_var = (ulonglong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    uint_result = *ptr_uint_var;
    *ptr_uint_var = *ptr_uint_var + 1;
    UNLOCK();
    if ((uint_result < *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE)) &&
       (long_result = uint_result * 0x3548 + *(longlong *)(handleIdentifier + 0x18), long_result != 0)) {
      return long_result;
    }
  }
  long_result = *(longlong *)(handleIdentifier + 0x28);
LAB_18006d957:
  do {
    long_result = long_result;
    if (long_result == 0) {
LAB_18006d9f6:
      long_result = AllocateSystemResource(systemMemoryPool,0x3548,10);
      if (long_result == 0) {
        return 0;
      }
      *(uint64_t *)(long_result + 0x3500) = 0;
      *(uint64_t *)(long_result + 0x3508) = 0;
      *(uint32_t *)(long_result + 0x3530) = 0;
      *(uint64_t *)(long_result + 0x3538) = 0;
      *(uint16_t *)(long_result + 0x3540) = SYSTEM_DATA_COMPARE_SIZE0;
      return long_result;
    }
    node_root = (uint *)(long_result + 0x3530);
    uint_result = *node_root;
    if ((uint_result & 0x7fffffff) == 0) {
LAB_18006d9d7:
      long_result = *(longlong *)(handleIdentifier + 0x28);
      goto LAB_18006d957;
    }
    LOCK();
    uint_result = *node_root;
    if (uint_result == uint_result) {
      *node_root = uint_result + 1;
    }
    UNLOCK();
    if (uint_result != uint_result) goto LAB_18006d9d7;
    LOCK();
    long_result = *(longlong *)(handleIdentifier + 0x28);
    comparison_result_flag = long_result == long_result;
    if (comparison_result_flag) {
      *(longlong *)(handleIdentifier + 0x28) = *(longlong *)(long_result + 0x3538);
      long_result = long_result;
    }
    UNLOCK();
    if (comparison_result_flag) {
      LOCK();
      *node_root = *node_root - 2;
      UNLOCK();
      if (long_result != 0) {
        return long_result;
      }
      goto LAB_18006d9f6;
    }
    LOCK();
    uint_result = *node_root;
    *node_root = *node_root - 1;
    UNLOCK();
    if (uint_result == 0x80000001) {
      long_result = *(longlong *)(handleIdentifier + 0x28);
      do {
        *(longlong *)(long_result + 0x3538) = long_result;
        *node_root = 1;
        LOCK();
        long_result = *(longlong *)(handleIdentifier + 0x28);
        comparison_result_flag = long_result == long_result;
        if (comparison_result_flag) {
          *(longlong *)(handleIdentifier + 0x28) = long_result;
          long_result = long_result;
        }
        UNLOCK();
        if (comparison_result_flag) break;
        LOCK();
        uint_result = *node_root;
        *node_root = *node_root + 0x7fffffff;
        UNLOCK();
        long_result = long_result;
      } while (uint_result == 1);
    }
  } while( true );
}
// void ConfigureSystemHandles(longlong *handleIdentifier)

void ConfigureSystemHandles(longlong *handleIdentifier)

{
  InitializeSystemModule33((ulonglong)(*(uint *)(handleIdentifier + 1) & 0x1f) * 0x1a8 + *handleIdentifier);
  *(uint8_t *)((*handleIdentifier - (ulonglong)(*(uint *)(handleIdentifier + 1) & 0x1f)) + 0x352f) = 1;
  return;
}

ulonglong InitializeSystemDataNode15(longlong handleIdentifier,uint64_t resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong *node_root;
  uint *ptr_uint_var;
  uint uint_result;
  longlong allocation_size;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;
  bool node_initialization_flag;

  uint_result = (*(longlong *)(handleIdentifier + 0x30) - *(longlong *)(handleIdentifier + 0x38)) -
          *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  if (0x8000000000000000 < uint_result) {
    LOCK();
    long_ptr = (longlong *)(handleIdentifier + 0x30);
    allocation_size = *long_ptr;
    *long_ptr = *long_ptr + 1;
    UNLOCK();
    uint_result = *(ulonglong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
    if (0x8000000000000000 < (allocation_size - uint_result) - *(longlong *)(handleIdentifier + 0x38)) {
      LOCK();
      node_root = (ulonglong *)(handleIdentifier + 0x28);
      uint_result = *node_root;
      *node_root = *node_root + 1;
      UNLOCK();
      long_ptr = *(longlong **)(handleIdentifier + 0x60);
      uint_result = (uint_result & 0xffffffffffffffe0) - **(longlong **)(long_ptr[3] + long_ptr[1] * 8) >> 5;
      allocation_size = *(longlong *)(long_ptr[3] + (long_ptr[1] + uint_result & *long_ptr - 1U) * 8);
      uint_result = *(ulonglong *)(allocation_size + 8);
      long_result = (ulonglong)((uint)uint_result & 0x1f) * 0x1a8 + uint_result;
      long_result = *(longlong *)(handleIdentifier + 0x50);
      InitializeAudioSystem(resourceIdentifier,long_result,uint_result,long_ptr,INVALID_HANDLE_VALUE,uint_result,uint_result,allocation_size);
      InitializeSystemModule33(long_result);
      LOCK();
      node_root = (ulonglong *)(uint_result + 0x3508);
      uint_result = *node_root;
      *node_root = *node_root + 1;
      UNLOCK();
      if (uint_result == 0x1f) {
        *(uint64_t *)(allocation_size + 8) = 0;
        LOCK();
        ptr_uint_var = (uint *)(uint_result + 0x3530);
        uint_result = *ptr_uint_var;
        *ptr_uint_var = *ptr_uint_var + 0x80000000;
        UNLOCK();
        uint_result = (ulonglong)uint_result;
        if (uint_result == 0) {
          uint_result = *(ulonglong *)(long_result + 0x28);
          do {
            *(ulonglong *)(uint_result + 0x3538) = uint_result;
            *(uint32_t *)(uint_result + 0x3530) = 1;
            node_root = (ulonglong *)(long_result + 0x28);
            LOCK();
            uint_result = *node_root;
            node_initialization_flag = uint_result == uint_result;
            if (node_initialization_flag) {
              *node_root = uint_result;
              uint_result = uint_result;
            }
            UNLOCK();
            uint_result = uint_result;
            if (node_initialization_flag) break;
            LOCK();
            ptr_uint_var = (uint *)(uint_result + 0x3530);
            uint_result = *ptr_uint_var;
            uint_result = (ulonglong)uint_result;
            *ptr_uint_var = *ptr_uint_var + 0x7fffffff;
            UNLOCK();
            uint_result = uint_result;
          } while (uint_result == 1);
        }
      }
      return CONCAT71((int7)(uint_result >> 8),1);
    }
    LOCK();
    *(longlong *)(handleIdentifier + 0x38) = *(longlong *)(handleIdentifier + 0x38) + 1;
    UNLOCK();
  }
  return uint_result & 0xffffffffffffff00;
}
// void InitializeSystemModule42(longlong *handleIdentifier)

void InitializeSystemModule42(longlong *handleIdentifier)

{
  longlong *long_ptr;
  int *ptr_int_var;
  int compare_result;
  longlong long_result;
  longlong allocation_size;
  longlong long_result;
  longlong long_result;
  bool bool_var;

  InitializeSystemModule33((ulonglong)(*(uint *)(handleIdentifier + 1) & 0x1f) * 0x1a8 + *handleIdentifier);
  LOCK();
  long_ptr = (longlong *)(*handleIdentifier + 0x3508);
  long_result = *long_ptr;
  *long_ptr = *long_ptr + 1;
  UNLOCK();
  if (long_result == 0x1f) {
    *(uint64_t *)(handleIdentifier[2] + 8) = 0;
    long_result = *handleIdentifier;
    allocation_size = handleIdentifier[3];
    LOCK();
    ptr_int_var = (int *)(long_result + 0x3530);
    compare_result = *ptr_int_var;
    *ptr_int_var = *ptr_int_var + -0x80000000;
    UNLOCK();
    if (compare_result == 0) {
      long_result = *(longlong *)(allocation_size + 0x28);
      do {
        *(longlong *)(long_result + 0x3538) = long_result;
        *(uint32_t *)(long_result + 0x3530) = 1;
        long_ptr = (longlong *)(allocation_size + 0x28);
        LOCK();
        long_result = *long_ptr;
        bool_var = long_result == long_result;
        if (bool_var) {
          *long_ptr = long_result;
          long_result = long_result;
        }
        UNLOCK();
        if (bool_var) {
          return;
        }
        LOCK();
        ptr_int_var = (int *)(long_result + 0x3530);
        compare_result = *ptr_int_var;
        *ptr_int_var = *ptr_int_var + 0x7fffffff;
        UNLOCK();
        long_result = long_result;
      } while (compare_result == 1);
    }
  }
  return;
}

longlong InitializeAudioSystem(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;
  void *node_root;

  *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = *(uint32_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  node_root = &g_system_data_variable3;
  if (*(void **)(resourceIdentifier + 8) != (void *)0x0) {
    node_root = *(void **)(resourceIdentifier + 8);
  }
  strcpy_s(*(uint64_t *)(handleIdentifier + 8),SYSTEM_DATA_COMPARE_SIZE0,node_root);
  *(uint64_t *)(handleIdentifier + 0x118) = *(uint64_t *)(resourceIdentifier + 0x118);
  long_result = handleIdentifier + 0x148;
  *(uint64_t *)(handleIdentifier + 0x120) = *(uint64_t *)(resourceIdentifier + 0x120);
  *(uint64_t *)(handleIdentifier + 0x128) = *(uint64_t *)(resourceIdentifier + 0x128);
  *(uint64_t *)(handleIdentifier + 0x130) = *(uint64_t *)(resourceIdentifier + 0x130);
  *(uint64_t *)(handleIdentifier + 0x138) = *(uint64_t *)(resourceIdentifier + 0x138);
  *(uint8_t *)(handleIdentifier + 0x140) = *(uint8_t *)(resourceIdentifier + 0x140);
  if (long_result != resourceIdentifier + 0x148) {
    if (*(code **)(handleIdentifier + 0x158) != (code *)0x0) {
      (**(code **)(handleIdentifier + 0x158))(long_result,0,0);
    }
    InitializeSystemComponents(long_result,resourceIdentifier + 0x148);
  }
  long_result = handleIdentifier + 0x168;
  if (long_result != resourceIdentifier + 0x168) {
    if (*(code **)(handleIdentifier + 0x178) != (code *)0x0) {
      (**(code **)(handleIdentifier + 0x178))(long_result,0,0);
    }
    InitializeSystemComponents(long_result,resourceIdentifier + 0x168);
  }
  *(uint64_t *)(handleIdentifier + 0x188) = *(uint64_t *)(resourceIdentifier + 0x188);
  *(uint64_t *)(handleIdentifier + 400) = *(uint64_t *)(resourceIdentifier + 400);
  *(uint64_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET8) = *(uint64_t *)(resourceIdentifier + NODE_INITIALIZED_OFFSET8);
  *(uint64_t *)(handleIdentifier + 0x1a0) = *(uint64_t *)(resourceIdentifier + 0x1a0);
  return handleIdentifier;
}

longlong *
InitializeFontSystem(longlong *handleIdentifier,uint64_t *resourceIdentifier,uint64_t *systemConfig,uint64_t *systemFlags)

{
  uint64_t *ptr_uint_var;
  code *ptr_char_var;
  uint64_t *ptr_uint_var;
  void *ptr_uint_var;

  *handleIdentifier = (longlong)systemFlags;
  if (resourceIdentifier != systemConfig) {
    ptr_uint_var = resourceIdentifier + 0x2b;
    do {
      *systemFlags = &globalSystemPointerData;
      systemFlags[1] = 0;
      *(uint32_t *)(systemFlags + 2) = 0;
      *systemFlags = &g_system_global_variable8;
      systemFlags[1] = systemFlags + 3;
      *(uint32_t *)(systemFlags + 2) = 0;
      *(uint8_t *)(systemFlags + 3) = 0;
      *(uint32_t *)(systemFlags + 2) = *(uint32_t *)(ptr_uint_var + -0x29);
      ptr_uint_var = &g_system_data_variable3;
      if ((void *)ptr_uint_var[-0x2a] != (void *)0x0) {
        ptr_uint_var = (void *)ptr_uint_var[-0x2a];
      }
      strcpy_s(systemFlags[1],SYSTEM_DATA_COMPARE_SIZE0,ptr_uint_var);
      systemFlags[0x23] = ptr_uint_var[-8];
      systemFlags[0x24] = ptr_uint_var[-7];
      systemFlags[0x25] = ptr_uint_var[-6];
      systemFlags[0x26] = ptr_uint_var[-5];
      systemFlags[0x27] = ptr_uint_var[-4];
      *(uint8_t *)(systemFlags + 0x28) = *(uint8_t *)(ptr_uint_var + -3);
      systemFlags[0x2b] = 0;
      systemFlags[0x2c] = _guard_check_icall;
      if (systemFlags + 0x29 != ptr_uint_var + -2) {
        ptr_char_var = (code *)*ptr_uint_var;
        if (ptr_char_var != (code *)0x0) {
          (*ptr_char_var)(systemFlags + 0x29,ptr_uint_var + -2,2);
          ptr_char_var = (code *)*ptr_uint_var;
        }
        systemFlags[0x2b] = ptr_char_var;
        systemFlags[0x2c] = ptr_uint_var[1];
        *ptr_uint_var = 0;
        ptr_uint_var[1] = _guard_check_icall;
      }
      systemFlags[0x2f] = 0;
      systemFlags[0x30] = _guard_check_icall;
      if (systemFlags + 0x2d != ptr_uint_var + 2) {
        ptr_char_var = (code *)ptr_uint_var[4];
        if (ptr_char_var != (code *)0x0) {
          (*ptr_char_var)(systemFlags + 0x2d,ptr_uint_var + 2,2);
          ptr_char_var = (code *)ptr_uint_var[4];
        }
        systemFlags[0x2f] = ptr_char_var;
        systemFlags[0x30] = ptr_uint_var[5];
        ptr_uint_var[4] = 0;
        ptr_uint_var[5] = _guard_check_icall;
      }
      systemFlags[0x31] = ptr_uint_var[6];
      systemFlags[0x32] = ptr_uint_var[7];
      systemFlags[0x33] = ptr_uint_var[8];
      systemFlags[0x34] = ptr_uint_var[9];
      *handleIdentifier = *handleIdentifier + 0x1a8;
      systemFlags = (uint64_t *)*handleIdentifier;
      ptr_uint_var = ptr_uint_var + 10;
      ptr_uint_var = ptr_uint_var + 0x35;
    } while (ptr_uint_var != systemConfig);
  }
  return handleIdentifier;
}

longlong * InitializeSystemDataNode31(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;
  longlong *long_ptr;
  longlong *long_ptr;
  ulonglong uint_result;
  longlong *pallocation_size;

  pallocation_size = *(longlong **)(handleIdentifier + 0x318);
  uint_result = resourceIdentifier + 0xfU & 0xfffffffffffffff0;
  long_ptr = (longlong *)0x0;
  long_ptr = (longlong *)pallocation_size[3];
  if (long_ptr != (longlong *)0x0) {
    do {
      if ((((char)long_ptr[4] == '\0') && (uint_result <= (ulonglong)long_ptr[1])) &&
         ((long_ptr == (longlong *)0x0 || ((ulonglong)long_ptr[1] < (ulonglong)long_ptr[1])))) {
        long_ptr = long_ptr;
      }
      long_ptr = (longlong *)long_ptr[2];
    } while (long_ptr != (longlong *)0x0);
    if (long_ptr != (longlong *)0x0) {
      if (uint_result < (ulonglong)long_ptr[1]) {
        long_ptr = (longlong *)AllocateSystemMemoryEx(pallocation_size + 4);
        *(uint8_t *)(long_ptr + 4) = 0;
        *long_ptr = *long_ptr + uint_result;
        long_ptr[1] = long_ptr[1] - uint_result;
        long_result = long_ptr[2];
        long_ptr[2] = long_result;
        if (long_result != 0) {
          *(longlong **)(long_result + 0x18) = long_ptr;
        }
        long_ptr[2] = (longlong)long_ptr;
        long_ptr[3] = (longlong)long_ptr;
        long_ptr[1] = uint_result;
      }
      *(uint8_t *)(long_ptr + 4) = 1;
      *pallocation_size = *pallocation_size + uint_result;
      pallocation_size[2] = pallocation_size[2] - uint_result;
      return long_ptr;
    }
  }
  return (longlong *)0x0;
}

longlong InitializeConfigSystem(longlong handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeFontSystem();
  _Mtx_destroy_in_situ();
  _Cnd_destroy_in_situ();
  InitializeSystemDataNode23(handleIdentifier + 200);
  InitializeInputManagerSystem(handleIdentifier);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x408);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_88_0(void)
void SystemFunction_88_0(void)

{
  longlong long_result;

  long_result = AllocateSystemResource(systemMemoryPool,0x45ee8,10);
  if (long_result == 0) {
    return;
  }
  *(uint64_t *)(long_result + 0x3500) = 0;
  *(uint64_t *)(long_result + 0x3508) = 0;
  *(uint32_t *)(long_result + 0x3530) = 0;
  *(uint64_t *)(long_result + 0x3538) = 0;
  *(uint16_t *)(long_result + 0x3540) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x6a48) = 0;
  *(uint64_t *)(long_result + 0x6a50) = 0;
  *(uint32_t *)(long_result + 0x6a78) = 0;
  *(uint64_t *)(long_result + 0x6a80) = 0;
  *(uint16_t *)(long_result + 0x6a88) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x9f90) = 0;
  *(uint64_t *)(long_result + 0x9f98) = 0;
  *(uint32_t *)(long_result + 0x9fc0) = 0;
  *(uint64_t *)(long_result + 0x9fc8) = 0;
  *(uint16_t *)(long_result + 0x9fd0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0xd4d8) = 0;
  *(uint64_t *)(long_result + 0xd4e0) = 0;
  *(uint32_t *)(long_result + 0xd508) = 0;
  *(uint64_t *)(long_result + 0xd510) = 0;
  *(uint16_t *)(long_result + 0xd518) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZEa20) = 0;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZEa28) = 0;
  *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZEa50) = 0;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZEa58) = 0;
  *(uint16_t *)(long_result + SYSTEM_DATA_COMPARE_SIZEa60) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x13f68) = 0;
  *(uint64_t *)(long_result + 0x13f70) = 0;
  *(uint32_t *)(long_result + 0x13f98) = 0;
  *(uint64_t *)(long_result + 0x13fa0) = 0;
  *(uint16_t *)(long_result + 0x13fa8) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x174b0) = 0;
  *(uint64_t *)(long_result + 0x174b8) = 0;
  *(uint32_t *)(long_result + 0x174e0) = 0;
  *(uint64_t *)(long_result + 0x174e8) = 0;
  *(uint16_t *)(long_result + 0x174f0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x1a9f8) = 0;
  *(uint64_t *)(long_result + 0x1aa00) = 0;
  *(uint32_t *)(long_result + 0x1aa28) = 0;
  *(uint64_t *)(long_result + 0x1aa30) = 0;
  *(uint16_t *)(long_result + 0x1aa38) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x1df40) = 0;
  *(uint64_t *)(long_result + 0x1df48) = 0;
  *(uint32_t *)(long_result + 0x1df70) = 0;
  *(uint64_t *)(long_result + 0x1df78) = 0;
  *(uint16_t *)(long_result + 0x1df80) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x21488) = 0;
  *(uint64_t *)(long_result + 0x21490) = 0;
  *(uint32_t *)(long_result + 0x214b8) = 0;
  *(uint64_t *)(long_result + 0x214c0) = 0;
  *(uint16_t *)(long_result + 0x214c8) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x249d0) = 0;
  *(uint64_t *)(long_result + 0x249d8) = 0;
  *(uint32_t *)(long_result + 0x24a00) = 0;
  *(uint64_t *)(long_result + 0x24a08) = 0;
  *(uint16_t *)(long_result + 0x24a10) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x27f18) = 0;
  *(uint64_t *)(long_result + 0x27f20) = 0;
  *(uint32_t *)(long_result + 0x27f48) = 0;
  *(uint64_t *)(long_result + 0x27f50) = 0;
  *(uint16_t *)(long_result + 0x27f58) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x2b460) = 0;
  *(uint64_t *)(long_result + 0x2b468) = 0;
  *(uint32_t *)(long_result + 0x2b490) = 0;
  *(uint64_t *)(long_result + 0x2b498) = 0;
  *(uint16_t *)(long_result + 0x2b4a0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x2e9a8) = 0;
  *(uint64_t *)(long_result + 0x2e9b0) = 0;
  *(uint32_t *)(long_result + 0x2e9d8) = 0;
  *(uint64_t *)(long_result + 0x2e9e0) = 0;
  *(uint16_t *)(long_result + 0x2e9e8) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x31ef0) = 0;
  *(uint64_t *)(long_result + 0x31ef8) = 0;
  *(uint32_t *)(long_result + 0x31f20) = 0;
  *(uint64_t *)(long_result + 0x31f28) = 0;
  *(uint16_t *)(long_result + 0x31f30) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x35438) = 0;
  *(uint64_t *)(long_result + 0x35440) = 0;
  *(uint32_t *)(long_result + 0x35468) = 0;
  *(uint64_t *)(long_result + 0x35470) = 0;
  *(uint16_t *)(long_result + 0x35478) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x38980) = 0;
  *(uint64_t *)(long_result + 0x38988) = 0;
  *(uint32_t *)(long_result + 0x389b0) = 0;
  *(uint64_t *)(long_result + 0x389b8) = 0;
  *(uint16_t *)(long_result + 0x389c0) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x3bec8) = 0;
  *(uint64_t *)(long_result + 0x3bed0) = 0;
  *(uint32_t *)(long_result + 0x3bef8) = 0;
  *(uint64_t *)(long_result + 0x3bf00) = 0;
  *(uint16_t *)(long_result + 0x3bf08) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x3f410) = 0;
  *(uint64_t *)(long_result + 0x3f418) = 0;
  *(uint32_t *)(long_result + 0x3f440) = 0;
  *(uint64_t *)(long_result + 0x3f448) = 0;
  *(uint16_t *)(long_result + 0x3f450) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x42958) = 0;
  *(uint64_t *)(long_result + 0x42960) = 0;
  *(uint32_t *)(long_result + 0x42988) = 0;
  *(uint64_t *)(long_result + 0x42990) = 0;
  *(uint16_t *)(long_result + 0x42998) = SYSTEM_DATA_COMPARE_SIZE0;
  *(uint64_t *)(long_result + 0x45ea0) = 0;
  *(uint64_t *)(long_result + 0x45ea8) = 0;
  *(uint32_t *)(long_result + 0x45ed0) = 0;
  *(uint64_t *)(long_result + 0x45ed8) = 0;
  *(uint16_t *)(long_result + 0x45ee0) = SYSTEM_DATA_COMPARE_SIZE0;
  return;
}

uint64_t * InitializeSystemDataNode17(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x58);
  }
  return handleIdentifier;
}
// void InitializeSystemDataNode23(longlong *handleIdentifier)

void InitializeSystemDataNode23(longlong *handleIdentifier)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;

  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != (uint64_t *)0x0) {
    if ((uint64_t *)ptr_uint_var[3] != (uint64_t *)0x0) {
      *(uint64_t *)ptr_uint_var[3] = 0;
    }
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  if ((handleIdentifier[6] != 0) && (*(longlong *)(handleIdentifier[6] + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = handleIdentifier[5];
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x3541);
    long_result = *(longlong *)(long_result + 0x3538);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = (uint64_t *)handleIdentifier[3];
  if (ptr_uint_var == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void SystemFunction_74_8(longlong *handleIdentifier)

void SystemFunction_74_8(longlong *handleIdentifier)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;

  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != (uint64_t *)0x0) {
    if ((uint64_t *)ptr_uint_var[3] != (uint64_t *)0x0) {
      *(uint64_t *)ptr_uint_var[3] = 0;
    }
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  if ((handleIdentifier[6] != 0) && (*(longlong *)(handleIdentifier[6] + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = handleIdentifier[5];
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x3541);
    long_result = *(longlong *)(long_result + 0x3538);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = (uint64_t *)handleIdentifier[3];
  if (ptr_uint_var == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void SystemFunction_76_9(void)

void SystemFunction_76_9(void)

{
  uint64_t *system_RBX;

  if ((uint64_t *)system_RBX[3] != (uint64_t *)0x0) {
    *(uint64_t *)system_RBX[3] = 0;
  }
  (**(code **)*system_RBX)();
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_85_5(void)

void SystemFunction_85_5(void)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  longlong system_RSI;
  ulonglong uint_result;

  if ((*(longlong *)(system_RSI + 0x30) != 0) &&
     (*(longlong *)(*(longlong *)(system_RSI + 0x30) + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = *(longlong *)(system_RSI + 0x28);
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x3541);
    long_result = *(longlong *)(long_result + 0x3538);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = *(uint64_t **)(system_RSI + 0x18);
  if (ptr_uint_var != (uint64_t *)0x0) {
    uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
    if (uint_result != 0) {
      long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
      long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
      if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
        *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
        *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
        ptr_int_var = (int *)(long_result + 0x18);
        *ptr_int_var = *ptr_int_var + -1;
        if (*ptr_int_var == 0) {
          InitializeSystemComponents();
          return;
        }
      }
      else {
        HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                            ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
      }
    }
    return;
  }
  return;
}
// void InitializeSystemModule23(uint64_t *handleIdentifier)

void InitializeSystemModule23(uint64_t *handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  ulonglong uint_result;

  uint_result = (ulonglong)handleIdentifier & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)handleIdentifier - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *handleIdentifier = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = handleIdentifier;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          handleIdentifier,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeVideoSystem(longlong *handleIdentifier)

void InitializeVideoSystem(longlong *handleIdentifier)

{
  int *ptr_int_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  longlong long_result;
  ulonglong uint_result;

  _Mtx_destroy_in_situ();
  _Cnd_destroy_in_situ();
  ptr_uint_var = (uint64_t *)*handleIdentifier;
  if (ptr_uint_var != (uint64_t *)0x0) {
    if ((uint64_t *)ptr_uint_var[3] != (uint64_t *)0x0) {
      *(uint64_t *)ptr_uint_var[3] = 0;
    }
    (**(code **)*ptr_uint_var)(ptr_uint_var,0);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  if ((handleIdentifier[6] != 0) && (*(longlong *)(handleIdentifier[6] + SYSTEM_DATA_COMPARE_SIZE) != 0)) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  long_result = handleIdentifier[5];
  while (long_result != 0) {
    ptr_char_var = (char *)(long_result + 0x3541);
    long_result = *(longlong *)(long_result + 0x3538);
    if (*ptr_char_var != '\0') {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  ptr_uint_var = (uint64_t *)handleIdentifier[3];
  if (ptr_uint_var == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)ptr_uint_var & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)ptr_uint_var - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *ptr_uint_var = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          ptr_uint_var,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// void InitializeFontSystem(longlong *handleIdentifier)

void InitializeFontSystem(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x1a8) {
    InitializeSystemModule33(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void SystemFunction_16_0(longlong *handleIdentifier)

void SystemFunction_16_0(longlong *handleIdentifier)

{
  longlong long_result;
  longlong long_result;

  long_result = handleIdentifier[1];
  for (long_result = *handleIdentifier; long_result != long_result; long_result = long_result + 0x1a8) {
    InitializeSystemModule33(long_result);
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}

uint64_t * InitializeShaderSystem(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig)

{
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  longlong long_result;

  ConfigureSystemHandles();
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[NODE_INITIALIZED_OFFSET] = 0;
  *(uint32_t *)(handleIdentifier + 0x1a) = 0;
  handleIdentifier[0x1b] = 0;
  handleIdentifier[0x1e] = 0;
  node_current = handleIdentifier + 0x24;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  long_result = SYSTEM_NODE_HEADER_SIZE;
  ptr_uint_var = node_current;
  do {
    FreeSystemMemory(ptr_uint_var);
    ptr_uint_var = ptr_uint_var + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  uint_result = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x324) = 0;
  *(uint32_t *)(handleIdentifier + 100) = 0;
  handleIdentifier[SYSTEM_NODE_HEADER_SIZE] = 0;
  handleIdentifier[0x21] = SYSTEM_NODE_HEADER_SIZE;
  handleIdentifier[0x22] = node_current;
  do {
    *(uint32_t *)node_current = 0;
    node_current = node_current + 2;
    long_result = long_result + -1;
  } while (long_result != 0);
  handleIdentifier[0x23] = 0;
  handleIdentifier[0x1f] = handleIdentifier + 0x21;
  handleIdentifier[0x1d] = 0x15;
  long_result = SystemFunction_88_0();
  handleIdentifier[0x1c] = long_result;
  if (long_result == 0) {
    handleIdentifier[0x1d] = 0;
    uint_result = uint_result;
  }
  else {
    uint_result = handleIdentifier[0x1d];
  }
  uint_result = uint_result;
  if (uint_result != 0) {
    do {
      *(uint8_t *)(uint_result + 0x3541 + handleIdentifier[0x1c]) = 0;
      uint_result = uint_result + 1;
      uint_result = uint_result + 0x3548;
    } while (uint_result < (ulonglong)handleIdentifier[0x1d]);
  }
  _Cnd_init_in_situ();
  _Mtx_init_in_situ(handleIdentifier + 0x6f,2);
  handleIdentifier[0x79] = 0;
  handleIdentifier[0x7a] = 0;
  handleIdentifier[0x7b] = 0;
  *(uint32_t *)(handleIdentifier + 0x7c) = 3;
  handleIdentifier[0x7e] = 0;
  *(uint32_t *)(handleIdentifier + 0x7f) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x3fc) = 4000;
  handleIdentifier[0x18] = resourceIdentifier;
  handleIdentifier[0x7d] = systemConfig;
  *(uint8_t *)(handleIdentifier + 0x80) = 0;
  return handleIdentifier;
}

uint32_t *
InitializeSystemDataNode19(uint32_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint32_t *ptr_uint_var;

  *handleIdentifier = 0;
  handleIdentifier[1] = 0;
  handleIdentifier[2] = 0;
  handleIdentifier[3] = 0;
  handleIdentifier[4] = 3;
  *(uint64_t *)(handleIdentifier + 6) = 0;
  *(uint32_t **)handleIdentifier = handleIdentifier;
  *(uint32_t **)(handleIdentifier + 2) = handleIdentifier;
  _Mtx_init_in_situ(handleIdentifier + 8,SYSTEM_DATA_COMPARE_SIZE2,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  *(uint64_t *)(handleIdentifier + 0x1c) = 1;
  ptr_uint_var = handleIdentifier + 0x1e;
  *ptr_uint_var = 0;
  handleIdentifier[0x1f] = 0;
  handleIdentifier[SYSTEM_NODE_HEADER_SIZE] = 0;
  handleIdentifier[0x21] = 0;
  handleIdentifier[0x22] = 3;
  *(uint64_t *)(handleIdentifier + 0x24) = 0;
  *(uint32_t **)ptr_uint_var = ptr_uint_var;
  *(uint32_t **)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = ptr_uint_var;
  _Mtx_init_in_situ(handleIdentifier + 0x26,SYSTEM_DATA_COMPARE_SIZE2);
  *(uint64_t *)(handleIdentifier + 0x3a) = 1;
  ptr_uint_var = handleIdentifier + 0x3c;
  *ptr_uint_var = 0;
  handleIdentifier[0x3d] = 0;
  handleIdentifier[0x3e] = 0;
  handleIdentifier[0x3f] = 0;
  handleIdentifier[0x40] = 3;
  *(uint64_t *)(handleIdentifier + 0x42) = 0;
  *(uint32_t **)ptr_uint_var = ptr_uint_var;
  *(uint32_t **)(handleIdentifier + 0x3e) = ptr_uint_var;
  _Mtx_init_in_situ(handleIdentifier + 0x44,SYSTEM_DATA_COMPARE_SIZE2);
  *(uint64_t *)(handleIdentifier + 0x58) = 1;
  handleIdentifier[0x5a] = 0;
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializePhysicsSystem(void)
void InitializePhysicsSystem(void)

{
  longlong long_result;
  char char_var;
  int compare_result;
  longlong *ptr_data;

  long_result = g_system_handle_1;
  InitializePhysicsSystem(g_system_handle_1);
  *(int *)(long_result + 0xec) = *(int *)(long_result + 0xec) + 1;
  compare_result = _Mtx_lock(long_result + 0x98);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  ptr_data = *(longlong **)(long_result + 0x78);
  if ((ptr_data != (longlong *)(long_result + 0x78)) && (*(uint *)(ptr_data + 2) < *(uint *)(long_result + 0xec))) {
    ptr_data = *(longlong **)(*ptr_data + 8);
    *(longlong *)(*ptr_data + 8) = ptr_data[1];
    *(longlong *)ptr_data[1] = *ptr_data;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  compare_result = _Mtx_unlock(long_result + 0x98);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  *(int *)(long_result + 0x164) = *(int *)(long_result + 0x164) + 1;
  compare_result = _Mtx_lock(long_result + 0x110);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  ptr_data = *(longlong **)(long_result + 0xf0);
  do {
    if (ptr_data == (longlong *)(long_result + 0xf0)) {
LAB_18006f48d:
      compare_result = _Mtx_unlock(long_result + 0x110);
      if (compare_result != 0) {
        __Throw_C_error_std__YAXH_Z(compare_result);
      }
      return;
    }
    char_var = (**(code **)(*(longlong *)ptr_data[3] + 0x40))();
    if (char_var != '\0') {
      if (*(uint *)(ptr_data + 2) < *(uint *)(long_result + 0x164)) {
        ptr_data = *(longlong **)(*ptr_data + 8);
        *(longlong *)(*ptr_data + 8) = ptr_data[1];
        *(longlong *)ptr_data[1] = *ptr_data;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      goto LAB_18006f48d;
    }
    ptr_data = (longlong *)*ptr_data;
  } while( true );
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureGraphicsShader(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void ConfigureGraphicsShader(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  longlong long_result;
  int compare_result;

  long_result = g_system_handle_1;
  InitializeFilesystemSystem(systemConfigurationData,resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  InitializeSystemModule30(long_result);
  compare_result = _Mtx_lock(long_result + 0x98);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  if (*(longlong *)(long_result + 0x90) != 0) {
    long_ptr = *(longlong **)(**(longlong **)(long_result + 0x78) + 8);
    *(longlong *)(*long_ptr + 8) = long_ptr[1];
    *(longlong *)long_ptr[1] = *long_ptr;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  compare_result = _Mtx_unlock(long_result + 0x98);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  compare_result = _Mtx_lock(long_result + 0x110);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  if (*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE8) != 0) {
    long_ptr = *(longlong **)(**(longlong **)(long_result + 0xf0) + 8);
    *(longlong *)(*long_ptr + 8) = long_ptr[1];
    *(longlong *)long_ptr[1] = *long_ptr;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  compare_result = _Mtx_unlock(long_result + 0x110);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureSystemParameters(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void ConfigureSystemParameters(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  int int_result;
  longlong long_result;
  int int_result;
  longlong *pallocation_size;
  longlong long_result;
  uint64_t uint_result;
  uint32_t uintStack_1c;
  uint32_t uintStack_18;
  uint32_t uintStack_14;
  uint7 uintStack_f;

  long_result = g_system_handle_1;
  uint_result = INVALID_HANDLE_VALUE;
  if (g_system_handle_1 != 0) {
    long_result = g_system_handle_1 + 0xf0;
    long_result = g_system_handle_1 + 0x110;
    int_result = _Mtx_lock(long_result);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
    int_result = *(int *)(long_result + 0x164);
    int_result = *(int *)(long_result + 0x160);
    pallocation_size = (longlong *)
             AllocateSystemResource(systemMemoryPool,0x28,*(uint8_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE0),systemFlags,uint_result);
    uintStack_18 = (uint32_t)handleIdentifier;
    uintStack_14 = (uint32_t)((ulonglong)handleIdentifier >> SYSTEM_NODE_HEADER_SIZE);
    *(int *)(pallocation_size + 2) = int_result + int_result;
    *(uint32_t *)((longlong)pallocation_size + 0x14) = uintStack_1c;
    *(uint32_t *)(pallocation_size + 3) = uintStack_18;
    *(uint32_t *)((longlong)pallocation_size + 0x1c) = uintStack_14;
    pallocation_size[4] = (ulonglong)uintStack_f << 8;
    *pallocation_size = long_result;
    pallocation_size[1] = *(longlong *)(long_result + 0xf8);
    **(longlong **)(long_result + 0xf8) = (longlong)pallocation_size;
    *(longlong **)(long_result + 0xf8) = pallocation_size;
    *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE8) = *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE8) + 1;
    int_result = _Mtx_unlock(long_result);
    if (int_result != 0) {
      __Throw_C_error_std__YAXH_Z(int_result);
    }
  }
  return;
}

uint64_t InitializePhysicsSystem(longlong handleIdentifier)

{
  uint64_t uint_result;
  int int_result;

  int_result = _Mtx_lock(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  uint_result = *(uint64_t *)(handleIdentifier + 0x18);
  int_result = _Mtx_unlock(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return uint_result;
}
// void ProcessSystemStringData(longlong *handleIdentifier)

void ProcessSystemStringData(longlong *handleIdentifier)

{
  _Mtx_destroy_in_situ();
  if ((longlong *)*handleIdentifier != handleIdentifier) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation((longlong *)*handleIdentifier);
  }
  return;
}
// void InitializeSystemModule3(longlong *handleIdentifier)

void InitializeSystemModule3(longlong *handleIdentifier)

{
  if ((longlong *)*handleIdentifier != handleIdentifier) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation((longlong *)*handleIdentifier);
  }
  return;
}
// void InitializeSystemModule30(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule30(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  int int_result;

  int_result = _Mtx_lock(handleIdentifier + 4,resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  if (handleIdentifier[3] != 0) {
    long_ptr = *(longlong **)(*(longlong *)*handleIdentifier + 8);
    *(longlong *)(*long_ptr + 8) = long_ptr[1];
    *(longlong *)long_ptr[1] = *long_ptr;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  int_result = _Mtx_unlock(handleIdentifier + 4);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void InitializePhysicsSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializePhysicsSystem(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  int int_result;

  *(int *)((longlong)handleIdentifier + 0x74) = *(int *)((longlong)handleIdentifier + 0x74) + 1;
  int_result = _Mtx_lock(handleIdentifier + 4,resourceIdentifier,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  long_ptr = (longlong *)*handleIdentifier;
  if ((long_ptr != handleIdentifier) && (*(uint *)(long_ptr + 2) < *(uint *)((longlong)handleIdentifier + 0x74))) {
    long_ptr = *(longlong **)(*long_ptr + 8);
    *(longlong *)(*long_ptr + 8) = long_ptr[1];
    *(longlong *)long_ptr[1] = *long_ptr;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  int_result = _Mtx_unlock(handleIdentifier + 4);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void InitializeSystemModule21(longlong *handleIdentifier)

void InitializeSystemModule21(longlong *handleIdentifier)

{
  if ((longlong *)*handleIdentifier != handleIdentifier) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation((longlong *)*handleIdentifier);
  }
  return;
}
// void InitializeSystemDataNode22(longlong *handleIdentifier)

void InitializeSystemDataNode22(longlong *handleIdentifier)

{
  char is_initialized;
  int int_result;
  longlong *long_ptr;

  *(int *)((longlong)handleIdentifier + 0x74) = *(int *)((longlong)handleIdentifier + 0x74) + 1;
  int_result = _Mtx_lock(handleIdentifier + 4);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  long_ptr = (longlong *)*handleIdentifier;
  do {
    if (long_ptr == handleIdentifier) {
LAB_18006f48d:
      int_result = _Mtx_unlock(handleIdentifier + 4);
      if (int_result != 0) {
        __Throw_C_error_std__YAXH_Z(int_result);
      }
      return;
    }
    is_initialized = (**(code **)(*(longlong *)long_ptr[3] + 0x40))();
    if (is_initialized != '\0') {
      if (*(uint *)(long_ptr + 2) < *(uint *)((longlong)handleIdentifier + 0x74)) {
        long_ptr = *(longlong **)(*long_ptr + 8);
        *(longlong *)(*long_ptr + 8) = long_ptr[1];
        *(longlong *)long_ptr[1] = *long_ptr;
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      goto LAB_18006f48d;
    }
    long_ptr = (longlong *)*long_ptr;
  } while( true );
}
// void InitializeInputMutex(uint64_t *handleIdentifier)

void InitializeInputMutex(uint64_t *handleIdentifier)

{
  longlong long_result;

  if (handleIdentifier != (uint64_t *)0x0) {
    long_result = __RTCastToVoid();
    (**(code **)*handleIdentifier)(handleIdentifier,0);
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(long_result);
    }
  }
  return;
}
// void SystemFunction_88_5(void)

void SystemFunction_88_5(void)

{
  longlong long_result;
  uint64_t *system_RBX;

  long_result = __RTCastToVoid();
  (**(code **)*system_RBX)();
  if (long_result != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  return;
}
// void SystemFunction_93_2(void)

void SystemFunction_93_2(void)

{
  return;
}
// void InitializeNetworkMutex(longlong handleIdentifier)

void InitializeNetworkMutex(longlong handleIdentifier)

{
  if (*(longlong **)(handleIdentifier + 0x70) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(handleIdentifier + 0x70) + 0x38))();
  }
  return;
}
// void InitializeSystemModule36(longlong handleIdentifier)

void InitializeSystemModule36(longlong handleIdentifier)

{
  if (*(longlong *)(handleIdentifier + 0x1d8) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (*(longlong **)(handleIdentifier + 0x1b8) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(handleIdentifier + 0x1b8) + 0x38))();
  }
  return;
}

uint64_t *
InitializeSystemModule29(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  if (g_system_status_flag == '\0') {
    *handleIdentifier = &globalSystemPointerData;
    handleIdentifier[1] = 0;
    *(uint32_t *)(handleIdentifier + 2) = 0;
    *handleIdentifier = &resourcePoolPointer;
    handleIdentifier[3] = 0;
    handleIdentifier[1] = 0;
    *(uint32_t *)(handleIdentifier + 2) = 0;
    ConfigureSystemParameters(handleIdentifier,0,systemConfig,systemFlags,0,INVALID_HANDLE_VALUE);
    *(uint32_t *)(handleIdentifier + 2) = 0;
    if ((uint8_t *)handleIdentifier[1] != (uint8_t *)0x0) {
      *(uint8_t *)handleIdentifier[1] = 0;
    }
  }
  else {
    SystemHandleFunction(handleIdentifier,handleIdentifier);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeInputSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier)

{
  code *pis_initialized;
  bool bool_var;
  longlong long_result;
  char char_var;
  int int_result;
  int int_result;
  ulonglong uint_result;
  void *node_next;
  bool bool_var;
  void *system_buffer_ptr_50;
  void *system_buffer_ptr_48;
  uint32_t uintStack_40;
  uint64_t uintStack_38;
  uint8_t localBuffer_30 [8];
  void *system_buffer_ptr_28;

  long_result = systemConfigurationData;
  uint_result = InitializeSystemModule21(resourceIdentifier);
  if (((char)uint_result != '\0') || (uint_result = WaitForSingleObject(inputSystemData,0), (int)uint_result != 0)) {
    return uint_result & 0xffffffffffffff00;
  }
  if (long_result != 0) {
    InitializeSystemModule34(long_result);
  }
  bool_var = true;
  char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
  if ((char_var == '\0') && (int_result = IsDebuggerPresent(), int_result != 0)) {
    bool_var = true;
  }
  else {
    bool_var = false;
  }
  if (long_result != 0) {
    int_result = *(int *)(**(longlong **)(long_result + 8) + 0x48);
    int_result = _Thrd_id();
    bool_var = int_result == int_result;
  }
  InitializeSystemLogger(localBuffer_30,0);
  system_buffer_ptr_50 = &resourcePoolPointer;
  uintStack_38 = 0;
  system_buffer_ptr_48 = (void *)0x0;
  uintStack_40 = 0;
  ConfigureBufferAttributes(&bufferPtr_50system_buffer_ptr_50,&g_system_global_variable8,resourceIdentifier);
  InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable);
  node_next = &g_system_data_variable3;
  if (system_buffer_ptr_48 != (void *)0x0) {
    node_next = bufferPtr_48;
  }
  InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable,node_next);
  node_next = &g_system_data_variable3;
  if (system_buffer_ptr_28 != (void *)0x0) {
    node_next = bufferPtr_28;
  }
  InitializeEventSystem(g_system_context_1,5,0xffffffff00000000,3,node_next);
  InitializeGraphicsMemory();
  node_next = &g_system_data_variable3;
  if (system_buffer_ptr_48 != (void *)0x0) {
    node_next = bufferPtr_48;
  }
  OutputDebugStringA(node_next);
  InitializeSystemModule36(resourceIdentifier);
  long_result = systemCoreData;
  if (((bool_var) && (systemCoreData != 0)) && (*(char *)(systemCoreData + 0x1609) != '\x01')) {
    SystemProcessDataFunction(*(uint64_t *)(g_system_base_1 + 8),*(char *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE28) != '\0',
                  *(uint32_t *)(systemCoreData + 0x160c));
    *(uint8_t *)(long_result + 0x1609) = 1;
  }
  if (g_graphics_initialized_flag == '\0') {
    if ((g_system_data_variable0 == '\0') ||
       ((int_result = IsDebuggerPresent(), int_result != 0 && (g_graphics_initialized_flag == '\0')))) {
      MessageBoxA(0,resourceIdentifier,&g_system_global_variable8,0x41010);
    }
    else if (*(char *)(g_system_context_1 + 0x18) != '\0') {
      InitializeEventSystem(g_system_context_1,3,0xffffffff00000000,0xd,&g_system_global_variable8,&g_system_global_variable8,resourceIdentifier);
    }
  }
  else if (g_system_data_variable0 == '\0') {
    node_next = &g_system_data_variable3;
    if (system_buffer_ptr_48 != (void *)0x0) {
      node_next = bufferPtr_48;
    }
    SystemNodeUpdateFunction(node_next);
  }
  int_result = SystemFunction_17_6(resourceIdentifier);
  if ((!bool_var) && (int_result == 0)) {
    InitializeSystemModule30();
  }
  InitializeSystemResources(resourceIdentifier,0);
  if (g_system_base_1 == 0) {
    _Exit(5);
    pis_initialized = (code *)swi(3);
    uint_result = (*pis_initialized)();
    return uint_result;
  }
  InitializeSystemResources();
  pis_initialized = (code *)swi(3);
  uint_result = (*pis_initialized)();
  return uint_result;
}
// WARNING: Removing unreachable block (ram,0x00018006fc4b)

// WARNING: Removing unreachable block (ram,0x00018006fc66)

// WARNING: Removing unreachable block (ram,0x00018006fc6b)

// WARNING: Removing unreachable block (ram,0x00018006fe26)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeSystemDataNode26(uint64_t handleIdentifier,uint64_t resourceIdentifier,char systemConfig)

{
  uint8_t uint_result;
  code *ptr_char_var;
  bool bool_var;
  longlong long_result;
  void *ptr_uint_var;
  char char_var;
  int int_result;
  int int_result;
  uint32_t uint_result;
  ulonglong in_RAX;
  longlong long_result;
  void *ptr_uint_var;
  ulonglong uint_result;
  uint64_t uint_result;
  uint64_t *ptr_uint_var;
  bool system_initialization_check;
  byte bstack_var;
  void *system_buffer_ptr_e0;
  uint64_t *system_buffer_ptr_d8;
  uint32_t uintStack_d0;
  ulonglong uintStack_c8;
  void *system_buffer_ptr_c0;
  void *system_buffer_ptr_b8;
  uint32_t uintStack_b0;
  uint64_t uintStack_a8;
  void *thread_parameter_ptr;
  void *system_buffer_ptr_98;
  uint32_t module_type_id;
  ulonglong uintStack_88;
  void *system_buffer_ptr_80;
  longlong longStack_78;
  uint32_t uintStack_68;
  uint64_t uintStack_40;

  long_result = systemConfigurationData;
  uintStack_40 = INVALID_HANDLE_VALUE;
  bstack_var = 0;
  if (((g_system_data_variable0 == '\0') || (in_RAX = InitializeSystemModule21(resourceIdentifier), (char)in_RAX != '\0')) ||
     (in_RAX = WaitForSingleObject(inputSystemData,0), (int)in_RAX != 0)) {
    uint_result = in_RAX & 0xffffffffffffff00;
  }
  else {
    if (long_result != 0) {
      InitializeSystemModule34(long_result);
    }
    system_initialization_check = true;
    char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
    if ((char_var == '\0') && (int_result = IsDebuggerPresent(), int_result != 0)) {
      bool_var = true;
    }
    else {
      bool_var = false;
    }
    if (long_result != 0) {
      int_result = *(int *)(**(longlong **)(long_result + 8) + 0x48);
      int_result = _Thrd_id();
      system_initialization_check = int_result == int_result;
    }
    system_buffer_ptr_c0 = &resourcePoolPointer;
    uintStack_a8 = 0;
    system_buffer_ptr_b8 = (void *)0x0;
    uintStack_b0 = 0;
    if (!bool_var) {
      long_result = InitializeSystemLogger(&bufferPtr_e0system_buffer_ptr_e0,0);
      uintStack_b0 = *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
      system_buffer_ptr_b8 = *(void **)(long_result + 8);
      uintStack_a8 = *(uint64_t *)(long_result + 0x18);
      *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
      *(uint64_t *)(long_result + 8) = 0;
      *(uint64_t *)(long_result + 0x18) = 0;
      system_buffer_ptr_e0 = &resourcePoolPointer;
      if (system_buffer_ptr_d8 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      system_buffer_ptr_d8 = (uint64_t *)0x0;
      uintStack_c8 = uintStack_c8 & 0xffffffff00000000;
      system_buffer_ptr_e0 = &globalSystemPointerData;
    }
    ptr_uint_var = bufferPtr_b8;
    thread_parameter_ptr = &resourcePoolPointer;
    uintStack_88 = 0;
    system_buffer_ptr_98 = (void *)0x0;
    uintStack_90 = 0;
    ConfigureBufferAttributes(&thread_parameter_ptr,&globalSystemVariable,resourceIdentifier);
    InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable);
    ptr_uint_var = &g_system_data_variable3;
    if (system_buffer_ptr_98 != (void *)0x0) {
      ptr_uint_var = bufferPtr_98;
    }
    InitializeSystemDataNode30(g_system_context_1,2,0xffffffff00000000,&globalSystemVariable,ptr_uint_var);
    ptr_uint_var = &g_system_data_variable3;
    if (ptr_uint_var != (void *)0x0) {
      ptr_uint_var = ptr_uint_var;
    }
    InitializeEventSystem(g_system_context_1,2,0xffffffff00000000,3,ptr_uint_var);
    InitializeGraphicsMemory();
    ptr_uint_var = &g_system_data_variable3;
    if (system_buffer_ptr_98 != (void *)0x0) {
      ptr_uint_var = bufferPtr_98;
    }
    OutputDebugStringA(ptr_uint_var);
    InitializeSystemModule36(resourceIdentifier);
    if (((g_system_data_variable0 != '\0') && (bool_var)) &&
       ((*(char *)(g_system_base_1 + 0x25) != '\0' ||
        ((systemConfig == '\0' || (*(int *)(g_system_base_1 + 0x340) == 2)))))) {
      if (g_system_data_variable1 == '\0') {
        ptr_char_var = (code *)swi(3);
        uint_result = (*ptr_char_var)();
        return uint_result;
      }
      bstack_var = 1;
    }
    if (g_graphics_initialized_flag == '\0') {
      if (system_initialization_check) {
        if (*(longlong *)(g_system_base_1 + 8) != 0) {
          SystemExecuteFunction(*(longlong *)(g_system_base_1 + 8));
        }
        long_result = systemCoreData;
        if ((systemCoreData != 0) && (*(char *)(systemCoreData + 0x1609) != '\x01')) {
          SystemProcessDataFunction(*(uint64_t *)(g_system_base_1 + 8),
                        *(char *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE28) != '\0',
                        *(uint32_t *)(systemCoreData + 0x160c));
          *(uint8_t *)(long_result + 0x1609) = 1;
        }
      }
      system_buffer_ptr_e0 = &resourcePoolPointer;
      uintStack_c8 = 0;
      system_buffer_ptr_d8 = (uint64_t *)0x0;
      uintStack_d0 = 0;
      ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
      *(uint8_t *)ptr_uint_var = 0;
      system_buffer_ptr_d8 = ptr_uint_var;
      uint_result = ValidateResourceAllocation(ptr_uint_var);
      uintStack_c8 = CONCAT44(uintStack_c8._4_4_,uint_result);
      *ptr_uint_var = 0x4e524157204c4752;
      *(uint32_t *)(ptr_uint_var + 1) = 0x474e49;
      uintStack_d0 = 0xb;
      if (((g_system_data_variable0 == '\0') || (int_result = IsDebuggerPresent(), int_result != 0)) &&
         (g_graphics_initialized_flag == '\0')) {
        MessageBoxA(0,resourceIdentifier,ptr_uint_var,0x41030);
      }
      else if (*(char *)(g_system_context_1 + 0x18) != '\0') {
        InitializeEventSystem(g_system_context_1,3,0xffffffff00000000,0xd,&g_system_global_variable8,ptr_uint_var,resourceIdentifier);
      }
      system_buffer_ptr_e0 = &resourcePoolPointer;
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    if (g_system_data_variable0 == '\0') {
      SystemNodeUpdateFunction(&globalSystemVariable,resourceIdentifier);
    }
    int_result = SystemFunction_17_6(resourceIdentifier);
    if (((!bool_var) && (int_result == 0)) && (*(char *)(g_system_base_1 + 0x2a) != '\0')) {
      uint_result = *(uint8_t *)(g_system_base_1 + 0x141);
      uint_result = ProcessResourceData(&bufferPtr_80system_buffer_ptr_80,g_system_base_1 + 0x148);
      uint_result = ProcessResourceData(&bufferPtr_e0system_buffer_ptr_e0,uint_result);
      system_buffer_ptr_80 = &resourcePoolPointer;
      if (longStack_78 != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      longStack_78 = 0;
      uintStack_68 = 0;
      system_buffer_ptr_80 = &globalSystemPointerData;
      ptr_uint_var = &g_system_data_variable3;
      if (ptr_uint_var != (void *)0x0) {
        ptr_uint_var = ptr_uint_var;
      }
      InitializeSystemModule30(uint_result,&bufferPtr_e0system_buffer_ptr_e0,uint_result,0,ptr_uint_var);
      system_buffer_ptr_e0 = &resourcePoolPointer;
      if (system_buffer_ptr_d8 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      system_buffer_ptr_d8 = (uint64_t *)0x0;
      uintStack_c8 = uintStack_c8 & 0xffffffff00000000;
      system_buffer_ptr_e0 = &globalSystemPointerData;
    }
    InitializeSystemResources(resourceIdentifier,0);
    if (g_system_base_1 == 0) {
      char_var = '\x01';
    }
    else {
      char_var = *(char *)(g_system_base_1 + 0x29);
    }
    if (*(char *)(g_system_base_1 + 0x25) != '\0') {
      InitializeSystemResources(g_system_base_1,5);
      ptr_char_var = (code *)swi(3);
      uint_result = (*ptr_char_var)();
      return uint_result;
    }
    if (char_var != '\0') {
      systemStatusData = 5;
    }
    if ((g_graphics_initialized_flag == '\0') && (system_initialization_check)) {
      if (*(longlong *)(g_system_base_1 + 8) != 0) {
        SystemCompleteFunction();
      }
      if (systemCoreData != 0) {
        InitializeSystemComponents(systemCoreData,*(uint8_t *)(systemCoreData + 0x160a));
      }
    }
    if (long_result != 0) {
      InitializeSystemDataNode29(long_result);
    }
    do {
      int_result = ReleaseSemaphore(inputSystemData,1);
    } while (int_result == 0);
    thread_parameter_ptr = &resourcePoolPointer;
    if (system_buffer_ptr_98 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_98 = (void *)0x0;
    uintStack_88 = uintStack_88 & 0xffffffff00000000;
    thread_parameter_ptr = &globalSystemPointerData;
    system_buffer_ptr_c0 = &resourcePoolPointer;
    if (ptr_uint_var != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    uint_result = (ulonglong)bstack_var;
  }
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeUISystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,char systemConfig)

{
  code *pis_initialized;
  longlong long_result;
  char char_var;
  int int_result;
  int int_result;
  uint8_t *node_current;
  longlong long_result;
  void **pnode_next;
  uint64_t *ptr_uint_var;
  void *ptr_uint_var;
  ulonglong uint_result;
  void *ptr_uint_var;
  uint8_t uint_result;
  bool network_initialization_flag;
  bool system_initialization_check;
  uint32_t uint_result;
  byte bStack_d8;
  void *system_buffer_ptr_b0;
  void *system_buffer_ptr_a8;
  uint32_t uintStack_a0;
  ulonglong uintStack_98;
  void *system_buffer_ptr_90;
  uint64_t *system_buffer_ptr_88;
  uint32_t uintStack_80;
  ulonglong uintStack_78;
  void *system_buffer_ptr_70;
  longlong longStack_68;
  uint32_t uintStack_58;
  void *system_buffer_ptr_50;
  longlong longStack_48;
  uint32_t uintStack_38;
  uint64_t uintStack_30;

  long_result = systemConfigurationData;
  uintStack_30 = INVALID_HANDLE_VALUE;
  bStack_d8 = 0;
  node_current = (uint8_t *)register0x00000020;
  if (((g_system_data_variable0 == '\0') ||
      (node_current = (uint8_t *)InitializeSystemModule21(resourceIdentifier), (char)node_current != '\0')) ||
     (node_current = (uint8_t *)WaitForSingleObject(inputSystemData,0), (int)node_current != 0)) {
    return (ulonglong)node_current & 0xffffffffffffff00;
  }
  if (long_result != 0) {
    InitializeSystemModule34(long_result);
  }
  network_initialization_flag = true;
  char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
  if ((char_var == '\0') && (int_result = IsDebuggerPresent(), int_result != 0)) {
    system_initialization_check = true;
  }
  else {
    system_initialization_check = false;
  }
  if (long_result != 0) {
    int_result = *(int *)(**(longlong **)(long_result + 8) + 0x48);
    int_result = _Thrd_id();
    network_initialization_flag = int_result == int_result;
  }
  ptr_uint_var = (void *)0x0;
  if (!system_initialization_check) {
    long_result = InitializeSystemLogger(&bufferPtr_70system_buffer_ptr_70,0);
    ptr_uint_var = *(void **)(long_result + 8);
    *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
    *(uint64_t *)(long_result + 8) = 0;
    *(uint64_t *)(long_result + 0x18) = 0;
    system_buffer_ptr_70 = &resourcePoolPointer;
    if (longStack_68 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_68 = 0;
    uintStack_58 = 0;
    system_buffer_ptr_70 = &globalSystemPointerData;
  }
  system_buffer_ptr_b0 = &resourcePoolPointer;
  uintStack_98 = 0;
  system_buffer_ptr_a8 = (void *)0x0;
  uintStack_a0 = 0;
  ConfigureBufferAttributes(&bufferPtr_b0system_buffer_ptr_b0,&g_system_global_variable8,resourceIdentifier);
  InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable);
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_a8 != (void *)0x0) {
    ptr_uint_var = bufferPtr_a8;
  }
  InitializeSystemDataNode30(g_system_context_1,2,0xffffffff00000000,&globalSystemVariable,ptr_uint_var);
  if (g_system_status_flag != '\0') {
    ptr_uint_var = &g_system_data_variable3;
    if (ptr_uint_var != (void *)0x0) {
      ptr_uint_var = ptr_uint_var;
    }
    InitializeEventSystem(g_system_context_1,2,0xffffffff00000000,3,ptr_uint_var);
  }
  InitializeGraphicsMemory();
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_a8 != (void *)0x0) {
    ptr_uint_var = bufferPtr_a8;
  }
  OutputDebugStringA(ptr_uint_var);
  InitializeSystemModule36(resourceIdentifier);
  if ((g_system_data_variable0 != '\0') && (system_initialization_check)) {
    if ((*(char *)(g_system_base_1 + 0x25) == '\0') &&
       ((systemConfig != '\0' && (*(int *)(g_system_base_1 + 0x340) != 2)))) {
      uint_result = 1;
      bStack_d8 = 1;
      goto LAB_180070230;
    }
    if (g_system_data_variable1 == '\0') {
      pis_initialized = (code *)swi(3);
      uint_result = (*pis_initialized)();
      return uint_result;
    }
  }
  uint_result = 0;
LAB_180070230:
  if (*(int *)(systemConfigurationData + 0x460) == 0) {
    if (g_graphics_initialized_flag == '\0') {
      if (network_initialization_flag) {
        if (*(longlong *)(g_system_base_1 + 8) != 0) {
          SystemExecuteFunction(*(longlong *)(g_system_base_1 + 8));
        }
        long_result = systemCoreData;
        if ((systemCoreData != 0) && (*(char *)(systemCoreData + 0x1609) != '\x01')) {
          SystemProcessDataFunction(*(uint64_t *)(g_system_base_1 + 8),
                        *(char *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE28) != '\0',
                        *(uint32_t *)(systemCoreData + 0x160c));
          *(uint8_t *)(long_result + 0x1609) = 1;
        }
      }
      if (((g_system_data_variable0 == '\0') || (int_result = IsDebuggerPresent(), int_result != 0)) &&
         (g_graphics_initialized_flag == '\0')) {
        MessageBoxA(0,resourceIdentifier,&globalSystemVariable,0x41030);
      }
      else if (*(char *)(g_system_context_1 + 0x18) != '\0') {
        InitializeEventSystem(g_system_context_1,3,0xffffffff00000000,0xd,&g_system_global_variable8,&globalSystemVariable,resourceIdentifier)
        ;
      }
    }
    else if (g_system_data_variable0 == '\0') {
      SystemNodeUpdateFunction(&globalSystemVariable,resourceIdentifier);
    }
    int_result = SystemFunction_17_6(resourceIdentifier);
    if ((!system_initialization_check) && (int_result == 0)) {
      system_initialization_check = g_system_base_1 == 0;
      if (system_initialization_check) {
        uint_result = 0;
        system_buffer_ptr_90 = &resourcePoolPointer;
        uintStack_78 = 0;
        system_buffer_ptr_88 = (uint64_t *)0x0;
        uintStack_80 = 0;
        ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x34,0x13);
        *(uint8_t *)ptr_uint_var = 0;
        system_buffer_ptr_88 = ptr_uint_var;
        uint_result = ValidateResourceAllocation(ptr_uint_var);
        uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
        *ptr_uint_var = 0x7270706d75645c5c;
        ptr_uint_var[1] = 0x2e726f737365636f;
        ptr_uint_var[2] = 0x6c726f77656c6174;
        ptr_uint_var[3] = 0x445c6d6f632e7364;
        *(uint32_t *)(ptr_uint_var + 4) = 0x50706d75;
        *(uint32_t *)((longlong)ptr_uint_var + 0x24) = 0x65636f72;
        *(uint32_t *)(ptr_uint_var + 5) = 0x6e697373;
        *(uint32_t *)((longlong)ptr_uint_var + 0x2c) = 0x6c6f4667;
        *(uint32_t *)(ptr_uint_var + 6) = 0x726564;
        uintStack_80 = 0x33;
        pnode_next = &bufferPtr_90system_buffer_ptr_90;
      }
      else {
        uint_result = *(uint8_t *)(g_system_base_1 + 0x141);
        pnode_next = (void **)ProcessResourceData(&bufferPtr_50system_buffer_ptr_50,g_system_base_1 + 0x148);
        ptr_uint_var = bufferPtr_88;
      }
      uint_result = ProcessResourceData(&bufferPtr_70system_buffer_ptr_70,pnode_next);
      if (system_initialization_check) {
        system_buffer_ptr_90 = &resourcePoolPointer;
        if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(ptr_uint_var);
        }
        system_buffer_ptr_88 = (uint64_t *)0x0;
        uintStack_78 = uintStack_78 & 0xffffffff00000000;
        system_buffer_ptr_90 = &globalSystemPointerData;
      }
      if (!system_initialization_check) {
        system_buffer_ptr_50 = &resourcePoolPointer;
        if (longStack_48 != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        longStack_48 = 0;
        uintStack_38 = 0;
        system_buffer_ptr_50 = &globalSystemPointerData;
      }
      ptr_uint_var = &g_system_data_variable3;
      if (ptr_uint_var != (void *)0x0) {
        ptr_uint_var = ptr_uint_var;
      }
      InitializeSystemModule30(uint_result,&bufferPtr_70system_buffer_ptr_70,uint_result,0,ptr_uint_var);
      system_buffer_ptr_70 = &resourcePoolPointer;
      if (longStack_68 != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      longStack_68 = 0;
      uintStack_58 = 0;
      system_buffer_ptr_70 = &globalSystemPointerData;
    }
    InitializeSystemResources(resourceIdentifier,0);
    if (g_system_base_1 == 0) {
      char_var = '\x01';
    }
    else {
      char_var = *(char *)(g_system_base_1 + 0x29);
    }
    if (*(char *)(g_system_base_1 + 0x25) != '\0') {
      InitializeSystemResources(g_system_base_1,5);
      pis_initialized = (code *)swi(3);
      uint_result = (*pis_initialized)();
      return uint_result;
    }
    if (char_var != '\0') {
      systemStatusData = 5;
    }
    if ((g_graphics_initialized_flag == '\0') && (network_initialization_flag)) {
      if (*(longlong *)(g_system_base_1 + 8) != 0) {
        SystemCompleteFunction();
      }
      if (systemCoreData != 0) {
        InitializeSystemComponents(systemCoreData,*(uint8_t *)(systemCoreData + 0x160a));
      }
    }
    if (long_result != 0) {
      InitializeSystemDataNode29(long_result);
    }
    do {
      int_result = ReleaseSemaphore(inputSystemData,1);
    } while (int_result == 0);
    system_buffer_ptr_b0 = &resourcePoolPointer;
    if (system_buffer_ptr_a8 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_a8 = (void *)0x0;
    uintStack_98 = uintStack_98 & 0xffffffff00000000;
    system_buffer_ptr_b0 = &globalSystemPointerData;
    if (ptr_uint_var != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    uint_result = (ulonglong)bStack_d8;
  }
  else {
    if (*(int *)(systemConfigurationData + 0x460) == 1) {
      SystemNodeUpdateFunction(&globalSystemVariable,resourceIdentifier);
    }
    system_buffer_ptr_b0 = &resourcePoolPointer;
    if (system_buffer_ptr_a8 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_a8 = (void *)0x0;
    uintStack_98 = uintStack_98 & 0xffffffff00000000;
    system_buffer_ptr_b0 = &globalSystemPointerData;
    if (ptr_uint_var != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
  }
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule47(uint64_t handleIdentifier,uint64_t resourceIdentifier)
void InitializeSystemModule47(uint64_t handleIdentifier,uint64_t resourceIdentifier)

{
  bool bool_var;
  char char_var;
  int compare_result;
  int int_result;
  longlong allocation_size;
  void *node_current;
  uint64_t uint_result;
  void *node_next;
  bool bool_var;
  void *system_buffer_ptr_70;
  void *system_buffer_ptr_68;
  uint32_t uintStack_60;
  uint64_t uintStack_58;
  void *system_buffer_ptr_50;
  longlong longStack_48;
  uint32_t uintStack_38;

  compare_result = WaitForSingleObject(inputSystemData,0);
  if (compare_result != 0) {
    return;
  }
  bool_var = true;
  char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
  if ((char_var == '\0') && (compare_result = IsDebuggerPresent(), compare_result != 0)) {
    bool_var = true;
  }
  else {
    bool_var = false;
  }
  if (systemConfigurationData != 0) {
    compare_result = *(int *)(**(longlong **)(systemConfigurationData + 8) + 0x48);
    int_result = _Thrd_id();
    bool_var = int_result == compare_result;
  }
  node_next = (void *)0x0;
  if (!bool_var) {
    allocation_size = InitializeSystemLogger(&bufferPtr_50system_buffer_ptr_50,0);
    node_next = *(void **)(allocation_size + 8);
    *(uint32_t *)(allocation_size + SYSTEM_DATA_COMPARE_SIZE) = 0;
    *(uint64_t *)(allocation_size + 8) = 0;
    *(uint64_t *)(allocation_size + 0x18) = 0;
    system_buffer_ptr_50 = &resourcePoolPointer;
    if (longStack_48 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_48 = 0;
    uintStack_38 = 0;
    system_buffer_ptr_50 = &globalSystemPointerData;
  }
  system_buffer_ptr_70 = &resourcePoolPointer;
  uintStack_58 = 0;
  system_buffer_ptr_68 = (void *)0x0;
  uintStack_60 = 0;
  ConfigureBufferAttributes(&bufferPtr_70system_buffer_ptr_70,&g_system_global_variable8,resourceIdentifier);
  InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable);
  node_current = &g_system_data_variable3;
  if (system_buffer_ptr_68 != (void *)0x0) {
    node_current = bufferPtr_68;
  }
  InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable,node_current);
  node_current = &g_system_data_variable3;
  if (node_next != (void *)0x0) {
    node_current = node_next;
  }
  InitializeEventSystem(g_system_context_1,5,0xffffffff00000000,3,node_current);
  InitializeGraphicsMemory();
  node_next = &g_system_data_variable3;
  if (system_buffer_ptr_68 != (void *)0x0) {
    node_next = bufferPtr_68;
  }
  OutputDebugStringA(node_next);
  allocation_size = systemCoreData;
  if (((bool_var) && (systemCoreData != 0)) && (*(char *)(systemCoreData + 0x1609) != '\x01')) {
    SystemProcessDataFunction(*(uint64_t *)(g_system_base_1 + 8),*(char *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE28) != '\0',
                  *(uint32_t *)(systemCoreData + 0x160c));
    *(uint8_t *)(allocation_size + 0x1609) = 1;
  }
  if (g_graphics_initialized_flag == '\0') {
    ConfigureSystemSettings();
  }
  else {
    uint_result = InitializeSystemBuffer(&bufferPtr_70system_buffer_ptr_70);
    SystemNodeUpdateFunction(uint_result);
  }
  InitializeSystemDataNode26(&g_input_system_data,1);
  _Exit(5);
  return;
}
// WARNING: Removing unreachable block (ram,0x000180070cdc)

// WARNING: Removing unreachable block (ram,0x000180070ce2)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureSystemHandles(uint64_t handleIdentifier,longlong resourceIdentifier,uint32_t systemConfig,longlong systemFlags,
void ConfigureSystemHandles(uint64_t handleIdentifier,longlong resourceIdentifier,uint32_t systemConfig,longlong systemFlags,
                  char parameter_5,char parameter_6)

{
  code *pis_initialized;
  bool bool_var;
  char char_var;
  int int_result;
  uint uint_result;
  uint uint_result;
  uint32_t uint_result;
  int int_result;
  longlong long_result;
  uint8_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint8_t *ptr_uint_var;
  byte module_initialization_flag;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  void *ptr_uint_var;
  ulonglong uint_result;
  uint8_t localBuffer_188 [32];
  uint8_t *system_buffer_ptr_168;
  void *system_buffer_ptr_160;
  uint8_t *system_buffer_ptr_158;
  uint8_t uintStack_148;
  char cStack_147;
  void *system_buffer_ptr_140;
  uint8_t *system_buffer_ptr_138;
  uint uintStack_130;
  ulonglong uintStack_128;
  char cStack_120;
  char cStack_11f;
  uint32_t uintStack_11c;
  void *system_buffer_ptr_118;
  uint8_t *system_buffer_ptr_110;
  uint uintStack_108;
  uint64_t uintStack_100;
  void *system_buffer_ptr_f8;
  void *system_buffer_ptr_f0;
  uint32_t uintStack_e0;
  void *system_buffer_ptr_d8;
  longlong longStack_d0;
  uint32_t uintStack_c0;
  uint32_t uintStack_98;
  uint32_t uintStack_94;
  longlong longStack_90;
  longlong longStack_88;
  uint64_t uintStack_60;
  uint64_t uintStack_58;
  uint64_t uintStack_50;
  ulonglong uintStack_48;
  longlong long_result;

  uintStack_60 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_188;
  cStack_120 = parameter_5;
  ptr_uint_var = (uint8_t *)0x0;
  uint_result = 0;
  uintStack_11c = 0;
  uintStack_148 = 0;
  uintStack_58 = 0;
  uintStack_50 = 0;
  uintStack_98 = systemConfig;
  longStack_88 = systemFlags;
  InitializeSystemModule9(&uintStack_58,SYSTEM_DATA_COMPARE_SIZE,&globalSystemVariable,systemConfig);
  long_result = UpdateSystemBuffer(&bufferPtr_d8system_buffer_ptr_d8,systemFlags);
  system_buffer_ptr_118 = &resourcePoolPointer;
  uintStack_100 = 0;
  system_buffer_ptr_110 = (uint8_t *)0x0;
  uintStack_108 = 0;
  uintStack_11c = 4;
  uint_result = *(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = (ulonglong)uint_result;
  uint_result = 0;
  if (*(longlong *)(long_result + 8) == 0) {
LAB_180070a3f:
    uint_result = uint_result;
    if (uint_result != 0) {
                    // WARNING: Subroutine does not return
      memcpy(ptr_uint_var,*(uint64_t *)(long_result + 8),uint_result);
    }
  }
  else if (uint_result != 0) {
    int_result = uint_result + 1;
    if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
      int_result = SYSTEM_DATA_COMPARE_SIZE;
    }
    ptr_uint_var = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)int_result,0x13);
    *ptr_uint_var = 0;
    system_buffer_ptr_110 = ptr_uint_var;
    uint_result = ValidateResourceAllocation(ptr_uint_var);
    uintStack_100 = CONCAT44(uintStack_100._4_4_,uint_result);
    goto LAB_180070a3f;
  }
  if (ptr_uint_var != (uint8_t *)0x0) {
    ptr_uint_var[uint_result] = 0;
  }
  uint_result = *(uint *)(long_result + 0x1c);
  uintStack_108 = uint_result;
  uintStack_100._4_4_ = uint_result;
  if (resourceIdentifier != 0) {
    long_result = -1;
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    if (0 < (int)long_result) {
      int_result = uint_result + (int)long_result;
      if (int_result != 0) {
        uint_result = int_result + 1;
        if (ptr_uint_var == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          ptr_uint_var = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *ptr_uint_var = 0;
        }
        else {
          if (uint_result <= uint_result) goto LAB_180070b00;
          system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
          ptr_uint_var = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,ptr_uint_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        system_buffer_ptr_110 = ptr_uint_var;
        uintStack_100._0_4_ = ValidateResourceAllocation(ptr_uint_var);
      }
LAB_180070b00:
                    // WARNING: Subroutine does not return
      memcpy(ptr_uint_var + uint_result,resourceIdentifier,(longlong)((int)long_result + 2));
    }
  }
  InitializeSharedMemory(&bufferPtr_118system_buffer_ptr_118,&bufferPtr_f8system_buffer_ptr_f8,&uintStack_58);
  uintStack_94 = 0;
  uintStack_11c = 0;
  system_buffer_ptr_118 = &resourcePoolPointer;
  if (ptr_uint_var != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  system_buffer_ptr_110 = (uint8_t *)0x0;
  uintStack_100 = (ulonglong)uintStack_100._4_4_ << SYSTEM_NODE_HEADER_SIZE;
  system_buffer_ptr_118 = &globalSystemPointerData;
  system_buffer_ptr_d8 = &resourcePoolPointer;
  if (longStack_d0 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_d0 = 0;
  uintStack_c0 = 0;
  system_buffer_ptr_d8 = &globalSystemPointerData;
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_f0 != (void *)0x0) {
    ptr_uint_var = bufferPtr_f0;
  }
  char_var = InitializeSystemModule21(ptr_uint_var);
  if (char_var != '\0') {
    system_buffer_ptr_f8 = &resourcePoolPointer;
    if (system_buffer_ptr_f0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    goto LAB_1800718e9;
  }
  int_result = WaitForSingleObject(inputSystemData,1);
  long_result = systemConfigurationData;
  if (int_result != 0) {
    system_buffer_ptr_f8 = &resourcePoolPointer;
    if (system_buffer_ptr_f0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    goto LAB_1800718e9;
  }
  longStack_90 = systemConfigurationData;
  system_buffer_ptr_140 = &resourcePoolPointer;
  uintStack_128 = 0;
  system_buffer_ptr_138 = (uint8_t *)0x0;
  uintStack_130 = 0;
  ptr_uint_var = &g_system_data_variable0;
  if (cStack_120 != '\0') {
    ptr_uint_var = &g_system_global_variable8;
  }
  long_result = -1;
  do {
    long_result = long_result;
    long_result = long_result + 1;
  } while (ptr_uint_var[long_result] != '\0');
  int_result = (int)long_result;
  if (0 < int_result) {
    if (int_result != 0) {
      int_result = int_result + 1;
      if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
        int_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)int_result,0x13);
      *system_buffer_ptr_138 = 0;
      uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
      uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
    }
                    // WARNING: Subroutine does not return
    memcpy(system_buffer_ptr_138 + uintStack_130,ptr_uint_var,(longlong)((int)long_result + 2));
  }
  system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
  *system_buffer_ptr_138 = 0;
  uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
  uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
  *(uint16_t *)(system_buffer_ptr_138 + uintStack_130) = 10;
  uintStack_130 = 1;
  uint_result = 2;
  if (system_buffer_ptr_138 == (uint8_t *)0x0) {
    uintStack_130 = 1;
    system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
    *system_buffer_ptr_138 = 0;
LAB_180070db8:
    uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
    uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
  }
  else if (uint_result < 3) {
    system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
    uintStack_130 = 1;
    system_buffer_ptr_138 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,3,SYSTEM_DATA_COMPARE_SIZE);
    goto LAB_180070db8;
  }
  *(uint16_t *)(system_buffer_ptr_138 + uintStack_130) = 10;
  uintStack_130 = 2;
  if (resourceIdentifier != 0) {
    long_result = -1;
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    int_result = (int)long_result;
    if (0 < int_result) {
      uint_result = uint_result;
      if (int_result != -2) {
        uint_result = int_result + 3;
        if (system_buffer_ptr_138 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          uintStack_130 = uint_result;
          system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_138 = 0;
        }
        else {
          uint_result = uintStack_130;
          if (uint_result <= (uint)uintStack_128) goto LAB_180070e64;
          system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
          uintStack_130 = uint_result;
          system_buffer_ptr_138 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
        uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
        uint_result = uintStack_130;
      }
LAB_180070e64:
      uintStack_130 = uint_result;
                    // WARNING: Subroutine does not return
      memcpy(system_buffer_ptr_138 + uintStack_130,resourceIdentifier,(longlong)((int)long_result + 2));
    }
  }
  if (system_buffer_ptr_138 == (uint8_t *)0x0) {
    uintStack_130 = uint_result;
    system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
    *system_buffer_ptr_138 = 0;
LAB_180070ee8:
    uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
    uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
  }
  else if ((uint)uintStack_128 < 4) {
    system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
    uintStack_130 = uint_result;
    system_buffer_ptr_138 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,4,SYSTEM_DATA_COMPARE_SIZE);
    goto LAB_180070ee8;
  }
  *(uint16_t *)(system_buffer_ptr_138 + uintStack_130) = 0x3a;
  uintStack_130 = 3;
  ExtractAudioData(&bufferPtr_140system_buffer_ptr_140,uintStack_98);
  uint_result = uintStack_130;
  uint_result = uintStack_130 + 1;
  if (uint_result != 0) {
    uint_result = uintStack_130 + 2;
    if (system_buffer_ptr_138 == (uint8_t *)0x0) {
      if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
        uint_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
      *system_buffer_ptr_138 = 0;
    }
    else {
      if (uint_result <= (uint)uintStack_128) goto LAB_180070f81;
      system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
      system_buffer_ptr_138 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
    }
    uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
    uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
  }
LAB_180070f81:
  *(uint16_t *)(system_buffer_ptr_138 + uintStack_130) = 10;
  uint_result = uint_result + 0xd;
  uintStack_130 = uint_result;
  if (uint_result != 0) {
    uint_result = uint_result + 0xe;
    if (system_buffer_ptr_138 == (uint8_t *)0x0) {
      if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
        uint_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
      *system_buffer_ptr_138 = 0;
    }
    else {
      if (uint_result <= (uint)uintStack_128) goto LAB_180071000;
      system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
      system_buffer_ptr_138 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
    }
    uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
    uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
  }
LAB_180071000:
  long_result = longStack_88;
  ptr_uint_var = (uint64_t *)(system_buffer_ptr_138 + uintStack_130);
  *ptr_uint_var = 0x6973736572707845;
  *(uint32_t *)(ptr_uint_var + 1) = SYSTEM_NODE_HEADER_SIZE3a6e6f;
  *(uint8_t *)((longlong)ptr_uint_var + 0xc) = 0;
  long_result = -1;
  uintStack_130 = uint_result;
  if (longStack_88 != 0) {
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (*(char *)(longStack_88 + long_result) != '\0');
    if (0 < (int)long_result) {
      int_result = uint_result + (int)long_result;
      if (int_result != 0) {
        uint_result = int_result + 1;
        if (system_buffer_ptr_138 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_138 = 0;
        }
        else {
          if (uint_result <= (uint)uintStack_128) goto LAB_1800710b8;
          system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
          system_buffer_ptr_138 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
        uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
      }
LAB_1800710b8:
                    // WARNING: Subroutine does not return
      memcpy(system_buffer_ptr_138 + uintStack_130,long_result,(longlong)((int)long_result + 2));
    }
  }
  int_result = uint_result + 0xe;
  if (int_result != 0) {
    uint_result = uint_result + 0xf;
    if (system_buffer_ptr_138 == (uint8_t *)0x0) {
      if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
        uint_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_138 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
      *system_buffer_ptr_138 = 0;
    }
    else {
      if (uint_result <= (uint)uintStack_128) goto LAB_18007113f;
      system_buffer_ptr_168 = (uint8_t *)CONCAT71(system_buffer_ptr_168._1_7_,0x13);
      system_buffer_ptr_138 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
    }
    uint_result = ValidateResourceAllocation(system_buffer_ptr_138);
    uintStack_128 = CONCAT44(uintStack_128._4_4_,uint_result);
  }
LAB_18007113f:
  *(uint16_t *)(system_buffer_ptr_138 + uintStack_130) = 10;
  uintStack_130 = int_result;
  if (long_result != 0) {
    InitializeSystemModule34(long_result);
  }
  module_initialization_flag = 1;
  cStack_11f = '\x01';
  char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
  if ((char_var != '\0') || (int_result = IsDebuggerPresent(), int_result == 0)) {
    module_initialization_flag = 0;
  }
  if (g_system_base_1 == 0) {
    cStack_147 = '\0';
  }
  else {
    cStack_147 = *(char *)(g_system_base_1 + 0x24);
  }
  bool_var = true;
  if (long_result != 0) {
    int_result = *(int *)(**(longlong **)(long_result + 8) + 0x48);
    int_result = _Thrd_id();
    cStack_11f = int_result == int_result;
    bool_var = (bool)cStack_11f;
  }
  long_result = systemCoreData;
  if ((g_graphics_initialized_flag == '\0') && (bool_var)) {
    if ((systemCoreData != 0) && (*(char *)(systemCoreData + 0x1609) != '\x01')) {
      SystemProcessDataFunction(*(uint64_t *)(g_system_base_1 + 8),*(char *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE28) != '\0',
                    *(uint32_t *)(systemCoreData + 0x160c));
      *(uint8_t *)(long_result + 0x1609) = 1;
    }
    if (*(longlong *)(g_system_base_1 + 8) != 0) {
      SystemExecuteFunction();
    }
  }
  system_buffer_ptr_118 = &resourcePoolPointer;
  uintStack_100 = 0;
  system_buffer_ptr_110 = (uint8_t *)0x0;
  uintStack_108 = 0;
  if (module_initialization_flag == 0) {
    long_result = InitializeSystemLogger(&bufferPtr_d8system_buffer_ptr_d8,0);
    uintStack_108 = *(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
    system_buffer_ptr_110 = *(uint8_t **)(long_result + 8);
    uintStack_100 = *(ulonglong *)(long_result + 0x18);
    *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
    *(uint64_t *)(long_result + 8) = 0;
    *(uint64_t *)(long_result + 0x18) = 0;
    system_buffer_ptr_d8 = &resourcePoolPointer;
    if (longStack_d0 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_d0 = 0;
    uintStack_c0 = 0;
    system_buffer_ptr_d8 = &globalSystemPointerData;
  }
  ptr_uint_var = bufferPtr_110;
  InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable);
  system_buffer_ptr_168 = &g_system_data_variable3;
  if (system_buffer_ptr_138 != (uint8_t *)0x0) {
    system_buffer_ptr_168 = bufferPtr_138;
  }
  InitializeSystemDataNode30(g_system_context_1,4,0xffffffff00000000,&globalSystemVariable);
  system_buffer_ptr_168 = &g_system_data_variable3;
  if (ptr_uint_var != (uint8_t *)0x0) {
    system_buffer_ptr_168 = ptr_uint_var;
  }
  InitializeEventSystem(g_system_context_1,4,0xffffffff00000000,3);
  InitializeGraphicsMemory();
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_138 != (uint8_t *)0x0) {
    ptr_uint_var = bufferPtr_138;
  }
  OutputDebugStringA(ptr_uint_var);
  InitializeSystemModule36(long_result);
  if (g_system_data_variable0 != '\0') {
    if (module_initialization_flag != 0) {
      if (((cStack_147 == '\0') && (parameter_6 != '\0')) && (*(int *)(g_system_base_1 + 0x340) != 2)) {
        uintStack_148 = 1;
      }
      else if (g_system_data_variable1 == '\0') {
        pis_initialized = (code *)swi(3);
        (*pis_initialized)();
        return;
      }
    }
    if ((g_system_handle_1 == 0) || (*(int *)(g_system_handle_1 + 0x168) == 2)) {
      InitializeSystemDataNode30(g_system_context_1,4,0xffffffff00000000,&g_system_global_variable8);
      InitializeGraphicsMemory();
      int_result = IsDebuggerPresent();
      if ((int_result != 0) && (g_system_data_variable1 == '\0')) {
        pis_initialized = (code *)swi(3);
        (*pis_initialized)();
        return;
      }
    }
  }
  if (g_graphics_initialized_flag == '\0') {
    ptr_uint_var = &g_system_global_variablec;
    if (cStack_120 != '\0') {
      ptr_uint_var = &globalSystemVariable;
    }
    do {
      while( true ) {
        ptr_uint_var = &g_system_data_variable3;
        if (system_buffer_ptr_138 != (uint8_t *)0x0) {
          ptr_uint_var = bufferPtr_138;
        }
        if (((g_system_data_variable0 == '\0') || (int_result = IsDebuggerPresent(), int_result != 0)) &&
           (g_graphics_initialized_flag == '\0')) break;
        if (*(char *)(g_system_context_1 + 0x18) != '\0') {
          system_buffer_ptr_168 = &g_system_global_variable8;
          system_buffer_ptr_160 = ptr_uint_var;
          system_buffer_ptr_158 = ptr_uint_var;
          InitializeEventSystem(g_system_context_1,3,0xffffffff00000000,0xd);
        }
      }
      uint_result = MessageBoxA(0,ptr_uint_var,ptr_uint_var,0x52012);
      switch(uint_result) {
      case 1:
        int_result = 0;
        break;
      default:
        int_result = 1;
        break;
      case 4:
        int_result = 2;
        break;
      case 5:
        int_result = 3;
        break;
      case 6:
        int_result = 4;
        break;
      case 7:
        int_result = 5;
      }
    } while (int_result == 1);
    if (int_result == 2) {
      if (module_initialization_flag == 0) {
        ptr_uint_var = &g_system_data_variable3;
        if (ptr_uint_var != (uint8_t *)0x0) {
          ptr_uint_var = ptr_uint_var;
        }
        if (((g_system_data_variable0 == '\0') || (int_result = IsDebuggerPresent(), int_result != 0)) &&
           (g_graphics_initialized_flag == '\0')) {
          MessageBoxA(0,ptr_uint_var,&g_system_global_variable8,0x41010);
        }
        else if (*(char *)(g_system_context_1 + 0x18) != '\0') {
          system_buffer_ptr_160 = &g_system_global_variable8;
          system_buffer_ptr_168 = &g_system_global_variable8;
          system_buffer_ptr_158 = ptr_uint_var;
          InitializeEventSystem(g_system_context_1,3,0xffffffff00000000,0xd);
        }
      }
      else if (((parameter_6 == '\0') || (*(int *)(g_system_base_1 + 0x340) == 2)) &&
              (g_system_data_variable1 == '\0')) {
        pis_initialized = (code *)swi(3);
        (*pis_initialized)();
        return;
      }
    }
    else if (int_result == 3) goto LAB_1800715eb;
    if (g_system_base_1 == 0) {
      char_var = '\x01';
    }
    else {
      char_var = *(char *)(g_system_base_1 + 0x29);
    }
    if (cStack_147 != '\0') {
      InitializeSystemResources(char_var,5);
      pis_initialized = (code *)swi(3);
      (*pis_initialized)();
      return;
    }
    if (char_var != '\0') {
      systemStatusData = 5;
    }
    if ((g_graphics_initialized_flag == '\0') && (cStack_11f != '\0')) {
      if (*(longlong *)(g_system_base_1 + 8) != 0) {
        SystemCompleteFunction();
      }
      if (systemCoreData != 0) {
        InitializeSystemComponents(systemCoreData,*(uint8_t *)(systemCoreData + 0x160a));
      }
    }
    if (longStack_90 != 0) {
      InitializeSystemDataNode29();
    }
    do {
      int_result = ReleaseSemaphore(inputSystemData,1);
    } while (int_result == 0);
    system_buffer_ptr_118 = &resourcePoolPointer;
    if (ptr_uint_var != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    system_buffer_ptr_110 = (uint8_t *)0x0;
    uintStack_100 = uintStack_100 & 0xffffffff00000000;
    system_buffer_ptr_118 = &globalSystemPointerData;
    system_buffer_ptr_140 = &resourcePoolPointer;
    if (system_buffer_ptr_138 != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_138 = (uint8_t *)0x0;
    uintStack_128 = uintStack_128 & 0xffffffff00000000;
    system_buffer_ptr_140 = &globalSystemPointerData;
    system_buffer_ptr_f8 = &resourcePoolPointer;
    if (system_buffer_ptr_f0 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
LAB_1800718e9:
    uintStack_e0 = 0;
    system_buffer_ptr_f0 = (void *)0x0;
    system_buffer_ptr_f8 = &globalSystemPointerData;
                    // WARNING: Subroutine does not return
    InitializeSystemStack(uintStack_48 ^ (ulonglong)localBuffer_188);
  }
LAB_1800715eb:
  ptr_uint_var = &g_system_data_variable3;
  if (system_buffer_ptr_f0 != (void *)0x0) {
    ptr_uint_var = bufferPtr_f0;
  }
  uint_result = SystemFunction_17_6(ptr_uint_var);
                    // WARNING: Subroutine does not return
  SystemFunction_17_6(g_system_context_1,&globalSystemVariable,module_initialization_flag ^ 1,uint_result);
}
// WARNING: Removing unreachable block (ram,0x000180071b49)

// WARNING: Removing unreachable block (ram,0x000180071ad3)

// WARNING: Removing unreachable block (ram,0x000180071a52)

// WARNING: Removing unreachable block (ram,0x000180071c73)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule10(uint64_t handleIdentifier,longlong resourceIdentifier,uint32_t systemConfig,longlong systemFlags)
void InitializeSystemModule10(uint64_t handleIdentifier,longlong resourceIdentifier,uint32_t systemConfig,longlong systemFlags)

{
  int int_result;
  uint uint_result;
  uint32_t uint_result;
  longlong long_result;
  void *ptr_uint_var;
  uint32_t *node_current;
  uint64_t *node_previous;
  uint8_t *node_next;
  void *ptr_uint_var;
  longlong long_result;
  uint uint_result;
  uint uint_result;
  void *system_buffer_ptr_90;
  uint8_t *system_buffer_ptr_88;
  uint uintStack_80;
  ulonglong uintStack_78;
  void *system_buffer_ptr_70;
  void *system_buffer_ptr_68;
  uint32_t uintStack_60;
  uint64_t uintStack_58;
  void *system_buffer_ptr_50;
  longlong longStack_48;
  uint32_t uintStack_38;

  int_result = WaitForSingleObject(inputSystemData,0);
  if (int_result != 0) {
    return;
  }
  ptr_uint_var = (void *)0x0;
  system_buffer_ptr_70 = &resourcePoolPointer;
  uintStack_58 = 0;
  system_buffer_ptr_68 = (void *)0x0;
  uintStack_60 = 0;
  int_result = IsDebuggerPresent();
  if (int_result == 0) {
    long_result = InitializeSystemLogger(&bufferPtr_50system_buffer_ptr_50,0);
    uintStack_60 = *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
    ptr_uint_var = *(void **)(long_result + 8);
    uintStack_58 = *(uint64_t *)(long_result + 0x18);
    *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
    *(uint64_t *)(long_result + 8) = 0;
    *(uint64_t *)(long_result + 0x18) = 0;
    system_buffer_ptr_50 = &resourcePoolPointer;
    system_buffer_ptr_68 = ptr_uint_var;
    if (longStack_48 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    longStack_48 = 0;
    uintStack_38 = 0;
    system_buffer_ptr_50 = &globalSystemPointerData;
  }
  system_buffer_ptr_90 = &resourcePoolPointer;
  uintStack_78 = 0;
  system_buffer_ptr_88 = (uint8_t *)0x0;
  uintStack_80 = 0;
  system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x12,0x13);
  *system_buffer_ptr_88 = 0;
  uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
  uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
  node_current = (uint32_t *)(system_buffer_ptr_88 + uintStack_80);
  *node_current = 0x65737341;
  node_current[1] = 0x6f697472;
  node_current[2] = 0x6146206e;
  node_current[3] = 0x64656c69;
  *(uint16_t *)(node_current + 4) = 0x21;
  uintStack_80 = 0x11;
  if (system_buffer_ptr_88 == (uint8_t *)0x0) {
    uintStack_80 = 0x11;
    system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x13,0x13);
    *system_buffer_ptr_88 = 0;
LAB_180071af3:
    uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
  }
  else if (uint_result < 0x13) {
    uintStack_80 = 0x11;
    system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,0x13,SYSTEM_DATA_COMPARE_SIZE,0x13);
    goto LAB_180071af3;
  }
  *(uint16_t *)(system_buffer_ptr_88 + uintStack_80) = 10;
  uintStack_80 = 0x12;
  uint_result = 0x13;
  if (system_buffer_ptr_88 == (uint8_t *)0x0) {
    uintStack_80 = 0x12;
    system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x14,0x13);
    *system_buffer_ptr_88 = 0;
LAB_180071b69:
    uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
  }
  else if ((uint)uintStack_78 < 0x14) {
    uintStack_80 = 0x12;
    system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,0x14,SYSTEM_DATA_COMPARE_SIZE,0x13);
    goto LAB_180071b69;
  }
  *(uint16_t *)(system_buffer_ptr_88 + uintStack_80) = 10;
  uintStack_80 = 0x13;
  if (resourceIdentifier != 0) {
    long_result = -1;
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    int_result = (int)long_result;
    if (0 < int_result) {
      uint_result = uint_result;
      if (int_result != -0x13) {
        uint_result = int_result + 0x14;
        if (system_buffer_ptr_88 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          uintStack_80 = uint_result;
          system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_88 = 0;
        }
        else {
          uint_result = uintStack_80;
          if (uint_result <= (uint)uintStack_78) goto LAB_180071c1a;
          uintStack_80 = uint_result;
          system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE,0x13);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
        uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
        uint_result = uintStack_80;
      }
LAB_180071c1a:
      uintStack_80 = uint_result;
                    // WARNING: Subroutine does not return
      memcpy(system_buffer_ptr_88 + uintStack_80,resourceIdentifier,(longlong)((int)long_result + 2));
    }
  }
  if (system_buffer_ptr_88 == (uint8_t *)0x0) {
    uintStack_80 = uint_result;
    system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x15,0x13);
    *system_buffer_ptr_88 = 0;
LAB_180071c93:
    uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
  }
  else if ((uint)uintStack_78 < 0x15) {
    uintStack_80 = uint_result;
    system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,0x15,SYSTEM_DATA_COMPARE_SIZE,0x13);
    goto LAB_180071c93;
  }
  *(uint16_t *)(system_buffer_ptr_88 + uintStack_80) = 0x3a;
  uintStack_80 = 0x14;
  ExtractAudioData(&bufferPtr_90system_buffer_ptr_90,systemConfig);
  uint_result = uintStack_80;
  uint_result = uintStack_80 + 1;
  if (uint_result != 0) {
    uint_result = uintStack_80 + 2;
    if (system_buffer_ptr_88 == (uint8_t *)0x0) {
      if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
        uint_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
      *system_buffer_ptr_88 = 0;
    }
    else {
      if (uint_result <= (uint)uintStack_78) goto LAB_180071d1f;
      system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE,0x13);
    }
    uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
  }
LAB_180071d1f:
  *(uint16_t *)(system_buffer_ptr_88 + uintStack_80) = 10;
  uint_result = uint_result + 0xd;
  uintStack_80 = uint_result;
  if (uint_result != 0) {
    uint_result = uint_result + 0xe;
    if (system_buffer_ptr_88 == (uint8_t *)0x0) {
      if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
        uint_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
      *system_buffer_ptr_88 = 0;
    }
    else {
      if (uint_result <= (uint)uintStack_78) goto LAB_180071d94;
      system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE,0x13);
    }
    uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
  }
LAB_180071d94:
  node_previous = (uint64_t *)(system_buffer_ptr_88 + uintStack_80);
  *node_previous = 0x6973736572707845;
  *(uint32_t *)(node_previous + 1) = SYSTEM_NODE_HEADER_SIZE3a6e6f;
  *(uint8_t *)((longlong)node_previous + 0xc) = 0;
  long_result = -1;
  uintStack_80 = uint_result;
  if (systemFlags != 0) {
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (*(char *)(systemFlags + long_result) != '\0');
    if (0 < (int)long_result) {
      int_result = uint_result + (int)long_result;
      if (int_result != 0) {
        uint_result = int_result + 1;
        if (system_buffer_ptr_88 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_88 = 0;
        }
        else {
          if (uint_result <= (uint)uintStack_78) goto LAB_180071e34;
          system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE,0x13);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
        uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
      }
LAB_180071e34:
                    // WARNING: Subroutine does not return
      memcpy(system_buffer_ptr_88 + uintStack_80,systemFlags,(longlong)((int)long_result + 2));
    }
  }
  if (uint_result + 0xe != 0) {
    uint_result = uint_result + 0xf;
    if (system_buffer_ptr_88 == (uint8_t *)0x0) {
      if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
        uint_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      system_buffer_ptr_88 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
      *system_buffer_ptr_88 = 0;
    }
    else {
      if (uint_result <= (uint)uintStack_78) goto LAB_180071eb0;
      system_buffer_ptr_88 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE,0x13);
    }
    uint_result = ValidateResourceAllocation(system_buffer_ptr_88);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
  }
LAB_180071eb0:
  *(uint16_t *)(system_buffer_ptr_88 + uintStack_80) = 10;
  uintStack_80 = uint_result + 0xe;
  InitializeSystemDataNode30(g_system_context_1,5,0xffffffff00000000,&globalSystemVariable);
  node_next = &g_system_data_variable3;
  if (system_buffer_ptr_88 != (uint8_t *)0x0) {
    node_next = bufferPtr_88;
  }
  InitializeSystemDataNode30(g_system_context_1,4,0xffffffff00000000,&globalSystemVariable,node_next);
  ptr_uint_var = &g_system_data_variable3;
  if (ptr_uint_var != (void *)0x0) {
    ptr_uint_var = ptr_uint_var;
  }
  InitializeEventSystem(g_system_context_1,4,0xffffffff00000000,3,ptr_uint_var);
  InitializeGraphicsMemory();
  node_next = &g_system_data_variable3;
  if (system_buffer_ptr_88 != (uint8_t *)0x0) {
    node_next = bufferPtr_88;
  }
  OutputDebugStringA(node_next);
  do {
    int_result = ReleaseSemaphore(inputSystemData,1);
  } while (int_result == 0);
  system_buffer_ptr_90 = &resourcePoolPointer;
  if (system_buffer_ptr_88 == (uint8_t *)0x0) {
    system_buffer_ptr_88 = (uint8_t *)0x0;
    uintStack_78 = uintStack_78 & 0xffffffff00000000;
    system_buffer_ptr_90 = &globalSystemPointerData;
    system_buffer_ptr_70 = &resourcePoolPointer;
    if (ptr_uint_var == (void *)0x0) {
      return;
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Removing unreachable block (ram,0x00018007258a)

// WARNING: Removing unreachable block (ram,0x0001800724fe)

// WARNING: Removing unreachable block (ram,0x00018007246a)

// WARNING: Removing unreachable block (ram,0x0001800726c4)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemTimer(uint64_t handleIdentifier,longlong resourceIdentifier,uint32_t systemConfig,longlong systemFlags,
void InitializeSystemTimer(uint64_t handleIdentifier,longlong resourceIdentifier,uint32_t systemConfig,longlong systemFlags,
                  uint8_t parameter_5,char parameter_6)

{
  code *pis_initialized;
  char char_var;
  int compare_result;
  uint uint_result;
  int int_result;
  uint uint_result;
  uint32_t uint_result;
  uint uint_result;
  longlong long_result;
  uint8_t *ptr_uint_var;
  void **resource_process_pointer;
  uint32_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint8_t *ptr_uint_var;
  void *ptr_uint_var;
  uint uint_result;
  longlong long_result;
  uint8_t uint_result;
  ulonglong uint_result;
  uint8_t localBuffer_168 [32];
  uint8_t *system_buffer_ptr_148;
  void *system_buffer_ptr_138;
  uint8_t *system_buffer_ptr_130;
  uint uintStack_128;
  ulonglong uintStack_120;
  char cStack_118;
  char cStack_117;
  uint8_t uintStack_116;
  uint uintStack_114;
  void *system_buffer_ptr_110;
  uint8_t *system_buffer_ptr_108;
  uint uintStack_100;
  uint64_t uintStack_f8;
  void *system_buffer_ptr_f0;
  longlong longStack_e8;
  uint32_t uintStack_d8;
  void *system_buffer_ptr_d0;
  uint64_t *system_buffer_ptr_c8;
  uint32_t uintStack_c0;
  ulonglong uintStack_b8;
  uint32_t uintStack_b0;
  void *system_buffer_ptr_a8;
  void *thread_parameter_ptr;
  uint32_t module_type_id;
  longlong longStack_88;
  void *system_buffer_ptr_80;
  longlong longStack_78;
  uint32_t uintStack_68;
  uint64_t uintStack_60;
  uint64_t uintStack_58;
  uint64_t uintStack_50;
  ulonglong uintStack_48;

  uintStack_60 = INVALID_HANDLE_VALUE;
  uintStack_48 = systemConfigurationData ^ (ulonglong)localBuffer_168;
  ptr_uint_var = (uint8_t *)0x0;
  uintStack_114 = 0;
  uintStack_116 = 0;
  uintStack_b0 = systemConfig;
  longStack_88 = systemFlags;
  if ((g_system_data_variable0 != '\0') || (g_engine_ready_flag != '\0')) goto LAB_180072d7b;
  uintStack_58 = 0;
  uintStack_50 = 0;
  InitializeSystemModule9(&uintStack_58,SYSTEM_DATA_COMPARE_SIZE,&globalSystemVariable,systemConfig);
  long_result = UpdateSystemBuffer(&bufferPtr_f0system_buffer_ptr_f0,systemFlags);
  system_buffer_ptr_110 = &resourcePoolPointer;
  uint_result = 0;
  uintStack_f8 = 0;
  system_buffer_ptr_108 = (uint8_t *)0x0;
  uintStack_100 = 0;
  uintStack_114 = 4;
  uint_result = *(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = (ulonglong)uint_result;
  uint_result = 0;
  if (*(longlong *)(long_result + 8) == 0) {
LAB_180072120:
    uint_result = uint_result;
    if (uint_result != 0) {
                    // WARNING: Subroutine does not return
      memcpy(ptr_uint_var,*(uint64_t *)(long_result + 8),uint_result);
    }
  }
  else if (uint_result != 0) {
    compare_result = uint_result + 1;
    if (compare_result < SYSTEM_DATA_COMPARE_SIZE) {
      compare_result = SYSTEM_DATA_COMPARE_SIZE;
    }
    ptr_uint_var = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)compare_result,0x13);
    *ptr_uint_var = 0;
    system_buffer_ptr_108 = ptr_uint_var;
    uint_result = ValidateResourceAllocation(ptr_uint_var);
    uintStack_f8 = CONCAT44(uintStack_f8._4_4_,uint_result);
    goto LAB_180072120;
  }
  if (ptr_uint_var != (uint8_t *)0x0) {
    ptr_uint_var[uint_result] = 0;
  }
  uint_result = *(uint *)(long_result + 0x1c);
  uintStack_100 = uint_result;
  uintStack_f8._4_4_ = uint_result;
  if (resourceIdentifier != 0) {
    long_result = -1;
    do {
      long_result = long_result;
      long_result = long_result + 1;
    } while (*(char *)(resourceIdentifier + long_result) != '\0');
    if (0 < (int)long_result) {
      compare_result = uint_result + (int)long_result;
      if (compare_result != 0) {
        uint_result = compare_result + 1;
        if (ptr_uint_var == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          ptr_uint_var = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *ptr_uint_var = 0;
        }
        else {
          if (uint_result <= uint_result) goto LAB_1800721e1;
          system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
          ptr_uint_var = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,ptr_uint_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        system_buffer_ptr_108 = ptr_uint_var;
        uintStack_f8._0_4_ = ValidateResourceAllocation(ptr_uint_var);
      }
LAB_1800721e1:
                    // WARNING: Subroutine does not return
      memcpy(ptr_uint_var + uint_result,resourceIdentifier,(longlong)((int)long_result + 2));
    }
  }
  InitializeSharedMemory(&bufferPtr_110system_buffer_ptr_110,&bufferPtr_a8system_buffer_ptr_a8,&uintStack_58);
  uintStack_114 = 0;
  system_buffer_ptr_110 = &resourcePoolPointer;
  if (ptr_uint_var != (uint8_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_uint_var);
  }
  system_buffer_ptr_108 = (uint8_t *)0x0;
  uintStack_f8 = (ulonglong)uintStack_f8._4_4_ << SYSTEM_NODE_HEADER_SIZE;
  system_buffer_ptr_110 = &globalSystemPointerData;
  system_buffer_ptr_f0 = &resourcePoolPointer;
  if (longStack_e8 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  longStack_e8 = 0;
  uintStack_d8 = 0;
  system_buffer_ptr_f0 = &globalSystemPointerData;
  ptr_uint_var = &g_system_data_variable3;
  if (thread_parameter_ptr != (void *)0x0) {
    ptr_uint_var = thread_parameter_ptr;
  }
  char_var = InitializeSystemModule21(ptr_uint_var);
  if (char_var == '\0') {
    compare_result = WaitForSingleObject(inputSystemData,0);
    if (compare_result == 0) {
      cStack_117 = '\x01';
      char_var = (**(code **)**(uint64_t **)(systemConfigurationData + 0x18))();
      if ((char_var == '\0') && (compare_result = IsDebuggerPresent(), compare_result != 0)) {
        char_var = '\x01';
      }
      else {
        char_var = '\0';
      }
      cStack_118 = char_var;
      if (systemConfigurationData == 0) {
LAB_1800722f5:
        long_result = systemCoreData;
        if ((systemCoreData != 0) && (*(char *)(systemCoreData + 0x1609) != '\x01')) {
          SystemProcessDataFunction(*(uint64_t *)(g_system_base_1 + 8),
                        *(char *)(systemCoreData + SYSTEM_NODE_HEADER_SIZE28) != '\0',
                        *(uint32_t *)(systemCoreData + 0x160c));
          *(uint8_t *)(long_result + 0x1609) = 1;
        }
        if (*(longlong *)(g_system_base_1 + 8) != 0) {
          SystemExecuteFunction();
        }
      }
      else {
        compare_result = *(int *)(**(longlong **)(systemConfigurationData + 8) + 0x48);
        int_result = _Thrd_id();
        cStack_117 = int_result == compare_result;
        if ((bool)cStack_117) goto LAB_1800722f5;
      }
      if (char_var != '\0') {
        if ((parameter_6 == '\0') || (*(int *)(g_system_base_1 + 0x340) == 2)) {
          pis_initialized = (code *)swi(3);
          (*pis_initialized)();
          return;
        }
        uintStack_116 = 1;
      }
      system_buffer_ptr_110 = &resourcePoolPointer;
      uintStack_f8 = 0;
      system_buffer_ptr_108 = (void *)0x0;
      uintStack_100 = 0;
      if (char_var == '\0') {
        long_result = InitializeSystemLogger(&bufferPtr_f0system_buffer_ptr_f0,0);
        uintStack_100 = *(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
        system_buffer_ptr_108 = *(uint8_t **)(long_result + 8);
        uintStack_f8 = *(ulonglong *)(long_result + 0x18);
        *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
        *(uint64_t *)(long_result + 8) = 0;
        *(uint64_t *)(long_result + 0x18) = 0;
        system_buffer_ptr_f0 = &resourcePoolPointer;
        if (longStack_e8 != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        longStack_e8 = 0;
        uintStack_d8 = 0;
        system_buffer_ptr_f0 = &globalSystemPointerData;
      }
      ptr_uint_var = bufferPtr_108;
      system_buffer_ptr_138 = &resourcePoolPointer;
      uintStack_120 = 0;
      system_buffer_ptr_130 = (uint8_t *)0x0;
      uintStack_128 = 0;
      system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x15,0x13);
      *system_buffer_ptr_130 = 0;
      uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
      uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      ptr_uint_var = (uint32_t *)(system_buffer_ptr_130 + uintStack_128);
      *ptr_uint_var = 0x69746f4e;
      ptr_uint_var[1] = 0x61636966;
      ptr_uint_var[2] = 0x6e6f6974;
      ptr_uint_var[3] = 0x73734120;
      ptr_uint_var[4] = 0x21747265;
      *(uint8_t *)(ptr_uint_var + 5) = 0;
      uintStack_128 = 0x14;
      if (system_buffer_ptr_130 == (uint8_t *)0x0) {
        uintStack_128 = 0x14;
        system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x16,0x13);
        *system_buffer_ptr_130 = 0;
LAB_180072521:
        uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
        uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      }
      else if (uint_result < 0x16) {
        system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
        uintStack_128 = 0x14;
        system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,0x16,SYSTEM_DATA_COMPARE_SIZE);
        goto LAB_180072521;
      }
      *(uint16_t *)(system_buffer_ptr_130 + uintStack_128) = 10;
      uintStack_128 = 0x15;
      uint_result = 0x16;
      if (system_buffer_ptr_130 == (uint8_t *)0x0) {
        uintStack_128 = 0x15;
        system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x17,0x13);
        *system_buffer_ptr_130 = 0;
LAB_1800725ac:
        uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
        uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      }
      else if ((uint)uintStack_120 < 0x17) {
        system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
        uintStack_128 = 0x15;
        system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,0x17,SYSTEM_DATA_COMPARE_SIZE);
        goto LAB_1800725ac;
      }
      *(uint16_t *)(system_buffer_ptr_130 + uintStack_128) = 10;
      uintStack_128 = 0x16;
      if (resourceIdentifier != 0) {
        long_result = -1;
        do {
          long_result = long_result;
          long_result = long_result + 1;
        } while (*(char *)(resourceIdentifier + long_result) != '\0');
        compare_result = (int)long_result;
        if (0 < compare_result) {
          uint_result = uint_result;
          if (compare_result != -0x16) {
            uint_result = compare_result + 0x17;
            if (system_buffer_ptr_130 == (uint8_t *)0x0) {
              if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
                uint_result = SYSTEM_DATA_COMPARE_SIZE;
              }
              uintStack_128 = uint_result;
              system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
              *system_buffer_ptr_130 = 0;
            }
            else {
              uint_result = uintStack_128;
              if (uint_result <= (uint)uintStack_120) goto LAB_180072662;
              system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
              uintStack_128 = uint_result;
              system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
            }
            uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
            uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
            uint_result = uintStack_128;
          }
LAB_180072662:
          uintStack_128 = uint_result;
                    // WARNING: Subroutine does not return
          memcpy(system_buffer_ptr_130 + uintStack_128,resourceIdentifier,(longlong)((int)long_result + 2));
        }
      }
      if (system_buffer_ptr_130 == (uint8_t *)0x0) {
        uintStack_128 = uint_result;
        system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,0x18,0x13);
        *system_buffer_ptr_130 = 0;
LAB_1800726e7:
        uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
        uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      }
      else if ((uint)uintStack_120 < 0x18) {
        system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
        uintStack_128 = uint_result;
        system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,0x18,SYSTEM_DATA_COMPARE_SIZE);
        goto LAB_1800726e7;
      }
      *(uint16_t *)(system_buffer_ptr_130 + uintStack_128) = 0x3a;
      uintStack_128 = 0x17;
      ExtractAudioData(&bufferPtr_138system_buffer_ptr_138,uintStack_b0);
      uint_result = uintStack_128;
      uint_result = uintStack_128 + 1;
      if (uint_result != 0) {
        uint_result = uintStack_128 + 2;
        if (system_buffer_ptr_130 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_130 = 0;
        }
        else {
          if (uint_result <= (uint)uintStack_120) goto LAB_180072780;
          system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
          system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
        uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      }
LAB_180072780:
      *(uint16_t *)(system_buffer_ptr_130 + uintStack_128) = 10;
      uint_result = uint_result + 0xd;
      uintStack_128 = uint_result;
      if (uint_result != 0) {
        uint_result = uint_result + 0xe;
        if (system_buffer_ptr_130 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_130 = 0;
        }
        else {
          if (uint_result <= (uint)uintStack_120) goto LAB_1800727ff;
          system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
          system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
        uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      }
LAB_1800727ff:
      ptr_uint_var = (uint64_t *)(system_buffer_ptr_130 + uintStack_128);
      *ptr_uint_var = 0x6973736572707845;
      *(uint32_t *)(ptr_uint_var + 1) = SYSTEM_NODE_HEADER_SIZE3a6e6f;
      *(uint8_t *)((longlong)ptr_uint_var + 0xc) = 0;
      long_result = -1;
      uintStack_128 = uint_result;
      if (systemFlags != 0) {
        do {
          long_result = long_result;
          long_result = long_result + 1;
        } while (*(char *)(long_result + systemFlags) != '\0');
        if (0 < (int)long_result) {
          compare_result = uint_result + (int)long_result;
          if (compare_result != 0) {
            uint_result = compare_result + 1;
            if (system_buffer_ptr_130 == (uint8_t *)0x0) {
              if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
                uint_result = SYSTEM_DATA_COMPARE_SIZE;
              }
              system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
              *system_buffer_ptr_130 = 0;
            }
            else {
              if (uint_result <= (uint)uintStack_120) goto LAB_1800728ad;
              system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
              system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
            }
            uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
            uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
          }
LAB_1800728ad:
                    // WARNING: Subroutine does not return
          memcpy(system_buffer_ptr_130 + uintStack_128,systemFlags,(longlong)((int)long_result + 2));
        }
      }
      uint_result = uint_result + 0xf;
      if (uint_result != 0) {
        uint_result = uint_result + SYSTEM_DATA_COMPARE_SIZE;
        if (system_buffer_ptr_130 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_130 = 0;
        }
        else {
          if (uint_result <= (uint)uintStack_120) goto LAB_180072934;
          system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
          system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
        uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      }
LAB_180072934:
      *(uint16_t *)(system_buffer_ptr_130 + uintStack_128) = 0xa0a;
      *(uint8_t *)((longlong)(system_buffer_ptr_130 + uintStack_128) + 2) = 0;
      uintStack_128 = uint_result;
      if (uint_result + 0x6d != 0) {
        uint_result = uint_result + 0x6e;
        if (system_buffer_ptr_130 == (uint8_t *)0x0) {
          if ((int)uint_result < SYSTEM_DATA_COMPARE_SIZE) {
            uint_result = SYSTEM_DATA_COMPARE_SIZE;
          }
          system_buffer_ptr_130 = (uint8_t *)AllocateSystemResource(systemMemoryPool,(longlong)(int)uint_result,0x13);
          *system_buffer_ptr_130 = 0;
        }
        else {
          if (uint_result <= (uint)uintStack_120) goto LAB_1800729bd;
          system_buffer_ptr_148 = (uint8_t *)CONCAT71(system_buffer_ptr_148._1_7_,0x13);
          system_buffer_ptr_130 = (uint8_t *)AllocateGraphicsMemory(systemMemoryPool,new_var,uint_result,SYSTEM_DATA_COMPARE_SIZE);
        }
        uint_result = ValidateResourceAllocation(system_buffer_ptr_130);
        uintStack_120 = CONCAT44(uintStack_120._4_4_,uint_result);
      }
LAB_1800729bd:
      ptr_uint_var = (uint64_t *)(system_buffer_ptr_130 + uintStack_128);
      *ptr_uint_var = 0x232323232323233c;
      ptr_uint_var[1] = 0x2323232323232323;
      ptr_uint_var[2] = 0x2323232323232323;
      ptr_uint_var[3] = 0x2323232323232323;
      ptr_uint_var[4] = 0x2323232323232323;
      ptr_uint_var[5] = 0x2323232323232323;
      ptr_uint_var[6] = 0x2323232323232323;
      ptr_uint_var[7] = 0x2323232323232323;
      *(uint32_t *)(ptr_uint_var + 8) = 0x23232323;
      *(uint32_t *)((longlong)ptr_uint_var + 0x44) = 0x23232323;
      *(uint32_t *)(ptr_uint_var + 9) = 0x23232323;
      *(uint32_t *)((longlong)ptr_uint_var + 0x4c) = 0x23232323;
      ptr_uint_var[10] = 0x2323232323232323;
      *(uint32_t *)(ptr_uint_var + 0xb) = 0x3e232323;
      *(uint16_t *)((longlong)ptr_uint_var + 0x5c) = 0xa0a;
      *(uint8_t *)((longlong)ptr_uint_var + 0x5e) = 0;
      system_buffer_ptr_148 = &g_system_data_variable3;
      if (system_buffer_ptr_130 != (uint8_t *)0x0) {
        system_buffer_ptr_148 = bufferPtr_130;
      }
      uintStack_128 = uint_result + 0x6d;
      InitializeSystemDataNode30(g_system_context_1,4,0xffffffff00000000,&globalSystemVariable);
      system_buffer_ptr_148 = &g_system_data_variable3;
      if (ptr_uint_var != (void *)0x0) {
        system_buffer_ptr_148 = ptr_uint_var;
      }
      InitializeEventSystem(g_system_context_1,4,0xffffffff00000000,3);
      InitializeGraphicsMemory();
      ptr_uint_var = &g_system_data_variable3;
      if (system_buffer_ptr_130 != (uint8_t *)0x0) {
        ptr_uint_var = bufferPtr_130;
      }
      OutputDebugStringA(ptr_uint_var);
      InitializeSystemModule36(systemFlags);
      ptr_uint_var = &g_system_data_variable3;
      if (thread_parameter_ptr != (void *)0x0) {
        ptr_uint_var = thread_parameter_ptr;
      }
      compare_result = SystemFunction_17_6(ptr_uint_var);
      if ((cStack_118 == '\0') && (compare_result == 0)) {
        if ((g_system_base_1 == 0) || (*(char *)(g_system_base_1 + 0x141) == '\0')) {
          uint_result = 0;
        }
        else {
          uint_result = 1;
        }
        if (g_system_base_1 == 0) {
          system_buffer_ptr_d0 = &resourcePoolPointer;
          uintStack_b8 = 0;
          system_buffer_ptr_c8 = (uint64_t *)0x0;
          uintStack_c0 = 0;
          ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x34,0x13);
          *(uint8_t *)ptr_uint_var = 0;
          system_buffer_ptr_c8 = ptr_uint_var;
          uint_result = ValidateResourceAllocation(ptr_uint_var);
          uintStack_b8 = CONCAT44(uintStack_b8._4_4_,uint_result);
          *ptr_uint_var = 0x7270706d75645c5c;
          ptr_uint_var[1] = 0x2e726f737365636f;
          ptr_uint_var[2] = 0x6c726f77656c6174;
          ptr_uint_var[3] = 0x445c6d6f632e7364;
          *(uint32_t *)(ptr_uint_var + 4) = 0x50706d75;
          *(uint32_t *)((longlong)ptr_uint_var + 0x24) = 0x65636f72;
          *(uint32_t *)(ptr_uint_var + 5) = 0x6e697373;
          *(uint32_t *)((longlong)ptr_uint_var + 0x2c) = 0x6c6f4667;
          *(uint32_t *)(ptr_uint_var + 6) = 0x726564;
          uintStack_c0 = 0x33;
          system_pointer_chain = &bufferPtr_d0system_buffer_ptr_d0;
          uint_result = 2;
          uintStack_114 = 2;
        }
        else {
          system_pointer_chain = (void **)ProcessResourceData(&bufferPtr_80system_buffer_ptr_80,g_system_base_1 + 0x148);
          uint_result = 1;
          uintStack_114 = 1;
          ptr_uint_var = bufferPtr_c8;
        }
        uint_result = ProcessResourceData(&bufferPtr_f0system_buffer_ptr_f0,system_pointer_chain);
        if ((uint_result & 2) != 0) {
          uint_result = uint_result & 0xfffffffd;
          system_buffer_ptr_d0 = &resourcePoolPointer;
          uintStack_114 = uint_result;
          if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation(ptr_uint_var);
          }
          system_buffer_ptr_c8 = (uint64_t *)0x0;
          uintStack_b8 = uintStack_b8 & 0xffffffff00000000;
          system_buffer_ptr_d0 = &globalSystemPointerData;
        }
        if ((uint_result & 1) != 0) {
          uintStack_114 = uint_result & 0xfffffffe;
          system_buffer_ptr_80 = &resourcePoolPointer;
          if (longStack_78 != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          longStack_78 = 0;
          uintStack_68 = 0;
          system_buffer_ptr_80 = &globalSystemPointerData;
        }
        system_buffer_ptr_148 = &g_system_data_variable3;
        if (ptr_uint_var != (void *)0x0) {
          system_buffer_ptr_148 = ptr_uint_var;
        }
        InitializeResourceSystem(uint_result,&bufferPtr_f0system_buffer_ptr_f0,uint_result,parameter_5);
        system_buffer_ptr_f0 = &resourcePoolPointer;
        if (longStack_e8 != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        longStack_e8 = 0;
        uintStack_d8 = 0;
        system_buffer_ptr_f0 = &globalSystemPointerData;
      }
      ptr_uint_var = &g_system_data_variable3;
      if (thread_parameter_ptr != (void *)0x0) {
        ptr_uint_var = thread_parameter_ptr;
      }
      InitializeSystemResources(ptr_uint_var,1);
      if (cStack_117 != '\0') {
        if (*(longlong *)(g_system_base_1 + 8) != 0) {
          SystemCompleteFunction();
        }
        if (systemCoreData != 0) {
          InitializeSystemComponents(systemCoreData,*(uint8_t *)(systemCoreData + 0x160a));
        }
      }
// void InitializeRenderSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeRenderSystem(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  uint64_t uint_result;
  void *system_buffer_ptr_30;
  longlong longStack_28;

  long_ptr = *(longlong **)(g_system_base_1 + 0x2b0);
  if (long_ptr != (longlong *)0x0) {
    uint_result = (**(code **)(*long_ptr + 0x110))(long_ptr,&bufferPtr_30system_buffer_ptr_30,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
    InitializeTextureSystem(resourceIdentifier,uint_result);
    system_buffer_ptr_30 = &resourcePoolPointer;
    if (longStack_28 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

bool InitializeSystemModule4(uint64_t handleIdentifier,uint64_t *resourceIdentifier)

{
  uint32_t uint_result;
  int int_result;
  int compare_result;
  longlong long_result;
  uint64_t *ptr_uint_var;
  uint64_t *node_current;
  uint64_t **pnode_previous;
  uint8_t *node_next;
  uint64_t uint_result;
  uint16_t *ptr_uint_var;
  uint uint_result;
  uint64_t *ptr_uint_var;
  void *ptr_uint_var;
  void *ptr_uint_var;
  char cstack_var;
  uint uint_result;
  void *system_buffer_ptr_110;
  uint64_t *system_buffer_ptr_108;
  int intStack_100;
  uint64_t uintStack_f8;
  void *system_buffer_ptr_f0;
  uint16_t *system_buffer_ptr_e8;
  uint32_t uintStack_e0;
  uint64_t uintStack_d8;
  void *system_buffer_ptr_d0;
  void *system_buffer_ptr_c8;
  uint32_t uintStack_c0;
  ulonglong uintStack_b8;
  void *system_buffer_ptr_b0;
  uint64_t *system_buffer_ptr_a8;
  uint32_t uintStack_a0;
  ulonglong uintStack_98;
  void *system_buffer_ptr_90;
  uint8_t *system_buffer_ptr_88;
  uint32_t uintStack_80;
  ulonglong uintStack_78;
  void *system_buffer_ptr_70;
  uint64_t *system_buffer_ptr_68;
  uint64_t *system_buffer_ptr_60;
  longlong longStack_48;
  uint64_t uintStack_40;

  uintStack_40 = INVALID_HANDLE_VALUE;
  ptr_uint_var = (uint64_t *)0x0;
  compare_result = 0;
  WaitForSingleObject(inputSystemData,300000);
  longStack_48 = systemConfigurationData;
  if (systemConfigurationData != 0) {
    InitializeSystemModule34(systemConfigurationData);
  }
  system_buffer_ptr_f0 = &resourcePoolPointer;
  uintStack_d8 = 0;
  system_buffer_ptr_e8 = (uint16_t *)0x0;
  uintStack_e0 = 0;
  system_buffer_ptr_e8 = (uint16_t *)AllocateSystemResource(systemMemoryPool,SYSTEM_DATA_COMPARE_SIZE,0x13);
  *(uint8_t *)system_buffer_ptr_e8 = 0;
  uint_result = ValidateResourceAllocation(system_buffer_ptr_e8);
  uintStack_d8 = CONCAT44(uintStack_d8._4_4_,uint_result);
  *system_buffer_ptr_e8 = 0xa0a;
  *(uint8_t *)(system_buffer_ptr_e8 + 1) = 0;
  uintStack_e0 = 2;
  system_buffer_ptr_d0 = &resourcePoolPointer;
  uintStack_b8 = 0;
  system_buffer_ptr_c8 = (void *)0x0;
  uintStack_c0 = 0;
  InitializePhysicsSystem(systemConfigurationData,&bufferPtr_68system_buffer_ptr_68);
  if (system_buffer_ptr_68 != system_buffer_ptr_60) {
    ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variablec,&globalSystemVariable);
    node_current = ptr_uint_var;
    ptr_uint_var = ptr_uint_var;
    if ((longlong)system_buffer_ptr_60 - (longlong)system_buffer_ptr_68 >> 5 != 0) {
      do {
        ptr_uint_var = &g_system_data_variable3;
        if (*(void **)((longlong)(node_current + 1) + (longlong)system_buffer_ptr_68) != (void *)0x0) {
          ptr_uint_var = *(void **)((longlong)(node_current + 1) + (longlong)system_buffer_ptr_68);
        }
        ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variablec,ptr_uint_var);
        uint_result = (int)ptr_uint_var + 1;
        node_current = node_current + 4;
        ptr_uint_var = (uint64_t *)(ulonglong)uint_result;
      } while ((ulonglong)(longlong)(int)uint_result <
               (ulonglong)((longlong)system_buffer_ptr_60 - (longlong)system_buffer_ptr_68 >> 5));
    }
    ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&globalSystemVariable,&globalSystemVariable);
    InitializeSystemModule29(&bufferPtr_110system_buffer_ptr_110);
    if (intStack_100 != 0) {
      ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variablec,&g_system_global_variable8);
      node_current = (uint64_t *)&g_system_data_variable3;
      if (system_buffer_ptr_108 != (uint64_t *)0x0) {
        node_current = bufferPtr_108;
      }
      ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variable8,node_current);
      ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&globalSystemVariable,&globalSystemVariable);
    }
    system_buffer_ptr_110 = &resourcePoolPointer;
    if (system_buffer_ptr_108 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_108 = (uint64_t *)0x0;
    uintStack_f8 = (ulonglong)uintStack_f8._4_4_ << SYSTEM_NODE_HEADER_SIZE;
    system_buffer_ptr_110 = &globalSystemPointerData;
  }
  long_result = InitializeSystemLogger(&bufferPtr_110system_buffer_ptr_110,resourceIdentifier[1]);
  uintStack_c0 = *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  ptr_uint_var = *(void **)(long_result + 8);
  uintStack_b8 = *(ulonglong *)(long_result + 0x18);
  *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
  *(uint64_t *)(long_result + 8) = 0;
  *(uint64_t *)(long_result + 0x18) = 0;
  system_buffer_ptr_110 = &resourcePoolPointer;
  system_buffer_ptr_c8 = ptr_uint_var;
  system_buffer_ptr_70 = ptr_uint_var;
  if (system_buffer_ptr_108 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  system_buffer_ptr_108 = (uint64_t *)0x0;
  uintStack_f8 = uintStack_f8 & 0xffffffff00000000;
  system_buffer_ptr_110 = &globalSystemPointerData;
  ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variable8,*(uint32_t *)*resourceIdentifier,
                *(uint64_t *)((uint32_t *)*resourceIdentifier + 4));
  ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variablec,&g_system_global_variable8);
  ptr_uint_var = &g_system_data_variable3;
  if (ptr_uint_var != (void *)0x0) {
    ptr_uint_var = ptr_uint_var;
  }
  ConfigureBufferAttributes(&bufferPtr_f0system_buffer_ptr_f0,&g_system_global_variablec,ptr_uint_var);
  ptr_uint_var = (uint16_t *)&g_system_data_variable3;
  if (system_buffer_ptr_e8 != (uint16_t *)0x0) {
    ptr_uint_var = bufferPtr_e8;
  }
  InitializeEventSystem(g_system_context_1,5,0xffffffff00000000,3,&g_system_global_variablec,ptr_uint_var);
  InitializeGraphicsMemory();
  long_result = g_system_base_1;
  if (g_system_base_1 == 0) {
    cstack_var = '\0';
    system_buffer_ptr_110 = &resourcePoolPointer;
    uintStack_f8 = 0;
    system_buffer_ptr_108 = (uint64_t *)0x0;
    intStack_100 = 0;
    node_current = (uint64_t *)AllocateSystemResource(systemMemoryPool,0x34,0x13);
    *(uint8_t *)node_current = 0;
    system_buffer_ptr_108 = node_current;
    uint_result = ValidateResourceAllocation(node_current);
    uintStack_f8 = CONCAT44(uintStack_f8._4_4_,uint_result);
    *node_current = 0x7270706d75645c5c;
    node_current[1] = 0x2e726f737365636f;
    node_current[2] = 0x6c726f77656c6174;
    node_current[3] = 0x445c6d6f632e7364;
    *(uint32_t *)(node_current + 4) = 0x50706d75;
    *(uint32_t *)((longlong)node_current + 0x24) = 0x65636f72;
    *(uint32_t *)(node_current + 5) = 0x6e697373;
    *(uint32_t *)((longlong)node_current + 0x2c) = 0x6c6f4667;
    *(uint32_t *)(node_current + 6) = 0x726564;
    compare_result = 0x33;
    intStack_100 = 0x33;
    uint_result = 2;
    uint_result = 2;
    pnode_previous = &bufferPtr_108system_buffer_ptr_108;
    ptr_uint_var = bufferPtr_a8;
  }
  else {
    cstack_var = *(char *)(g_system_base_1 + 0x141);
    system_buffer_ptr_b0 = &resourcePoolPointer;
    uintStack_98 = 0;
    system_buffer_ptr_a8 = (uint64_t *)0x0;
    uintStack_a0 = 0;
    if (*(int *)(g_system_base_1 + 0x158) != 0) {
      int_result = *(int *)(g_system_base_1 + 0x158) + 1;
      if (int_result < SYSTEM_DATA_COMPARE_SIZE) {
        int_result = SYSTEM_DATA_COMPARE_SIZE;
      }
      ptr_uint_var = (uint64_t *)AllocateSystemResource(systemMemoryPool,(longlong)int_result,0x13);
      *(uint8_t *)ptr_uint_var = 0;
      system_buffer_ptr_a8 = ptr_uint_var;
      uint_result = ValidateResourceAllocation(ptr_uint_var);
      uintStack_98 = CONCAT44(uintStack_98._4_4_,uint_result);
      if (*(int *)(long_result + 0x158) != 0) {
                    // WARNING: Subroutine does not return
        memcpy(ptr_uint_var,*(uint64_t *)(long_result + 0x150),*(int *)(long_result + 0x158) + 1);
      }
    }
    if (*(longlong *)(long_result + 0x150) != 0) {
      uintStack_a0 = 0;
      if (ptr_uint_var != (uint64_t *)0x0) {
        *(uint8_t *)ptr_uint_var = 0;
      }
      uintStack_98 = uintStack_98 & 0xffffffff;
    }
    uint_result = 1;
    uint_result = 1;
    pnode_previous = &bufferPtr_a8system_buffer_ptr_a8;
    node_current = bufferPtr_108;
  }
  system_buffer_ptr_90 = &resourcePoolPointer;
  uintStack_78 = 0;
  system_buffer_ptr_88 = (uint8_t *)0x0;
  uintStack_80 = 0;
  if (compare_result != 0) {
    uint_result = compare_result + 1;
    uint_result = uint_result;
    if (uint_result < SYSTEM_DATA_COMPARE_SIZE) {
      uint_result = SYSTEM_DATA_COMPARE_SIZE;
    }
    node_next = (uint8_t *)AllocateSystemResource(systemMemoryPool,uint_result,0x13);
    *node_next = 0;
    system_buffer_ptr_88 = node_next;
    uint_result = ValidateResourceAllocation(node_next);
    uintStack_78 = CONCAT44(uintStack_78._4_4_,uint_result);
                    // WARNING: Subroutine does not return
    memcpy(node_next,*pnode_previous,uint_result);
  }
  uintStack_78 = 0;
  uintStack_80 = 0;
  if ((uint_result & 2) != 0) {
    uint_result = uint_result & 0xfffffffd;
    system_buffer_ptr_110 = &resourcePoolPointer;
    if (node_current != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(node_current);
    }
    system_buffer_ptr_108 = (uint64_t *)0x0;
    uintStack_f8 = uintStack_f8 & 0xffffffff00000000;
    system_buffer_ptr_110 = &globalSystemPointerData;
    uint_result = uint_result;
  }
  if ((uint_result & 1) != 0) {
    uint_result = uint_result & 0xfffffffe;
    system_buffer_ptr_b0 = &resourcePoolPointer;
    if (ptr_uint_var != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(ptr_uint_var);
    }
    system_buffer_ptr_a8 = (uint64_t *)0x0;
    uintStack_98 = uintStack_98 & 0xffffffff00000000;
    system_buffer_ptr_b0 = &globalSystemPointerData;
  }
  ptr_uint_var = &g_system_data_variable3;
  if (ptr_uint_var != (void *)0x0) {
    ptr_uint_var = ptr_uint_var;
  }
  InitializeSystemModule30(0,&bufferPtr_90system_buffer_ptr_90,cstack_var,1,ptr_uint_var,ptr_uint_var,uint_result);
  if (longStack_48 != 0) {
    InitializeSystemDataNode29();
  }
  do {
    compare_result = ReleaseSemaphore(inputSystemData,1);
  } while (compare_result == 0);
  uint_result = __acrt_iob_func(1);
  fflush(uint_result);
  uint_result = __acrt_iob_func(2);
  fflush(uint_result);
  system_buffer_ptr_90 = &resourcePoolPointer;
  if (system_buffer_ptr_88 == (uint8_t *)0x0) {
    system_buffer_ptr_88 = (uint8_t *)0x0;
    uintStack_78 = uintStack_78 & 0xffffffff00000000;
    system_buffer_ptr_90 = &globalSystemPointerData;
    for (ptr_uint_var = bufferPtr_68; ptr_uint_var != bufferPtr_60; ptr_uint_var = ptr_uint_var + 4) {
      (**(code **)*ptr_uint_var)(ptr_uint_var,0);
    }
    if (system_buffer_ptr_68 != (uint64_t *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_d0 = &resourcePoolPointer;
    if (system_buffer_ptr_70 != (void *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    system_buffer_ptr_c8 = (void *)0x0;
    uintStack_b8 = uintStack_b8 & 0xffffffff00000000;
    system_buffer_ptr_d0 = &globalSystemPointerData;
    system_buffer_ptr_f0 = &resourcePoolPointer;
    if (system_buffer_ptr_e8 == (uint16_t *)0x0) {
      return cstack_var != '\0';
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeUISystem(uint64_t handleIdentifier,uint64_t resourceIdentifier)
void InitializeUISystem(uint64_t handleIdentifier,uint64_t resourceIdentifier)

{
  void *ptr_uint_var;
  char char_var;
  uint32_t aflag_initialized [4];
  void *system_buffer_ptr_30;
  longlong longStack_28;

  InitializeEventSystem(g_system_context_1,0,SYSTEM_DATA_COMPARE_SIZE0000000,0,&g_system_global_variable8,resourceIdentifier,INVALID_HANDLE_VALUE);
  if (g_system_data_variable0 == '\0') {
    aflag_initialized[0] = 0xffff0000;
    UpdateSystemBuffer(&bufferPtr_30system_buffer_ptr_30,resourceIdentifier);
    ptr_uint_var = *(void **)*systemConfigurationData;
    if (ptr_uint_var == &systemNextData) {
      char_var = *(int *)(systemConfigurationData + 0xc40) != 0;
    }
    else {
      char_var = (**(code **)(ptr_uint_var + 0x50))((uint64_t *)*systemConfigurationData);
    }
    if (char_var == '\0') {
      (**(code **)(*(longlong *)systemConfigurationData[1] + 0x18))
                ((longlong *)systemConfigurationData[1],&bufferPtr_30system_buffer_ptr_30,aflag_initialized);
    }
    system_buffer_ptr_30 = &resourcePoolPointer;
    if (longStack_28 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_88_0(uint64_t handleIdentifier,uint64_t resourceIdentifier)
void SystemFunction_88_0(uint64_t handleIdentifier,uint64_t resourceIdentifier)

{
  void *ptr_uint_var;
  char char_var;
  uint32_t aflag_initialized [4];
  void *system_buffer_ptr_30;
  longlong longStack_28;

  InitializeEventSystem(g_system_context_1,0,SYSTEM_DATA_COMPARE_SIZE0000000,1,&g_system_global_variable8,resourceIdentifier,INVALID_HANDLE_VALUE);
  if (g_system_data_variable0 == '\0') {
    aflag_initialized[0] = 0xff00ff00;
    UpdateSystemBuffer(&bufferPtr_30system_buffer_ptr_30,resourceIdentifier);
    ptr_uint_var = *(void **)*systemConfigurationData;
    if (ptr_uint_var == &systemNextData) {
      char_var = *(int *)(systemConfigurationData + 0xc40) != 0;
    }
    else {
      char_var = (**(code **)(ptr_uint_var + 0x50))((uint64_t *)*systemConfigurationData);
    }
    if (char_var == '\0') {
      (**(code **)(*(longlong *)systemConfigurationData[1] + 0x18))
                ((longlong *)systemConfigurationData[1],&bufferPtr_30system_buffer_ptr_30,aflag_initialized);
    }
    system_buffer_ptr_30 = &resourcePoolPointer;
    if (longStack_28 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ValidateSystemConfiguration(uint64_t handleIdentifier,uint32_t resourceIdentifier,uint64_t systemConfig)
void ValidateSystemConfiguration(uint64_t handleIdentifier,uint32_t resourceIdentifier,uint64_t systemConfig)

{
  void *ptr_uint_var;
  char char_var;
  uint32_t localBuffer_X20 [2];
  void *system_buffer_ptr_30;
  longlong longStack_28;

  InitializeEventSystem(g_system_context_1,0,SYSTEM_DATA_COMPARE_SIZE0000000,0xc,&g_system_global_variable8,systemConfig,INVALID_HANDLE_VALUE);
  if (g_system_data_variable0 == '\0') {
    localBuffer_X20[0] = resourceIdentifier;
    UpdateSystemBuffer(&bufferPtr_30system_buffer_ptr_30,systemConfig);
    ptr_uint_var = *(void **)*systemConfigurationData;
    if (ptr_uint_var == &systemNextData) {
      char_var = *(int *)(systemConfigurationData + 0xc40) != 0;
    }
    else {
      char_var = (**(code **)(ptr_uint_var + 0x50))((uint64_t *)*systemConfigurationData);
    }
    if (char_var == '\0') {
      (**(code **)(*(longlong *)systemConfigurationData[1] + 0x18))
                ((longlong *)systemConfigurationData[1],&bufferPtr_30system_buffer_ptr_30,localBuffer_X20);
    }
    system_buffer_ptr_30 = &resourcePoolPointer;
    if (longStack_28 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  return;
}
// void get_audio_init_function(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void get_audio_init_function(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  void *system_buffer_ptr_88;
  uint64_t uintStack_80;
  uint32_t uintStack_78;
  uint64_t uintStack_70;
  uint64_t uintStack_68;
  uint64_t uintStack_60;
  uint64_t uintStack_58;
  uint32_t uintStack_50;
  uint64_t uintStack_48;
  uint64_t uintStack_40;
  uint16_t uintStack_38;
  uint64_t uintStack_36;
  uint64_t uintStack_2e;
  uint16_t uintStack_26;
  uint64_t uintStack_18;

  uintStack_18 = INVALID_HANDLE_VALUE;
  system_buffer_ptr_88 = &resourcePoolPointer;
  uintStack_70 = 0;
  uintStack_80 = 0;
  uintStack_78 = 0;
  uintStack_68 = 0;
  uintStack_60 = 0;
  uintStack_58 = 0;
  uintStack_50 = 3;
  uintStack_38 = 0;
  uintStack_48 = 0;
  uintStack_40 = 0;
  uintStack_26 = 0;
  uintStack_36 = 0;
  uintStack_2e = 0;
  InitializeSystemModule41(&bufferPtr_88system_buffer_ptr_88,handleIdentifier,systemConfig,systemFlags,&uintStack_68);
  InitializeSystemModule35(&bufferPtr_88system_buffer_ptr_88,systemConfig);
  InitializeStringManagerSystem(&bufferPtr_88system_buffer_ptr_88);
  return;
}
// void InitializeStringManagerSystem(uint64_t *handleIdentifier)

void InitializeStringManagerSystem(uint64_t *handleIdentifier)

{
  if (*(longlong *)((longlong)handleIdentifier + 0x52) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)((longlong)handleIdentifier + 0x52) = 0;
  if (*(longlong *)((longlong)handleIdentifier + 0x5a) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)((longlong)handleIdentifier + 0x5a) = 0;
  if (handleIdentifier[8] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[8] = 0;
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[9] = 0;
  InitializeSystemModule45();
  *handleIdentifier = &resourcePoolPointer;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  *(uint32_t *)(handleIdentifier + 3) = 0;
  *handleIdentifier = &globalSystemPointerData;
  return;
}
// void InitializeSecuritySystem(longlong *handleIdentifier)

void InitializeSecuritySystem(longlong *handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;

  long_ptr = (longlong *)handleIdentifier[1];
  long_ptr = (longlong *)*handleIdentifier;
  while( true ) {
    if (long_ptr == long_ptr) {
      if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      return;
    }
    if (*(longlong *)((longlong)long_ptr + 0x12) != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *(uint64_t *)((longlong)long_ptr + 0x12) = 0;
    if (*(longlong *)((longlong)long_ptr + 0x1a) != 0) break;
    *(uint64_t *)((longlong)long_ptr + 0x1a) = 0;
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *long_ptr = 0;
    if (long_ptr[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    long_ptr[1] = 0;
    long_ptr = (longlong *)((longlong)long_ptr + 0x24);
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemModule35(longlong handleIdentifier,longlong *resourceIdentifier)

void InitializeSystemModule35(longlong handleIdentifier,longlong *resourceIdentifier)

{
  ushort uint_result;
  uint64_t uint_result;
  int *pcompare_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  longlong long_result;
  longlong long_result;
  int int_result;
  ulonglong uint_result;
  longlong long_result;

  UtilityFunction39ec0(resourceIdentifier,handleIdentifier);
  long_result = *(longlong *)(handleIdentifier + 0x28) - *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  pcompare_result = (int *)resourceIdentifier[1];
  long_result = long_result / 0x12 + (long_result >> 0x3f);
  int_result = (int)(long_result >> 1) - (int)(long_result >> 0x3f);
  if ((ulonglong)((*resourceIdentifier - (longlong)pcompare_result) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)pcompare_result + (4 - *resourceIdentifier));
    pcompare_result = (int *)resourceIdentifier[1];
  }
  *pcompare_result = int_result;
  ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 4);
  resourceIdentifier[1] = (longlong)ptr_uint_var;
  long_result = (longlong)int_result;
  if (0 < int_result) {
    long_result = 0;
    do {
      long_result = *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + long_result;
      if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
        UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
        ptr_uint_var = (uint32_t *)resourceIdentifier[1];
      }
      *ptr_uint_var = 0;
      resourceIdentifier[1] = resourceIdentifier[1] + 4;
      ptr_uint_var = (uint32_t *)resourceIdentifier[1];
      if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
        UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
        ptr_uint_var = (uint32_t *)resourceIdentifier[1];
      }
      *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
      resourceIdentifier[1] = resourceIdentifier[1] + 4;
      ptr_uint_var = (uint *)resourceIdentifier[1];
      uint_result = *(ushort *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
      if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
        UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
        ptr_uint_var = (uint *)resourceIdentifier[1];
      }
      *ptr_uint_var = (uint)uint_result;
      ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 4);
      resourceIdentifier[1] = (longlong)ptr_uint_var;
      if (*(ushort *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0) {
        uint_result = *(uint64_t *)(long_result + 8);
        uint_result = (ulonglong)*(ushort *)(long_result + SYSTEM_DATA_COMPARE_SIZE) * 4;
        if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) <= uint_result) {
          UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (uint_result - *resourceIdentifier));
          ptr_uint_var = (uint32_t *)resourceIdentifier[1];
        }
                    // WARNING: Subroutine does not return
        memcpy(ptr_uint_var,uint_result,uint_result);
      }
      long_result = *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + long_result;
      if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
        UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
        ptr_uint_var = (uint32_t *)resourceIdentifier[1];
      }
      *ptr_uint_var = 0;
      resourceIdentifier[1] = resourceIdentifier[1] + 4;
      ptr_uint_var = (uint32_t *)resourceIdentifier[1];
      if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
        UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
        ptr_uint_var = (uint32_t *)resourceIdentifier[1];
      }
      *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
      resourceIdentifier[1] = resourceIdentifier[1] + 4;
      ptr_uint_var = (uint *)resourceIdentifier[1];
      uint_result = *(ushort *)(long_result + 0x22);
      if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
        UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
        ptr_uint_var = (uint *)resourceIdentifier[1];
      }
      *ptr_uint_var = (uint)uint_result;
      ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 4);
      resourceIdentifier[1] = (longlong)ptr_uint_var;
      if (*(ushort *)(long_result + 0x22) != 0) {
        uint_result = *(uint64_t *)(long_result + 0x1a);
        uint_result = (ulonglong)*(ushort *)(long_result + 0x22) * 4;
        if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) <= uint_result) {
          UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (uint_result - *resourceIdentifier));
          ptr_uint_var = (uint32_t *)resourceIdentifier[1];
        }
                    // WARNING: Subroutine does not return
        memcpy(ptr_uint_var,uint_result,uint_result);
      }
      long_result = long_result + 0x24;
      long_result = long_result + -1;
    } while (long_result != 0);
  }
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = 0;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  ptr_uint_var = (uint *)resourceIdentifier[1];
  uint_result = *(ushort *)(handleIdentifier + 0x50);
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint *)resourceIdentifier[1];
  }
  *ptr_uint_var = (uint)uint_result;
  ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 4);
  resourceIdentifier[1] = (longlong)ptr_uint_var;
  if (*(ushort *)(handleIdentifier + 0x50) != 0) {
    uint_result = *(uint64_t *)(handleIdentifier + 0x48);
    uint_result = (ulonglong)*(ushort *)(handleIdentifier + 0x50) * 4;
    if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) <= uint_result) {
      UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (uint_result - *resourceIdentifier));
      ptr_uint_var = (uint32_t *)resourceIdentifier[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(ptr_uint_var,uint_result,uint_result);
  }
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = 0;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  ptr_uint_var = (uint *)resourceIdentifier[1];
  uint_result = *(ushort *)(handleIdentifier + 0x62);
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint *)resourceIdentifier[1];
  }
  *ptr_uint_var = (uint)uint_result;
  long_result = resourceIdentifier[1] + 4;
  resourceIdentifier[1] = long_result;
  if (*(ushort *)(handleIdentifier + 0x62) == 0) {
    return;
  }
  uint_result = *(uint64_t *)(handleIdentifier + 0x5a);
  uint_result = (ulonglong)*(ushort *)(handleIdentifier + 0x62) * 4;
  if ((ulonglong)((*resourceIdentifier - long_result) + resourceIdentifier[2]) <= uint_result) {
    UtilityFunction39bf0(resourceIdentifier,uint_result + (long_result - *resourceIdentifier));
    long_result = resourceIdentifier[1];
  }
                    // WARNING: Subroutine does not return
  memcpy(long_result,uint_result,uint_result);
}
// void SystemFunction_82_0(longlong handleIdentifier)

void SystemFunction_82_0(longlong handleIdentifier)

{
  ushort uint_result;
  uint64_t uint_result;
  int *pcompare_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  longlong long_result;
  longlong *system_RBX;
  longlong long_result;
  int int_result;
  ulonglong uint_result;
  longlong long_result;

  UtilityFunction39ec0();
  long_result = *(longlong *)(handleIdentifier + 0x28) - *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  pcompare_result = (int *)system_RBX[1];
  long_result = long_result / 0x12 + (long_result >> 0x3f);
  int_result = (int)(long_result >> 1) - (int)(long_result >> 0x3f);
  if ((ulonglong)((*system_RBX - (longlong)pcompare_result) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    pcompare_result = (int *)system_RBX[1];
  }
  *pcompare_result = int_result;
  ptr_uint_var = (uint32_t *)(system_RBX[1] + 4);
  system_RBX[1] = (longlong)ptr_uint_var;
  long_result = (longlong)int_result;
  if (0 < int_result) {
    long_result = 0;
    do {
      long_result = *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + long_result;
      if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
        UtilityFunction39bf0();
        ptr_uint_var = (uint32_t *)system_RBX[1];
      }
      *ptr_uint_var = 0;
      system_RBX[1] = system_RBX[1] + 4;
      ptr_uint_var = (uint32_t *)system_RBX[1];
      if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
        UtilityFunction39bf0();
        ptr_uint_var = (uint32_t *)system_RBX[1];
      }
      *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
      system_RBX[1] = system_RBX[1] + 4;
      ptr_uint_var = (uint *)system_RBX[1];
      uint_result = *(ushort *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
      if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
        UtilityFunction39bf0();
        ptr_uint_var = (uint *)system_RBX[1];
      }
      *ptr_uint_var = (uint)uint_result;
      ptr_uint_var = (uint32_t *)(system_RBX[1] + 4);
      system_RBX[1] = (longlong)ptr_uint_var;
      if (*(ushort *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0) {
        uint_result = *(uint64_t *)(long_result + 8);
        uint_result = (ulonglong)*(ushort *)(long_result + SYSTEM_DATA_COMPARE_SIZE) * 4;
        if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) <= uint_result) {
          UtilityFunction39bf0();
          ptr_uint_var = (uint32_t *)system_RBX[1];
        }
                    // WARNING: Subroutine does not return
        memcpy(ptr_uint_var,uint_result,uint_result);
      }
      long_result = *(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + long_result;
      if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
        UtilityFunction39bf0();
        ptr_uint_var = (uint32_t *)system_RBX[1];
      }
      *ptr_uint_var = 0;
      system_RBX[1] = system_RBX[1] + 4;
      ptr_uint_var = (uint32_t *)system_RBX[1];
      if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
        UtilityFunction39bf0();
        ptr_uint_var = (uint32_t *)system_RBX[1];
      }
      *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
      system_RBX[1] = system_RBX[1] + 4;
      ptr_uint_var = (uint *)system_RBX[1];
      uint_result = *(ushort *)(long_result + 0x22);
      if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
        UtilityFunction39bf0();
        ptr_uint_var = (uint *)system_RBX[1];
      }
      *ptr_uint_var = (uint)uint_result;
      ptr_uint_var = (uint32_t *)(system_RBX[1] + 4);
      system_RBX[1] = (longlong)ptr_uint_var;
      if (*(ushort *)(long_result + 0x22) != 0) {
        uint_result = *(uint64_t *)(long_result + 0x1a);
        uint_result = (ulonglong)*(ushort *)(long_result + 0x22) * 4;
        if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) <= uint_result) {
          UtilityFunction39bf0();
          ptr_uint_var = (uint32_t *)system_RBX[1];
        }
                    // WARNING: Subroutine does not return
        memcpy(ptr_uint_var,uint_result,uint_result);
      }
      long_result = long_result + 0x24;
      long_result = long_result + -1;
    } while (long_result != 0);
  }
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = 0;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(handleIdentifier + 0x50);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  ptr_uint_var = (uint32_t *)(system_RBX[1] + 4);
  system_RBX[1] = (longlong)ptr_uint_var;
  if (*(ushort *)(handleIdentifier + 0x50) != 0) {
    uint_result = *(uint64_t *)(handleIdentifier + 0x48);
    uint_result = (ulonglong)*(ushort *)(handleIdentifier + 0x50) * 4;
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint32_t *)system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(ptr_uint_var,uint_result,uint_result);
  }
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = 0;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(handleIdentifier + 0x62);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  long_result = system_RBX[1] + 4;
  system_RBX[1] = long_result;
  if (*(ushort *)(handleIdentifier + 0x62) == 0) {
    return;
  }
  uint_result = *(uint64_t *)(handleIdentifier + 0x5a);
  uint_result = (ulonglong)*(ushort *)(handleIdentifier + 0x62) * 4;
  if ((ulonglong)((*system_RBX - long_result) + system_RBX[2]) <= uint_result) {
    UtilityFunction39bf0();
    long_result = system_RBX[1];
  }
                    // WARNING: Subroutine does not return
  memcpy(long_result,uint_result,uint_result);
}
// void SystemFunction_95_6(uint *handleIdentifier)

void SystemFunction_95_6(uint *handleIdentifier)

{
  ushort uint_result;
  uint64_t uint_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  longlong *system_RBX;
  longlong allocation_size;
  ulonglong uint_result;
  longlong system_R12;
  uint system_R13D;
  longlong system_R15;

  uint_result = (ulonglong)system_R13D;
  do {
    allocation_size = *(longlong *)(system_R15 + SYSTEM_NODE_HEADER_SIZE) + uint_result;
    if ((ulonglong)((*system_RBX - (longlong)handleIdentifier) + system_RBX[2]) < 5) {
      UtilityFunction39bf0();
      handleIdentifier = (uint *)system_RBX[1];
    }
    *handleIdentifier = system_R13D;
    system_RBX[1] = system_RBX[1] + 4;
    ptr_uint_var = (uint32_t *)system_RBX[1];
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint32_t *)system_RBX[1];
    }
    *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
    system_RBX[1] = system_RBX[1] + 4;
    ptr_uint_var = (uint *)system_RBX[1];
    uint_result = *(ushort *)(allocation_size + SYSTEM_DATA_COMPARE_SIZE);
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint *)system_RBX[1];
    }
    *ptr_uint_var = (uint)uint_result;
    ptr_uint_var = (uint *)(system_RBX[1] + 4);
    system_RBX[1] = (longlong)ptr_uint_var;
    if (*(ushort *)(allocation_size + SYSTEM_DATA_COMPARE_SIZE) != 0) {
      uint_result = *(uint64_t *)(allocation_size + 8);
      uint_result = (ulonglong)*(ushort *)(allocation_size + SYSTEM_DATA_COMPARE_SIZE) * 4;
      if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) <= uint_result) {
        UtilityFunction39bf0();
        ptr_uint_var = (uint *)system_RBX[1];
      }
                    // WARNING: Subroutine does not return
      memcpy(ptr_uint_var,uint_result,uint_result);
    }
    allocation_size = *(longlong *)(system_R15 + SYSTEM_NODE_HEADER_SIZE) + uint_result;
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint *)system_RBX[1];
    }
    *ptr_uint_var = system_R13D;
    system_RBX[1] = system_RBX[1] + 4;
    ptr_uint_var = (uint32_t *)system_RBX[1];
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint32_t *)system_RBX[1];
    }
    *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
    system_RBX[1] = system_RBX[1] + 4;
    ptr_uint_var = (uint *)system_RBX[1];
    uint_result = *(ushort *)(allocation_size + 0x22);
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint *)system_RBX[1];
    }
    *ptr_uint_var = (uint)uint_result;
    handleIdentifier = (uint *)(system_RBX[1] + 4);
    system_RBX[1] = (longlong)handleIdentifier;
    if (*(ushort *)(allocation_size + 0x22) != 0) {
      uint_result = *(uint64_t *)(allocation_size + 0x1a);
      uint_result = (ulonglong)*(ushort *)(allocation_size + 0x22) * 4;
      if ((ulonglong)((*system_RBX - (longlong)handleIdentifier) + system_RBX[2]) <= uint_result) {
        UtilityFunction39bf0();
        handleIdentifier = (uint *)system_RBX[1];
      }
                    // WARNING: Subroutine does not return
      memcpy(handleIdentifier,uint_result,uint_result);
    }
    uint_result = uint_result + 0x24;
    system_R12 = system_R12 + -1;
  } while (system_R12 != 0);
  if ((ulonglong)((*system_RBX - (longlong)handleIdentifier) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    handleIdentifier = (uint *)system_RBX[1];
  }
  *handleIdentifier = system_R13D;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(system_R15 + 0x50);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  ptr_uint_var = (uint *)(system_RBX[1] + 4);
  system_RBX[1] = (longlong)ptr_uint_var;
  if (*(ushort *)(system_R15 + 0x50) != 0) {
    uint_result = *(uint64_t *)(system_R15 + 0x48);
    uint_result = (ulonglong)*(ushort *)(system_R15 + 0x50) * 4;
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint *)system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(ptr_uint_var,uint_result,uint_result);
  }
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = system_R13D;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(system_R15 + 0x62);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  allocation_size = system_RBX[1] + 4;
  system_RBX[1] = allocation_size;
  if (*(ushort *)(system_R15 + 0x62) != 0) {
    uint_result = *(uint64_t *)(system_R15 + 0x5a);
    uint_result = (ulonglong)*(ushort *)(system_R15 + 0x62) * 4;
    if ((ulonglong)((*system_RBX - allocation_size) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      allocation_size = system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(allocation_size,uint_result,uint_result);
  }
  return;
}
// void SystemFunction_63_5(uint32_t *handleIdentifier)

void SystemFunction_63_5(uint32_t *handleIdentifier)

{
  ushort uint_result;
  uint64_t uint_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  longlong allocation_size;
  longlong *system_RBX;
  ulonglong uint_result;
  uint32_t system_R13D;
  longlong system_R15;

  if ((ulonglong)((*system_RBX - (longlong)handleIdentifier) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    handleIdentifier = (uint32_t *)system_RBX[1];
  }
  *handleIdentifier = system_R13D;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(system_R15 + 0x50);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  ptr_uint_var = (uint32_t *)(system_RBX[1] + 4);
  system_RBX[1] = (longlong)ptr_uint_var;
  if (*(ushort *)(system_R15 + 0x50) != 0) {
    uint_result = *(uint64_t *)(system_R15 + 0x48);
    uint_result = (ulonglong)*(ushort *)(system_R15 + 0x50) * 4;
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint32_t *)system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(ptr_uint_var,uint_result,uint_result);
  }
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = system_R13D;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(system_R15 + 0x62);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  allocation_size = system_RBX[1] + 4;
  system_RBX[1] = allocation_size;
  if (*(ushort *)(system_R15 + 0x62) != 0) {
    uint_result = *(uint64_t *)(system_R15 + 0x5a);
    uint_result = (ulonglong)*(ushort *)(system_R15 + 0x62) * 4;
    if ((ulonglong)((*system_RBX - allocation_size) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      allocation_size = system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(allocation_size,uint_result,uint_result);
  }
  return;
}
// void SystemFunction_65_9(void)

void SystemFunction_65_9(void)

{
  ushort uint_result;
  uint64_t uint_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  longlong allocation_size;
  longlong *system_RBX;
  ulonglong uint_result;
  uint32_t system_R13D;
  longlong system_R15;

  UtilityFunction39bf0();
  *(uint32_t *)system_RBX[1] = system_R13D;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(system_R15 + 0x50);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  ptr_uint_var = (uint32_t *)(system_RBX[1] + 4);
  system_RBX[1] = (longlong)ptr_uint_var;
  if (*(ushort *)(system_R15 + 0x50) != 0) {
    uint_result = *(uint64_t *)(system_R15 + 0x48);
    uint_result = (ulonglong)*(ushort *)(system_R15 + 0x50) * 4;
    if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      ptr_uint_var = (uint32_t *)system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(ptr_uint_var,uint_result,uint_result);
  }
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = system_R13D;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint32_t *)system_RBX[1];
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint32_t *)system_RBX[1];
  }
  *ptr_uint_var = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(system_R15 + 0x62);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  allocation_size = system_RBX[1] + 4;
  system_RBX[1] = allocation_size;
  if (*(ushort *)(system_R15 + 0x62) != 0) {
    uint_result = *(uint64_t *)(system_R15 + 0x5a);
    uint_result = (ulonglong)*(ushort *)(system_R15 + 0x62) * 4;
    if ((ulonglong)((*system_RBX - allocation_size) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      allocation_size = system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(allocation_size,uint_result,uint_result);
  }
  return;
}
// void InitializeSystemDataNode26(void)

void InitializeSystemDataNode26(void)

{
  ushort uint_result;
  uint64_t uint_result;
  uint *ptr_uint_var;
  longlong long_result;
  longlong *system_RBX;
  ulonglong uint_result;
  longlong system_R15;

  UtilityFunction39bf0();
  *(uint32_t *)system_RBX[1] = SYSTEM_DATA_COMPARE_SIZE;
  system_RBX[1] = system_RBX[1] + 4;
  ptr_uint_var = (uint *)system_RBX[1];
  uint_result = *(ushort *)(system_R15 + 0x62);
  if ((ulonglong)((*system_RBX - (longlong)ptr_uint_var) + system_RBX[2]) < 5) {
    UtilityFunction39bf0();
    ptr_uint_var = (uint *)system_RBX[1];
  }
  *ptr_uint_var = (uint)uint_result;
  long_result = system_RBX[1] + 4;
  system_RBX[1] = long_result;
  if (*(ushort *)(system_R15 + 0x62) != 0) {
    uint_result = *(uint64_t *)(system_R15 + 0x5a);
    uint_result = (ulonglong)*(ushort *)(system_R15 + 0x62) * 4;
    if ((ulonglong)((*system_RBX - long_result) + system_RBX[2]) <= uint_result) {
      UtilityFunction39bf0();
      long_result = system_RBX[1];
    }
                    // WARNING: Subroutine does not return
    memcpy(long_result,uint_result,uint_result);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule41(longlong *handleIdentifier,longlong resourceIdentifier)
void InitializeSystemModule41(longlong *handleIdentifier,longlong resourceIdentifier)

{
  longlong *long_ptr;
  int *ptr_int_var;
  uint uint_result;
  int int_result;
  longlong allocation_size;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  uint *ptr_uint_var;
  longlong long_result;
  longlong long_result;
  longlong *long_ptr;

  uint_result = **(uint **)(resourceIdentifier + 8);
  ptr_uint_var = *(uint **)(resourceIdentifier + 8) + 1;
  *(uint **)(resourceIdentifier + 8) = ptr_uint_var;
  if (uint_result != 0) {
    (**(code **)(*handleIdentifier + 0x18))(handleIdentifier,ptr_uint_var,uint_result);
    *(longlong *)(resourceIdentifier + 8) = *(longlong *)(resourceIdentifier + 8) + (ulonglong)uint_result;
    ptr_uint_var = *(uint **)(resourceIdentifier + 8);
  }
  long_result = (longlong)(int)*ptr_uint_var;
  *(uint **)(resourceIdentifier + 8) = ptr_uint_var + 1;
  long_ptr = handleIdentifier + 4;
  InitializeSystemDataNode24(long_ptr,long_result);
  allocation_size = *(longlong *)(resourceIdentifier + 8);
  long_result = 0;
  long_result = long_result;
  if (0 < long_result) {
    do {
      long_result = *long_ptr;
      *(int **)(resourceIdentifier + 8) = (int *)(allocation_size + 8);
      int_result = *(int *)(allocation_size + 8);
      long_ptr = (longlong *)(long_result + long_result);
      *(longlong *)(resourceIdentifier + 8) = allocation_size + 0xc;
      if (0 < int_result) {
        *(short *)(long_ptr + 2) = (short)int_result;
        if (long_ptr[1] != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        long_ptr[1] = 0;
        if (*long_ptr == 0) {
          *long_ptr = 0;
          if ((ulonglong)*(ushort *)(long_ptr + 2) == 0) {
            uint_result = 0;
            allocation_size = long_result;
          }
          else {
            allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(long_ptr + 2) * 4,4);
            uint_result = (ulonglong)*(ushort *)(long_ptr + 2);
          }
          long_ptr[1] = allocation_size;
          if (uint_result != 0) {
            long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
          }
          *long_ptr = long_result;
                    // WARNING: Subroutine does not return
          memcpy(long_ptr[1],*(uint64_t *)(resourceIdentifier + 8),(longlong)(int_result * 4));
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      long_result = *long_ptr;
      ptr_int_var = (int *)(allocation_size + 0x14);
      *(int **)(resourceIdentifier + 8) = ptr_int_var;
      allocation_size = allocation_size + 0x18;
      int_result = *ptr_int_var;
      long_result = long_result + long_result;
      *(longlong *)(resourceIdentifier + 8) = allocation_size;
      if (0 < int_result) {
        *(short *)(long_result + 0x22) = (short)int_result;
        if (*(longlong *)(long_result + 0x1a) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(uint64_t *)(long_result + 0x1a) = 0;
        if (*(longlong *)(long_result + 0x12) == 0) {
          *(uint64_t *)(long_result + 0x12) = 0;
          if ((ulonglong)*(ushort *)(long_result + 0x22) == 0) {
            uint_result = 0;
            allocation_size = long_result;
          }
          else {
            allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(long_result + 0x22) * 4,4);
            uint_result = (ulonglong)*(ushort *)(long_result + 0x22);
          }
          *(longlong *)(long_result + 0x1a) = allocation_size;
          if (uint_result != 0) {
            long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
          }
          *(longlong *)(long_result + 0x12) = long_result;
                    // WARNING: Subroutine does not return
          memcpy(*(uint64_t *)(long_result + 0x1a),*(uint64_t *)(resourceIdentifier + 8),(longlong)(int_result * 4));
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      long_result = long_result + -1;
      long_result = long_result + 0x24;
    } while (long_result != 0);
  }
  *(int **)(resourceIdentifier + 8) = (int *)(allocation_size + 8);
  int_result = *(int *)(allocation_size + 8);
  *(longlong *)(resourceIdentifier + 8) = allocation_size + 0xc;
  if (int_result < 1) {
    *(int **)(resourceIdentifier + 8) = (int *)(allocation_size + 0x14);
    int_result = *(int *)(allocation_size + 0x14);
    *(longlong *)(resourceIdentifier + 8) = allocation_size + 0x18;
    if (int_result < 1) {
      return;
    }
    *(short *)((longlong)handleIdentifier + 0x62) = (short)int_result;
    if (*(longlong *)((longlong)handleIdentifier + 0x5a) == 0) {
      *(uint64_t *)((longlong)handleIdentifier + 0x5a) = 0;
      if (*(longlong *)((longlong)handleIdentifier + 0x52) == 0) {
        *(uint64_t *)((longlong)handleIdentifier + 0x52) = 0;
        if ((ulonglong)*(ushort *)((longlong)handleIdentifier + 0x62) == 0) {
          uint_result = 0;
          allocation_size = long_result;
        }
        else {
          allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)((longlong)handleIdentifier + 0x62) * 4,
                                4);
          uint_result = (ulonglong)*(ushort *)((longlong)handleIdentifier + 0x62);
        }
        *(longlong *)((longlong)handleIdentifier + 0x5a) = allocation_size;
        if (uint_result != 0) {
          long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
        }
        *(longlong *)((longlong)handleIdentifier + 0x52) = long_result;
                    // WARNING: Subroutine does not return
        memcpy(*(uint64_t *)((longlong)handleIdentifier + 0x5a),*(uint64_t *)(resourceIdentifier + 8),
               (longlong)(int_result * 4));
      }
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(short *)(handleIdentifier + 10) = (short)int_result;
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[9] = 0;
  if (handleIdentifier[8] == 0) {
    handleIdentifier[8] = 0;
    if ((ulonglong)*(ushort *)(handleIdentifier + 10) == 0) {
      uint_result = 0;
      allocation_size = long_result;
    }
    else {
      allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(handleIdentifier + 10) * 4,4);
      uint_result = (ulonglong)*(ushort *)(handleIdentifier + 10);
    }
    handleIdentifier[9] = allocation_size;
    if (uint_result != 0) {
      long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
    }
    handleIdentifier[8] = long_result;
                    // WARNING: Subroutine does not return
    memcpy(handleIdentifier[9],*(uint64_t *)(resourceIdentifier + 8),(longlong)(int_result * 4));
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_29_8(longlong *handleIdentifier)
void SystemFunction_29_8(longlong *handleIdentifier)

{
  longlong *long_ptr;
  int *ptr_int_var;
  uint uint_result;
  int int_result;
  uint *in_RAX;
  longlong allocation_size;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  uint *ptr_uint_var;
  longlong long_result;
  longlong system_RDI;
  longlong long_result;
  longlong *long_ptr;

  uint_result = *in_RAX;
  ptr_uint_var = in_RAX + 1;
  *(uint **)(system_RDI + 8) = ptr_uint_var;
  if (uint_result != 0) {
    (**(code **)(*handleIdentifier + 0x18))(handleIdentifier,ptr_uint_var,uint_result);
    *(longlong *)(system_RDI + 8) = *(longlong *)(system_RDI + 8) + (ulonglong)uint_result;
    ptr_uint_var = *(uint **)(system_RDI + 8);
  }
  long_result = (longlong)(int)*ptr_uint_var;
  *(uint **)(system_RDI + 8) = ptr_uint_var + 1;
  long_ptr = handleIdentifier + 4;
  InitializeSystemDataNode24(long_ptr,long_result);
  allocation_size = *(longlong *)(system_RDI + 8);
  long_result = 0;
  long_result = long_result;
  if (0 < long_result) {
    do {
      long_result = *long_ptr;
      *(int **)(system_RDI + 8) = (int *)(allocation_size + 8);
      int_result = *(int *)(allocation_size + 8);
      long_ptr = (longlong *)(long_result + long_result);
      *(longlong *)(system_RDI + 8) = allocation_size + 0xc;
      if (0 < int_result) {
        *(short *)(long_ptr + 2) = (short)int_result;
        if (long_ptr[1] != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        long_ptr[1] = 0;
        if (*long_ptr == 0) {
          *long_ptr = 0;
          if ((ulonglong)*(ushort *)(long_ptr + 2) == 0) {
            uint_result = 0;
            allocation_size = long_result;
          }
          else {
            allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(long_ptr + 2) * 4,4);
            uint_result = (ulonglong)*(ushort *)(long_ptr + 2);
          }
          long_ptr[1] = allocation_size;
          if (uint_result != 0) {
            long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
          }
          *long_ptr = long_result;
                    // WARNING: Subroutine does not return
          memcpy(long_ptr[1],*(uint64_t *)(system_RDI + 8),(longlong)(int_result * 4));
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      long_result = *long_ptr;
      ptr_int_var = (int *)(allocation_size + 0x14);
      *(int **)(system_RDI + 8) = ptr_int_var;
      allocation_size = allocation_size + 0x18;
      int_result = *ptr_int_var;
      long_result = long_result + long_result;
      *(longlong *)(system_RDI + 8) = allocation_size;
      if (0 < int_result) {
        *(short *)(long_result + 0x22) = (short)int_result;
        if (*(longlong *)(long_result + 0x1a) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(uint64_t *)(long_result + 0x1a) = 0;
        if (*(longlong *)(long_result + 0x12) == 0) {
          *(uint64_t *)(long_result + 0x12) = 0;
          if ((ulonglong)*(ushort *)(long_result + 0x22) == 0) {
            uint_result = 0;
            allocation_size = long_result;
          }
          else {
            allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(long_result + 0x22) * 4,4);
            uint_result = (ulonglong)*(ushort *)(long_result + 0x22);
          }
          *(longlong *)(long_result + 0x1a) = allocation_size;
          if (uint_result != 0) {
            long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
          }
          *(longlong *)(long_result + 0x12) = long_result;
                    // WARNING: Subroutine does not return
          memcpy(*(uint64_t *)(long_result + 0x1a),*(uint64_t *)(system_RDI + 8),(longlong)(int_result * 4)
                );
        }
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      long_result = long_result + -1;
      long_result = long_result + 0x24;
    } while (long_result != 0);
  }
  *(int **)(system_RDI + 8) = (int *)(allocation_size + 8);
  int_result = *(int *)(allocation_size + 8);
  *(longlong *)(system_RDI + 8) = allocation_size + 0xc;
  if (int_result < 1) {
    *(int **)(system_RDI + 8) = (int *)(allocation_size + 0x14);
    int_result = *(int *)(allocation_size + 0x14);
    *(longlong *)(system_RDI + 8) = allocation_size + 0x18;
    if (int_result < 1) {
      return;
    }
    *(short *)((longlong)handleIdentifier + 0x62) = (short)int_result;
    if (*(longlong *)((longlong)handleIdentifier + 0x5a) == 0) {
      *(uint64_t *)((longlong)handleIdentifier + 0x5a) = 0;
      if (*(longlong *)((longlong)handleIdentifier + 0x52) == 0) {
        *(uint64_t *)((longlong)handleIdentifier + 0x52) = 0;
        if ((ulonglong)*(ushort *)((longlong)handleIdentifier + 0x62) == 0) {
          uint_result = 0;
          allocation_size = long_result;
        }
        else {
          allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)((longlong)handleIdentifier + 0x62) * 4,
                                4);
          uint_result = (ulonglong)*(ushort *)((longlong)handleIdentifier + 0x62);
        }
        *(longlong *)((longlong)handleIdentifier + 0x5a) = allocation_size;
        if (uint_result != 0) {
          long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
        }
        *(longlong *)((longlong)handleIdentifier + 0x52) = long_result;
                    // WARNING: Subroutine does not return
        memcpy(*(uint64_t *)((longlong)handleIdentifier + 0x5a),*(uint64_t *)(system_RDI + 8),
               (longlong)(int_result * 4));
      }
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(short *)(handleIdentifier + 10) = (short)int_result;
  if (handleIdentifier[9] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[9] = 0;
  if (handleIdentifier[8] == 0) {
    handleIdentifier[8] = 0;
    if ((ulonglong)*(ushort *)(handleIdentifier + 10) == 0) {
      uint_result = 0;
      allocation_size = long_result;
    }
    else {
      allocation_size = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(handleIdentifier + 10) * 4,4);
      uint_result = (ulonglong)*(ushort *)(handleIdentifier + 10);
    }
    handleIdentifier[9] = allocation_size;
    if (uint_result != 0) {
      long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
    }
    handleIdentifier[8] = long_result;
                    // WARNING: Subroutine does not return
    memcpy(handleIdentifier[9],*(uint64_t *)(system_RDI + 8),(longlong)(int_result * 4));
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_38_1(longlong handleIdentifier)
void SystemFunction_38_1(longlong handleIdentifier)

{
  int int_result;
  ulonglong uint_result;
  longlong long_result;
  longlong *system_RBX;
  longlong long_result;
  ulonglong system_RSI;
  longlong system_RDI;
  ulonglong uint_result;
  longlong system_R13;
  ulonglong *node_current;
  longlong system_R15;

  uint_result = system_RSI & 0xffffffff;
  do {
    long_result = handleIdentifier;
    long_result = *system_RBX;
    *(int **)(system_RDI + 8) = (int *)(long_result + 8);
    int_result = *(int *)(long_result + 8);
    node_current = (ulonglong *)(long_result + uint_result);
    *(longlong *)(system_RDI + 8) = long_result + 0xc;
    if (0 < int_result) {
      *(short *)(node_current + 2) = (short)int_result;
      if (node_current[1] != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      node_current[1] = system_RSI;
      if (*node_current == 0) {
        *node_current = system_RSI;
        if ((ulonglong)(ushort)node_current[2] == 0) {
          uint_result = 0;
          uint_result = system_RSI;
        }
        else {
          uint_result = AllocateSystemResource(systemMemoryPool,(ulonglong)(ushort)node_current[2] * 4,4);
          uint_result = (ulonglong)(ushort)node_current[2];
        }
        node_current[1] = uint_result;
        if (uint_result != 0) {
          system_RSI = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
        }
        *node_current = system_RSI;
                    // WARNING: Subroutine does not return
        memcpy(node_current[1],*(uint64_t *)(system_RDI + 8),(longlong)(int_result * 4));
      }
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    long_result = *system_RBX;
    *(int **)(system_RDI + 8) = (int *)(long_result + 0x14);
    int_result = *(int *)(long_result + 0x14);
    long_result = long_result + uint_result;
    *(longlong *)(system_RDI + 8) = long_result + 0x18;
    if (0 < int_result) {
      *(short *)(long_result + 0x22) = (short)int_result;
      if (*(longlong *)(long_result + 0x1a) != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *(ulonglong *)(long_result + 0x1a) = system_RSI;
      if (*(longlong *)(long_result + 0x12) == 0) {
        *(ulonglong *)(long_result + 0x12) = system_RSI;
        if ((ulonglong)*(ushort *)(long_result + 0x22) == 0) {
          uint_result = 0;
          uint_result = system_RSI;
        }
        else {
          uint_result = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(long_result + 0x22) * 4,4);
          uint_result = (ulonglong)*(ushort *)(long_result + 0x22);
        }
        *(ulonglong *)(long_result + 0x1a) = uint_result;
        if (uint_result != 0) {
          system_RSI = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
        }
        *(ulonglong *)(long_result + 0x12) = system_RSI;
                    // WARNING: Subroutine does not return
        memcpy(*(uint64_t *)(long_result + 0x1a),*(uint64_t *)(system_RDI + 8),(longlong)(int_result * 4));
      }
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    uint_result = uint_result + 0x24;
    system_R13 = system_R13 + -1;
    handleIdentifier = long_result + 0x18;
  } while (system_R13 != 0);
  *(int **)(system_RDI + 8) = (int *)(long_result + SYSTEM_NODE_HEADER_SIZE);
  int_result = *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE);
  *(longlong *)(system_RDI + 8) = long_result + 0x24;
  if (int_result < 1) {
    *(int **)(system_RDI + 8) = (int *)(long_result + 0x2c);
    int_result = *(int *)(long_result + 0x2c);
    *(longlong *)(system_RDI + 8) = long_result + 0x30;
    if (int_result < 1) {
      return;
    }
    *(short *)(system_R15 + 0x62) = (short)int_result;
    if (*(longlong *)(system_R15 + 0x5a) == 0) {
      *(ulonglong *)(system_R15 + 0x5a) = system_RSI;
      if (*(longlong *)(system_R15 + 0x52) == 0) {
        *(ulonglong *)(system_R15 + 0x52) = system_RSI;
        if ((ulonglong)*(ushort *)(system_R15 + 0x62) == 0) {
          uint_result = 0;
          uint_result = system_RSI;
        }
        else {
          uint_result = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(system_R15 + 0x62) * 4,4);
          uint_result = (ulonglong)*(ushort *)(system_R15 + 0x62);
        }
        *(ulonglong *)(system_R15 + 0x5a) = uint_result;
        if (uint_result != 0) {
          system_RSI = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
        }
        *(ulonglong *)(system_R15 + 0x52) = system_RSI;
                    // WARNING: Subroutine does not return
        memcpy(*(uint64_t *)(system_R15 + 0x5a),*(uint64_t *)(system_RDI + 8),
               (longlong)(int_result * 4));
      }
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(short *)(system_R15 + 0x50) = (short)int_result;
  if (*(longlong *)(system_R15 + 0x48) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(ulonglong *)(system_R15 + 0x48) = system_RSI;
  if (*(longlong *)(system_R15 + 0x40) == 0) {
    *(ulonglong *)(system_R15 + 0x40) = system_RSI;
    if ((ulonglong)*(ushort *)(system_R15 + 0x50) == 0) {
      uint_result = 0;
      uint_result = system_RSI;
    }
    else {
      uint_result = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(system_R15 + 0x50) * 4,4);
      uint_result = (ulonglong)*(ushort *)(system_R15 + 0x50);
    }
    *(ulonglong *)(system_R15 + 0x48) = uint_result;
    if (uint_result != 0) {
      system_RSI = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
    }
    *(ulonglong *)(system_R15 + 0x40) = system_RSI;
                    // WARNING: Subroutine does not return
    memcpy(*(uint64_t *)(system_R15 + 0x48),*(uint64_t *)(system_RDI + 8),(longlong)(int_result * 4));
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_88_2(longlong handleIdentifier)
void SystemFunction_88_2(longlong handleIdentifier)

{
  int int_result;
  uint64_t uint_result;
  ulonglong uint_result;
  uint64_t system_RSI;
  longlong system_RDI;
  longlong system_R15;

  *(int **)(system_RDI + 8) = (int *)(handleIdentifier + 8);
  int_result = *(int *)(handleIdentifier + 8);
  *(longlong *)(system_RDI + 8) = handleIdentifier + 0xc;
  if (int_result < 1) {
    *(int **)(system_RDI + 8) = (int *)(handleIdentifier + 0x14);
    int_result = *(int *)(handleIdentifier + 0x14);
    *(longlong *)(system_RDI + 8) = handleIdentifier + 0x18;
    if (int_result < 1) {
      return;
    }
    *(short *)(system_R15 + 0x62) = (short)int_result;
    if (*(longlong *)(system_R15 + 0x5a) == 0) {
      *(uint64_t *)(system_R15 + 0x5a) = system_RSI;
      if (*(longlong *)(system_R15 + 0x52) == 0) {
        *(uint64_t *)(system_R15 + 0x52) = system_RSI;
        if ((ulonglong)*(ushort *)(system_R15 + 0x62) == 0) {
          uint_result = 0;
          uint_result = system_RSI;
        }
        else {
          uint_result = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(system_R15 + 0x62) * 4,4);
          uint_result = (ulonglong)*(ushort *)(system_R15 + 0x62);
        }
        *(uint64_t *)(system_R15 + 0x5a) = uint_result;
        if (uint_result != 0) {
          system_RSI = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
        }
        *(uint64_t *)(system_R15 + 0x52) = system_RSI;
                    // WARNING: Subroutine does not return
        memcpy(*(uint64_t *)(system_R15 + 0x5a),*(uint64_t *)(system_RDI + 8),
               (longlong)(int_result * 4));
      }
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(short *)(system_R15 + 0x50) = (short)int_result;
  if (*(longlong *)(system_R15 + 0x48) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(system_R15 + 0x48) = system_RSI;
  if (*(longlong *)(system_R15 + 0x40) == 0) {
    *(uint64_t *)(system_R15 + 0x40) = system_RSI;
    if ((ulonglong)*(ushort *)(system_R15 + 0x50) == 0) {
      uint_result = 0;
      uint_result = system_RSI;
    }
    else {
      uint_result = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(system_R15 + 0x50) * 4,4);
      uint_result = (ulonglong)*(ushort *)(system_R15 + 0x50);
    }
    *(uint64_t *)(system_R15 + 0x48) = uint_result;
    if (uint_result != 0) {
      system_RSI = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
    }
    *(uint64_t *)(system_R15 + 0x40) = system_RSI;
                    // WARNING: Subroutine does not return
    memcpy(*(uint64_t *)(system_R15 + 0x48),*(uint64_t *)(system_RDI + 8),(longlong)(int_result * 4));
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_91_3(void)
void SystemFunction_91_3(void)

{
  uint64_t uint_result;
  ulonglong uint_result;
  uint16_t system_BP;
  undefined6 system_0000002a;
  uint64_t system_RSI;
  longlong system_RDI;
  longlong system_R15;

  *(uint16_t *)(system_R15 + 0x50) = system_BP;
  if (*(longlong *)(system_R15 + 0x48) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *(uint64_t *)(system_R15 + 0x48) = system_RSI;
  if (*(longlong *)(system_R15 + 0x40) == 0) {
    *(uint64_t *)(system_R15 + 0x40) = system_RSI;
    if ((ulonglong)*(ushort *)(system_R15 + 0x50) == 0) {
      uint_result = 0;
      uint_result = system_RSI;
    }
    else {
      uint_result = AllocateSystemResource(systemMemoryPool,(ulonglong)*(ushort *)(system_R15 + 0x50) * 4,4);
      uint_result = (ulonglong)*(ushort *)(system_R15 + 0x50);
    }
    *(uint64_t *)(system_R15 + 0x48) = uint_result;
    if (uint_result != 0) {
      system_RSI = AllocateSystemResource(systemMemoryPool,uint_result << 4,4);
    }
    *(uint64_t *)(system_R15 + 0x40) = system_RSI;
                    // WARNING: Subroutine does not return
    memcpy(*(uint64_t *)(system_R15 + 0x48),*(uint64_t *)(system_RDI + 8),
           (longlong)((int)CONCAT62(system_0000002a,system_BP) * 4));
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializePhysicsSystem(longlong handleIdentifier,longlong resourceIdentifier)
void InitializePhysicsSystem(longlong handleIdentifier,longlong resourceIdentifier)

{
  uint *ptr_uint_var;
  int int_result;
  uint uint_result;
  int *ptr_int_var;
  longlong allocation_size;
  int int_result;
  int int_result;
  int int_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint8_t *ptr_uint_var;
  uint32_t *ptr_uint_var;
  uint8_t localBuffer_f8 [32];
  uint64_t uintStack_d8;
  void *system_buffer_ptr_c8;
  uint8_t *system_buffer_ptr_c0;
  uint32_t uintStack_b8;
  uint8_t localBuffer_b0 [136];
  ulonglong uintStack_28;

  uintStack_d8 = INVALID_HANDLE_VALUE;
  uintStack_28 = systemConfigurationData ^ (ulonglong)localBuffer_f8;
  ptr_int_var = *(int **)(resourceIdentifier + 8);
  int_result = *ptr_int_var;
  *(int **)(resourceIdentifier + 8) = ptr_int_var + 1;
  int_result = ptr_int_var[2];
  int_result = ptr_int_var[3];
  int_result = ptr_int_var[4];
  *(int *)(handleIdentifier + 0x18) = ptr_int_var[1];
  *(int *)(handleIdentifier + 0x1c) = int_result;
  *(int *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = int_result;
  *(int *)(handleIdentifier + 0x24) = int_result;
  ptr_uint_var = (uint8_t *)(*(longlong *)(resourceIdentifier + 8) + SYSTEM_DATA_COMPARE_SIZE);
  *(uint8_t **)(resourceIdentifier + 8) = ptr_uint_var;
  *(uint8_t *)(handleIdentifier + 0x28) = *ptr_uint_var;
  allocation_size = *(longlong *)(resourceIdentifier + 8);
  *(uint32_t **)(resourceIdentifier + 8) = (uint32_t *)(allocation_size + 1);
  if (int_result == 0) {
    system_buffer_ptr_c8 = &g_thread_parameter_ptr;
    system_buffer_ptr_c0 = localBuffer_b0;
    uintStack_b8 = 0;
    localBuffer_b0[0] = 0;
    uint_result = **(uint **)(resourceIdentifier + 8);
    ptr_uint_var = *(uint **)(resourceIdentifier + 8) + 1;
    *(uint **)(resourceIdentifier + 8) = ptr_uint_var;
    if (uint_result != 0) {
      InitializeTextureSystem(&bufferPtr_c8system_buffer_ptr_c8,ptr_uint_var,uint_result);
      *(longlong *)(resourceIdentifier + 8) = *(longlong *)(resourceIdentifier + 8) + (ulonglong)uint_result;
    }
    system_buffer_ptr_c8 = &globalSystemPointerData;
    ptr_uint_var = *(uint32_t **)(resourceIdentifier + 8);
  }
  else {
    uint_result = *(uint32_t *)(allocation_size + 5);
    uint_result = *(uint32_t *)(allocation_size + 9);
    uint_result = *(uint32_t *)(allocation_size + 0xd);
    *(uint32_t *)(handleIdentifier + 8) = *(uint32_t *)(allocation_size + 1);
    *(uint32_t *)(handleIdentifier + 0xc) = uint_result;
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = uint_result;
    *(uint32_t *)(handleIdentifier + 0x14) = uint_result;
    *(longlong *)(resourceIdentifier + 8) = *(longlong *)(resourceIdentifier + 8) + SYSTEM_DATA_COMPARE_SIZE;
    ptr_uint_var = *(uint32_t **)(resourceIdentifier + 8);
  }
  *(uint32_t *)(handleIdentifier + 0x2c) = *ptr_uint_var;
  ptr_uint_var = (uint32_t *)(*(longlong *)(resourceIdentifier + 8) + 4);
  *(uint32_t **)(resourceIdentifier + 8) = ptr_uint_var;
  *(uint32_t *)(handleIdentifier + 0x30) = *ptr_uint_var;
  ptr_uint_var = (uint32_t *)(*(longlong *)(resourceIdentifier + 8) + 4);
  *(uint32_t **)(resourceIdentifier + 8) = ptr_uint_var;
  *(uint32_t *)(handleIdentifier + 0x34) = *ptr_uint_var;
  *(longlong *)(resourceIdentifier + 8) = *(longlong *)(resourceIdentifier + 8) + 4;
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_28 ^ (ulonglong)localBuffer_f8);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeRenderSystem(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  uint64_t uint_result;
  uint64_t *node_root;

  node_root = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x38,8,3,INVALID_HANDLE_VALUE);
  *node_root = &g_system_global_variable8;
  *node_root = &g_system_global_variable8;
  *(uint64_t *)((longlong)node_root + 0x2c) = 0;
  *(uint32_t *)((longlong)node_root + 0x34) = 0;
  *(uint8_t *)(node_root + 5) = 0;
  node_root[3] = 0;
  node_root[4] = 0;
  node_root[1] = 0;
  node_root[2] = 0;
  if (resourceIdentifier != 0) {
    uint_result = *(uint64_t *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    node_root[1] = *(uint64_t *)(resourceIdentifier + 8);
    node_root[2] = uint_result;
    uint_result = *(uint64_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE);
    node_root[3] = *(uint64_t *)(resourceIdentifier + 0x18);
    node_root[4] = uint_result;
    *(uint8_t *)(node_root + 5) = *(uint8_t *)(resourceIdentifier + 0x28);
    *(uint32_t *)((longlong)node_root + 0x2c) = *(uint32_t *)(resourceIdentifier + 0x2c);
    *(uint32_t *)(node_root + 6) = *(uint32_t *)(resourceIdentifier + 0x30);
    *(uint32_t *)((longlong)node_root + 0x34) = *(uint32_t *)(resourceIdentifier + 0x34);
  }
  return node_root;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeDatabaseSystem(longlong handleIdentifier)
void InitializeDatabaseSystem(longlong handleIdentifier)

{
  longlong long_result;
  int int_result;
  longlong *long_ptr;
  longlong *ptr_data;
  void *ptr_uint_var;

  if (*(char *)(*(longlong *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) + 0x28) == '\0') {
    long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,0xc0,SYSTEM_DATA_COMPARE_SIZE,4,INVALID_HANDLE_VALUE);
    *long_ptr = (longlong)&globalSystemVariable;
    *long_ptr = (longlong)&globalSystemVariable;
    *(uint32_t *)(long_ptr + 1) = 0;
    *long_ptr = (longlong)&g_system_global_variable8;
    long_ptr[2] = (longlong)&globalSystemPointerData;
    long_ptr[3] = 0;
    *(uint32_t *)(long_ptr + 4) = 0;
    long_ptr[2] = (longlong)&g_thread_parameter_ptr;
    long_ptr[3] = (longlong)(long_ptr + 5);
    *(uint32_t *)(long_ptr + 4) = 0;
    *(uint8_t *)(long_ptr + 5) = 0;
    *(uint8_t *)((longlong)long_ptr + 0xb2) = 0;
    *(uint32_t *)(long_ptr + 1) = 0;
    *(uint16_t *)(long_ptr + 0x16) = 0;
    long_ptr[0x15] = 0;
    *long_ptr = (longlong)&g_system_global_variable8;
    long_ptr[0x15] = 0;
    *(uint8_t *)(long_ptr + 0x17) = 0;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
    ptr_data = *(longlong **)(handleIdentifier + 0xb0);
    *(longlong **)(handleIdentifier + 0xb0) = long_ptr;
    if (ptr_data != (longlong *)0x0) {
      (**(code **)(*ptr_data + 0x38))();
    }
    *(longlong *)(*(longlong *)(handleIdentifier + 0xb0) + 0xa8) = handleIdentifier;
    ptr_data = (longlong *)(*(longlong *)(handleIdentifier + 0xb0) + SYSTEM_DATA_COMPARE_SIZE);
    ptr_uint_var = &g_system_data_variable3;
    if (*(void **)(handleIdentifier + 0x70) != (void *)0x0) {
      ptr_uint_var = *(void **)(handleIdentifier + 0x70);
    }
    (**(code **)(*ptr_data + SYSTEM_DATA_COMPARE_SIZE))(ptr_data,ptr_uint_var);
    *(uint8_t *)(*(longlong *)(handleIdentifier + 0xb0) + 0xb1) = 1;
    long_result = systemCoreData;
    ptr_data = *(longlong **)(handleIdentifier + 0xb0);
    int_result = (**(code **)(*ptr_data + 0x60))(ptr_data);
    *(uint8_t *)((longlong)ptr_data + 0xb2) = 1;
    ProcessSystemData((longlong)int_result * 0x98 + long_result + 8,ptr_data);
  }
  return;
}
// void InitializeVideoSystem(longlong handleIdentifier)

void InitializeVideoSystem(longlong handleIdentifier)

{
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;

  if (*(longlong *)(handleIdentifier + 0xb0) != 0) {
    *(uint64_t *)(*(longlong *)(handleIdentifier + 0xb0) + 0xa8) = 0;
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = *(longlong **)(handleIdentifier + 0xb0);
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x28))();
    }
    InitializeSystemModule37();
    pstack_long_ptr = *(longlong ***)(handleIdentifier + 0xb0);
    *(uint64_t *)(handleIdentifier + 0xb0) = 0;
    if (pstack_long_ptr != (longlong **)0x0) {
                    // WARNING: Could not recover jumptable at 0x0001800748c2. Too many branches
                    // WARNING: Treating indirect jump as call
      (**(code **)((longlong)*pstack_long_ptr + 0x38))();
      return;
    }
  }
  return;
}
// void SystemFunction_39_2(longlong handleIdentifier,longlong *resourceIdentifier)

void SystemFunction_39_2(longlong handleIdentifier,longlong *resourceIdentifier)

{
  uint8_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t *ptr_uint_var;
  uint8_t *node_current;

  ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = 1;
  ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 4);
  resourceIdentifier[1] = (longlong)ptr_uint_var;
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 0x11) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (SYSTEM_DATA_COMPARE_SIZE - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  uint_result = *(uint32_t *)(handleIdentifier + 0x1c);
  uint_result = *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE);
  uint_result = *(uint32_t *)(handleIdentifier + 0x24);
  *ptr_uint_var = *(uint32_t *)(handleIdentifier + 0x18);
  ptr_uint_var[1] = uint_result;
  ptr_uint_var[2] = uint_result;
  ptr_uint_var[3] = uint_result;
  node_current = (uint8_t *)(resourceIdentifier[1] + SYSTEM_DATA_COMPARE_SIZE);
  resourceIdentifier[1] = (longlong)node_current;
  uint_result = *(uint8_t *)(handleIdentifier + 0x28);
  if ((ulonglong)((*resourceIdentifier - (longlong)node_current) + resourceIdentifier[2]) < 2) {
    UtilityFunction39bf0(resourceIdentifier,node_current + (1 - *resourceIdentifier));
    node_current = (uint8_t *)resourceIdentifier[1];
  }
  *node_current = uint_result;
  ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 1);
  resourceIdentifier[1] = (longlong)ptr_uint_var;
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 0x11) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (SYSTEM_DATA_COMPARE_SIZE - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  uint_result = *(uint32_t *)(handleIdentifier + 0xc);
  uint_result = *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  uint_result = *(uint32_t *)(handleIdentifier + 0x14);
  *ptr_uint_var = *(uint32_t *)(handleIdentifier + 8);
  ptr_uint_var[1] = uint_result;
  ptr_uint_var[2] = uint_result;
  ptr_uint_var[3] = uint_result;
  ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + SYSTEM_DATA_COMPARE_SIZE);
  resourceIdentifier[1] = (longlong)ptr_uint_var;
  uint_result = *(uint32_t *)(handleIdentifier + 0x2c);
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = uint_result;
  ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 4);
  resourceIdentifier[1] = (longlong)ptr_uint_var;
  uint_result = *(uint32_t *)(handleIdentifier + 0x30);
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = uint_result;
  ptr_uint_var = (uint32_t *)(resourceIdentifier[1] + 4);
  resourceIdentifier[1] = (longlong)ptr_uint_var;
  uint_result = *(uint32_t *)(handleIdentifier + 0x34);
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    *(uint32_t *)resourceIdentifier[1] = uint_result;
  }
  else {
    *ptr_uint_var = uint_result;
  }
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  return;
}
// void InitializeSystemModule45(longlong *handleIdentifier)

void InitializeSystemModule45(longlong *handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;

  long_ptr = (longlong *)handleIdentifier[1];
  long_ptr = (longlong *)*handleIdentifier;
  while( true ) {
    if (long_ptr == long_ptr) {
      if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      return;
    }
    if (*(longlong *)((longlong)long_ptr + 0x12) != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *(uint64_t *)((longlong)long_ptr + 0x12) = 0;
    if (*(longlong *)((longlong)long_ptr + 0x1a) != 0) break;
    *(uint64_t *)((longlong)long_ptr + 0x1a) = 0;
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *long_ptr = 0;
    if (long_ptr[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    long_ptr[1] = 0;
    long_ptr = (longlong *)((longlong)long_ptr + 0x24);
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemDataNode24(longlong *handleIdentifier,ulonglong resourceIdentifier)

void InitializeSystemDataNode24(longlong *handleIdentifier,ulonglong resourceIdentifier)

{
  longlong *long_ptr;
  ulonglong uint_result;
  longlong *long_ptr;
  longlong long_result;
  longlong allocation_size;

  long_ptr = (longlong *)handleIdentifier[1];
  allocation_size = *handleIdentifier;
  uint_result = ((longlong)long_ptr - allocation_size) / 0x24;
  if (uint_result < resourceIdentifier) {
    long_result = resourceIdentifier - uint_result;
    InitializeAudioMutex(handleIdentifier,long_result,(longlong)long_ptr - allocation_size,long_result,INVALID_HANDLE_VALUE);
  }
  else {
    long_ptr = (longlong *)(resourceIdentifier * 0x24 + allocation_size);
    if (long_ptr != long_ptr) {
      do {
        if (*(longlong *)((longlong)long_ptr + 0x12) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(uint64_t *)((longlong)long_ptr + 0x12) = 0;
        if (*(longlong *)((longlong)long_ptr + 0x1a) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(uint64_t *)((longlong)long_ptr + 0x1a) = 0;
        if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *long_ptr = 0;
        if (long_ptr[1] != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        long_ptr[1] = 0;
        long_ptr = (longlong *)((longlong)long_ptr + 0x24);
      } while (long_ptr != long_ptr);
      allocation_size = *handleIdentifier;
    }
    handleIdentifier[1] = resourceIdentifier * 0x24 + allocation_size;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAudioMutex(uint64_t *handleIdentifier,ulonglong resourceIdentifier)
void InitializeAudioMutex(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;
  uint64_t *ptr_uint_var;
  longlong *ptr_data;
  longlong *pallocation_size;
  ulonglong uint_result;
  uint64_t *node_previous;
  longlong long_result;
  ulonglong uint_result;

  node_previous = (uint64_t *)handleIdentifier[1];
  if ((ulonglong)((handleIdentifier[2] - (longlong)node_previous) / 0x24) < resourceIdentifier) {
    ptr_uint_var = (uint64_t *)*handleIdentifier;
    long_result = ((longlong)node_previous - (longlong)ptr_uint_var) / 0x24;
    uint_result = long_result * 2;
    if (long_result == 0) {
      uint_result = 1;
    }
    if (uint_result < long_result + resourceIdentifier) {
      uint_result = long_result + resourceIdentifier;
    }
    long_ptr = (longlong *)0x0;
    if (uint_result != 0) {
      long_ptr = (longlong *)
               AllocateSystemResource(systemMemoryPool,uint_result * 0x24,*(uint8_t *)(handleIdentifier + 3),node_previous,
                             INVALID_HANDLE_VALUE);
      node_previous = (uint64_t *)handleIdentifier[1];
      ptr_uint_var = (uint64_t *)*handleIdentifier;
    }
    long_ptr = long_ptr;
    if (ptr_uint_var != node_previous) {
      long_result = (longlong)long_ptr - (longlong)ptr_uint_var;
      ptr_data = (longlong *)((longlong)ptr_uint_var + 0x1a);
      do {
        *(uint16_t *)(long_result + -10 + (longlong)ptr_data) = *(uint16_t *)((longlong)ptr_data + -10);
        if (*(longlong *)((longlong)ptr_data + -0x12) == 0) {
          *(uint64_t *)(long_result + -0x12 + (longlong)ptr_data) = 0;
        }
        else {
          *(longlong *)(long_result + -0x12 + (longlong)ptr_data) = *(longlong *)((longlong)ptr_data + -0x12);
          *(uint64_t *)((longlong)ptr_data + -0x12) = 0;
        }
        if (*(longlong *)((longlong)ptr_data + -0x1a) == 0) {
          *long_ptr = 0;
        }
        else {
          *long_ptr = *(longlong *)((longlong)ptr_data + -0x1a);
          *(uint64_t *)((longlong)ptr_data + -0x1a) = 0;
        }
        *(uint16_t *)((longlong)ptr_data + -10) = 0;
        *(short *)(long_result + 8 + (longlong)ptr_data) = (short)ptr_data[1];
        if (*ptr_data == 0) {
          *(uint64_t *)((longlong)ptr_data + long_result) = 0;
        }
        else {
          *(longlong *)((longlong)ptr_data + long_result) = *ptr_data;
          *ptr_data = 0;
        }
        if (ptr_data[-1] == 0) {
          *(uint64_t *)(long_result + -8 + (longlong)ptr_data) = 0;
        }
        else {
          *(longlong *)(long_result + -8 + (longlong)ptr_data) = ptr_data[-1];
          ptr_data[-1] = 0;
        }
        *(uint16_t *)(ptr_data + 1) = 0;
        long_ptr = (longlong *)((longlong)long_ptr + 0x24);
        ptr_uint_var = (uint64_t *)((longlong)ptr_data + 10);
        ptr_data = (longlong *)((longlong)ptr_data + 0x24);
      } while (ptr_uint_var != node_previous);
    }
    if (resourceIdentifier != 0) {
      node_previous = (uint64_t *)((longlong)long_ptr + 0x1a);
      uint_result = resourceIdentifier;
      do {
        node_previous[-1] = 0;
        *node_previous = 0;
        *(uint16_t *)(node_previous + 1) = 0;
        *(uint16_t *)((longlong)node_previous + -10) = 0;
        *(uint64_t *)((longlong)node_previous + -0x1a) = 0;
        *(uint64_t *)((longlong)node_previous + -0x12) = 0;
        *(uint16_t *)(node_previous + 1) = 0;
        node_previous[-1] = 0;
        *node_previous = 0;
        node_previous = (uint64_t *)((longlong)node_previous + 0x24);
        uint_result = uint_result - 1;
      } while (uint_result != 0);
    }
    ptr_data = (longlong *)handleIdentifier[1];
    pallocation_size = (longlong *)*handleIdentifier;
    if (pallocation_size != ptr_data) {
      do {
        if (*(longlong *)((longlong)pallocation_size + 0x12) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(uint64_t *)((longlong)pallocation_size + 0x12) = 0;
        if (*(longlong *)((longlong)pallocation_size + 0x1a) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(uint64_t *)((longlong)pallocation_size + 0x1a) = 0;
        if (*pallocation_size != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *pallocation_size = 0;
        if (pallocation_size[1] != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        pallocation_size[1] = 0;
        pallocation_size = (longlong *)((longlong)pallocation_size + 0x24);
      } while (pallocation_size != ptr_data);
      pallocation_size = (longlong *)*handleIdentifier;
    }
    if (pallocation_size != (longlong *)0x0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation(pallocation_size);
    }
    *handleIdentifier = long_ptr;
    handleIdentifier[1] = (longlong)long_ptr + resourceIdentifier * 0x24;
    handleIdentifier[2] = (longlong)long_ptr + uint_result * 0x24;
  }
  else {
    if (resourceIdentifier != 0) {
      ptr_uint_var = (uint64_t *)((longlong)node_previous + 0x1a);
      uint_result = resourceIdentifier;
      do {
        node_previous[1] = 0;
        node_previous[2] = 0;
        node_previous[3] = 0;
        *(uint32_t *)(node_previous + 4) = 0;
        *(uint16_t *)((longlong)ptr_uint_var + -10) = 0;
        *node_previous = 0;
        *(uint64_t *)((longlong)ptr_uint_var + -0x12) = 0;
        *(uint16_t *)(ptr_uint_var + 1) = 0;
        ptr_uint_var[-1] = 0;
        *ptr_uint_var = 0;
        node_previous = (uint64_t *)((longlong)node_previous + 0x24);
        ptr_uint_var = (uint64_t *)((longlong)ptr_uint_var + 0x24);
        uint_result = uint_result - 1;
      } while (uint_result != 0);
      node_previous = (uint64_t *)handleIdentifier[1];
    }
    handleIdentifier[1] = (longlong)node_previous + resourceIdentifier * 0x24;
  }
  return;
}
// void InitializeAuthenticationSystem(longlong *handleIdentifier)

void InitializeAuthenticationSystem(longlong *handleIdentifier)

{
  if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = 0;
  if (handleIdentifier[1] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[1] = 0;
  return;
}

uint64_t *
InitializePhysicsSystem(uint64_t *handleIdentifier,ulonglong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *handleIdentifier = &g_system_global_variable8;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x38,systemConfig,systemFlags,INVALID_HANDLE_VALUE);
  }
  return handleIdentifier;
}

uint64_t * InitializeSystemModule16(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,8);
  }
  return handleIdentifier;
}

uint64_t *
InitializeSystemModule32(uint64_t handleIdentifier,uint64_t *resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  *resourceIdentifier = &globalSystemPointerData;
  resourceIdentifier[1] = 0;
  *(uint32_t *)(resourceIdentifier + 2) = 0;
  *resourceIdentifier = &g_thread_parameter_ptr;
  resourceIdentifier[1] = resourceIdentifier + 3;
  *(uint8_t *)(resourceIdentifier + 3) = 0;
  *(uint32_t *)(resourceIdentifier + 2) = 7;
  strcpy_s(resourceIdentifier[1],0x80,&g_init_string_1,systemFlags,0,INVALID_HANDLE_VALUE);
  return resourceIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t * InitializeSystemModule41(uint64_t *handleIdentifier,char resourceIdentifier,char systemConfig)

{
  longlong *long_ptr;
  byte bool_var;
  longlong *long_ptr;
  longlong *ptr_data;

  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[2] = &globalSystemPointerData;
  handleIdentifier[3] = 0;
  *(uint32_t *)(handleIdentifier + 4) = 0;
  handleIdentifier[2] = &g_thread_parameter_ptr;
  handleIdentifier[3] = handleIdentifier + 5;
  *(uint32_t *)(handleIdentifier + 4) = 0;
  *(uint8_t *)(handleIdentifier + 5) = 0;
  *(uint8_t *)((longlong)handleIdentifier + 0xb2) = 0;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *(uint16_t *)(handleIdentifier + 0x16) = 0;
  handleIdentifier[0x15] = 0;
  *handleIdentifier = &globalSystemVariable;
  InitializeSystemNode(handleIdentifier + NODE_INITIALIZED_OFFSET);
  *(uint32_t *)(handleIdentifier + 0x1e) = 0;
  LOCK();
  *(uint32_t *)(handleIdentifier + 0x1d) = 0;
  UNLOCK();
  LOCK();
  *(uint8_t *)((longlong)handleIdentifier + 0xec) = 0;
  UNLOCK();
  *(uint32_t *)(handleIdentifier + 0x1e) = 0;
  handleIdentifier[0x23] = 0;
  handleIdentifier[0x36] = 0;
  handleIdentifier[0x37] = 0;
  handleIdentifier[0x38] = 0;
  handleIdentifier[0x3e] = handleIdentifier;
  handleIdentifier[0x3d] = 0;
  handleIdentifier[0x42] = 0;
  handleIdentifier[0x43] = 0;
  handleIdentifier[0x44] = 0;
  handleIdentifier[0x45] = 0;
  *(uint32_t *)(handleIdentifier + 0x46) = 3;
  handleIdentifier[0x4d] = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x2a4) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x274) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x27c) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x284) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x28c) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x294) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x29c) = 0;
  *(uint16_t *)(handleIdentifier + 0x5d) = 0;
  handleIdentifier[0x5c] = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x2ec) = 0xffffffff;
  *(uint16_t *)(handleIdentifier + 0x5f) = 0;
  handleIdentifier[0x5e] = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x2fc) = 0xffffffff;
  *(byte *)((longlong)handleIdentifier + 0xfd) = *(byte *)((longlong)handleIdentifier + 0xfd) & 0xfb;
  *(byte *)((longlong)handleIdentifier + 0xfd) = *(byte *)((longlong)handleIdentifier + 0xfd) | resourceIdentifier << 2;
  handleIdentifier[0x15] = 0;
  *(uint32_t *)(handleIdentifier + 0x17) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0xbc) = 0;
  *(uint32_t *)(handleIdentifier + 0x18) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0xc4) = 0;
  *(byte *)((longlong)handleIdentifier + 0xfe) = *(byte *)((longlong)handleIdentifier + 0xfe) & 0xfe;
  *(uint8_t *)((longlong)handleIdentifier + 0xfc) = 0;
  ptr_data = (longlong *)handleIdentifier[0x36];
  handleIdentifier[0x36] = 0;
  if (ptr_data != (longlong *)0x0) {
    (**(code **)(*ptr_data + 0x38))();
  }
  handleIdentifier[0x39] = 0;
  handleIdentifier[0x3c] = 0;
  if (systemConfig == '\0') {
    *(byte *)((longlong)handleIdentifier + 0xfd) = *(byte *)((longlong)handleIdentifier + 0xfd) & 0xdf;
  }
  else {
    *(byte *)((longlong)handleIdentifier + 0xfd) = *(byte *)((longlong)handleIdentifier + 0xfd) | SYSTEM_NODE_HEADER_SIZE;
  }
  *(byte *)((longlong)handleIdentifier + 0xfd) = *(byte *)((longlong)handleIdentifier + 0xfd) & 0xbf;
  *(uint8_t *)((longlong)handleIdentifier + 0xff) = 1;
  ptr_data = (longlong *)handleIdentifier[0x37];
  handleIdentifier[0x37] = 0;
  if (ptr_data != (longlong *)0x0) {
    (**(code **)(*ptr_data + 0x38))();
  }
  *(uint8_t *)((longlong)handleIdentifier + 0xf4) = 0;
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = 0;
  *(uint8_t *)((longlong)handleIdentifier + 0xf7) = 0;
  *(byte *)((longlong)handleIdentifier + 0xfd) = *(byte *)((longlong)handleIdentifier + 0xfd) & 0x6d;
  long_ptr = (longlong *)handleIdentifier[0x38];
  handleIdentifier[0x38] = 0;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  bool_var = *(byte *)((longlong)handleIdentifier + 0xfd) & 0xf7;
  *(byte *)((longlong)handleIdentifier + 0xfd) = bool_var;
  handleIdentifier[0x47] = 0x3f8000003f800000;
  handleIdentifier[0x48] = 0x3f8000003f800000;
  handleIdentifier[0x49] = 0x3f8000003f800000;
  handleIdentifier[0x4a] = 0x3f8000003f800000;
  *(uint32_t *)(handleIdentifier + 0x4c) = 0x3f800000;
  handleIdentifier[0x24] = 0x3f800000;
  handleIdentifier[0x25] = 0;
  handleIdentifier[0x26] = 0x3f80000000000000;
  handleIdentifier[0x27] = 0;
  handleIdentifier[0x28] = 0;
  handleIdentifier[0x29] = 0x3f800000;
  handleIdentifier[0x2a] = 0;
  handleIdentifier[0x2b] = 0x3f80000000000000;
  handleIdentifier[0x2c] = 0x3f800000;
  handleIdentifier[0x2d] = 0;
  handleIdentifier[0x2e] = 0x3f80000000000000;
  handleIdentifier[0x2f] = 0;
  handleIdentifier[0x30] = 0;
  handleIdentifier[0x31] = 0x3f800000;
  handleIdentifier[0x32] = 0;
  handleIdentifier[0x33] = 0x3f80000000000000;
  *(byte *)((longlong)handleIdentifier + 0xfd) = bool_var | 1;
  *(byte *)((longlong)handleIdentifier + 0xfe) = *(byte *)((longlong)handleIdentifier + 0xfe) | 2;
  *(uint32_t *)(handleIdentifier + 0x4e) = 0x21;
  *(uint32_t *)((longlong)handleIdentifier + SYSTEM_DATA_COMPARE_SIZE4) = 0x80;
  *(uint8_t *)((longlong)handleIdentifier + 0xf6) = 0;
  *(uint16_t *)((longlong)handleIdentifier + 0xfa) = 0;
  *(uint64_t *)((longlong)handleIdentifier + SYSTEM_NODE_HEADER_SIZE4) = 0;
  handleIdentifier[0x3f] = 0;
  *(uint32_t *)(handleIdentifier + 0x40) = 0;
  *(uint32_t *)(handleIdentifier + 0x5b) = 0xbf800000;
  *(uint32_t *)((longlong)handleIdentifier + 0x2dc) = 0xbf800000;
  handleIdentifier[0x55] = 0;
  handleIdentifier[0x56] = 0;
  handleIdentifier[0x57] = 0;
  handleIdentifier[0x58] = 0;
  *(uint32_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0xcc) = 0;
  *(uint32_t *)(handleIdentifier + 0x1a) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0xd4) = 0x7f7fffff;
  *(uint32_t *)(handleIdentifier + 0x1b) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0xdc) = 0;
  *(uint32_t *)(handleIdentifier + 0x1c) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0xe4) = 0x7f7fffff;
  *(uint32_t *)(handleIdentifier + 0x21) = 0xffffffff;
  handleIdentifier[0x5a] = 0;
  if (resourceIdentifier == '\0') {
    long_ptr = (longlong *)handleIdentifier[0x42];
    handleIdentifier[0x42] = 0;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))(long_ptr,0);
    }
  }
  *(uint8_t *)(handleIdentifier + 0x1f) = 0;
  *(uint32_t *)(handleIdentifier + 0x34) = 0x3f800000;
  *(uint32_t *)((longlong)handleIdentifier + 0x1a4) = 0x3f800000;
  *(uint32_t *)(handleIdentifier + 0x35) = 0x3f800000;
  *(uint32_t *)((longlong)handleIdentifier + 0x1ac) = 0x7f7fffff;
  *(uint32_t *)(handleIdentifier + 0x3a) = 0xffffffff;
  long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,0x70,8,9,ptr_data,long_ptr);
  *long_ptr = (longlong)&globalSystemVariable;
  *long_ptr = (longlong)&globalSystemVariable;
  *(uint32_t *)(long_ptr + 1) = 0;
  *long_ptr = (longlong)&g_system_global_variable8;
  long_ptr[4] = (longlong)&globalSystemPointerData;
  long_ptr[5] = 0;
  *(uint32_t *)(long_ptr + 6) = 0;
  long_ptr[4] = (longlong)&resourcePoolPointer;
  long_ptr[7] = 0;
  long_ptr[5] = 0;
  *(uint32_t *)(long_ptr + 6) = 0;
  *(uint32_t *)(long_ptr + 8) = 0xffffffff;
  *(uint32_t *)((longlong)long_ptr + 0x44) = 0x3f000000;
  *(uint32_t *)(long_ptr + 9) = 0x3f000000;
  *(uint32_t *)((longlong)long_ptr + 0x4c) = 0x3f4ccccd;
  *(uint32_t *)(long_ptr + 10) = 0x3f000000;
  *(uint32_t *)((longlong)long_ptr + 0x54) = 0x3e99999a;
  *(uint32_t *)(long_ptr + 0xb) = 0x411cf5c3;
  *(uint32_t *)((longlong)long_ptr + 0x5c) = 0x3f800000;
  *(uint32_t *)(long_ptr + 0xc) = 0xbf800000;
  *(uint32_t *)((longlong)long_ptr + 100) = 0x3f800000;
  *(uint32_t *)(long_ptr + 0xd) = 0x3f000000;
  *(uint32_t *)((longlong)long_ptr + 0x6c) = 0x3f800000;
  *(uint32_t *)(long_ptr + 2) = 0x3f800000;
  *(uint32_t *)((longlong)long_ptr + 0x14) = 0x78;
  *(uint16_t *)(long_ptr + 3) = 0;
  *(uint8_t *)((longlong)long_ptr + 0x1a) = 0;
  (**(code **)(*long_ptr + 0x28))(long_ptr);
  ptr_data = (longlong *)handleIdentifier[0x4d];
  handleIdentifier[0x4d] = long_ptr;
  if (ptr_data != (longlong *)0x0) {
    (**(code **)(*ptr_data + 0x38))();
  }
  *(byte *)((longlong)handleIdentifier + 0xfe) = *(byte *)((longlong)handleIdentifier + 0xfe) & 0xf3;
  handleIdentifier[0x3b] = 0;
  LOCK();
  *(uint8_t *)((longlong)handleIdentifier + 0xf9) = 0;
  UNLOCK();
  handleIdentifier[0x59] = 0;
  *(uint8_t *)((longlong)handleIdentifier + 0xf5) = 0;
  handleIdentifier[0x4b] = 0;
  return handleIdentifier;
}

uint64_t SetupSystemServices(uint64_t handleIdentifier,ulonglong resourceIdentifier)

{
  InitializeAudioSystem();
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x300);
  }
  return handleIdentifier;
}

uint8_t InitializeSystemModule9(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint8_t uint_result;
  uint64_t uint_result;
  void *system_buffer_ptr_30;
  longlong longStack_28;

  uint_result = INVALID_HANDLE_VALUE;
  PrepareSystemBuffer(&bufferPtr_30system_buffer_ptr_30);
  uint_result = InitializeStringManager(handleIdentifier + 0x218,&bufferPtr_30system_buffer_ptr_30,systemConfig,systemFlags,uint_result);
  system_buffer_ptr_30 = &resourcePoolPointer;
  if (longStack_28 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return uint_result;
}
// WARNING: Removing unreachable block (ram,0x000180276fbd)
// void InitializeSystemDataNode32(longlong handleIdentifier,uint64_t *resourceIdentifier)
void InitializeSystemDataNode32(longlong handleIdentifier,uint64_t *resourceIdentifier)

{
  uint64_t *ptr_uint_var;
  longlong *long_ptr;
  longlong long_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint64_t uint_result;
  char char_var;
  longlong long_result;
  longlong *long_ptr;
  uint uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint8_t localBuffer_e8 [184];
  uint64_t uintStack_30;

  uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & 0xfbffffff;
  *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
  uintStack_30 = 0x180075655;
  char_var = InitializeSystemModule41(resourceIdentifier);
  if (char_var == '\0') {
    *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result | 0x4000000;
  }
  uint_result = resourceIdentifier[1];
  long_ptr = *(longlong **)(handleIdentifier + 0x1c8);
  *(uint64_t *)(handleIdentifier + 0x120) = *resourceIdentifier;
  *(uint64_t *)(handleIdentifier + 0x128) = uint_result;
  uint_result = resourceIdentifier[3];
  *(uint64_t *)(handleIdentifier + 0x130) = resourceIdentifier[2];
  *(uint64_t *)(handleIdentifier + 0x138) = uint_result;
  uint_result = *(uint32_t *)((longlong)resourceIdentifier + 0x24);
  uint_result = *(uint32_t *)(resourceIdentifier + 5);
  uint_result = *(uint32_t *)((longlong)resourceIdentifier + 0x2c);
  *(uint32_t *)(handleIdentifier + 0x140) = *(uint32_t *)(resourceIdentifier + 4);
  *(uint32_t *)(handleIdentifier + 0x144) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x148) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x14c) = uint_result;
  uint_result = *(uint32_t *)((longlong)resourceIdentifier + 0x34);
  uint_result = *(uint32_t *)(resourceIdentifier + 7);
  uint_result = *(uint32_t *)((longlong)resourceIdentifier + 0x3c);
  *(uint32_t *)(handleIdentifier + 0x150) = *(uint32_t *)(resourceIdentifier + 6);
  *(uint32_t *)(handleIdentifier + 0x154) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x158) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x15c) = uint_result;
  if (long_ptr != (longlong *)0x0) {
    if (*(code **)(*long_ptr + 0x160) == (code *)&g_system_call_8) {
      ptr_uint_var = (uint64_t *)((longlong)long_ptr + 0x214);
      *(uint32_t *)((longlong)long_ptr + 0x244) = 0;
      if (long_ptr[8] - long_ptr[7] >> 4 == 0) {
        *ptr_uint_var = 0;
        *(uint64_t *)((longlong)long_ptr + 0x21c) = 0;
        *(uint64_t *)((longlong)long_ptr + 0x224) = 0;
        *(uint64_t *)((longlong)long_ptr + 0x22c) = 0;
        *(uint64_t *)((longlong)long_ptr + 0x234) = 0;
        *(uint64_t *)((longlong)long_ptr + 0x23c) = 0;
      }
      else {
        *ptr_uint_var = 0x4cbebc204cbebc20;
        *(uint64_t *)((longlong)long_ptr + 0x21c) = 0x7f7fffff4cbebc20;
        *(uint32_t *)((longlong)long_ptr + 0x234) = 0;
        *(uint32_t *)(long_ptr + 0x47) = 0;
        *(uint32_t *)((longlong)long_ptr + 0x23c) = 0;
        *(uint32_t *)(long_ptr + 0x48) = 0x7f7fffff;
        *(uint64_t *)((longlong)long_ptr + 0x224) = 0xccbebc20ccbebc20;
        *(uint64_t *)((longlong)long_ptr + 0x22c) = 0x7f7fffffccbebc20;
        long_ptr = (longlong *)long_ptr[7];
        if (long_ptr < (longlong *)long_ptr[8]) {
          do {
            long_result = *long_ptr;
            if (((*(byte *)(long_result + SYSTEM_DATA_COMPARE_SIZE0) & SYSTEM_NODE_HEADER_SIZE) == 0) || (long_ptr[5] == 0)) {
              long_result = long_result + 0x120;
            }
            else {
              long_result = EngineFunction94940(long_result + 0x120,localBuffer_e8,long_ptr[5] + 0x70);
            }
            UtilityFunction3a240(ptr_uint_var,long_result + 0x274,long_result);
            long_ptr = long_ptr + 2;
          } while (long_ptr < (longlong *)long_ptr[8]);
        }
        if (((long_ptr[8] - long_ptr[7] & 0xfffffffffffffff0U) == SYSTEM_DATA_COMPARE_SIZE) &&
           (long_result = *(longlong *)long_ptr[7], (*(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE0) & 0x4000000) == 0)) {
          uint_result = *(uint64_t *)(long_result + 0x29c);
          *(uint64_t *)((longlong)long_ptr + 0x234) = *(uint64_t *)(long_result + 0x294);
          *(uint64_t *)((longlong)long_ptr + 0x23c) = uint_result;
          *(uint32_t *)((longlong)long_ptr + 0x244) =
               *(uint32_t *)(*(longlong *)long_ptr[7] + 0x2a4);
        }
        else {
          InitializeSystemModule43(ptr_uint_var);
          long_ptr = (longlong *)long_ptr[7];
          float_result = 0.0;
          if (long_ptr < (longlong *)long_ptr[8]) {
            do {
              long_result = *long_ptr;
              if ((*(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE0) & 0x4000000) == 0) {
                float_result = *(float *)(long_result + 0x294);
                float_result = *(float *)(long_result + 0x298);
                float_result = *(float *)(long_result + 0x29c);
                float_result = *(float *)(long_result + 0x2a4);
              }
              else {
                float_result = *(float *)(long_result + 0x298);
                float_result = *(float *)(long_result + 0x294);
                float_result = *(float *)(long_result + 0x29c);
                float_result = *(float *)(long_result + 0x130) * float_result + *(float *)(long_result + 0x120) * float_result +
                         *(float *)(long_result + 0x140) * float_result + *(float *)(long_result + 0x150);
                float_result = *(float *)(long_result + 0x134) * float_result + *(float *)(long_result + 0x124) * float_result +
                         *(float *)(long_result + 0x144) * float_result + *(float *)(long_result + 0x154);
                float_result = *(float *)(long_result + 0x138) * float_result + *(float *)(long_result + 0x128) * float_result +
                         *(float *)(long_result + 0x148) * float_result + *(float *)(long_result + 0x158);
                float_result = *(float *)(long_result + 0x140) * *(float *)(long_result + 0x140) +
                         *(float *)(long_result + 0x144) * *(float *)(long_result + 0x144) +
                         *(float *)(long_result + 0x148) * *(float *)(long_result + 0x148);
                float_result = *(float *)(long_result + 0x130) * *(float *)(long_result + 0x130) +
                         *(float *)(long_result + 0x134) * *(float *)(long_result + 0x134) +
                         *(float *)(long_result + 0x138) * *(float *)(long_result + 0x138);
                float_result = *(float *)(long_result + 0x120) * *(float *)(long_result + 0x120) +
                         *(float *)(long_result + 0x124) * *(float *)(long_result + 0x124) +
                         *(float *)(long_result + 0x128) * *(float *)(long_result + 0x128);
                if (float_result <= float_result) {
                  if (float_result <= float_result) {
                    float_result = float_result;
                  }
                }
                else if (float_result <= float_result) {
                  float_result = float_result;
                }
                if ((float_result - 1.0 <= -1e-06) || (1e-06 <= float_result - 1.0)) {
                  float_result = SQRT(float_result) * *(float *)(long_result + 0x2a4);
                }
                else {
                  float_result = *(float *)(long_result + 0x2a4) * 1.0;
                }
              }
              float_result = *(float *)((longlong)long_ptr + 0x23c) - float_result;
              float_result = *(float *)((longlong)long_ptr + 0x234) - float_result;
              float_result = (*(float *)(long_ptr + 0x47) - float_result) * (*(float *)(long_ptr + 0x47) - float_result) +
                       float_result * float_result + float_result * float_result;
              float_result = float_result - float_result;
              if (float_result <= 0.0) {
                float_result = 0.0;
              }
              if (float_result * float_result < float_result) {
                float_result = SQRT(float_result) + float_result;
              }
              long_ptr = long_ptr + 2;
            } while (long_ptr < (longlong *)long_ptr[8]);
            if ((0.0 < float_result) &&
               (float_result < *(float *)((longlong)long_ptr + 0x244) ||
                float_result == *(float *)((longlong)long_ptr + 0x244))) {
              *(float *)((longlong)long_ptr + 0x244) = float_result;
            }
          }
        }
      }
      return;
    }
    uintStack_30 = 0x1800756d4;
    (**(code **)(*long_ptr + 0x160))();
  }
  return;
}
// void InitializeAudioSystem(uint64_t *handleIdentifier)

void InitializeAudioSystem(uint64_t *handleIdentifier)

{
  byte *ptr_byte_var;
  longlong *long_ptr;
  longlong long_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  *handleIdentifier = &globalSystemVariable;
  handleIdentifier[0x39] = 0;
  if (handleIdentifier[0x59] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x59] = 0;
  long_ptr = (longlong *)handleIdentifier[0x37];
  handleIdentifier[0x37] = 0;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  long_ptr = (longlong *)handleIdentifier[0x38];
  handleIdentifier[0x38] = 0;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  if (handleIdentifier[0x5a] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x5a] = 0;
  long_ptr = (longlong *)handleIdentifier[0x4b];
  if (long_ptr != (longlong *)0x0) {
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *long_ptr = 0;
    if (long_ptr[2] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    long_ptr[2] = 0;
    if (long_ptr[7] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    long_ptr[2] = 0;
    long_ptr[7] = 0;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_ptr);
  }
  handleIdentifier[0x4b] = 0;
  if (*(char *)((longlong)handleIdentifier + 0xf9) != '\0') {
    if (handleIdentifier[0x3b] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    handleIdentifier[0x3b] = 0;
    LOCK();
    *(uint8_t *)((longlong)handleIdentifier + 0xf9) = 0;
    UNLOCK();
  }
  if (handleIdentifier[0x3d] != 0) {
    InitializeSystemComponents();
    handleIdentifier[0x3d] = 0;
    if (handleIdentifier[0x3e] != 0) {
      ptr_byte_var = (byte *)(handleIdentifier[0x3e] + 0xfe);
      *ptr_byte_var = *ptr_byte_var & 0xfb;
    }
  }
  long_ptr = (longlong *)handleIdentifier[0x42];
  handleIdentifier[0x42] = 0;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  long_result = handleIdentifier[0x3c];
  if (long_result != 0) {
    ValidateSystemHandle(long_result,0x18,SYSTEM_DATA_COMPARE_SIZE,InitializeConfigSystem,uint_result,long_result);
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(long_result);
  }
  handleIdentifier[0x3c] = 0;
  InitializeFontSystem(handleIdentifier + 0x5e);
  InitializeShaderSystem(handleIdentifier + 0x5c);
  if ((longlong *)handleIdentifier[0x4d] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[0x4d] + 0x38))();
  }
  InitializePhysicsSystem();
  if ((longlong *)handleIdentifier[0x42] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[0x42] + 0x38))();
  }
  if (handleIdentifier[0x3d] != 0) {
    InitializeSystemComponents();
  }
  if ((longlong *)handleIdentifier[0x38] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[0x38] + 0x38))();
  }
  if ((longlong *)handleIdentifier[0x37] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[0x37] + 0x38))();
  }
  if ((longlong *)handleIdentifier[0x36] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[0x36] + 0x38))();
  }
  if ((longlong *)handleIdentifier[0x23] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[0x23] + 0x38))();
  }
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[2] = &globalSystemPointerData;
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  return;
}
// void InitializeSystemDataNode17(longlong handleIdentifier,longlong *resourceIdentifier)

void InitializeSystemDataNode17(longlong handleIdentifier,longlong *resourceIdentifier)

{
  longlong *long_ptr;
  uint64_t uintStack_40;
  uint32_t uintStack_38;
  longlong longStack_30;
  uint8_t localBuffer_28 [8];
  longlong longStack_20;
  uint32_t uintStack_18;
  longlong *stack_long_ptr;

  if (*(longlong *)(handleIdentifier + 0x1b0) != *resourceIdentifier) {
    if (*resourceIdentifier == 0) {
      stack_long_ptr = (longlong *)0x0;
      localBuffer_28[0] = 0;
      uintStack_18 = 0;
      longStack_20 = handleIdentifier;
      InitializeSystemModule33(localBuffer_28);
      if ((*(int *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE8) != 0) || (*(int *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE4) != 0)) {
        uintStack_40 = *(uint64_t *)(handleIdentifier + 0x1b0);
        uintStack_38 = 0;
        InitializeThreadManagerSystem(&uintStack_40);
        long_ptr = stack_long_ptr;
        ConfigureSystemHandles(stack_long_ptr + 2,longStack_30 + SYSTEM_DATA_COMPARE_SIZE);
        ConfigureSystemHandles(long_ptr + 7,longStack_30 + 0x38);
        InitializePhysicsSystem(long_ptr + 0xc,longStack_30 + 0x60);
        InitializeSystemModule4(long_ptr + 0x11,longStack_30 + 0x88);
        InitializeTextureSystem(long_ptr + NODE_INITIALIZED_OFFSET,longStack_30 + 200);
        InitializeSystemDataNode30(&uintStack_40);
      }
      InitializeNetworkManagerSystem(localBuffer_28);
      if (stack_long_ptr != (longlong *)0x0) {
        (**(code **)(*stack_long_ptr + 0x38))();
      }
    }
    resourceIdentifier = (longlong *)*resourceIdentifier;
    if (resourceIdentifier != (longlong *)0x0) {
      (**(code **)(*resourceIdentifier + 0x28))(resourceIdentifier);
    }
    long_ptr = *(longlong **)(handleIdentifier + 0x1b0);
    *(longlong **)(handleIdentifier + 0x1b0) = resourceIdentifier;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))();
    }
  }
  return;
}

longlong InitializeAuthenticationSystem(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  byte bool_var;

  bool_var = *(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE;
  long_result = handleIdentifier;
  if (bool_var == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  long_result = 2;
  if (0xffff < *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0)) {
    long_result = 4;
  }
  if (bool_var == 0) {
    handleIdentifier = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  return (*(int *)(handleIdentifier + 0x1fc) * 3) * long_result;
}

float * SystemFunction_16_0(float *handleIdentifier)

{
  float *ptr_float_var;
  byte bool_var;
  longlong *long_ptr;
  float *ptr_float_var;
  char char_var;
  float *ptr_float_var;
  uint uint_result;
  ulonglong uint_result;
  bool bool_var;
  float float_result;
  float float_result;
  float init_float_stack_b8;
  float init_float_stack_b4;
  float init_float_stack_b0;
  uint32_t uintStack_ac;
  float init_float_stack_a8;
  float init_float_stack_a4;
  float init_float_stack_a0;
  uint32_t uintStack_9c;
  float *init_float_ptr_stack_98;
  uint32_t module_type_id;
  longlong longStack_88;
  uint64_t uintStack_78;
  uint64_t uintStack_70;
  uint64_t uintStack_68;
  uint64_t uintStack_60;
  float init_float_stack_58;
  float init_float_stack_54;
  float init_float_stack_50;
  float init_float_stack_4c;
  uint64_t uintStack_48;
  uint64_t uintStack_40;
  uint64_t uintStack_38;

  uintStack_38 = INVALID_HANDLE_VALUE;
  ptr_float_var = handleIdentifier;
  if ((*(byte *)((longlong)handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    ptr_float_var = (float *)GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x6c));
  }
  if ((*(longlong *)(ptr_float_var + 0x84) != 0) && (((uint)handleIdentifier[0x40] & 0x80) == 0)) {
    ptr_float_var = handleIdentifier + 0x9d;
    ptr_float_var[0] = 1e+08;
    ptr_float_var[1] = 1e+08;
    handleIdentifier[0x9f] = 1e+08;
    handleIdentifier[0xa0] = 3.4028235e+38;
    handleIdentifier[0xa1] = -1e+08;
    handleIdentifier[0xa2] = -1e+08;
    handleIdentifier[0xa3] = -1e+08;
    handleIdentifier[0xa4] = 3.4028235e+38;
    uint_result = 0;
    handleIdentifier[0xa9] = 0.0;
    handleIdentifier[0xa5] = 0.0;
    handleIdentifier[0xa6] = 0.0;
    handleIdentifier[0xa7] = 0.0;
    handleIdentifier[0xa8] = 3.4028235e+38;
    uintStack_90 = 0;
    init_float_ptr_stack_98 = ptr_float_var;
    InitializeThreadManagerSystem(&init_float_ptr_stack_98);
    if (*(int *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE) != 0) {
      do {
        ptr_float_var = (float *)((longlong)(int)uint_result * SYSTEM_DATA_COMPARE_SIZE + *(longlong *)(longStack_88 + 0x18));
        init_float_stack_a8 = *ptr_float_var;
        if (*ptr_float_var < init_float_stack_a8) {
          init_float_stack_a8 = *ptr_float_var;
        }
        init_float_stack_a4 = ptr_float_var[1];
        if (handleIdentifier[0x9e] < init_float_stack_a4) {
          init_float_stack_a4 = handleIdentifier[0x9e];
        }
        init_float_stack_a0 = ptr_float_var[2];
        if (handleIdentifier[0x9f] < init_float_stack_a0) {
          init_float_stack_a0 = handleIdentifier[0x9f];
        }
        *(ulonglong *)ptr_float_var = CONCAT44(init_float_stack_a4,init_float_stack_a8);
        *(ulonglong *)(handleIdentifier + 0x9f) = CONCAT44(uintStack_9c,init_float_stack_a0);
        init_float_stack_b8 = *ptr_float_var;
        if (init_float_stack_b8 < handleIdentifier[0xa1]) {
          init_float_stack_b8 = handleIdentifier[0xa1];
        }
        init_float_stack_b4 = ptr_float_var[1];
        if (init_float_stack_b4 < handleIdentifier[0xa2]) {
          init_float_stack_b4 = handleIdentifier[0xa2];
        }
        init_float_stack_b0 = ptr_float_var[2];
        if (init_float_stack_b0 < handleIdentifier[0xa3]) {
          init_float_stack_b0 = handleIdentifier[0xa3];
        }
        *(ulonglong *)(handleIdentifier + 0xa1) = CONCAT44(init_float_stack_b4,init_float_stack_b8);
        *(ulonglong *)(handleIdentifier + 0xa3) = CONCAT44(uintStack_ac,init_float_stack_b0);
        uint_result = uint_result + 1;
      } while (uint_result < *(uint *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE));
    }
    ptr_float_var = *(float **)(handleIdentifier + 0x6e);
    if ((ptr_float_var != (float *)0x0) && (((uint)ptr_float_var[0x4e] & 0x3000) != 0)) {
      uintStack_78 = *(uint64_t *)(handleIdentifier + 0x48);
      uintStack_70 = *(uint64_t *)(handleIdentifier + 0x4a);
      uintStack_68 = *(uint64_t *)(handleIdentifier + 0x4c);
      uintStack_60 = *(uint64_t *)(handleIdentifier + 0x4e);
      init_float_stack_58 = handleIdentifier[0x50];
      init_float_stack_54 = handleIdentifier[0x51];
      init_float_stack_50 = handleIdentifier[0x52];
      init_float_stack_4c = handleIdentifier[0x53];
      uintStack_48 = *(uint64_t *)(handleIdentifier + 0x54);
      uintStack_40 = *(uint64_t *)(handleIdentifier + 0x56);
      InitializeSystemModule19(&uintStack_78);
      UtilityFunction3a240(ptr_float_var,ptr_float_var,&uintStack_78);
      ptr_float_var = *(float **)(handleIdentifier + 0x6e);
      if (((uint)ptr_float_var[0x4e] & 0x3000) == SYSTEM_NODE_HEADER_SIZE00) {
        uintStack_78 = *(uint64_t *)(handleIdentifier + 0x48);
        uintStack_70 = *(uint64_t *)(handleIdentifier + 0x4a);
        uintStack_68 = *(uint64_t *)(handleIdentifier + 0x4c);
        uintStack_60 = *(uint64_t *)(handleIdentifier + 0x4e);
        init_float_stack_58 = handleIdentifier[0x50];
        init_float_stack_54 = handleIdentifier[0x51];
        init_float_stack_50 = handleIdentifier[0x52];
        init_float_stack_4c = handleIdentifier[0x53];
        uintStack_48 = *(uint64_t *)(handleIdentifier + 0x54);
        uintStack_40 = *(uint64_t *)(handleIdentifier + 0x56);
        InitializeUISystem(&uintStack_78,0x3fc90fdb);
        UtilityFunction3a240(ptr_float_var,ptr_float_var,&uintStack_78);
        uintStack_78 = *(uint64_t *)(handleIdentifier + 0x48);
        uintStack_70 = *(uint64_t *)(handleIdentifier + 0x4a);
        uintStack_68 = *(uint64_t *)(handleIdentifier + 0x4c);
        uintStack_60 = *(uint64_t *)(handleIdentifier + 0x4e);
        init_float_stack_58 = handleIdentifier[0x50];
        init_float_stack_54 = handleIdentifier[0x51];
        init_float_stack_50 = handleIdentifier[0x52];
        init_float_stack_4c = handleIdentifier[0x53];
        uintStack_48 = *(uint64_t *)(handleIdentifier + 0x54);
        uintStack_40 = *(uint64_t *)(handleIdentifier + 0x56);
        InitializeSystemModule39(&uintStack_78);
        ptr_float_var = (float *)UtilityFunction3a240(ptr_float_var,ptr_float_var,&uintStack_78);
      }
    }
    ptr_float_var = init_float_ptr_stack_98;
    if (handleIdentifier[0xa1] < *ptr_float_var) {
      handleIdentifier[0xa9] = 0.0;
      ptr_float_var[0] = 0.0;
      ptr_float_var[1] = 0.0;
      handleIdentifier[0x9f] = 0.0;
      handleIdentifier[0xa0] = 0.0;
      handleIdentifier[0xa1] = 0.0;
      handleIdentifier[0xa2] = 0.0;
      handleIdentifier[0xa3] = 0.0;
      handleIdentifier[0xa4] = 0.0;
      handleIdentifier[0xa5] = 0.0;
      handleIdentifier[0xa6] = 0.0;
      handleIdentifier[0xa7] = 0.0;
      handleIdentifier[0xa8] = 0.0;
    }
    else {
      handleIdentifier[0xa5] = (handleIdentifier[0xa1] + *ptr_float_var) * 0.5;
      handleIdentifier[0xa6] = (handleIdentifier[0xa2] + handleIdentifier[0x9e]) * 0.5;
      handleIdentifier[0xa7] = (handleIdentifier[0xa3] + handleIdentifier[0x9f]) * 0.5;
      handleIdentifier[0xa8] = 3.4028235e+38;
      float_result = 0.0;
      uint_result = (ulonglong)*(uint *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE);
      if (0 < (int)*(uint *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE)) {
        ptr_float_var = *(float **)(longStack_88 + 0x18);
        float_result = float_result;
        do {
          float_result = (*ptr_float_var - handleIdentifier[0xa5]) * (*ptr_float_var - handleIdentifier[0xa5]) +
                   (ptr_float_var[1] - handleIdentifier[0xa6]) * (ptr_float_var[1] - handleIdentifier[0xa6]) +
                   (ptr_float_var[2] - handleIdentifier[0xa7]) * (ptr_float_var[2] - handleIdentifier[0xa7]);
          if (float_result <= float_result) {
            float_result = float_result;
          }
          ptr_float_var = ptr_float_var + 4;
          uint_result = uint_result - 1;
          float_result = float_result;
        } while (uint_result != 0);
      }
      handleIdentifier[0xa9] = SQRT(float_result);
    }
    if (init_float_ptr_stack_98 != (float *)0x0) {
      while( true ) {
        LOCK();
        char_var = *(char *)(ptr_float_var + 0x3b);
        bool_var = char_var == '\0';
        if (bool_var) {
          *(char *)(ptr_float_var + 0x3b) = '\x01';
          char_var = '\0';
        }
        UNLOCK();
        if (bool_var) break;
        float_result = (float)_Thrd_id();
        if ((ptr_float_var[0x3c] == float_result) || (ptr_float_var[0x3c] != 0.0)) goto LAB_180075f4f;
        Sleep();
      }
      char_var = '\0';
LAB_180075f4f:
      LOCK();
      ptr_float_var = ptr_float_var + 0x3a;
      float_result = *ptr_float_var;
      ptr_float_var = (float *)(ulonglong)(uint)float_result;
      *ptr_float_var = (float)((int)*ptr_float_var + -1);
      UNLOCK();
      if (char_var == '\0') {
        if ((((float_result == 1.4013e-45) && (*(longlong *)(init_float_ptr_stack_98 + 0x84) != 0)) &&
            (ptr_float_var = init_float_ptr_stack_98, InitializeAuthenticationSystem(init_float_ptr_stack_98), *(char *)(ptr_float_var + 0x3f) == '\0')) &&
           ((*(char *)(ptr_float_var + 0x3d) == '\0' &&
            (((*(byte *)((longlong)ptr_float_var + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0 ||
             ((*(byte *)((longlong)ptr_float_var + 0xfe) & 1) == 0)))))) {
          long_ptr = *(longlong **)(ptr_float_var + 0x84);
          ptr_float_var[0x84] = 0.0;
          ptr_float_var[0x85] = 0.0;
          if (long_ptr != (longlong *)0x0) {
            (**(code **)(*long_ptr + 0x38))();
          }
        }
        LOCK();
        bool_var = *(byte *)(ptr_float_var + 0x3b);
        *(byte *)(ptr_float_var + 0x3b) = 0;
        ptr_float_var = (float *)(ulonglong)bool_var;
        UNLOCK();
      }
    }
  }
  return ptr_float_var;
}
// void InitializeSystemModule26(longlong *handleIdentifier)

void InitializeSystemModule26(longlong *handleIdentifier)

{
  ushort uint_result;
  longlong *long_ptr;
  uint uint_result;
  int int_result;
  int int_result;
  int int_result;
  longlong long_result;
  float float_result;
  float float_result;
  uint8_t system_local_buffer_138 [8];
  longlong *stack_long_ptr;
  uint32_t uintStack_128;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  uint32_t uintStack_110;
  longlong longStack_108;
  uint64_t uintStack_100;
  uint64_t uintStack_f8;
  uint8_t uintStack_f0;
  uint64_t uintStack_e8;
  uint64_t uintStack_d8;
  uint64_t uintStack_c8;
  uint64_t uintStack_c0;
  uint8_t uintStack_b8;
  uint64_t uintStack_b0;
  uint64_t uintStack_a0;
  uint64_t uintStack_90;

  uintStack_90 = INVALID_HANDLE_VALUE;
  while( true ) {
    if (((int)handleIdentifier[0x41] != 0) &&
       ((float_result = *(float *)(handleIdentifier + 0x5b) - *(float *)((longlong)handleIdentifier + 0x2dc), float_result <= -0.01
        || (0.01 <= float_result)))) {
      long_ptr = handleIdentifier;
      if ((((*(byte *)((longlong)handleIdentifier + 0xfd) & 0x40) == 0) || (handleIdentifier[0x42] == 0)) &&
         (handleIdentifier[0x36] != 0)) {
        long_ptr = (longlong *)InitializeResourceSystem();
      }
      int_result = 0;
      if (long_ptr == handleIdentifier) {
        stack_long_ptr = (longlong *)0x0;
        system_local_buffer_138[0] = 0;
        uintStack_128 = 0;
        stack_long_ptr = long_ptr;
        InitializeSystemModule33(system_local_buffer_138);
        long_ptr = stack_long_ptr + 0x16;
        uint_result = *(ushort *)(stack_long_ptr + 0x18);
        float_result = *(float *)(stack_long_ptr[0x17] + -4 + (ulonglong)uint_result * 4);
        float_result = *(float *)((longlong)handleIdentifier + 0x2dc);
        if (float_result < *(float *)((longlong)handleIdentifier + 0x2dc)) {
          *(float *)((longlong)handleIdentifier + 0x2dc) = float_result;
          uint_result = *(ushort *)(stack_long_ptr + 0x18);
          float_result = float_result;
        }
        uint_result = (uint)uint_result;
        if (uint_result < 2) {
          int_result = uint_result - 1;
          float_result = 0.0;
          int_result = int_result;
        }
        else {
          int_result = uint_result - 1;
          if (0 < (int)(uint_result - 2)) {
            do {
              int_result = int_result + int_result >> 1;
              if (*(float *)(stack_long_ptr[0x17] + (longlong)int_result * 4) <= float_result) {
                int_result = int_result;
                int_result = int_result;
              }
              int_result = int_result;
            } while (int_result < int_result + -1);
          }
          float_result = *(float *)(stack_long_ptr[0x17] + (longlong)int_result * 4);
          float_result = (float_result - float_result) / (*(float *)(stack_long_ptr[0x17] + (longlong)int_result * 4) - float_result);
          if (0.0 <= float_result) {
            if (1.0 <= float_result) {
              float_result = 1.0;
            }
          }
          else {
            float_result = 0.0;
          }
        }
        if (-1 < int_result) {
          (**(code **)(*handleIdentifier + 0x28))(handleIdentifier);
          uintStack_100 = 0;
          uintStack_f8 = 0;
          uintStack_d8 = 0;
          uintStack_e8 = 0;
          uintStack_f0 = 0;
          CreateSystemStack(&uintStack_100,handleIdentifier,0);
          (**(code **)(*handleIdentifier + 0x38))(handleIdentifier);
          ConfigureSystemStack(&uintStack_100,long_ptr,int_result,int_result,float_result);
          DestroySystemStack(&uintStack_100);
        }
        InitializeNetworkManagerSystem(system_local_buffer_138);
        if (stack_long_ptr != (longlong *)0x0) {
          (**(code **)(*stack_long_ptr + 0x38))();
        }
      }
      else {
        uintStack_110 = 0;
        stack_long_ptr = long_ptr;
        InitializeThreadManagerSystem(&stack_long_ptr);
        long_result = longStack_108 + 0xb0;
        uint_result = *(ushort *)(longStack_108 + 0xc0);
        float_result = *(float *)(*(longlong *)(longStack_108 + 0xb8) + -4 + (ulonglong)uint_result * 4);
        float_result = *(float *)((longlong)handleIdentifier + 0x2dc);
        if (float_result < *(float *)((longlong)handleIdentifier + 0x2dc)) {
          *(float *)((longlong)handleIdentifier + 0x2dc) = float_result;
          uint_result = *(ushort *)(longStack_108 + 0xc0);
          float_result = float_result;
        }
        uint_result = (uint)uint_result;
        if (uint_result < 2) {
          int_result = uint_result - 1;
          float_result = 0.0;
          int_result = int_result;
        }
        else {
          int_result = uint_result - 1;
          if (0 < (int)(uint_result - 2)) {
            do {
              int_result = int_result + int_result >> 1;
              if (*(float *)(*(longlong *)(longStack_108 + 0xb8) + (longlong)int_result * 4) <= float_result) {
                int_result = int_result;
                int_result = int_result;
              }
              int_result = int_result;
            } while (int_result < int_result + -1);
          }
          float_result = *(float *)(*(longlong *)(longStack_108 + 0xb8) + (longlong)int_result * 4);
          float_result = (float_result - float_result) /
                  (*(float *)(*(longlong *)(longStack_108 + 0xb8) + (longlong)int_result * 4) - float_result);
          if (0.0 <= float_result) {
            if (1.0 <= float_result) {
              float_result = 1.0;
            }
          }
          else {
            float_result = 0.0;
          }
        }
        if (-1 < int_result) {
          (**(code **)(*handleIdentifier + 0x28))(handleIdentifier);
          uintStack_c8 = 0;
          uintStack_c0 = 0;
          uintStack_a0 = 0;
          uintStack_b0 = 0;
          uintStack_b8 = 0;
          CreateSystemStack(&uintStack_c8,handleIdentifier,0);
          (**(code **)(*handleIdentifier + 0x38))(handleIdentifier);
          ConfigureSystemStack(&uintStack_c8,long_result,int_result,int_result,float_result);
          DestroySystemStack(&uintStack_c8);
        }
        InitializeSystemDataNode30(&stack_long_ptr);
      }
      *(uint32_t *)(handleIdentifier + 0x5b) = *(uint32_t *)((longlong)handleIdentifier + 0x2dc);
    }
    if ((*(byte *)((longlong)handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) != 0) break;
    handleIdentifier = (longlong *)handleIdentifier[0x36];
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

longlong * InitializeResourceSystem(longlong *handleIdentifier,longlong *resourceIdentifier)

{
  byte *ptr_byte_var;
  uint32_t uint_result;
  longlong long_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  uint64_t uint_result;
  longlong *long_ptr;
  void *node_root0;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  uint32_t uint_result;

  stack_long_ptr = resourceIdentifier;
  uint_result = AllocateSystemMemory(systemMemoryPool,0x300,SYSTEM_DATA_COMPARE_SIZE,9,0,INVALID_HANDLE_VALUE);
  long_ptr = (longlong *)InitializeSystemModule41(uint_result,0,0);
  *resourceIdentifier = (longlong)long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  uint_result = 1;
  *(byte *)(*resourceIdentifier + 0xfd) = *(byte *)(*resourceIdentifier + 0xfd) & 0xdf;
  long_result = handleIdentifier[0x18];
  long_result = *resourceIdentifier;
  *(longlong *)(long_result + 0xb8) = handleIdentifier[0x17];
  *(longlong *)(long_result + 0xc0) = long_result;
  *(byte *)(*resourceIdentifier + 0xfd) = *(byte *)(*resourceIdentifier + 0xfd) & 0xbf;
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0xcc);
  long_result = handleIdentifier[0x1a];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0xd4);
  long_result = handleIdentifier[0x1b];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0xdc);
  long_result = handleIdentifier[0x1c];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0xe4);
  long_result = *resourceIdentifier;
  *(int *)(long_result + 200) = (int)handleIdentifier[NODE_INITIALIZED_OFFSET];
  *(uint32_t *)(long_result + 0xcc) = uint_result;
  *(int *)(long_result + 0xd0) = (int)long_result;
  *(uint32_t *)(long_result + 0xd4) = uint_result;
  *(int *)(long_result + 0xd8) = (int)long_result;
  *(uint32_t *)(long_result + 0xdc) = uint_result;
  *(int *)(long_result + 0xe0) = (int)long_result;
  *(uint32_t *)(long_result + 0xe4) = uint_result;
  if ((*(byte *)((longlong)handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    InitializeSystemDataNode17(*resourceIdentifier,handleIdentifier + 0x36);
  }
  else {
    long_result = *resourceIdentifier;
    stack_long_ptr = handleIdentifier;
    (**(code **)(*handleIdentifier + 0x28))(handleIdentifier);
    InitializeSystemDataNode17(long_result,&stack_long_ptr);
    (**(code **)(*handleIdentifier + 0x38))(handleIdentifier);
  }
  *(longlong *)(*resourceIdentifier + 0xa8) = handleIdentifier[0x15];
  ptr_byte_var = (byte *)(*resourceIdentifier + 0xfd);
  *ptr_byte_var = *ptr_byte_var ^ (*(byte *)(*resourceIdentifier + 0xfd) ^ *(byte *)((longlong)handleIdentifier + 0xfd)) & 2;
  *(int *)(*resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = (int)handleIdentifier[SYSTEM_NODE_HEADER_SIZE];
  long_result = handleIdentifier[0x48];
  long_result = *resourceIdentifier;
  *(longlong *)(long_result + 0x238) = handleIdentifier[0x47];
  *(longlong *)(long_result + 0x240) = long_result;
  long_result = handleIdentifier[0x4a];
  long_result = *resourceIdentifier;
  *(longlong *)(long_result + 0x248) = handleIdentifier[0x49];
  *(longlong *)(long_result + 0x250) = long_result;
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0x2ac);
  long_result = handleIdentifier[0x56];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0x2b4);
  long_result = *resourceIdentifier;
  *(int *)(long_result + 0x2a8) = (int)handleIdentifier[0x55];
  *(uint32_t *)(long_result + 0x2ac) = uint_result;
  *(int *)(long_result + 0x2b0) = (int)long_result;
  *(uint32_t *)(long_result + 0x2b4) = uint_result;
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 700);
  long_result = handleIdentifier[0x58];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0x2c4);
  long_result = *resourceIdentifier;
  *(int *)(long_result + 0x2b8) = (int)handleIdentifier[0x57];
  *(uint32_t *)(long_result + 700) = uint_result;
  *(int *)(long_result + 0x2c0) = (int)long_result;
  *(uint32_t *)(long_result + 0x2c4) = uint_result;
  *(int *)(*resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE8) = (int)handleIdentifier[0x21];
  if ((longlong *)(*resourceIdentifier + 0x218) != handleIdentifier + 0x43) {
    ValidateSystemConfiguration((longlong *)(*resourceIdentifier + 0x218),handleIdentifier[0x43],handleIdentifier[0x44]);
  }
  node_root0 = &g_system_data_variable3;
  if ((void *)handleIdentifier[3] != (void *)0x0) {
    node_root0 = (void *)handleIdentifier[3];
  }
  (**(code **)(*(longlong *)(*resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE) + SYSTEM_DATA_COMPARE_SIZE))((longlong *)(*resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE),node_root0);
  *(uint8_t *)(*resourceIdentifier + 0xf6) = *(uint8_t *)((longlong)handleIdentifier + 0xf6);
  uint_result = *(uint64_t *)((longlong)handleIdentifier + 0x27c);
  uint_result = *(uint64_t *)((longlong)handleIdentifier + 0x284);
  uint_result = *(uint64_t *)((longlong)handleIdentifier + 0x28c);
  uint_result = *(uint64_t *)((longlong)handleIdentifier + 0x294);
  uint_result = *(uint64_t *)((longlong)handleIdentifier + 0x29c);
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0x2a4);
  long_result = *resourceIdentifier;
  *(uint64_t *)(long_result + 0x274) = *(uint64_t *)((longlong)handleIdentifier + 0x274);
  *(uint64_t *)(long_result + 0x27c) = uint_result;
  *(uint64_t *)(long_result + 0x284) = uint_result;
  *(uint64_t *)(long_result + 0x28c) = uint_result;
  *(uint64_t *)(long_result + 0x294) = uint_result;
  *(uint64_t *)(long_result + 0x29c) = uint_result;
  *(uint32_t *)(long_result + 0x2a4) = uint_result;
  *(uint8_t *)(*resourceIdentifier + 0xff) = *(uint8_t *)((longlong)handleIdentifier + 0xff);
  *(int *)(*resourceIdentifier + 0x270) = (int)handleIdentifier[0x4e];
  long_result = handleIdentifier[0x25];
  long_result = handleIdentifier[0x26];
  long_result = handleIdentifier[0x27];
  long_result = handleIdentifier[0x28];
  long_result = handleIdentifier[0x29];
  long_result = handleIdentifier[0x2a];
  long_result = handleIdentifier[0x2b];
  long_result = *resourceIdentifier;
  *(longlong *)(long_result + 0x120) = handleIdentifier[0x24];
  *(longlong *)(long_result + 0x128) = long_result;
  *(longlong *)(long_result + 0x130) = long_result;
  *(longlong *)(long_result + 0x138) = long_result;
  *(longlong *)(long_result + 0x140) = long_result;
  *(longlong *)(long_result + 0x148) = long_result;
  *(longlong *)(long_result + 0x150) = long_result;
  *(longlong *)(long_result + 0x158) = long_result;
  long_result = handleIdentifier[0x2d];
  long_result = handleIdentifier[0x2e];
  long_result = handleIdentifier[0x2f];
  long_result = handleIdentifier[0x30];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0x184);
  long_result = handleIdentifier[0x31];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0x18c);
  long_result = handleIdentifier[0x32];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + NODE_INITIALIZED_OFFSET4);
  long_result = handleIdentifier[0x33];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + NODE_INITIALIZED_OFFSETc);
  long_result = *resourceIdentifier;
  *(longlong *)(long_result + 0x160) = handleIdentifier[0x2c];
  *(longlong *)(long_result + 0x168) = long_result;
  *(longlong *)(long_result + 0x170) = long_result;
  *(longlong *)(long_result + 0x178) = long_result;
  *(int *)(long_result + 0x180) = (int)long_result;
  *(uint32_t *)(long_result + 0x184) = uint_result;
  *(int *)(long_result + 0x188) = (int)long_result;
  *(uint32_t *)(long_result + 0x18c) = uint_result;
  *(int *)(long_result + 400) = (int)long_result;
  *(uint32_t *)(long_result + NODE_INITIALIZED_OFFSET4) = uint_result;
  *(int *)(long_result + NODE_INITIALIZED_OFFSET8) = (int)long_result;
  *(uint32_t *)(long_result + NODE_INITIALIZED_OFFSETc) = uint_result;
  ptr_byte_var = (byte *)(*resourceIdentifier + 0xfd);
  *ptr_byte_var = *ptr_byte_var ^ (*(byte *)(*resourceIdentifier + 0xfd) ^ *(byte *)((longlong)handleIdentifier + 0xfd)) & 1;
  *(uint8_t *)(*resourceIdentifier + 0xf7) = *(uint8_t *)((longlong)handleIdentifier + 0xf7);
  *(int *)(*resourceIdentifier + SYSTEM_NODE_HEADER_SIZE8) = (int)handleIdentifier[0x41];
  *(int *)(*resourceIdentifier + 0x1f8) = (int)handleIdentifier[0x3f];
  *(uint32_t *)(*resourceIdentifier + 0x1fc) = *(uint32_t *)((longlong)handleIdentifier + 0x1fc);
  *(int *)(*resourceIdentifier + SYSTEM_NODE_HEADER_SIZE0) = (int)handleIdentifier[0x40];
  *(uint32_t *)(*resourceIdentifier + SYSTEM_NODE_HEADER_SIZE4) = *(uint32_t *)((longlong)handleIdentifier + SYSTEM_NODE_HEADER_SIZE4);
  *(int *)(*resourceIdentifier + 0x2d8) = (int)handleIdentifier[0x5b];
  uint_result = *(uint32_t *)((longlong)handleIdentifier + 0x2dc);
  *(uint32_t *)(*resourceIdentifier + 0x2dc) = uint_result;
  long_result = *resourceIdentifier;
  long_ptr = (longlong *)handleIdentifier[0x4d];
  if (long_ptr != (longlong *)0x0) {
    stack_long_ptr = long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr,uint_result,(int)long_result,(int)long_result,uint_result);
  }
  stack_long_ptr = *(longlong **)(long_result + 0x268);
  *(longlong **)(long_result + 0x268) = long_ptr;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x38))();
  }
  SystemFunction_64_8(*resourceIdentifier,handleIdentifier + 0x37);
  return resourceIdentifier;
}
// void InitializeSystemModule10(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule10(longlong *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  uint64_t uint_result;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  uint8_t localBuffer_30 [8];
  uint64_t uintStack_28;
  longlong *stack_long_ptr;
  uint16_t uintStack_10;
  char cStack_e;

  uint_result = INVALID_HANDLE_VALUE;
  if (handleIdentifier[0x42] == 0) {
    handleIdentifier[0x3f] = 0;
    handleIdentifier[0x40] = 0;
    *(uint32_t *)(handleIdentifier + 0x41) = 0;
    InitializeAuthenticationSystem();
  }
  else {
    (**(code **)(*handleIdentifier + 0x28))();
    stack_long_ptr = (longlong *)0x0;
    stack_long_ptr = (longlong *)0x0;
    stack_long_ptr = (longlong *)0x0;
    uintStack_28 = 0;
    localBuffer_30[0] = 0;
    CreateSystemStack(&stack_long_ptr,handleIdentifier,0,systemFlags,uint_result);
    (**(code **)(*handleIdentifier + 0x38))(handleIdentifier);
    long_ptr = stack_long_ptr;
    *(uint32_t *)(stack_long_ptr + 2) = 0;
    *(uint32_t *)(stack_long_ptr + 7) = 0;
    *(uint32_t *)(stack_long_ptr + 0x11) = 0;
    *(uint32_t *)(stack_long_ptr + 0xc) = 0;
    *(uint16_t *)(stack_long_ptr + 0x18) = 0;
    if (stack_long_ptr[0x17] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    stack_long_ptr[0x17] = 0;
    InitializeThreadManagerSystem(stack_long_ptr[0x16]);
    long_ptr[0x16] = 0;
    *(uint32_t *)(long_ptr + NODE_INITIALIZED_OFFSET) = 0;
    uintStack_10 = SYSTEM_DATA_COMPARE_SIZE1;
    if ((stack_long_ptr != (longlong *)0x0) && (stack_long_ptr != (longlong *)0x0)) {
      if (cStack_e != '\0') {
        SystemFunction_16_0();
      }
      InitializeNetworkManagerSystem(localBuffer_30);
      if ((char)uintStack_10 != '\0') {
        InitializeAuthenticationSystem(stack_long_ptr);
      }
      if (uintStack_10._1_1_ != '\0') {
        InitializeAuthenticationSystem(stack_long_ptr);
      }
      long_ptr = stack_long_ptr;
      stack_long_ptr = (longlong *)0x0;
      if (long_ptr != (longlong *)0x0) {
        (**(code **)(*long_ptr + 0x38))();
      }
    }
    InitializeNetworkManagerSystem(localBuffer_30);
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
      return;
    }
  }
  return;
}
// void SystemFunction_64_8(longlong handleIdentifier,longlong *resourceIdentifier)

void SystemFunction_64_8(longlong handleIdentifier,longlong *resourceIdentifier)

{
  byte bool_var;
  longlong long_result;
  uint8_t uint_result;
  byte bool_var;
  uint uint_result;
  longlong long_result;
  longlong *long_ptr;

  if (*resourceIdentifier != *(longlong *)(handleIdentifier + 0x1b8)) {
    if (*(char *)(handleIdentifier + 0xb1) != '\0') {
                    // WARNING: Subroutine does not return
      InitializeSystemCore();
    }
    InitializeEventSystem(handleIdentifier + 0x1b8);
    long_result = *(longlong *)(handleIdentifier + 0x1b8);
    if (long_result != 0) {
      long_result = 0;
      bool_var = *(byte *)(handleIdentifier + 0xfd);
      bool_var = (byte)((uint)*(uint32_t *)(*(longlong *)(long_result + 0x1e0) + 0x1588) >> 0x1b) << 7;
      *(byte *)(handleIdentifier + 0xfd) = bool_var | bool_var & 0x7f;
      uint_result = *(uint *)(long_result + 0x138) & 0x3000;
      if (uint_result == SYSTEM_DATA_COMPARE_SIZE00) {
        *(uint8_t *)(handleIdentifier + 0xf7) = 1;
      }
      else {
        uint_result = 0;
        if (uint_result == SYSTEM_NODE_HEADER_SIZE00) {
          uint_result = 2;
        }
        *(uint8_t *)(handleIdentifier + 0xf7) = uint_result;
      }
      bool_var = bool_var | bool_var & 0x77;
      *(byte *)(handleIdentifier + 0xfd) = bool_var;
      long_ptr = (longlong *)(long_result + 0xb8);
      do {
        if (0xf < long_result) break;
        if ((*long_ptr != 0) && (*(int *)(*long_ptr + 0x36c) != 0)) {
          bool_var = bool_var | 8;
          *(byte *)(handleIdentifier + 0xfd) = bool_var;
        }
        long_result = long_result + 1;
        long_ptr = long_ptr + 1;
      } while ((bool_var & 8) == 0);
      InitializeSystemDataNode24(handleIdentifier);
    }
  }
  return;
}
// void SystemFunction_92_0(longlong handleIdentifier)

void SystemFunction_92_0(longlong handleIdentifier)

{
  int int_result;

  int_result = _Mtx_lock(0x180c91910);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  *(char *)(handleIdentifier + 0xfc) = *(char *)(handleIdentifier + 0xfc) + '\x01';
  int_result = _Mtx_unlock(0x180c91910);
  if (int_result != 0) {
    __Throw_C_error_std__YAXH_Z(int_result);
  }
  return;
}
// void InitializeSystemModule1(longlong handleIdentifier)

void InitializeSystemModule1(longlong handleIdentifier)

{
  char *pis_initialized;
  longlong *long_ptr;
  int compare_result;
  bool bool_var;

  compare_result = _Mtx_lock(0x180c91910);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  pis_initialized = (char *)(handleIdentifier + 0xfc);
  *pis_initialized = *pis_initialized + -1;
  if (*pis_initialized == '\0') {
    while( true ) {
      LOCK();
      bool_var = *(char *)(handleIdentifier + 0xec) == '\0';
      if (bool_var) {
        *(char *)(handleIdentifier + 0xec) = '\x01';
      }
      UNLOCK();
      if (bool_var) break;
      Sleep();
    }
    while (*(int *)(handleIdentifier + 0xe8) != 0) {
      Sleep(0);
    }
    if ((((*(longlong *)(handleIdentifier + 0x210) != 0) &&
         (InitializeAuthenticationSystem(handleIdentifier), *(char *)(handleIdentifier + 0xfc) == '\0')) &&
        (*(char *)(handleIdentifier + 0xf4) == '\0')) &&
       (((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0 || ((*(byte *)(handleIdentifier + 0xfe) & 1) == 0)))) {
      long_ptr = *(longlong **)(handleIdentifier + 0x210);
      *(uint64_t *)(handleIdentifier + 0x210) = 0;
      if (long_ptr != (longlong *)0x0) {
        (**(code **)(*long_ptr + 0x38))();
      }
    }
    LOCK();
    if (*(char *)(handleIdentifier + 0xec) == '\x01') {
      *(char *)(handleIdentifier + 0xec) = '\0';
    }
    UNLOCK();
  }
  compare_result = _Mtx_unlock(0x180c91910);
  if (compare_result != 0) {
    __Throw_C_error_std__YAXH_Z(compare_result);
  }
  return;
}

uint64_t InitializeResourceSystem(longlong handleIdentifier)

{
  byte bool_var;
  longlong long_result;
  byte bool_var;

  bool_var = *(byte *)(handleIdentifier + 0xfd);
  long_result = handleIdentifier;
  if ((bool_var & SYSTEM_NODE_HEADER_SIZE) == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  if (0 < *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0)) {
    long_result = *(longlong *)(handleIdentifier + 0x1b8);
    bool_var = *(byte *)(long_result + 0x38c);
    if (bool_var == 9) {
      bool_var = IsSystemInitialized();
      *(byte *)(long_result + 0x38c) = bool_var;
      bool_var = *(byte *)(handleIdentifier + 0xfd);
    }
    if ((bool_var & SYSTEM_NODE_HEADER_SIZE) == 0) {
      handleIdentifier = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
    }
    if ((*(longlong *)(handleIdentifier + 0x1e0) == 0) ||
       (*(byte *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x15 + (ulonglong)bool_var * 0x18) < 2)) {
      return 0;
    }
  }
  return 1;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int InitializeNetworkSystem(longlong handleIdentifier,longlong *resourceIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;
  ulonglong *ptr_uint_var;
  char char_var;
  int int_result;
  uint uint_result;
  longlong long_result;
  char *ptr_char_var;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  ulonglong *ptr_uint_var;
  uint uint_result;
  ulonglong uint_result;
  uint32_t extra_output_varXMM0_Da;
  uint32_t uint_result;
  uint64_t ustack_var;
  uint64_t *node_new;
  uint64_t *pflag_initialized;
  uint in_stack_ffffffffffffff38;
  uint64_t uint_result;
  ulonglong *system_buffer_ptr_80;
  longlong *stack_long_ptr;
  code *stack_char_ptr;
  code *stack_char_ptr;
  uint64_t uintStack_60;
  uint64_t uintStack_58;
  uint64_t uintStack_50;
  uint32_t uintStack_48;

  uint_result = INVALID_HANDLE_VALUE;
  int_result = 0;
  if (((*(longlong *)(handleIdentifier + 0x1b8) != 0) && (int_result = 0, (*(byte *)(resourceIdentifier + 1) & 4) == 0)) &&
     (*(char *)((longlong)resourceIdentifier + 0x12) == '\0')) {
    int_result = GetSystemStatus();
  }
  if ((*(byte *)(resourceIdentifier + 1) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    char_var = InitializeResourceSystem(handleIdentifier);
    if (char_var == '\0') {
      if ((char)resourceIdentifier[2] != '\0') {
        system_buffer_ptr_80 = (ulonglong *)0x0;
        stack_long_ptr = (longlong *)0x0;
        stack_char_ptr = (code *)0x0;
        stack_char_ptr = _guard_check_icall;
        InitializeSystemProfiler(extra_output_varXMM0_Da,handleIdentifier,&bufferPtr_80system_buffer_ptr_80);
        if (stack_char_ptr != (code *)0x0) {
          (*stack_char_ptr)(&bufferPtr_80system_buffer_ptr_80,0,0);
        }
      }
      char_var = InitializeResourceSystem(handleIdentifier);
      if (char_var == '\0') {
        int_result = int_result + 1;
        if (*resourceIdentifier != 0) {
          ustack_var = handleIdentifier;
          InitializeSystemModule44(*resourceIdentifier,&ustack_var);
        }
      }
    }
    else if ((char)resourceIdentifier[2] != '\0') {
      InitializeResourceSystem(handleIdentifier,0);
    }
  }
  if ((*(byte *)(resourceIdentifier + 1) & SYSTEM_DATA_COMPARE_SIZE) == 0) {
    return int_result;
  }
  uintStack_60 = 0;
  uintStack_58 = 0;
  uintStack_50 = 0;
  uintStack_48 = 3;
  node_new = *(uint64_t **)(handleIdentifier + 0x1b8);
  uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) >> 0x16;
  ptr_char_var = "";
  if ((char *)node_new[3] != (char *)0x0) {
    ptr_char_var = (char *)node_new[3];
  }
  uint_result = 0x1505;
  char_var = *ptr_char_var;
  while (char_var != '\0') {
    ptr_char_var = ptr_char_var + 1;
    uint_result = uint_result * 0x21 + (int)char_var;
    char_var = *ptr_char_var;
  }
  uint_result = (ulonglong)uint_result;
  if ((uint_result & 1) != 0) {
    uint_result = (ulonglong)uint_result | 0x400000000;
  }
  long_result = resourceIdentifier[9];
  if (long_result != 0) {
    long_ptr = (longlong *)(*(longlong *)(long_result + 8) + *(ulonglong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) * 8);
    ptr_uint_var = (ulonglong *)*long_ptr;
    long_ptr = (longlong *)
             (*(longlong *)(long_result + 8) + (uint_result % (*(ulonglong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) & 0xffffffff)) * 8)
    ;
    for (ptr_uint_var = (ulonglong *)*long_ptr;
        (system_buffer_ptr_80 = ptr_uint_var, stack_long_ptr = long_ptr, ptr_uint_var != (ulonglong *)0x0 &&
        (system_buffer_ptr_80 = ptr_uint_var, stack_long_ptr = long_ptr, uint_result != *ptr_uint_var));
        ptr_uint_var = (ulonglong *)ptr_uint_var[1]) {
    }
    if (system_buffer_ptr_80 != ptr_uint_var) goto LAB_180076feb;
  }
  long_ptr = resourceIdentifier + 5;
  long_result = resourceIdentifier[7] - *long_ptr;
  if ((ulonglong)(long_result / 0x18) < SYSTEM_DATA_COMPARE_SIZE0) {
    long_result = AllocateSystemResource(systemMemoryPool,0x1800,(char)resourceIdentifier[8]);
    long_result = *long_ptr;
    if (long_result != resourceIdentifier[6]) {
                    // WARNING: Subroutine does not return
      memmove(long_result,long_result,resourceIdentifier[6] - long_result);
    }
    if (long_result != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *long_ptr = long_result;
    resourceIdentifier[6] = long_result;
    resourceIdentifier[7] = long_result + 0x1800;
    long_result = 0;
  }
  pflag_initialized = &ustack_var;
  ustack_var = 0;
  uint_result = EngineFunctioncdb50(long_result,node_new,&uintStack_60,0,in_stack_ffffffffffffff38 & 0xffffff00,0,
                         (byte)uint_result & 1,long_ptr,1,0,0,&ustack_var,uint_result);
  node_new = &ustack_var;
  ustack_var = 0;
  char_var = EngineFunctionde280(uint_result,long_ptr,&ustack_var);
  if (char_var == '\0') {
    int_result = int_result + 1;
  }
  resourceIdentifier[6] = *long_ptr;
  long_result = resourceIdentifier[9];
  uint_result = uint_result % (ulonglong)*(uint *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  for (ptr_uint_var = *(ulonglong **)(*(longlong *)(long_result + 8) + uint_result * 8); ptr_uint_var != (ulonglong *)0x0
      ; ptr_uint_var = (ulonglong *)ptr_uint_var[1]) {
    if (uint_result == *ptr_uint_var) goto LAB_180076feb;
  }
  long_ptr = *(longlong **)(long_result + 0x30);
  uint_result = (longlong)(int)long_ptr[2] + 0xfU & 0xfffffffffffffff0;
  *(int *)(long_ptr + 2) = (int)uint_result + SYSTEM_DATA_COMPARE_SIZE;
  ptr_uint_var = (ulonglong *)(*long_ptr + uint_result);
  *ptr_uint_var = uint_result;
  ptr_uint_var[1] = 0;
  SystemHandleCreateFunction(long_result + SYSTEM_NODE_HEADER_SIZE,&ustack_var,*(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE),*(uint32_t *)(long_result + 0x18),
                1);
  if ((char)ustack_var != '\0') {
    uint_result = uint_result % (ulonglong)ustack_var._4_4_;
    ConfigureGraphicsShader(long_result,ustack_var._4_4_);
  }
  ptr_uint_var[1] = *(ulonglong *)(*(longlong *)(long_result + 8) + uint_result * 8);
  *(ulonglong **)(*(longlong *)(long_result + 8) + uint_result * 8) = ptr_uint_var;
  *(longlong *)(long_result + 0x18) = *(longlong *)(long_result + 0x18) + 1;
LAB_180076feb:
  InitializeSystemModule19(&uintStack_60);
  return int_result;
}
// void InitializeSystemProfiler(longlong *handleIdentifier)

void InitializeSystemProfiler(longlong *handleIdentifier)

{
  uint64_t *ptr_uint_var;
  uint64_t *node_root;

  ptr_uint_var = (uint64_t *)handleIdentifier[1];
  for (node_root = (uint64_t *)*handleIdentifier; node_root != ptr_uint_var; node_root = node_root + 6) {
    *node_root = &resourcePoolPointer;
    if (node_root[1] != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    node_root[1] = 0;
    *(uint32_t *)(node_root + 3) = 0;
    *node_root = &globalSystemPointerData;
  }
  if (*handleIdentifier != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeSystemDataNode22(longlong handleIdentifier)

{
  int *ptr_int_var;
  byte bool_var;
  longlong long_result;
  ulonglong uint_result;
  longlong allocation_size;
  longlong long_result;

  if (*(longlong *)(handleIdentifier + 0x1b8) != 0) {
    long_result = 0xb8;
    allocation_size = g_system_base_1;
    do {
      long_result = *(longlong *)(long_result + *(longlong *)(handleIdentifier + 0x1b8));
      if ((((long_result != 0) && (*(longlong *)(*(longlong *)(handleIdentifier + 0x1b8) + 0x328 + long_result) == 0)) &&
          ((*(uint *)(long_result + 0x328) & SYSTEM_NODE_HEADER_SIZE000000) == 0)) && (*(longlong *)(long_result + 0x370) == 0)) {
        if (*(longlong *)(long_result + 0x1d8) == 0) {
          CleanupSystemResources(long_result,0);
          allocation_size = g_system_base_1;
          ptr_int_var = (int *)(*(longlong *)(long_result + *(longlong *)(handleIdentifier + 0x1b8)) + 0x3a8);
          *ptr_int_var = *ptr_int_var + 1;
        }
        else if (allocation_size != 0) {
          *(longlong *)(long_result + 0x340) = (longlong)*(int *)(allocation_size + 0x224);
        }
      }
      long_result = long_result + 8;
    } while (long_result < 0x138);
  }
  bool_var = *(byte *)(handleIdentifier + 0xf9);
  if (bool_var != 0) {
    if (*(longlong *)(handleIdentifier + 0x1d8) != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *(uint64_t *)(handleIdentifier + 0x1d8) = 0;
    LOCK();
    bool_var = *(byte *)(handleIdentifier + 0xf9);
    *(byte *)(handleIdentifier + 0xf9) = 0;
    UNLOCK();
  }
  uint_result = (ulonglong)bool_var;
  if (*(longlong *)(handleIdentifier + 0x1e8) != 0) {
    InitializeSystemComponents();
    uint_result = *(ulonglong *)(handleIdentifier + 0x1f0);
    *(uint64_t *)(handleIdentifier + 0x1e8) = 0;
    if (uint_result != 0) {
      *(byte *)(uint_result + 0xfe) = *(byte *)(uint_result + 0xfe) & 0xfb;
    }
  }
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeNetworkSystem(longlong *handleIdentifier)
void InitializeNetworkSystem(longlong *handleIdentifier)

{
  uint64_t uint_result;
  ulonglong *node_root;
  ulonglong uint_result;
  longlong *ptr_data;
  longlong allocation_size;
  byte bool_var;
  uint8_t system_local_buffer_88 [32];
  ulonglong *system_buffer_ptr_68;
  uint64_t uintStack_60;
  void *system_buffer_ptr_58;
  ulonglong *system_buffer_ptr_50;
  ulonglong uintStack_48;
  ulonglong localBuffer_40 [2];
  uint64_t uintStack_30;
  char cStack_28;
  char cStack_27;
  char cStack_26;
  ulonglong uintStack_20;

  uintStack_60 = INVALID_HANDLE_VALUE;
  uintStack_20 = systemConfigurationData ^ (ulonglong)system_local_buffer_88;
  uint_result = *(uint64_t *)(handleIdentifier[0x37] + 0x1e0);
  system_buffer_ptr_58 = &g_system_data_main;
  system_buffer_ptr_50 = localBuffer_40;
  localBuffer_40[0] = localBuffer_40[0] & 0xffffffffffffff00;
  uintStack_48._0_4_ = 0x12;
  strcpy_s(localBuffer_40,SYSTEM_NODE_HEADER_SIZE,&g_system_global_variable8);
  uint_result = InitializeSystemBufferEx(uint_result,&bufferPtr_58system_buffer_ptr_58,0);
  system_buffer_ptr_58 = &globalSystemPointerData;
  if (uint_result != 0) {
    allocation_size = handleIdentifier[0x37];
    if ((*(ulonglong *)(allocation_size + 0x140) & uint_result) != 0) {
      bool_var = *(byte *)((longlong)handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE;
      ptr_data = handleIdentifier;
      if (bool_var == 0) {
        ptr_data = (longlong *)GetSystemDataPointer(handleIdentifier[0x36]);
      }
      if (((*(uint *)(ptr_data + SYSTEM_NODE_HEADER_SIZE) & 0x8000000) == 0) && (bool_var != 0)) {
        system_buffer_ptr_68 = (ulonglong *)handleIdentifier;
        (**(code **)(*handleIdentifier + 0x28))(handleIdentifier);
        system_buffer_ptr_58 = (void *)0x0;
        system_buffer_ptr_50 = (ulonglong *)0x0;
        system_buffer_ptr_68 = &uintStack_48;
        uintStack_30 = 0;
        localBuffer_40[0] = 0;
        uintStack_48._0_4_ = (uint)uintStack_48 & 0xffffff00;
        CreateSystemStack(&bufferPtr_58system_buffer_ptr_58,handleIdentifier,0);
        (**(code **)(*handleIdentifier + 0x38))(handleIdentifier);
        InitializeStackData(&bufferPtr_58system_buffer_ptr_58);
        ValidateSystemStack(&bufferPtr_58system_buffer_ptr_58);
        DestroySystemStack(&bufferPtr_58system_buffer_ptr_58);
        allocation_size = handleIdentifier[0x37];
      }
      if ((*(ulonglong *)(allocation_size + 0x140) & uint_result) != 0) goto LAB_18007738d;
    }
    ptr_data = handleIdentifier;
    if ((*(byte *)((longlong)handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
      ptr_data = (longlong *)GetSystemDataPointer(handleIdentifier[0x36]);
    }
    if ((*(uint *)(ptr_data + SYSTEM_NODE_HEADER_SIZE) & 0x8000000) != 0) {
      system_buffer_ptr_68 = (ulonglong *)handleIdentifier;
      (**(code **)(*handleIdentifier + 0x28))(handleIdentifier);
      system_buffer_ptr_58 = (void *)0x0;
      system_buffer_ptr_50 = (ulonglong *)0x0;
      system_buffer_ptr_68 = &uintStack_48;
      uintStack_30 = 0;
      localBuffer_40[0] = 0;
      uintStack_48._0_4_ = (uint)uintStack_48 & 0xffffff00;
      CreateSystemStack(&bufferPtr_58system_buffer_ptr_58,handleIdentifier,0);
      (**(code **)(*handleIdentifier + 0x38))(handleIdentifier);
      ProcessStackData(&bufferPtr_58system_buffer_ptr_58);
      if (system_buffer_ptr_50 != (ulonglong *)0x0) {
        if (cStack_26 != '\0') {
          SystemFunction_16_0(system_buffer_ptr_58);
        }
        InitializeNetworkManagerSystem(&uintStack_48);
        if (cStack_28 != '\0') {
          InitializeAuthenticationSystem(system_buffer_ptr_58);
        }
        if (cStack_27 != '\0') {
          InitializeAuthenticationSystem(system_buffer_ptr_58);
        }
        node_root = bufferPtr_50;
        system_buffer_ptr_68 = bufferPtr_50;
        system_buffer_ptr_50 = (ulonglong *)0x0;
        if (node_root != (ulonglong *)0x0) {
          (**(code **)(*node_root + 0x38))();
        }
      }
      DestroySystemStack(&bufferPtr_58system_buffer_ptr_58);
    }
  }
LAB_18007738d:
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_20 ^ (ulonglong)system_local_buffer_88);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint64_t InitializeNetworkSystem(longlong handleIdentifier,longlong resourceIdentifier)

{
  uint *ptr_uint_var;
  longlong *long_ptr;
  uint uint_result;
  code *ptr_char_var;
  bool bool_var;
  byte bool_var;
  char char_var;
  int int_result;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  code *pis_initialized5;
  bool thread_operation_flag;
  uint64_t uintStack_78;
  uint32_t uintStack_70;
  uint32_t uintStack_6c;
  uint16_t uintStack_68;
  uint8_t uintStack_66;
  uint32_t uintStack_64;
  uint8_t uintStack_60;
  uint64_t uintStack_58;
  longlong longStack_50;
  uint64_t uintStack_48;
  uint64_t uintStack_40;
  uint32_t uintStack_38;
  uint64_t uintStack_30;

  long_result = handleIdentifier;
  if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  long_result = *(longlong *)(handleIdentifier + 0x1b8);
  bool_var = *(byte *)(long_result + 0x38c);
  if (bool_var == 9) {
    bool_var = IsSystemInitialized();
    *(byte *)(long_result + 0x38c) = bool_var;
  }
  if ((*(longlong *)(long_result + 0x1e0) == 0) ||
     (((long_result = (ulonglong)bool_var * 0x18,
       *(char *)(*(longlong *)(long_result + 0x1e0) + 0x15 + long_result) != '\x03' &&
       (*(char *)(*(longlong *)(long_result + 0x1e0) + 0x15 + long_result) != '\x04')) &&
      (*(char *)(*(longlong *)(long_result + 0x1e0) + long_result + 0x15) != '\x02')))) {
    *(int *)(resourceIdentifier + 0x124e8) = *(int *)(resourceIdentifier + 0x124e8) + 1;
  }
  else if (*(char *)(*(longlong *)(long_result + 0x1e0) + long_result + 0x15) != '\x04') {
    uintStack_78 = 0;
    uintStack_70 = 0;
    uintStack_6c = 0xffffffff;
    uintStack_68 = 1;
    uintStack_66 = 0;
    uintStack_64 = 0xffffffff;
    uintStack_60 = 1;
    uintStack_58 = 0;
    longStack_50 = 0;
    uintStack_48 = 0;
    uintStack_40 = 0;
    uintStack_38 = 3;
    uintStack_30 = 0;
    int_result = GetSystemStatus(*(uint64_t *)(handleIdentifier + 0x1b8),&uintStack_78);
    if (int_result < 1) {
      if (longStack_50 != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      bool_var = false;
      if ((*(byte *)(handleIdentifier + 0xfd) & 8) != 0) {
        long_result = 0xb8;
        pis_initialized5 = (code *)&g_system_call_7;
        do {
          long_result = *(longlong *)(long_result + *(longlong *)(handleIdentifier + 0x1b8));
          if (((long_result != 0) && (long_result = *(longlong *)(long_result + 0x370), long_result != 0)) &&
             ((char_var = CheckSystemReady(), char_var != '\0' &&
              ((*(char *)(long_result + 0xde) != '\0' &&
               (bool_var = true, (*(byte *)(resourceIdentifier + 0x1bd8) & SYSTEM_NODE_HEADER_SIZE) != 0)))))) {
            ptr_char_var = *(code **)(**(longlong **)(resourceIdentifier + 0x3580) + 0xb8);
            if (ptr_char_var == pis_initialized5) {
              long_result = (*(longlong **)(resourceIdentifier + 0x3580))[0xda];
            }
            else {
              long_result = (*ptr_char_var)();
            }
            ptr_uint_var = (uint *)(long_result + 0x3f68);
            LOCK();
            uint_result = *ptr_uint_var;
            *ptr_uint_var = *ptr_uint_var + 1;
            UNLOCK();
            uint_result = uint_result >> 10;
            uint_result = (ulonglong)uint_result;
            if (*(longlong *)(long_result + 0x3f70 + (ulonglong)uint_result * 8) == 0) {
              long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
              long_ptr = (longlong *)(long_result + 0x3f70 + uint_result * 8);
              LOCK();
              thread_operation_flag = *long_ptr == 0;
              if (thread_operation_flag) {
                *long_ptr = long_result;
              }
              UNLOCK();
              if (thread_operation_flag) {
                LOCK();
                *(uint8_t *)(uint_result + 0x48 + (longlong)ptr_uint_var) = 0;
                UNLOCK();
              }
              else {
                if (long_result != 0) {
                    // WARNING: Subroutine does not return
                  ProcessSystemOperation();
                }
                do {
                } while (*(char *)(uint_result + 0x48 + (longlong)ptr_uint_var) != '\0');
              }
            }
            else {
              do {
              } while (*(char *)(uint_result + 0x48 + (longlong)ptr_uint_var) != '\0');
            }
            *(longlong *)
             (*(longlong *)(long_result + 0x3f70 + uint_result * 8) + (ulonglong)(uint_result + uint_result * -0x400) * 8)
                 = long_result;
            pis_initialized5 = (code *)&g_system_call_7;
          }
          long_result = long_result + 8;
        } while (long_result < 0x138);
        if (bool_var) {
          return 0;
        }
      }
      *(byte *)(handleIdentifier + 0xfe) = *(byte *)(handleIdentifier + 0xfe) | 4;
      return 1;
    }
    if (longStack_50 != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  return 0;
}
// void InitializeSystemModule40(longlong handleIdentifier)

void InitializeSystemModule40(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint64_t *node_root;
  longlong long_result;
  ulonglong uint_result;

  node_root = *(uint64_t **)(handleIdentifier + 0x28);
  if (node_root == (uint64_t *)0x0) {
    return;
  }
  uint_result = (ulonglong)node_root & 0xffffffffffc00000;
  if (uint_result != 0) {
    long_result = uint_result + 0x80 + ((longlong)node_root - uint_result >> SYSTEM_DATA_COMPARE_SIZE) * 0x50;
    long_result = long_result - (ulonglong)*(uint *)(long_result + 4);
    if ((*(void ***)(uint_result + 0x70) == &ExceptionList) && (*(char *)(long_result + 0xe) == '\0')) {
      *node_root = *(uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE);
      *(uint64_t **)(long_result + SYSTEM_NODE_HEADER_SIZE) = node_root;
      ptr_int_var = (int *)(long_result + 0x18);
      *ptr_int_var = *ptr_int_var + -1;
      if (*ptr_int_var == 0) {
        InitializeSystemComponents();
        return;
      }
    }
    else {
      HandleSystemException(uint_result,CONCAT71(0xff000000,*(void ***)(uint_result + 0x70) == &ExceptionList),
                          node_root,uint_result,INVALID_HANDLE_VALUE);
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeSystemModule6(longlong handleIdentifier,uint *resourceIdentifier,float *systemConfig,longlong systemFlags,
                       longlong parameter_5)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  char char_var;
  byte system_byte_flag;
  uint32_t uint_result;
  uint64_t uint_result;
  ulonglong uint_result;
  uint64_t *node_root6;
  longlong long_result;
  longlong long_result;
  uint32_t *node_root9;
  uint *ptr_uint_var;
  byte system_initialization_flag;
  char *ptr_char_var;
  int compare_result3;
  ulonglong uint_result;
  uint *ptr_uint_var;
  bool memory_comparison_flag;
  uint32_t localBuffer_X8 [2];
  uint *node_new;
  float *pfstack_var;
  longlong lstack_var;
  uint32_t system_local_buffer_138 [2];
  ulonglong uintStack_130;
  uint64_t *asystem_buffer_ptr_128 [2];
  longlong longStack_118;
  uint64_t uintStack_108;
  uint64_t uintStack_100;
  uint64_t uintStack_f8;
  uint64_t uintStack_f0;
  uint64_t uintStack_e8;
  uint64_t uintStack_e0;
  uint64_t uintStack_d8;
  uint64_t uintStack_d0;
  float init_float_stack_c8;
  float init_float_stack_c4;
  float init_float_stack_c0;
  float init_float_stack_bc;
  float init_float_stack_b8;
  float init_float_stack_b4;
  float init_float_stack_b0;
  float init_float_stack_ac;
  float init_float_stack_a8;
  float init_float_stack_a4;
  float init_float_stack_a0;
  float init_float_stack_9c;
  float init_float_stack_98;
  float init_float_stack_94;
  float init_float_stack_90;
  float init_float_stack_8c;

  node_new = resourceIdentifier;
  pfstack_var = systemConfig;
  lstack_var = systemFlags;
  if (*(char *)(handleIdentifier + 0xf9) == '\0') {
    uint_result = AllocateSystemMemory(systemMemoryPool,0xc0,8,9);
    uint_result = InitializeSystemModule47(uint_result);
    *(uint64_t *)(handleIdentifier + 0x1d8) = uint_result;
    LOCK();
    *(uint8_t *)(handleIdentifier + 0xf9) = 1;
    UNLOCK();
  }
  if ((char)*(byte *)(handleIdentifier + 0xfd) < '\0') {
    long_result = *(longlong *)(handleIdentifier + 0x1b8);
    uint_result = *(uint64_t *)(long_result + 0x290);
    *(uint64_t *)(handleIdentifier + 0x2a8) = *(uint64_t *)(long_result + 0x288);
    *(uint64_t *)(handleIdentifier + 0x2b0) = uint_result;
    uint_result = *(uint32_t *)(long_result + 0x29c);
    uint_result = *(uint32_t *)(long_result + 0x2a0);
    uint_result = *(uint32_t *)(long_result + 0x2a4);
    *(uint32_t *)(handleIdentifier + 0x2b8) = *(uint32_t *)(long_result + 0x298);
    *(uint32_t *)(handleIdentifier + 700) = uint_result;
    *(uint32_t *)(handleIdentifier + 0x2c0) = uint_result;
    *(uint32_t *)(handleIdentifier + 0x2c4) = uint_result;
  }
  uint_result = (ulonglong)*(uint *)(handleIdentifier + 0x270);
  if ((*resourceIdentifier & *(uint *)(handleIdentifier + 0x270)) == 0) goto SystemFunction_25_7;
  system_initialization_flag = *(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE;
  long_result = handleIdentifier;
  if (system_initialization_flag == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  if (*(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0) == 0) {
LAB_180077847:
    if ((*(byte *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & 4) != 0) goto LAB_180077879;
    long_result = *(longlong *)(handleIdentifier + 0x1b8);
    uint_result = 0;
    if (*(char *)(long_result + 0x38c) == '\t') {
      uint_result = IsSystemInitialized();
      *(char *)(long_result + 0x38c) = (char)uint_result;
      if ((char)uint_result == '\t') goto LAB_180077879;
    }
SystemFunction_25_7:
    uint_result = uint_result & 0xffffffffffffff00;
  }
  else {
    long_result = handleIdentifier;
    if (system_initialization_flag == 0) {
      long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
    }
    if (*(int *)(long_result + 0x1fc) * 3 == 0) goto LAB_180077847;
LAB_180077879:
    handle_info_result = GetSystemHandleInfo(handleIdentifier);
    if ((char_var == '\0') || (systemFlags == 0)) {
      InitializeResourceSystem(handleIdentifier,0);
      if ((*(byte *)(handleIdentifier + 0xfe) & 4) == 0) {
        uint_result = InitializeNetworkSystem(handleIdentifier,resourceIdentifier);
        system_initialization_flag = (char)uint_result << 2;
        system_byte_flag = system_initialization_flag | *(byte *)(handleIdentifier + 0xfe) & 0xfb;
        uint_result = CONCAT71((int7)((ulonglong)uint_result >> 8),system_configuration_flag);
        *(byte *)(handleIdentifier + 0xfe) = system_configuration_flag;
        if ((system_initialization_flag & 4) == 0) goto SystemFunction_25_7;
      }
      uint_result = *(uint *)(*(longlong *)(handleIdentifier + 0x1b8) + 0x388);
      if (((uint_result >> NODE_INITIALIZED_OFFSET & 1) != 0) ||
         ((*(longlong *)(handleIdentifier + 600) != 0 && (0 < *(int *)(*(longlong *)(handleIdentifier + 600) + 0x1c)))
         )) {
        compare_result3 = *(int *)(g_system_base_1 + 0x224);
        node_root6 = *(uint64_t **)(handleIdentifier + 600);
        if (node_root6 == (uint64_t *)0x0) {
          node_root6 = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x58,8,3);
          *(uint64_t *)((longlong)node_root6 + 0x2c) = 0xffffffffffffffff;
          *(uint32_t *)(node_root6 + 9) = 0xffffffff;
          *node_root6 = 0;
          node_root6[2] = 0;
          node_root6[7] = 0;
          *(uint32_t *)(node_root6 + 5) = 0xffffffff;
          *(uint32_t *)(node_root6 + 4) = 0xffffffff;
          node_root6[3] = 0;
          *(uint32_t *)(node_root6 + 8) = 0;
          *(uint32_t *)(node_root6 + 1) = 0;
          *(uint8_t *)((longlong)node_root6 + 0x44) = 0;
          *(uint8_t *)((longlong)node_root6 + 0x24) = 0;
          *(uint64_t **)(handleIdentifier + 600) = node_root6;
        }
        systemConfig = pfstack_var;
        if (*(int *)(node_root6 + 4) != compare_result3) {
          *(int *)(node_root6 + 4) = compare_result3;
          InitializeAudioMutex(handleIdentifier,parameter_5);
          systemConfig = pfstack_var;
          if (((byte)(uint_result >> NODE_INITIALIZED_OFFSET) & 1) != 0) {
            if ((*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & 0x800) != 0) {
              InitializeSystemDataNode29(handleIdentifier);
            }
            longStack_118 = systemCoreData + 0x5868;
            ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0x6a78) * 0x908 + longStack_118);
            LOCK();
            uint_result = *ptr_uint_var;
            *ptr_uint_var = *ptr_uint_var + 1;
            UNLOCK();
            uint_result = (ulonglong)(uint_result >> 9);
            uint_result = (ulonglong)(uint_result >> 9);
            ptr_char_var = (char *)((longlong)ptr_uint_var + uint_result + 0x808);
            ptr_uint_var = ptr_uint_var + (uint_result + 1) * 2;
            uintStack_130 = uint_result;
            do {
              compare_result3 = (int)uint_result;
              if (*(longlong *)ptr_uint_var == 0) {
                long_result = AllocateSystemResource(systemMemoryPool,0xc000,0x25);
                LOCK();
                system_resource_flag = *(longlong *)(ptr_uint_var + (longlong)compare_result3 * 2 + 2) == 0;
                if (system_resource_flag) {
                  *(longlong *)(ptr_uint_var + (longlong)compare_result3 * 2 + 2) = long_result;
                }
                UNLOCK();
                if (system_resource_flag) {
                  InitializeSystemModule42(ptr_uint_var,compare_result3 << 9);
                  LOCK();
                  *(uint8_t *)((longlong)ptr_uint_var + (longlong)compare_result3 + 0x808) = 0;
                  UNLOCK();
                  uint_result = uintStack_130;
                }
                else {
                  if (long_result != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  do {
                    uint_result = uintStack_130;
                  } while (*ptr_char_var != '\0');
                }
              }
              else {
                do {
                } while (*ptr_char_var != '\0');
              }
              ptr_char_var = ptr_char_var + 1;
              uint_result = (ulonglong)(compare_result3 + 1);
              ptr_uint_var = ptr_uint_var + 2;
            } while ((longlong)(ptr_char_var + (-0x808 - (longlong)ptr_uint_var)) <= (longlong)uint_result);
            node_root6 = (uint64_t *)
                      (*(longlong *)
                        ((longlong)*(int *)(longStack_118 + 0x1210) * 0x908 + longStack_118 + 8 +
                        uint_result * 8) + (ulonglong)(uint_result - (uint_result & 0xfffffe00)) * 0x60);
            long_result = handleIdentifier;
            abufferPtr_128[0] = node_root6;
            if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
              long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
            }
            long_result = *(longlong *)(handleIdentifier + 0x1b8);
            system_initialization_flag = *(byte *)(long_result + 0x38c);
            if (system_initialization_flag == 9) {
              system_initialization_flag = IsSystemInitialized();
              *(byte *)(long_result + 0x38c) = system_initialization_flag;
            }
            resourceIdentifier = node_new;
            long_result = *(longlong *)(long_result + 0x1e0);
            *node_root6 = *(uint64_t *)(long_result + (ulonglong)system_initialization_flag * 0x18);
            node_root6[1] = *(uint64_t *)(long_result + 8 + (ulonglong)system_initialization_flag * 0x18);
            *(uint32_t *)(abufferPtr_128[0] + 2) =
                 *(uint32_t *)(*(longlong *)(handleIdentifier + 600) + 0x2c);
            *(uint32_t *)((longlong)abufferPtr_128[0] + 0x14) =
                 *(uint32_t *)(*(longlong *)(handleIdentifier + 600) + 0x4c);
            *(int *)(abufferPtr_128[0] + 9) = (int)*(char *)(*(longlong *)(handleIdentifier + 600) + 0x44);
            if ((*(longlong *)(handleIdentifier + 0x2d0) == 0) ||
               (*(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x14) == 0)) {
              uint_result = 0xffffffff;
            }
            else {
              uint_result = *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE8);
            }
            *(uint32_t *)(abufferPtr_128[0] + 3) = uint_result;
            if ((*(longlong *)(handleIdentifier + 0x2d0) == 0) ||
               (*(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x14) == 0)) {
              uint_result = 0xffffffff;
            }
            else {
              uint_result = *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZEc);
            }
            *(uint32_t *)((longlong)abufferPtr_128[0] + 0x1c) = uint_result;
            if ((*(longlong *)(handleIdentifier + 0x2d0) == 0) ||
               (*(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x14) == 0)) {
              uint_result = 0xffffffff;
            }
            else {
              uint_result = *(uint32_t *)(handleIdentifier + 0x110);
            }
            *(uint32_t *)(abufferPtr_128[0] + 4) = uint_result;
            *(byte *)((longlong)abufferPtr_128[0] + 0x4e) = *(byte *)(handleIdentifier + 0xfe) >> 3 & 1;
            if (*(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE8) != -1) {
              node_root9 = *(uint32_t **)(handleIdentifier + 0x2d0);
              uint_result = node_root9[1];
              uint_result = node_root9[2];
              uint_result = node_root9[3];
              *(uint32_t *)(abufferPtr_128[0] + 5) = *node_root9;
              *(uint32_t *)((longlong)abufferPtr_128[0] + 0x2c) = uint_result;
              *(uint32_t *)(abufferPtr_128[0] + 6) = uint_result;
              *(uint32_t *)((longlong)abufferPtr_128[0] + 0x34) = uint_result;
              uint_result = *(uint64_t *)(node_root9 + 6);
              abufferPtr_128[0][7] = *(uint64_t *)(node_root9 + 4);
              abufferPtr_128[0][8] = uint_result;
            }
            *(uint8_t *)((longlong)abufferPtr_128[0] + 0x4f) =
                 *(uint8_t *)(*(longlong *)(handleIdentifier + 600) + 0x24);
            long_result = *(longlong *)(handleIdentifier + 600);
            if (*(char *)(long_result + 0x24) != '\0') {
              uint_result = *(uint32_t *)(handleIdentifier + 0x2ac);
              uint_result = *(uint32_t *)(handleIdentifier + 0x2b0);
              uint_result = *(uint32_t *)(handleIdentifier + 0x2b4);
              *(uint32_t *)(abufferPtr_128[0] + 10) = *(uint32_t *)(handleIdentifier + 0x2a8);
              *(uint32_t *)((longlong)abufferPtr_128[0] + 0x54) = uint_result;
              *(uint32_t *)(abufferPtr_128[0] + 0xb) = uint_result;
              *(uint32_t *)((longlong)abufferPtr_128[0] + 0x5c) = uint_result;
              long_result = *(longlong *)(handleIdentifier + 600);
            }
            *(bool *)((longlong)abufferPtr_128[0] + 0x4c) = *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0;
            *(uint8_t *)((longlong)abufferPtr_128[0] + 0x4d) = 1;
            if ((*(char *)(parameter_5 + 0xc) != '\0') ||
               (0 < *(int *)(*(longlong *)(handleIdentifier + 600) + 0x1c))) {
              *(uint8_t *)((longlong)abufferPtr_128[0] + 0x4d) = 0;
            }
            if (*(uint **)(node_new + 10) == (uint *)0x0) {
              system_local_buffer_138[0] = 0xffffffff;
              node_root9 = system_local_buffer_138;
              ptr_uint_var = node_new;
            }
            else {
              localBuffer_X8[0] = 0xffffffff;
              node_root9 = localBuffer_X8;
              ptr_uint_var = *(uint **)(node_new + 10);
            }
            InitializeSystemModule1(ptr_uint_var + 0xce2,node_root9,asystem_buffer_ptr_128);
            systemConfig = pfstack_var;
            systemFlags = lstack_var;
          }
        }
      }
    }
    if ((*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & 0x4000000) != 0) {
      float_result = *systemConfig;
      float_result = systemConfig[1];
      float_result = systemConfig[2];
      float_result = systemConfig[3];
      float_result = systemConfig[4];
      float_result = systemConfig[5];
      float_result = systemConfig[6];
      float_result = systemConfig[7];
      float_result = systemConfig[8];
      float_result = systemConfig[9];
      float_result = systemConfig[10];
      float_result = systemConfig[0xb];
      float_result = *(float *)(handleIdentifier + 0x124);
      float_result = *(float *)(handleIdentifier + 0x120);
      float_result = *(float *)(handleIdentifier + 0x128);
      float_result = *(float *)(handleIdentifier + 0x134);
      float_result = *(float *)(handleIdentifier + 0x130);
      init_float_stack_c8 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_c4 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_c0 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_bc = float_result * float_result + float_result * float_result + float_result * float_result;
      float_result = *(float *)(handleIdentifier + 0x138);
      float_result = *(float *)(handleIdentifier + 0x140);
      float_result = *(float *)(handleIdentifier + 0x144);
      init_float_stack_b8 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_b4 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_b0 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_ac = float_result * float_result + float_result * float_result + float_result * float_result;
      float_result = *(float *)(handleIdentifier + 0x148);
      float_result = *(float *)(handleIdentifier + 0x154);
      float_result = *(float *)(handleIdentifier + 0x150);
      init_float_stack_a8 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_a4 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_a0 = float_result * float_result + float_result * float_result + float_result * float_result;
      init_float_stack_9c = float_result * float_result + float_result * float_result + float_result * float_result;
      float_result = *(float *)(handleIdentifier + 0x158);
      init_float_stack_98 = float_result * float_result + float_result * float_result + float_result * float_result + systemConfig[0xc];
      init_float_stack_94 = float_result * float_result + float_result * float_result + float_result * float_result + systemConfig[0xd];
      init_float_stack_90 = float_result * float_result + float_result * float_result + float_result * float_result + systemConfig[0xe];
      init_float_stack_8c = float_result * float_result + float_result * float_result + float_result * float_result + systemConfig[0xf];
      systemConfig = &init_float_stack_c8;
    }
    InitializeSystemDataNode15(&uintStack_108,resourceIdentifier + 0xc,*(uint8_t *)(handleIdentifier + 0xf7),systemConfig);
    uint_result = resourceIdentifier[0x6f6];
    compare_result3 = *(int *)(g_system_base_1 + 0x224);
    if (((*(byte *)(handleIdentifier + 0xfd) & 1) == 0) &&
       ((*(int *)(handleIdentifier + 0x1d0) == compare_result3 || (*(int *)(handleIdentifier + 0x1d0) == compare_result3 + -1)))) {
      system_initialization_flag = 0;
    }
    else {
      system_initialization_flag = 1;
    }
    *(byte *)(handleIdentifier + 0xfd) = *(byte *)(handleIdentifier + 0xfd) & 0xfe | system_initialization_flag;
    system_byte_flag = (byte)uint_result & SYSTEM_NODE_HEADER_SIZE;
    if ((system_configuration_flag != 0) && (system_initialization_flag != 0)) {
      *(uint64_t *)(handleIdentifier + 0x160) = uintStack_108;
      *(uint64_t *)(handleIdentifier + 0x168) = uintStack_100;
      *(uint64_t *)(handleIdentifier + 0x170) = uintStack_f8;
      *(uint64_t *)(handleIdentifier + 0x178) = uintStack_f0;
      *(uint64_t *)(handleIdentifier + 0x180) = uintStack_e8;
      *(uint64_t *)(handleIdentifier + 0x188) = uintStack_e0;
      *(uint64_t *)(handleIdentifier + 400) = uintStack_d8;
      *(uint64_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET8) = uintStack_d0;
    }
    uint_result = InitializeSystemModule(resourceIdentifier,handleIdentifier,&uintStack_108,systemFlags,parameter_5);
    *(byte *)(handleIdentifier + 0xfd) = *(byte *)(handleIdentifier + 0xfd) & 0xfe;
    *(int *)(handleIdentifier + 0x1d0) = compare_result3;
    if (system_configuration_flag != 0) {
      *(uint64_t *)(handleIdentifier + 0x160) = uintStack_108;
      *(uint64_t *)(handleIdentifier + 0x168) = uintStack_100;
      *(uint64_t *)(handleIdentifier + 0x170) = uintStack_f8;
      *(uint64_t *)(handleIdentifier + 0x178) = uintStack_f0;
      *(uint64_t *)(handleIdentifier + 0x180) = uintStack_e8;
      *(uint64_t *)(handleIdentifier + 0x188) = uintStack_e0;
      *(uint64_t *)(handleIdentifier + 400) = uintStack_d8;
      *(uint64_t *)(handleIdentifier + NODE_INITIALIZED_OFFSET8) = uintStack_d0;
    }
  }
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_88_4(void)
void SystemFunction_88_4(void)

{
  uint uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint32_t uint_result;
  uint32_t uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  byte node_byte_flag;
  byte init_byte_flag;
  uint32_t uint_result;
  ulonglong uint_result;
  longlong long_result;
  longlong long_result;
  uint32_t *ptr_uint_var;
  longlong system_RBX;
  uint *ptr_uint_var;
  char *ptr_char_var;
  uint64_t *ptr_uint_var;
  float *ptr_float_var;
  int system_R12D;
  int int_result;
  ulonglong uint_result;
  uint *ptr_uint_var;
  bool in_ZF;
  bool long_comparison_flag;
  uint32_t in_stack_00000030;
  ulonglong in_stack_00000038;
  uint64_t *in_stack_00000040;
  longlong init_input_stack_50;
  uint64_t init_input_stack_60;
  uint64_t init_input_stack_68;
  uint64_t init_input_stack_70;
  uint64_t init_input_stack_78;
  uint64_t init_input_stack_80;
  uint64_t init_input_stack_88;
  uint64_t init_input_stack_90;
  uint64_t init_input_stack_98;
  float init_float_stack_a0;
  float init_float_stack_a4;
  float init_float_stack_a8;
  float init_float_stack_ac;
  float init_float_stack_b0;
  float init_float_stack_b4;
  float init_float_stack_b8;
  float init_float_stack_bc;
  float init_float_stack_c0;
  float init_float_stack_c4;
  float init_float_stack_c8;
  float init_float_stack_cc;
  float init_float_stack_d0;
  float init_float_stack_d4;
  float init_float_stack_d8;
  float init_float_stack_dc;
  uint32_t init_input_stack_e0;
  uint32_t init_input_stack_e8;
  uint32_t init_input_stack_f0;
  uint32_t init_input_stack_f8;
  uint32_t init_input_stack_100;
  uint32_t init_input_stack_108;
  uint32_t init_input_stack_110;
  uint32_t init_input_stack_118;
  uint32_t init_input_stack_170;
  longlong init_input_stack_178;
  float *init_input_stack_180;
  uint64_t init_input_stack_188;
  longlong init_input_stack_190;

  if (!in_ZF) {
    InitializeSystemDataNode29();
  }
  init_input_stack_50 = systemCoreData + 0x5868;
  ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0x6a78) * 0x908 + init_input_stack_50);
  LOCK();
  uint_result = *ptr_uint_var;
  *ptr_uint_var = *ptr_uint_var + system_R12D;
  UNLOCK();
  uint_result = (ulonglong)(uint_result >> 9);
  uint_result = (ulonglong)(uint_result >> 9);
  ptr_char_var = (char *)((longlong)ptr_uint_var + uint_result + 0x808);
  ptr_uint_var = ptr_uint_var + (uint_result + 1) * 2;
  in_stack_00000038 = uint_result;
  do {
    int_result = (int)uint_result;
    if (*(longlong *)ptr_uint_var == 0) {
      long_result = AllocateSystemResource(systemMemoryPool,0xc000,0x25);
      LOCK();
      system_data_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
      if (system_data_flag) {
        *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
      }
      UNLOCK();
      if (system_data_flag) {
        InitializeSystemModule42(ptr_uint_var,int_result << 9);
        LOCK();
        *(uint8_t *)((longlong)ptr_uint_var + (longlong)int_result + 0x808) = 0;
        UNLOCK();
        uint_result = in_stack_00000038;
      }
      else {
        if (long_result != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        do {
          uint_result = in_stack_00000038;
        } while (*ptr_char_var != '\0');
      }
    }
    else {
      do {
      } while (*ptr_char_var != '\0');
    }
    ptr_char_var = ptr_char_var + 1;
    uint_result = (ulonglong)(int_result + 1);
    ptr_uint_var = ptr_uint_var + 2;
  } while ((longlong)(ptr_char_var + (-0x808 - (longlong)ptr_uint_var)) <= (longlong)uint_result);
  ptr_uint_var = (uint64_t *)
            (*(longlong *)
              ((longlong)*(int *)(init_input_stack_50 + 0x1210) * 0x908 + init_input_stack_50 + 8 +
              uint_result * 8) + (ulonglong)(uint_result - (uint_result & 0xfffffe00)) * 0x60);
  long_result = system_RBX;
  in_stack_00000040 = ptr_uint_var;
  if ((*(byte *)(system_RBX + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(system_RBX + 0x1b0));
  }
  long_result = *(longlong *)(system_RBX + 0x1b8);
  module_type_flag = *(byte *)(long_result + 0x38c);
  if (module_type_flag == 9) {
    module_type_flag = IsSystemInitialized();
    *(byte *)(long_result + 0x38c) = module_type_flag;
  }
  long_result = init_input_stack_178;
  long_result = *(longlong *)(long_result + 0x1e0);
  *ptr_uint_var = *(uint64_t *)(long_result + (ulonglong)module_type_flag * 0x18);
  ptr_uint_var[1] = *(uint64_t *)(long_result + 8 + (ulonglong)module_type_flag * 0x18);
  *(uint32_t *)(in_stack_00000040 + 2) = *(uint32_t *)(*(longlong *)(system_RBX + 600) + 0x2c);
  *(uint32_t *)((longlong)in_stack_00000040 + 0x14) =
       *(uint32_t *)(*(longlong *)(system_RBX + 600) + 0x4c);
  *(int *)(in_stack_00000040 + 9) = (int)*(char *)(*(longlong *)(system_RBX + 600) + 0x44);
  if ((*(longlong *)(system_RBX + 0x2d0) == 0) ||
     (*(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x14) == 0)) {
    uint_result = 0xffffffff;
  }
  else {
    uint_result = *(uint32_t *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE8);
  }
  *(uint32_t *)(in_stack_00000040 + 3) = uint_result;
  if ((*(longlong *)(system_RBX + 0x2d0) == 0) ||
     (*(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x14) == 0)) {
    uint_result = 0xffffffff;
  }
  else {
    uint_result = *(uint32_t *)(system_RBX + SYSTEM_DATA_COMPARE_SIZEc);
  }
  *(uint32_t *)((longlong)in_stack_00000040 + 0x1c) = uint_result;
  if ((*(longlong *)(system_RBX + 0x2d0) == 0) ||
     (*(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x14) == 0)) {
    uint_result = 0xffffffff;
  }
  else {
    uint_result = *(uint32_t *)(system_RBX + 0x110);
  }
  *(uint32_t *)(in_stack_00000040 + 4) = uint_result;
  *(byte *)((longlong)in_stack_00000040 + 0x4e) = *(byte *)(system_RBX + 0xfe) >> 3 & 1;
  if (*(int *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE8) != -1) {
    ptr_uint_var = *(uint32_t **)(system_RBX + 0x2d0);
    uint_result = ptr_uint_var[1];
    uint_result = ptr_uint_var[2];
    uint_result = ptr_uint_var[3];
    *(uint32_t *)(in_stack_00000040 + 5) = *ptr_uint_var;
    *(uint32_t *)((longlong)in_stack_00000040 + 0x2c) = uint_result;
    *(uint32_t *)(in_stack_00000040 + 6) = uint_result;
    *(uint32_t *)((longlong)in_stack_00000040 + 0x34) = uint_result;
    uint_result = *(uint64_t *)(ptr_uint_var + 6);
    in_stack_00000040[7] = *(uint64_t *)(ptr_uint_var + 4);
    in_stack_00000040[8] = uint_result;
  }
  *(uint8_t *)((longlong)in_stack_00000040 + 0x4f) =
       *(uint8_t *)(*(longlong *)(system_RBX + 600) + 0x24);
  long_result = *(longlong *)(system_RBX + 600);
  if (*(char *)(long_result + 0x24) != '\0') {
    uint_result = *(uint32_t *)(system_RBX + 0x2ac);
    uint_result = *(uint32_t *)(system_RBX + 0x2b0);
    uint_result = *(uint32_t *)(system_RBX + 0x2b4);
    *(uint32_t *)(in_stack_00000040 + 10) = *(uint32_t *)(system_RBX + 0x2a8);
    *(uint32_t *)((longlong)in_stack_00000040 + 0x54) = uint_result;
    *(uint32_t *)(in_stack_00000040 + 0xb) = uint_result;
    *(uint32_t *)((longlong)in_stack_00000040 + 0x5c) = uint_result;
    long_result = *(longlong *)(system_RBX + 600);
  }
  *(bool *)((longlong)in_stack_00000040 + 0x4c) = *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0;
  *(uint8_t *)((longlong)in_stack_00000040 + 0x4d) = 1;
  if ((*(char *)(init_input_stack_190 + 0xc) != '\0') ||
     (0 < *(int *)(*(longlong *)(system_RBX + 600) + 0x1c))) {
    *(uint8_t *)((longlong)in_stack_00000040 + 0x4d) = 0;
  }
  if (*(longlong *)(init_input_stack_178 + 0x28) == 0) {
    in_stack_00000030 = 0xffffffff;
    ptr_uint_var = &stack0x00000030;
    long_result = init_input_stack_178;
  }
  else {
    init_input_stack_170 = 0xffffffff;
    ptr_uint_var = &stack0x00000170;
    long_result = *(longlong *)(init_input_stack_178 + 0x28);
  }
  InitializeSystemModule1(long_result + 0x3388,ptr_uint_var,&stack0x00000040);
  ptr_float_var = init_input_stack_180;
  if ((*(uint *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE0) & 0x4000000) != 0) {
    float_result = *init_input_stack_180;
    float_result = init_input_stack_180[1];
    float_result = init_input_stack_180[2];
    float_result = init_input_stack_180[3];
    float_result = init_input_stack_180[4];
    float_result = init_input_stack_180[5];
    float_result = init_input_stack_180[6];
    float_result = init_input_stack_180[7];
    float_result = init_input_stack_180[8];
    float_result = init_input_stack_180[9];
    float_result = init_input_stack_180[10];
    float_result = init_input_stack_180[0xb];
    float_result = *(float *)(system_RBX + 0x124);
    float_result = *(float *)(system_RBX + 0x120);
    float_result = *(float *)(system_RBX + 0x128);
    float_result = *(float *)(system_RBX + 0x134);
    float_result = *(float *)(system_RBX + 0x130);
    init_float_stack_a0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_ac = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x138);
    float_result = *(float *)(system_RBX + 0x140);
    float_result = *(float *)(system_RBX + 0x144);
    init_float_stack_b0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_bc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x148);
    float_result = *(float *)(system_RBX + 0x154);
    float_result = *(float *)(system_RBX + 0x150);
    init_float_stack_c0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_cc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x158);
    init_float_stack_d0 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xc];
    init_float_stack_d4 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xd];
    init_float_stack_d8 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xe];
    init_float_stack_dc =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xf];
    ptr_float_var = &stack0x000000a0;
  }
  InitializeSystemDataNode15(&stack0x00000060,long_result + 0x30,*(uint8_t *)(system_RBX + 0xf7),ptr_float_var);
  uint_result = init_input_stack_98;
  uint_result = init_input_stack_90;
  uint_result = init_input_stack_88;
  uint_result = init_input_stack_80;
  uint_result = init_input_stack_78;
  uint_result = init_input_stack_70;
  uint_result = init_input_stack_68;
  uint_result = init_input_stack_60;
  module_type_flag = *(byte *)(long_result + 0x1bd8);
  int_result = *(int *)(g_system_base_1 + 0x224);
  if (((*(byte *)(system_RBX + 0xfd) & 1) == 0) &&
     ((*(int *)(system_RBX + 0x1d0) == int_result || (*(int *)(system_RBX + 0x1d0) == int_result + -1)))) {
    system_feature_flag = 0;
  }
  else {
    system_feature_flag = 1;
  }
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe | system_feature_flag;
  module_type_flag = module_type_flag & SYSTEM_NODE_HEADER_SIZE;
  if ((module_type_flag != 0) && (system_feature_flag != 0)) {
    *(uint64_t *)(system_RBX + 0x160) = init_input_stack_60;
    *(uint64_t *)(system_RBX + 0x168) = init_input_stack_68;
    *(uint64_t *)(system_RBX + 0x170) = init_input_stack_70;
    *(uint64_t *)(system_RBX + 0x178) = init_input_stack_78;
    *(uint64_t *)(system_RBX + 0x180) = init_input_stack_80;
    *(uint64_t *)(system_RBX + 0x188) = init_input_stack_88;
    *(uint64_t *)(system_RBX + 400) = init_input_stack_90;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = init_input_stack_98;
  }
  InitializeSystemModule(long_result);
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe;
  *(int *)(system_RBX + 0x1d0) = int_result;
  if (module_type_flag != 0) {
    *(uint64_t *)(system_RBX + 0x160) = uint_result;
    *(uint64_t *)(system_RBX + 0x168) = uint_result;
    *(uint64_t *)(system_RBX + 0x170) = uint_result;
    *(uint64_t *)(system_RBX + 0x178) = uint_result;
    *(uint64_t *)(system_RBX + 0x180) = uint_result;
    *(uint64_t *)(system_RBX + 0x188) = uint_result;
    *(uint64_t *)(system_RBX + 400) = uint_result;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = uint_result;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemLogger(void)
void InitializeSystemLogger(void)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  int int_result;
  uint32_t uint_result;
  uint32_t uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  longlong long_result;
  byte init_byte_flag;
  byte system_initialization_flag;
  uint32_t uint_result;
  longlong long_result;
  uint32_t *ptr_uint_var;
  longlong system_RBX;
  uint64_t *system_RDI;
  longlong long_result;
  float *ptr_float_var;
  uint32_t in_stack_00000030;
  longlong in_stack_00000040;
  uint64_t init_input_stack_60;
  uint64_t init_input_stack_68;
  uint64_t init_input_stack_70;
  uint64_t init_input_stack_78;
  uint64_t init_input_stack_80;
  uint64_t init_input_stack_88;
  uint64_t init_input_stack_90;
  uint64_t init_input_stack_98;
  float init_float_stack_a0;
  float init_float_stack_a4;
  float init_float_stack_a8;
  float init_float_stack_ac;
  float init_float_stack_b0;
  float init_float_stack_b4;
  float init_float_stack_b8;
  float init_float_stack_bc;
  float init_float_stack_c0;
  float init_float_stack_c4;
  float init_float_stack_c8;
  float init_float_stack_cc;
  float init_float_stack_d0;
  float init_float_stack_d4;
  float init_float_stack_d8;
  float init_float_stack_dc;
  uint32_t init_input_stack_e0;
  uint32_t init_input_stack_e8;
  uint32_t init_input_stack_f0;
  uint32_t init_input_stack_f8;
  uint32_t init_input_stack_100;
  uint32_t init_input_stack_108;
  uint32_t init_input_stack_110;
  uint32_t init_input_stack_118;
  uint32_t init_input_stack_170;
  longlong init_input_stack_178;
  float *init_input_stack_180;
  uint64_t init_input_stack_188;
  longlong init_input_stack_190;

  long_result = *(longlong *)(system_RBX + 0x1b8);
  system_feature_flag = *(byte *)(long_result + 0x38c);
  long_result = system_RBX;
  if (system_feature_flag == 9) {
    system_feature_flag = IsSystemInitialized();
    *(byte *)(long_result + 0x38c) = system_feature_flag;
  }
  long_result = init_input_stack_178;
  long_result = *(longlong *)(long_result + 0x1e0);
  *system_RDI = *(uint64_t *)(long_result + (ulonglong)system_feature_flag * 0x18);
  system_RDI[1] = *(uint64_t *)(long_result + 8 + (ulonglong)system_feature_flag * 0x18);
  *(uint32_t *)(in_stack_00000040 + SYSTEM_DATA_COMPARE_SIZE) = *(uint32_t *)(*(longlong *)(system_RBX + 600) + 0x2c)
  ;
  *(uint32_t *)(in_stack_00000040 + 0x14) = *(uint32_t *)(*(longlong *)(system_RBX + 600) + 0x4c)
  ;
  *(int *)(in_stack_00000040 + 0x48) = (int)*(char *)(*(longlong *)(system_RBX + 600) + 0x44);
  if ((*(longlong *)(system_RBX + 0x2d0) == 0) ||
     (*(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x14) == 0)) {
    uint_result = 0xffffffff;
  }
  else {
    uint_result = *(uint32_t *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE8);
  }
  *(uint32_t *)(in_stack_00000040 + 0x18) = uint_result;
  if ((*(longlong *)(system_RBX + 0x2d0) == 0) ||
     (*(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x14) == 0)) {
    uint_result = 0xffffffff;
  }
  else {
    uint_result = *(uint32_t *)(system_RBX + SYSTEM_DATA_COMPARE_SIZEc);
  }
  *(uint32_t *)(in_stack_00000040 + 0x1c) = uint_result;
  if ((*(longlong *)(system_RBX + 0x2d0) == 0) ||
     (*(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x14) == 0)) {
    uint_result = 0xffffffff;
  }
  else {
    uint_result = *(uint32_t *)(system_RBX + 0x110);
  }
  *(uint32_t *)(in_stack_00000040 + SYSTEM_NODE_HEADER_SIZE) = uint_result;
  *(byte *)(in_stack_00000040 + 0x4e) = *(byte *)(system_RBX + 0xfe) >> 3 & 1;
  if (*(int *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE8) != -1) {
    ptr_uint_var = *(uint32_t **)(system_RBX + 0x2d0);
    uint_result = ptr_uint_var[1];
    uint_result = ptr_uint_var[2];
    uint_result = ptr_uint_var[3];
    *(uint32_t *)(in_stack_00000040 + 0x28) = *ptr_uint_var;
    *(uint32_t *)(in_stack_00000040 + 0x2c) = uint_result;
    *(uint32_t *)(in_stack_00000040 + 0x30) = uint_result;
    *(uint32_t *)(in_stack_00000040 + 0x34) = uint_result;
    uint_result = *(uint64_t *)(ptr_uint_var + 6);
    *(uint64_t *)(in_stack_00000040 + 0x38) = *(uint64_t *)(ptr_uint_var + 4);
    *(uint64_t *)(in_stack_00000040 + 0x40) = uint_result;
  }
  *(uint8_t *)(in_stack_00000040 + 0x4f) = *(uint8_t *)(*(longlong *)(system_RBX + 600) + 0x24)
  ;
  long_result = *(longlong *)(system_RBX + 600);
  if (*(char *)(long_result + 0x24) != '\0') {
    uint_result = *(uint32_t *)(system_RBX + 0x2ac);
    uint_result = *(uint32_t *)(system_RBX + 0x2b0);
    uint_result = *(uint32_t *)(system_RBX + 0x2b4);
    *(uint32_t *)(in_stack_00000040 + 0x50) = *(uint32_t *)(system_RBX + 0x2a8);
    *(uint32_t *)(in_stack_00000040 + 0x54) = uint_result;
    *(uint32_t *)(in_stack_00000040 + 0x58) = uint_result;
    *(uint32_t *)(in_stack_00000040 + 0x5c) = uint_result;
    long_result = *(longlong *)(system_RBX + 600);
  }
  *(bool *)(in_stack_00000040 + 0x4c) = *(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0;
  *(uint8_t *)(in_stack_00000040 + 0x4d) = 1;
  if ((*(char *)(init_input_stack_190 + 0xc) != '\0') ||
     (0 < *(int *)(*(longlong *)(system_RBX + 600) + 0x1c))) {
    *(uint8_t *)(in_stack_00000040 + 0x4d) = 0;
  }
  if (*(longlong *)(init_input_stack_178 + 0x28) == 0) {
    in_stack_00000030 = 0xffffffff;
    ptr_uint_var = &stack0x00000030;
    long_result = init_input_stack_178;
  }
  else {
    init_input_stack_170 = 0xffffffff;
    ptr_uint_var = &stack0x00000170;
    long_result = *(longlong *)(init_input_stack_178 + 0x28);
  }
  InitializeSystemModule1(long_result + 0x3388,ptr_uint_var,&stack0x00000040);
  ptr_float_var = init_input_stack_180;
  if ((*(uint *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE0) & 0x4000000) != 0) {
    float_result = *init_input_stack_180;
    float_result = init_input_stack_180[1];
    float_result = init_input_stack_180[2];
    float_result = init_input_stack_180[3];
    float_result = init_input_stack_180[4];
    float_result = init_input_stack_180[5];
    float_result = init_input_stack_180[6];
    float_result = init_input_stack_180[7];
    float_result = init_input_stack_180[8];
    float_result = init_input_stack_180[9];
    float_result = init_input_stack_180[10];
    float_result = init_input_stack_180[0xb];
    float_result = *(float *)(system_RBX + 0x124);
    float_result = *(float *)(system_RBX + 0x120);
    float_result = *(float *)(system_RBX + 0x128);
    float_result = *(float *)(system_RBX + 0x134);
    float_result = *(float *)(system_RBX + 0x130);
    init_float_stack_a0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_ac = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x138);
    float_result = *(float *)(system_RBX + 0x140);
    float_result = *(float *)(system_RBX + 0x144);
    init_float_stack_b0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_bc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x148);
    float_result = *(float *)(system_RBX + 0x154);
    float_result = *(float *)(system_RBX + 0x150);
    init_float_stack_c0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_cc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x158);
    init_float_stack_d0 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xc];
    init_float_stack_d4 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xd];
    init_float_stack_d8 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xe];
    init_float_stack_dc =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xf];
    ptr_float_var = &stack0x000000a0;
  }
  InitializeSystemDataNode15(&stack0x00000060,long_result + 0x30,*(uint8_t *)(system_RBX + 0xf7),ptr_float_var);
  uint_result = init_input_stack_98;
  uint_result = init_input_stack_90;
  uint_result = init_input_stack_88;
  uint_result = init_input_stack_80;
  uint_result = init_input_stack_78;
  uint_result = init_input_stack_70;
  uint_result = init_input_stack_68;
  uint_result = init_input_stack_60;
  system_feature_flag = *(byte *)(long_result + 0x1bd8);
  int_result = *(int *)(g_system_base_1 + 0x224);
  if (((*(byte *)(system_RBX + 0xfd) & 1) == 0) &&
     ((*(int *)(system_RBX + 0x1d0) == int_result || (*(int *)(system_RBX + 0x1d0) == int_result + -1)))) {
    system_initialization_flag = 0;
  }
  else {
    system_initialization_flag = 1;
  }
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe | system_initialization_flag;
  system_feature_flag = system_feature_flag & SYSTEM_NODE_HEADER_SIZE;
  if ((system_feature_flag != 0) && (system_initialization_flag != 0)) {
    *(uint64_t *)(system_RBX + 0x160) = init_input_stack_60;
    *(uint64_t *)(system_RBX + 0x168) = init_input_stack_68;
    *(uint64_t *)(system_RBX + 0x170) = init_input_stack_70;
    *(uint64_t *)(system_RBX + 0x178) = init_input_stack_78;
    *(uint64_t *)(system_RBX + 0x180) = init_input_stack_80;
    *(uint64_t *)(system_RBX + 0x188) = init_input_stack_88;
    *(uint64_t *)(system_RBX + 400) = init_input_stack_90;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = init_input_stack_98;
  }
  InitializeSystemModule(long_result);
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe;
  *(int *)(system_RBX + 0x1d0) = int_result;
  if (system_feature_flag != 0) {
    *(uint64_t *)(system_RBX + 0x160) = uint_result;
    *(uint64_t *)(system_RBX + 0x168) = uint_result;
    *(uint64_t *)(system_RBX + 0x170) = uint_result;
    *(uint64_t *)(system_RBX + 0x178) = uint_result;
    *(uint64_t *)(system_RBX + 0x180) = uint_result;
    *(uint64_t *)(system_RBX + 0x188) = uint_result;
    *(uint64_t *)(system_RBX + 400) = uint_result;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = uint_result;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_64_6(void)
void SystemFunction_64_6(void)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  int int_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  byte system_status_byte;
  longlong system_RBX;
  byte buffer_byte_flag;
  float *system_RSI;
  longlong system_R13;
  bool in_ZF;
  uint64_t init_input_stack_60;
  uint64_t init_input_stack_68;
  uint64_t init_input_stack_70;
  uint64_t init_input_stack_78;
  uint64_t init_input_stack_80;
  uint64_t init_input_stack_88;
  uint64_t init_input_stack_90;
  uint64_t init_input_stack_98;
  float init_float_stack_a0;
  float init_float_stack_a4;
  float init_float_stack_a8;
  float init_float_stack_ac;
  float init_float_stack_b0;
  float init_float_stack_b4;
  float init_float_stack_b8;
  float init_float_stack_bc;
  float init_float_stack_c0;
  float init_float_stack_c4;
  float init_float_stack_c8;
  float init_float_stack_cc;
  float init_float_stack_d0;
  float init_float_stack_d4;
  float init_float_stack_d8;
  float init_float_stack_dc;

  if (!in_ZF) {
    float_result = *system_RSI;
    float_result = system_RSI[1];
    float_result = system_RSI[2];
    float_result = system_RSI[3];
    float_result = system_RSI[4];
    float_result = system_RSI[5];
    float_result = system_RSI[6];
    float_result = system_RSI[7];
    float_result = system_RSI[8];
    float_result = system_RSI[9];
    float_result = system_RSI[10];
    float_result = system_RSI[0xb];
    float_result = *(float *)(system_RBX + 0x124);
    float_result = *(float *)(system_RBX + 0x120);
    float_result = *(float *)(system_RBX + 0x128);
    float_result = *(float *)(system_RBX + 0x134);
    float_result = *(float *)(system_RBX + 0x130);
    init_float_stack_a0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_ac = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x138);
    float_result = *(float *)(system_RBX + 0x140);
    float_result = *(float *)(system_RBX + 0x144);
    init_float_stack_b0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_bc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x148);
    float_result = *(float *)(system_RBX + 0x154);
    float_result = *(float *)(system_RBX + 0x150);
    init_float_stack_c0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_cc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x158);
    init_float_stack_d0 = float_result * float_result + float_result * float_result + float_result * float_result + system_RSI[0xc];
    init_float_stack_d4 = float_result * float_result + float_result * float_result + float_result * float_result + system_RSI[0xd];
    init_float_stack_d8 = float_result * float_result + float_result * float_result + float_result * float_result + system_RSI[0xe];
    init_float_stack_dc = float_result * float_result + float_result * float_result + float_result * float_result + system_RSI[0xf];
  }
  InitializeSystemDataNode15(&stack0x00000060,system_R13 + 0x30,*(uint8_t *)(system_RBX + 0xf7));
  uint_result = init_input_stack_98;
  uint_result = init_input_stack_90;
  uint_result = init_input_stack_88;
  uint_result = init_input_stack_80;
  uint_result = init_input_stack_78;
  uint_result = init_input_stack_70;
  uint_result = init_input_stack_68;
  uint_result = init_input_stack_60;
  system_status_flag = *(byte *)(system_R13 + 0x1bd8);
  int_result = *(int *)(g_system_base_1 + 0x224);
  if (((*(byte *)(system_RBX + 0xfd) & 1) == 0) &&
     ((*(int *)(system_RBX + 0x1d0) == int_result || (*(int *)(system_RBX + 0x1d0) == int_result + -1)))) {
    system_enable_flag = 0;
  }
  else {
    system_enable_flag = 1;
  }
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe | system_enable_flag;
  system_status_flag = system_status_flag & SYSTEM_NODE_HEADER_SIZE;
  if ((system_status_flag != 0) && (system_enable_flag != 0)) {
    *(uint64_t *)(system_RBX + 0x160) = init_input_stack_60;
    *(uint64_t *)(system_RBX + 0x168) = init_input_stack_68;
    *(uint64_t *)(system_RBX + 0x170) = init_input_stack_70;
    *(uint64_t *)(system_RBX + 0x178) = init_input_stack_78;
    *(uint64_t *)(system_RBX + 0x180) = init_input_stack_80;
    *(uint64_t *)(system_RBX + 0x188) = init_input_stack_88;
    *(uint64_t *)(system_RBX + 400) = init_input_stack_90;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = init_input_stack_98;
  }
  InitializeSystemModule();
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe;
  *(int *)(system_RBX + 0x1d0) = int_result;
  if (system_status_flag != 0) {
    *(uint64_t *)(system_RBX + 0x160) = uint_result;
    *(uint64_t *)(system_RBX + 0x168) = uint_result;
    *(uint64_t *)(system_RBX + 0x170) = uint_result;
    *(uint64_t *)(system_RBX + 0x178) = uint_result;
    *(uint64_t *)(system_RBX + 0x180) = uint_result;
    *(uint64_t *)(system_RBX + 0x188) = uint_result;
    *(uint64_t *)(system_RBX + 400) = uint_result;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = uint_result;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_95_0(void)
void SystemFunction_95_0(void)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  int int_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  byte system_status_byte;
  longlong system_RBX;
  byte buffer_byte_flag;
  float *ptr_float_var;
  longlong system_R13;
  uint32_t init_uint_stack_30;
  uint64_t init_input_stack_60;
  uint64_t init_input_stack_68;
  uint64_t init_input_stack_70;
  uint64_t init_input_stack_78;
  uint64_t init_input_stack_80;
  uint64_t init_input_stack_88;
  uint64_t init_input_stack_90;
  uint64_t init_input_stack_98;
  float init_float_stack_a0;
  float init_float_stack_a4;
  float init_float_stack_a8;
  float init_float_stack_ac;
  float init_float_stack_b0;
  float init_float_stack_b4;
  float init_float_stack_b8;
  float init_float_stack_bc;
  float init_float_stack_c0;
  float init_float_stack_c4;
  float init_float_stack_c8;
  float init_float_stack_cc;
  float init_float_stack_d0;
  float init_float_stack_d4;
  float init_float_stack_d8;
  float init_float_stack_dc;
  uint32_t init_input_stack_e0;
  uint32_t init_input_stack_e8;
  uint32_t init_input_stack_f0;
  uint32_t init_input_stack_f8;
  uint32_t init_input_stack_100;
  uint32_t init_input_stack_108;
  uint32_t init_input_stack_110;
  uint32_t init_input_stack_118;
  float *init_input_stack_180;
  uint64_t init_input_stack_188;

  init_uint_stack_30 = 0xffffffff;
  InitializeSystemModule1(system_R13 + 0x3388,&stack0x00000030);
  ptr_float_var = init_input_stack_180;
  if ((*(uint *)(system_RBX + SYSTEM_DATA_COMPARE_SIZE0) & 0x4000000) != 0) {
    float_result = *init_input_stack_180;
    float_result = init_input_stack_180[1];
    float_result = init_input_stack_180[2];
    float_result = init_input_stack_180[3];
    float_result = init_input_stack_180[4];
    float_result = init_input_stack_180[5];
    float_result = init_input_stack_180[6];
    float_result = init_input_stack_180[7];
    float_result = init_input_stack_180[8];
    float_result = init_input_stack_180[9];
    float_result = init_input_stack_180[10];
    float_result = init_input_stack_180[0xb];
    float_result = *(float *)(system_RBX + 0x124);
    float_result = *(float *)(system_RBX + 0x120);
    float_result = *(float *)(system_RBX + 0x128);
    float_result = *(float *)(system_RBX + 0x134);
    float_result = *(float *)(system_RBX + 0x130);
    init_float_stack_a0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_a8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_ac = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x138);
    float_result = *(float *)(system_RBX + 0x140);
    float_result = *(float *)(system_RBX + 0x144);
    init_float_stack_b0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_b8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_bc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x148);
    float_result = *(float *)(system_RBX + 0x154);
    float_result = *(float *)(system_RBX + 0x150);
    init_float_stack_c0 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c4 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_c8 = float_result * float_result + float_result * float_result + float_result * float_result;
    init_float_stack_cc = float_result * float_result + float_result * float_result + float_result * float_result;
    float_result = *(float *)(system_RBX + 0x158);
    init_float_stack_d0 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xc];
    init_float_stack_d4 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xd];
    init_float_stack_d8 =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xe];
    init_float_stack_dc =
         float_result * float_result + float_result * float_result + float_result * float_result + init_input_stack_180[0xf];
    ptr_float_var = &stack0x000000a0;
  }
  InitializeSystemDataNode15(&stack0x00000060,system_R13 + 0x30,*(uint8_t *)(system_RBX + 0xf7),ptr_float_var);
  uint_result = init_input_stack_98;
  uint_result = init_input_stack_90;
  uint_result = init_input_stack_88;
  uint_result = init_input_stack_80;
  uint_result = init_input_stack_78;
  uint_result = init_input_stack_70;
  uint_result = init_input_stack_68;
  uint_result = init_input_stack_60;
  system_status_flag = *(byte *)(system_R13 + 0x1bd8);
  int_result = *(int *)(g_system_base_1 + 0x224);
  if (((*(byte *)(system_RBX + 0xfd) & 1) == 0) &&
     ((*(int *)(system_RBX + 0x1d0) == int_result || (*(int *)(system_RBX + 0x1d0) == int_result + -1)))) {
    system_enable_flag = 0;
  }
  else {
    system_enable_flag = 1;
  }
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe | system_enable_flag;
  system_status_flag = system_status_flag & SYSTEM_NODE_HEADER_SIZE;
  if ((system_status_flag != 0) && (system_enable_flag != 0)) {
    *(uint64_t *)(system_RBX + 0x160) = init_input_stack_60;
    *(uint64_t *)(system_RBX + 0x168) = init_input_stack_68;
    *(uint64_t *)(system_RBX + 0x170) = init_input_stack_70;
    *(uint64_t *)(system_RBX + 0x178) = init_input_stack_78;
    *(uint64_t *)(system_RBX + 0x180) = init_input_stack_80;
    *(uint64_t *)(system_RBX + 0x188) = init_input_stack_88;
    *(uint64_t *)(system_RBX + 400) = init_input_stack_90;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = init_input_stack_98;
  }
  InitializeSystemModule();
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe;
  *(int *)(system_RBX + 0x1d0) = int_result;
  if (system_status_flag != 0) {
    *(uint64_t *)(system_RBX + 0x160) = uint_result;
    *(uint64_t *)(system_RBX + 0x168) = uint_result;
    *(uint64_t *)(system_RBX + 0x170) = uint_result;
    *(uint64_t *)(system_RBX + 0x178) = uint_result;
    *(uint64_t *)(system_RBX + 0x180) = uint_result;
    *(uint64_t *)(system_RBX + 0x188) = uint_result;
    *(uint64_t *)(system_RBX + 400) = uint_result;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = uint_result;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_98_8(void)
void SystemFunction_98_8(void)

{
  int int_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint64_t uint_result;
  byte comparison_result_flag;
  longlong system_RBX;
  byte system_comparison_flag;
  longlong system_R13;
  uint64_t init_input_stack_60;
  uint64_t init_input_stack_68;
  uint64_t init_input_stack_70;
  uint64_t init_input_stack_78;
  uint64_t init_input_stack_80;
  uint64_t init_input_stack_88;
  uint64_t init_input_stack_90;
  uint64_t init_input_stack_98;

  InitializeSystemDataNode15(&stack0x00000060,system_R13 + 0x30,*(uint8_t *)(system_RBX + 0xf7));
  uint_result = init_input_stack_98;
  uint_result = init_input_stack_90;
  uint_result = init_input_stack_88;
  uint_result = init_input_stack_80;
  uint_result = init_input_stack_78;
  uint_result = init_input_stack_70;
  uint_result = init_input_stack_68;
  uint_result = init_input_stack_60;
  system_comparison_flag = *(byte *)(system_R13 + 0x1bd8);
  int_result = *(int *)(g_system_base_1 + 0x224);
  if (((*(byte *)(system_RBX + 0xfd) & 1) == 0) &&
     ((*(int *)(system_RBX + 0x1d0) == int_result || (*(int *)(system_RBX + 0x1d0) == int_result + -1)))) {
    comparison_result_flag = 0;
  }
  else {
    comparison_result_flag = 1;
  }
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe | comparison_result_flag;
  system_comparison_flag = system_comparison_flag & SYSTEM_NODE_HEADER_SIZE;
  if ((system_comparison_flag != 0) && (comparison_result_flag != 0)) {
    *(uint64_t *)(system_RBX + 0x160) = init_input_stack_60;
    *(uint64_t *)(system_RBX + 0x168) = init_input_stack_68;
    *(uint64_t *)(system_RBX + 0x170) = init_input_stack_70;
    *(uint64_t *)(system_RBX + 0x178) = init_input_stack_78;
    *(uint64_t *)(system_RBX + 0x180) = init_input_stack_80;
    *(uint64_t *)(system_RBX + 0x188) = init_input_stack_88;
    *(uint64_t *)(system_RBX + 400) = init_input_stack_90;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = init_input_stack_98;
  }
  InitializeSystemModule();
  *(byte *)(system_RBX + 0xfd) = *(byte *)(system_RBX + 0xfd) & 0xfe;
  *(int *)(system_RBX + 0x1d0) = int_result;
  if (system_comparison_flag != 0) {
    *(uint64_t *)(system_RBX + 0x160) = uint_result;
    *(uint64_t *)(system_RBX + 0x168) = uint_result;
    *(uint64_t *)(system_RBX + 0x170) = uint_result;
    *(uint64_t *)(system_RBX + 0x178) = uint_result;
    *(uint64_t *)(system_RBX + 0x180) = uint_result;
    *(uint64_t *)(system_RBX + 0x188) = uint_result;
    *(uint64_t *)(system_RBX + 400) = uint_result;
    *(uint64_t *)(system_RBX + NODE_INITIALIZED_OFFSET8) = uint_result;
  }
  return;
}

uint8_t SystemFunction_25_7(void)

{
  return 0;
}

ulonglong InitializeSystemModule6(longlong handleIdentifier,uint64_t resourceIdentifier,uint32_t systemConfig,float *systemFlags,
                       uint32_t parameter_5,uint32_t parameter_6)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  char is_initialized9;
  ulonglong in_RAX;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  byte operation_byte_flag;
  uint64_t uintStack_88;
  ulonglong uintStack_80;
  uint64_t uintStack_78;
  ulonglong uintStack_70;
  uint64_t uintStack_68;
  ulonglong uintStack_60;
  float init_float_stack_58;
  float init_float_stack_54;
  float init_float_stack_50;
  uint32_t uintStack_4c;

  long_result = *(longlong *)(handleIdentifier + 0x1b8);
  if (long_result != 0) {
    operation_byte_flag = *(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE;
    long_result = handleIdentifier;
    if (operation_byte_flag == 0) {
      long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
    }
    if (*(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0) != 0) {
      long_result = handleIdentifier;
      if (operation_byte_flag == 0) {
        long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
      }
      if (*(int *)(long_result + 0x1fc) * 3 != 0) goto LAB_180077fcf;
    }
    if ((*(byte *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & 4) != 0) {
LAB_180077fcf:
      long_result = *(longlong *)(handleIdentifier + 0x1b8);
      is_initialized9 = *(char *)(long_result + 0x38c);
      if (is_initialized9 == '\t') {
        is_initialized9 = IsSystemInitialized();
        *(char *)(long_result + 0x38c) = is_initialized9;
      }
      is_initialized9 = InitializeSystemComponents(handleIdentifier,handleIdentifier + 0x1e8,is_initialized9,1);
      if (is_initialized9 == '\0') {
        *(byte *)(handleIdentifier + 0xfe) = *(byte *)(handleIdentifier + 0xfe) & 0xfb;
      }
      if ((*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & 0x4000000) == 0) {
        uintStack_88 = *(uint64_t *)systemFlags;
        uintStack_80._0_4_ = (float)*(uint64_t *)(systemFlags + 2);
        uintStack_78 = *(uint64_t *)(systemFlags + 4);
        uintStack_70._0_4_ = (float)*(uint64_t *)(systemFlags + 6);
        uintStack_68 = *(uint64_t *)(systemFlags + 8);
        uintStack_60._0_4_ = (float)*(uint64_t *)(systemFlags + 10);
        init_float_stack_58 = systemFlags[0xc];
        init_float_stack_54 = systemFlags[0xd];
        init_float_stack_50 = systemFlags[0xe];
      }
      else {
        float_result = systemFlags[4];
        float_result = systemFlags[5];
        float_result = systemFlags[6];
        float_result = *(float *)(handleIdentifier + 0x120);
        float_result = *(float *)(handleIdentifier + 0x128);
        float_result = *(float *)(handleIdentifier + 0x134);
        float_result = *(float *)(handleIdentifier + 0x144);
        float_result = *(float *)(handleIdentifier + 0x154);
        float_result = *systemFlags;
        float_result = systemFlags[1];
        float_result = systemFlags[2];
        float_result = systemFlags[8];
        float_result = systemFlags[9];
        float_result = systemFlags[10];
        float_result = *(float *)(handleIdentifier + 0x124);
        float_result = *(float *)(handleIdentifier + 0x130);
        uintStack_80._0_4_ = float_result * float_result + float_result * float_result + float_result * float_result;
        float_result = *(float *)(handleIdentifier + 0x138);
        float_result = *(float *)(handleIdentifier + 0x140);
        uintStack_70._0_4_ = float_result * float_result + float_result * float_result + float_result * float_result;
        uintStack_88 = CONCAT44(float_result * float_result + float_result * float_result + float_result * float_result,
                             float_result * float_result + float_result * float_result + float_result * float_result);
        float_result = *(float *)(handleIdentifier + 0x148);
        float_result = *(float *)(handleIdentifier + 0x150);
        uintStack_60._0_4_ = float_result * float_result + float_result * float_result + float_result * float_result;
        float_result = *(float *)(handleIdentifier + 0x158);
        uintStack_78 = CONCAT44(float_result * float_result + float_result * float_result + float_result * float_result,
                             float_result * float_result + float_result * float_result + float_result * float_result);
        uintStack_68 = CONCAT44(float_result * float_result + float_result * float_result + float_result * float_result,
                             float_result * float_result + float_result * float_result + float_result * float_result);
        init_float_stack_58 = float_result * float_result + float_result * float_result + float_result * float_result + systemFlags[0xc];
        init_float_stack_54 = float_result * float_result + float_result * float_result + float_result * float_result + systemFlags[0xd];
        init_float_stack_50 = float_result * float_result + float_result * float_result + float_result * float_result + systemFlags[0xe];
      }
      uintStack_4c = 0x3f800000;
      uintStack_60 = (ulonglong)(uint)(float)uintStack_60;
      uintStack_70 = (ulonglong)(uint)(float)uintStack_70;
      uintStack_80 = (ulonglong)(uint)(float)uintStack_80;
      uint_result = ConfigureSystemParameters(resourceIdentifier,handleIdentifier,systemConfig,&uintStack_88,parameter_5,parameter_6);
      return uint_result;
    }
    in_RAX = 0;
    if (*(char *)(long_result + 0x38c) == '\t') {
      in_RAX = IsSystemInitialized(long_result);
      *(char *)(long_result + 0x38c) = (char)in_RAX;
      if ((char)in_RAX == '\t') goto LAB_180077fcf;
    }
  }
  return in_RAX & 0xffffffffffffff00;
}
// void SystemFunction_60_1(uint64_t handleIdentifier,uint64_t resourceIdentifier,float systemConfig,float systemFlags)

void SystemFunction_60_1(uint64_t handleIdentifier,uint64_t resourceIdentifier,float systemConfig,float systemFlags)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  longlong system_RBX;
  float *system_RDI;
  uint32_t system_R14D;
  float in_XMM0_Dc;
  float in_XMM1_Dc;
  float in_XMM4_Da;
  float in_XMM4_Db;
  float in_XMM4_Dc;
  float in_XMM5_Da;
  uint32_t init_uint_stack_28;
  float init_float_stack_30;
  float init_float_stack_34;
  float init_float_stack_38;
  uint32_t init_uint_stack_3c;
  float init_float_stack_40;
  float init_float_stack_44;
  float init_float_stack_48;
  uint32_t init_uint_stack_4c;
  float init_float_stack_50;
  float init_float_stack_54;
  float init_float_stack_58;
  uint32_t init_uint_stack_5c;
  float init_float_stack_60;
  float init_float_stack_64;
  float init_float_stack_68;
  uint32_t init_uint_stack_6c;
  uint32_t init_input_stack_e0;
  uint32_t init_input_stack_e8;

  float_result = *system_RDI;
  float_result = system_RDI[1];
  float_result = system_RDI[2];
  float_result = system_RDI[8];
  float_result = system_RDI[9];
  float_result = system_RDI[10];
  float_result = *(float *)(system_RBX + 0x124);
  float_result = *(float *)(system_RBX + 0x130);
  init_float_stack_30 = float_result * in_XMM4_Da + (float)handleIdentifier * float_result + (float)resourceIdentifier * float_result;
  init_float_stack_34 =
       float_result * in_XMM4_Db + (float)((ulonglong)handleIdentifier >> SYSTEM_NODE_HEADER_SIZE) * float_result +
       (float)((ulonglong)resourceIdentifier >> SYSTEM_NODE_HEADER_SIZE) * float_result;
  init_float_stack_38 = float_result * in_XMM4_Dc + in_XMM0_Dc * float_result + in_XMM1_Dc * float_result;
  float_result = *(float *)(system_RBX + 0x138);
  float_result = *(float *)(system_RBX + 0x140);
  init_float_stack_40 = in_XMM5_Da * in_XMM4_Da + float_result * float_result + float_result * float_result;
  init_float_stack_44 = in_XMM5_Da * in_XMM4_Db + float_result * float_result + float_result * float_result;
  init_float_stack_48 = in_XMM5_Da * in_XMM4_Dc + float_result * float_result + float_result * float_result;
  float_result = *(float *)(system_RBX + 0x148);
  float_result = *(float *)(system_RBX + 0x150);
  init_float_stack_50 = systemFlags * in_XMM4_Da + float_result * float_result + float_result * float_result;
  init_float_stack_54 = systemFlags * in_XMM4_Db + float_result * float_result + float_result * float_result;
  init_float_stack_58 = systemFlags * in_XMM4_Dc + float_result * float_result + float_result * float_result;
  float_result = *(float *)(system_RBX + 0x158);
  init_float_stack_60 = systemConfig * in_XMM4_Da + float_result * float_result + float_result * float_result + system_RDI[0xc];
  init_float_stack_64 = systemConfig * in_XMM4_Db + float_result * float_result + float_result * float_result + system_RDI[0xd];
  init_float_stack_68 = systemConfig * in_XMM4_Dc + float_result * float_result + float_result * float_result + system_RDI[0xe];
  init_uint_stack_28 = init_input_stack_e8;
  init_uint_stack_6c = 0x3f800000;
  init_uint_stack_5c = 0;
  init_uint_stack_4c = 0;
  init_uint_stack_3c = 0;
  ConfigureSystemParameters(0x3f800000,float_result * float_result,system_R14D,&stack0x00000030,init_input_stack_e0);
  return;
}
// void SystemFunction_84_3(void)

void SystemFunction_84_3(void)

{
  uint64_t *system_RDI;
  uint32_t system_R14D;
  uint32_t init_uint_stack_28;
  uint64_t init_uint_stack_30;
  ulonglong init_ulonglong_stack_38;
  uint64_t init_uint_stack_40;
  ulonglong init_ulonglong_stack_48;
  uint64_t init_uint_stack_50;
  ulonglong init_ulonglong_stack_58;
  uint32_t init_uint_stack_60;
  uint32_t init_uint_stack_64;
  uint32_t init_uint_stack_68;
  uint32_t init_uint_stack_6c;
  uint32_t init_input_stack_e0;
  uint32_t init_input_stack_e8;

  init_uint_stack_30 = *system_RDI;
  init_uint_stack_40 = system_RDI[2];
  init_uint_stack_50 = system_RDI[4];
  init_uint_stack_60 = *(uint32_t *)(system_RDI + 6);
  init_uint_stack_64 = *(uint32_t *)((longlong)system_RDI + 0x34);
  init_uint_stack_68 = *(uint32_t *)(system_RDI + 7);
  init_uint_stack_28 = init_input_stack_e8;
  init_uint_stack_6c = 0x3f800000;
  init_ulonglong_stack_58 = system_RDI[5] & 0xffffffff;
  init_ulonglong_stack_48 = system_RDI[3] & 0xffffffff;
  init_ulonglong_stack_38 = system_RDI[1] & 0xffffffff;
  ConfigureSystemParameters(0x3f800000,init_uint_stack_60,system_R14D,&stack0x00000030,init_input_stack_e0);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode24(longlong handleIdentifier)
void InitializeSystemDataNode24(longlong handleIdentifier)

{
  longlong long_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  char char_var;
  uint8_t uint_result;
  uint64_t *node_previous;
  longlong long_result;
  uint uint_result;
  bool comparison_result_flag;
  float float_result;

  long_result = handleIdentifier;
  if ((*(longlong *)(handleIdentifier + 0x1c8) != 0) &&
     (long_result = *(longlong *)(*(longlong *)(handleIdentifier + 0x1c8) + 0x28), long_result != 0)) {
    float_result = (*(float *)(long_result + 0x74) * *(float *)(long_result + 0x88) -
             *(float *)(long_result + 0x78) * *(float *)(long_result + 0x84)) * *(float *)(long_result + 0x90);
    CalculateSystemValue(float_result,(*(float *)(long_result + 0x78) * *(float *)(long_result + 0x80) -
                               *(float *)(long_result + 0x70) * *(float *)(long_result + 0x88)) *
                               *(float *)(long_result + 0x94) + float_result +
                               (*(float *)(long_result + 0x70) * *(float *)(long_result + 0x84) -
                               *(float *)(long_result + 0x74) * *(float *)(long_result + 0x80)) *
                               *(float *)(long_result + 0x98) < 0.0);
  }
  if (*(longlong *)(long_result + 0x1b8) == 0) {
LAB_1800782d4:
    comparison_result_flag = (*(byte *)(handleIdentifier + 0xfd) & 2) != 0;
  }
  else {
    uint_result = *(uint *)(*(longlong *)(long_result + 0x1b8) + 0x138);
    if ((uint_result & SYSTEM_NODE_HEADER_SIZE) != 0) {
      char_var = '\0';
      goto LAB_1800782e0;
    }
    if ((uint_result & SYSTEM_DATA_COMPARE_SIZE) == 0) goto LAB_1800782d4;
    comparison_result_flag = (*(byte *)(handleIdentifier + 0xfd) & 2) == 0;
  }
  char_var = comparison_result_flag + '\x01';
LAB_1800782e0:
  *(char *)(handleIdentifier + 0xff) = char_var;
  long_result = *(longlong *)(handleIdentifier + 0x1b8);
  uint_result = *(uint *)(long_result + 0x138) & 0x3000;
  uint_result = 0;
  if (uint_result == SYSTEM_DATA_COMPARE_SIZE00) {
    *(uint8_t *)(handleIdentifier + 0xf7) = 1;
  }
  else {
    if (uint_result == SYSTEM_NODE_HEADER_SIZE00) {
      uint_result = 2;
    }
    *(uint8_t *)(handleIdentifier + 0xf7) = uint_result;
  }
  if ((((*(float *)(long_result + 0x288) != 0.0) || (*(float *)(long_result + 0x28c) != 0.0)) ||
      (*(float *)(long_result + 0x290) != 0.0)) || (*(float *)(long_result + 0x294) != 0.0)) {
    uint_result = *(uint32_t *)(long_result + 0x28c);
    uint_result = *(uint32_t *)(long_result + 0x290);
    uint_result = *(uint32_t *)(long_result + 0x294);
    *(uint32_t *)(handleIdentifier + 0x2a8) = *(uint32_t *)(long_result + 0x288);
    *(uint32_t *)(handleIdentifier + 0x2ac) = uint_result;
    *(uint32_t *)(handleIdentifier + 0x2b0) = uint_result;
    *(uint32_t *)(handleIdentifier + 0x2b4) = uint_result;
  }
  if (((*(float *)(long_result + 0x298) != 0.0) || (*(float *)(long_result + 0x29c) != 0.0)) ||
     ((*(float *)(long_result + 0x2a0) != 0.0 || (*(float *)(long_result + 0x2a4) != 0.0)))) {
    uint_result = *(uint32_t *)(long_result + 0x29c);
    uint_result = *(uint32_t *)(long_result + 0x2a0);
    uint_result = *(uint32_t *)(long_result + 0x2a4);
    *(uint32_t *)(handleIdentifier + 0x2b8) = *(uint32_t *)(long_result + 0x298);
    *(uint32_t *)(handleIdentifier + 700) = uint_result;
    *(uint32_t *)(handleIdentifier + 0x2c0) = uint_result;
    *(uint32_t *)(handleIdentifier + 0x2c4) = uint_result;
  }
  *(uint16_t *)(long_result + 0x3c0) = 0xffff;
  InitializeNetworkSystem(handleIdentifier);
  if ((*(longlong *)(handleIdentifier + 600) == 0) &&
     ((*(uint *)(*(longlong *)(handleIdentifier + 0x1b8) + 0x388) >> NODE_INITIALIZED_OFFSET & 1) != 0)) {
    node_previous = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x58,8,9);
    *(uint64_t *)((longlong)node_previous + 0x2c) = 0xffffffffffffffff;
    *(uint32_t *)(node_previous + 9) = 0xffffffff;
    *node_previous = 0;
    node_previous[2] = 0;
    node_previous[7] = 0;
    *(uint32_t *)(node_previous + 5) = 0xffffffff;
    *(uint32_t *)(node_previous + 4) = 0xffffffff;
    node_previous[3] = 0;
    *(uint32_t *)(node_previous + 8) = 0;
    *(uint32_t *)(node_previous + 1) = 0;
    *(uint8_t *)((longlong)node_previous + 0x44) = 0;
    *(uint8_t *)((longlong)node_previous + 0x24) = 0;
    *(uint64_t **)(handleIdentifier + 600) = node_previous;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_2_0(longlong handleIdentifier)
void SystemFunction_2_0(longlong handleIdentifier)

{
  longlong long_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  char char_var;
  uint8_t uint_result;
  longlong in_RAX;
  uint64_t *node_previous;
  uint uint_result;
  longlong system_RBX;
  bool bool_var;
  float float_result;

  if ((in_RAX != 0) && (long_result = *(longlong *)(in_RAX + 0x28), long_result != 0)) {
    float_result = (*(float *)(long_result + 0x74) * *(float *)(long_result + 0x88) -
             *(float *)(long_result + 0x78) * *(float *)(long_result + 0x84)) * *(float *)(long_result + 0x90);
    CalculateSystemValue(float_result,(*(float *)(long_result + 0x78) * *(float *)(long_result + 0x80) -
                               *(float *)(long_result + 0x70) * *(float *)(long_result + 0x88)) *
                               *(float *)(long_result + 0x94) + float_result +
                               (*(float *)(long_result + 0x70) * *(float *)(long_result + 0x84) -
                               *(float *)(long_result + 0x74) * *(float *)(long_result + 0x80)) *
                               *(float *)(long_result + 0x98) < 0.0);
  }
  if (*(longlong *)(handleIdentifier + 0x1b8) == 0) {
LAB_1800782d4:
    bool_var = (*(byte *)(system_RBX + 0xfd) & 2) != 0;
  }
  else {
    uint_result = *(uint *)(*(longlong *)(handleIdentifier + 0x1b8) + 0x138);
    if ((uint_result & SYSTEM_NODE_HEADER_SIZE) != 0) {
      char_var = '\0';
      goto LAB_1800782e0;
    }
    if ((uint_result & SYSTEM_DATA_COMPARE_SIZE) == 0) goto LAB_1800782d4;
    bool_var = (*(byte *)(system_RBX + 0xfd) & 2) == 0;
  }
  char_var = bool_var + '\x01';
LAB_1800782e0:
  *(char *)(system_RBX + 0xff) = char_var;
  long_result = *(longlong *)(system_RBX + 0x1b8);
  uint_result = *(uint *)(long_result + 0x138) & 0x3000;
  uint_result = 0;
  if (uint_result == SYSTEM_DATA_COMPARE_SIZE00) {
    *(uint8_t *)(system_RBX + 0xf7) = 1;
  }
  else {
    if (uint_result == SYSTEM_NODE_HEADER_SIZE00) {
      uint_result = 2;
    }
    *(uint8_t *)(system_RBX + 0xf7) = uint_result;
  }
  if ((((*(float *)(long_result + 0x288) != 0.0) || (*(float *)(long_result + 0x28c) != 0.0)) ||
      (*(float *)(long_result + 0x290) != 0.0)) || (*(float *)(long_result + 0x294) != 0.0)) {
    uint_result = *(uint32_t *)(long_result + 0x28c);
    uint_result = *(uint32_t *)(long_result + 0x290);
    uint_result = *(uint32_t *)(long_result + 0x294);
    *(uint32_t *)(system_RBX + 0x2a8) = *(uint32_t *)(long_result + 0x288);
    *(uint32_t *)(system_RBX + 0x2ac) = uint_result;
    *(uint32_t *)(system_RBX + 0x2b0) = uint_result;
    *(uint32_t *)(system_RBX + 0x2b4) = uint_result;
  }
  if (((*(float *)(long_result + 0x298) != 0.0) || (*(float *)(long_result + 0x29c) != 0.0)) ||
     ((*(float *)(long_result + 0x2a0) != 0.0 || (*(float *)(long_result + 0x2a4) != 0.0)))) {
    uint_result = *(uint32_t *)(long_result + 0x29c);
    uint_result = *(uint32_t *)(long_result + 0x2a0);
    uint_result = *(uint32_t *)(long_result + 0x2a4);
    *(uint32_t *)(system_RBX + 0x2b8) = *(uint32_t *)(long_result + 0x298);
    *(uint32_t *)(system_RBX + 700) = uint_result;
    *(uint32_t *)(system_RBX + 0x2c0) = uint_result;
    *(uint32_t *)(system_RBX + 0x2c4) = uint_result;
  }
  *(uint16_t *)(long_result + 0x3c0) = 0xffff;
  InitializeNetworkSystem();
  if ((*(longlong *)(system_RBX + 600) == 0) &&
     ((*(uint *)(*(longlong *)(system_RBX + 0x1b8) + 0x388) >> NODE_INITIALIZED_OFFSET & 1) != 0)) {
    node_previous = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x58,8,9);
    *(uint64_t *)((longlong)node_previous + 0x2c) = 0xffffffffffffffff;
    *(uint32_t *)(node_previous + 9) = 0xffffffff;
    *node_previous = 0;
    node_previous[2] = 0;
    node_previous[7] = 0;
    *(uint32_t *)(node_previous + 5) = 0xffffffff;
    *(uint32_t *)(node_previous + 4) = 0xffffffff;
    node_previous[3] = 0;
    *(uint32_t *)(node_previous + 8) = 0;
    *(uint32_t *)(node_previous + 1) = 0;
    *(uint8_t *)((longlong)node_previous + 0x44) = 0;
    *(uint8_t *)((longlong)node_previous + 0x24) = 0;
    *(uint64_t **)(system_RBX + 600) = node_previous;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_8_9(float handleIdentifier,float resourceIdentifier,float systemConfig,float systemFlags)
void SystemFunction_8_9(float handleIdentifier,float resourceIdentifier,float systemConfig,float systemFlags)

{
  longlong long_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  char char_var;
  uint8_t uint_result;
  longlong in_RAX;
  uint64_t *node_previous;
  longlong in_RCX;
  uint uint_result;
  longlong system_RBX;
  bool bool_var;
  float float_result;
  float in_XMM4_Da;
  float in_XMM5_Da;
  float system_XMM8_Da;

  float_result = (*(float *)(in_RAX + 0x74) * resourceIdentifier - systemConfig * systemFlags) * *(float *)(in_RAX + 0x90);
  CalculateSystemValue(float_result,(systemConfig * in_XMM4_Da - handleIdentifier * resourceIdentifier) * *(float *)(in_RAX + 0x94)
                             + float_result +
                             (in_XMM5_Da * systemFlags - *(float *)(in_RAX + 0x74) * in_XMM4_Da) *
                             *(float *)(in_RAX + 0x98) < system_XMM8_Da);
  if (*(longlong *)(in_RCX + 0x1b8) == 0) {
LAB_1800782d4:
    bool_var = (*(byte *)(system_RBX + 0xfd) & 2) != 0;
  }
  else {
    uint_result = *(uint *)(*(longlong *)(in_RCX + 0x1b8) + 0x138);
    if ((uint_result & SYSTEM_NODE_HEADER_SIZE) != 0) {
      char_var = '\0';
      goto LAB_1800782e0;
    }
    if ((uint_result & SYSTEM_DATA_COMPARE_SIZE) == 0) goto LAB_1800782d4;
    bool_var = (*(byte *)(system_RBX + 0xfd) & 2) == 0;
  }
  char_var = bool_var + '\x01';
LAB_1800782e0:
  *(char *)(system_RBX + 0xff) = char_var;
  long_result = *(longlong *)(system_RBX + 0x1b8);
  uint_result = *(uint *)(long_result + 0x138) & 0x3000;
  uint_result = 0;
  if (uint_result == SYSTEM_DATA_COMPARE_SIZE00) {
    *(uint8_t *)(system_RBX + 0xf7) = 1;
  }
  else {
    if (uint_result == SYSTEM_NODE_HEADER_SIZE00) {
      uint_result = 2;
    }
    *(uint8_t *)(system_RBX + 0xf7) = uint_result;
  }
  if ((((system_XMM8_Da != *(float *)(long_result + 0x288)) || (system_XMM8_Da != *(float *)(long_result + 0x28c))
       ) || (system_XMM8_Da != *(float *)(long_result + 0x290))) ||
     (system_XMM8_Da != *(float *)(long_result + 0x294))) {
    uint_result = *(uint32_t *)(long_result + 0x28c);
    uint_result = *(uint32_t *)(long_result + 0x290);
    uint_result = *(uint32_t *)(long_result + 0x294);
    *(uint32_t *)(system_RBX + 0x2a8) = *(uint32_t *)(long_result + 0x288);
    *(uint32_t *)(system_RBX + 0x2ac) = uint_result;
    *(uint32_t *)(system_RBX + 0x2b0) = uint_result;
    *(uint32_t *)(system_RBX + 0x2b4) = uint_result;
  }
  if (((system_XMM8_Da != *(float *)(long_result + 0x298)) || (system_XMM8_Da != *(float *)(long_result + 0x29c)))
     || ((system_XMM8_Da != *(float *)(long_result + 0x2a0) || (system_XMM8_Da != *(float *)(long_result + 0x2a4))
         ))) {
    uint_result = *(uint32_t *)(long_result + 0x29c);
    uint_result = *(uint32_t *)(long_result + 0x2a0);
    uint_result = *(uint32_t *)(long_result + 0x2a4);
    *(uint32_t *)(system_RBX + 0x2b8) = *(uint32_t *)(long_result + 0x298);
    *(uint32_t *)(system_RBX + 700) = uint_result;
    *(uint32_t *)(system_RBX + 0x2c0) = uint_result;
    *(uint32_t *)(system_RBX + 0x2c4) = uint_result;
  }
  *(uint16_t *)(long_result + 0x3c0) = 0xffff;
  InitializeNetworkSystem();
  if ((*(longlong *)(system_RBX + 600) == 0) &&
     ((*(uint *)(*(longlong *)(system_RBX + 0x1b8) + 0x388) >> NODE_INITIALIZED_OFFSET & 1) != 0)) {
    node_previous = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x58,8,9);
    *(uint64_t *)((longlong)node_previous + 0x2c) = 0xffffffffffffffff;
    *(uint32_t *)(node_previous + 9) = 0xffffffff;
    *node_previous = 0;
    node_previous[2] = 0;
    node_previous[7] = 0;
    *(uint32_t *)(node_previous + 5) = 0xffffffff;
    *(uint32_t *)(node_previous + 4) = 0xffffffff;
    node_previous[3] = 0;
    *(uint32_t *)(node_previous + 8) = 0;
    *(uint32_t *)(node_previous + 1) = 0;
    *(uint8_t *)((longlong)node_previous + 0x44) = 0;
    *(uint8_t *)((longlong)node_previous + 0x24) = 0;
    *(uint64_t **)(system_RBX + 600) = node_previous;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemLogger(longlong handleIdentifier)
void InitializeSystemLogger(longlong handleIdentifier)

{
  longlong long_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  char char_var;
  uint8_t uint_result;
  uint64_t *node_previous;
  uint uint_result;
  longlong system_RBX;
  bool bool_var;
  float system_XMM8_Da;

  if (*(longlong *)(handleIdentifier + 0x1b8) == 0) {
LAB_1800782d4:
    bool_var = (*(byte *)(system_RBX + 0xfd) & 2) != 0;
  }
  else {
    uint_result = *(uint *)(*(longlong *)(handleIdentifier + 0x1b8) + 0x138);
    if ((uint_result & SYSTEM_NODE_HEADER_SIZE) != 0) {
      char_var = '\0';
      goto LAB_1800782e0;
    }
    if ((uint_result & SYSTEM_DATA_COMPARE_SIZE) == 0) goto LAB_1800782d4;
    bool_var = (*(byte *)(system_RBX + 0xfd) & 2) == 0;
  }
  char_var = bool_var + '\x01';
LAB_1800782e0:
  *(char *)(system_RBX + 0xff) = char_var;
  long_result = *(longlong *)(system_RBX + 0x1b8);
  uint_result = *(uint *)(long_result + 0x138) & 0x3000;
  uint_result = 0;
  if (uint_result == SYSTEM_DATA_COMPARE_SIZE00) {
    *(uint8_t *)(system_RBX + 0xf7) = 1;
  }
  else {
    if (uint_result == SYSTEM_NODE_HEADER_SIZE00) {
      uint_result = 2;
    }
    *(uint8_t *)(system_RBX + 0xf7) = uint_result;
  }
  if ((((system_XMM8_Da != *(float *)(long_result + 0x288)) || (system_XMM8_Da != *(float *)(long_result + 0x28c))
       ) || (system_XMM8_Da != *(float *)(long_result + 0x290))) ||
     (system_XMM8_Da != *(float *)(long_result + 0x294))) {
    uint_result = *(uint32_t *)(long_result + 0x28c);
    uint_result = *(uint32_t *)(long_result + 0x290);
    uint_result = *(uint32_t *)(long_result + 0x294);
    *(uint32_t *)(system_RBX + 0x2a8) = *(uint32_t *)(long_result + 0x288);
    *(uint32_t *)(system_RBX + 0x2ac) = uint_result;
    *(uint32_t *)(system_RBX + 0x2b0) = uint_result;
    *(uint32_t *)(system_RBX + 0x2b4) = uint_result;
  }
  if (((system_XMM8_Da != *(float *)(long_result + 0x298)) || (system_XMM8_Da != *(float *)(long_result + 0x29c)))
     || ((system_XMM8_Da != *(float *)(long_result + 0x2a0) || (system_XMM8_Da != *(float *)(long_result + 0x2a4))
         ))) {
    uint_result = *(uint32_t *)(long_result + 0x29c);
    uint_result = *(uint32_t *)(long_result + 0x2a0);
    uint_result = *(uint32_t *)(long_result + 0x2a4);
    *(uint32_t *)(system_RBX + 0x2b8) = *(uint32_t *)(long_result + 0x298);
    *(uint32_t *)(system_RBX + 700) = uint_result;
    *(uint32_t *)(system_RBX + 0x2c0) = uint_result;
    *(uint32_t *)(system_RBX + 0x2c4) = uint_result;
  }
  *(uint16_t *)(long_result + 0x3c0) = 0xffff;
  InitializeNetworkSystem();
  if ((*(longlong *)(system_RBX + 600) == 0) &&
     ((*(uint *)(*(longlong *)(system_RBX + 0x1b8) + 0x388) >> NODE_INITIALIZED_OFFSET & 1) != 0)) {
    node_previous = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x58,8,9);
    *(uint64_t *)((longlong)node_previous + 0x2c) = 0xffffffffffffffff;
    *(uint32_t *)(node_previous + 9) = 0xffffffff;
    *node_previous = 0;
    node_previous[2] = 0;
    node_previous[7] = 0;
    *(uint32_t *)(node_previous + 5) = 0xffffffff;
    *(uint32_t *)(node_previous + 4) = 0xffffffff;
    node_previous[3] = 0;
    *(uint32_t *)(node_previous + 8) = 0;
    *(uint32_t *)(node_previous + 1) = 0;
    *(uint8_t *)((longlong)node_previous + 0x44) = 0;
    *(uint8_t *)((longlong)node_previous + 0x24) = 0;
    *(uint64_t **)(system_RBX + 600) = node_previous;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode18(void)
void InitializeSystemDataNode18(void)

{
  uint64_t *ptr_uint_var;
  longlong system_RBX;
  uint64_t system_RDI;

  if ((*(uint *)(*(longlong *)(system_RBX + 0x1b8) + 0x388) >> NODE_INITIALIZED_OFFSET & 1) != 0) {
    ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x58,8,9);
    *(uint64_t *)((longlong)ptr_uint_var + 0x2c) = 0xffffffffffffffff;
    *(uint32_t *)(ptr_uint_var + 9) = 0xffffffff;
    *ptr_uint_var = system_RDI;
    ptr_uint_var[2] = system_RDI;
    ptr_uint_var[7] = system_RDI;
    *(uint32_t *)(ptr_uint_var + 5) = 0xffffffff;
    *(uint32_t *)(ptr_uint_var + 4) = 0xffffffff;
    ptr_uint_var[3] = system_RDI;
    *(int *)(ptr_uint_var + 8) = (int)system_RDI;
    *(int *)(ptr_uint_var + 1) = (int)system_RDI;
    *(char *)((longlong)ptr_uint_var + 0x44) = (char)system_RDI;
    *(char *)((longlong)ptr_uint_var + 0x24) = (char)system_RDI;
    *(uint64_t **)(system_RBX + 600) = ptr_uint_var;
  }
  return;
}

uint64_t * InitializeSecuritySystem(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  *handleIdentifier = &g_system_global_variable8;
  SystemFunction_88_0();
  ValidateSystemHandle(handleIdentifier + 1,8,7,InitializeNetworkSystem,uint_result);
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0x158);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_88_0(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void SystemFunction_88_0(uint64_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong *long_ptr;
  longlong *long_ptr;
  longlong long_result;
  uint32_t uint_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  if (0 < *(int *)(systemCoreData + 0x40)) {
    handleIdentifier[0x26] = *(uint64_t *)(systemCoreData + 0x38);
  }
  long_ptr = handleIdentifier + 1;
  long_result = 7;
  do {
    long_ptr = (longlong *)*long_ptr;
    *long_ptr = 0;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))();
    }
    long_ptr = long_ptr + 1;
    long_result = long_result + -1;
  } while (long_result != 0);
  handleIdentifier[SYSTEM_NODE_HEADER_SIZE] = 0x3f8000003f800000;
  handleIdentifier[0x21] = 0x3f8000003f800000;
  handleIdentifier[0x22] = 0;
  *(uint32_t *)(handleIdentifier + 0x23) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x11c) = 0x3f800000;
  handleIdentifier[0x24] = 0x3f800000;
  *(uint32_t *)(handleIdentifier + 0x25) = 0;
  *(uint64_t *)((longlong)handleIdentifier + 0x13c) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x144) = 0;
  *(uint32_t *)(handleIdentifier + 0x29) = 0x3f800000;
  *(uint32_t *)((longlong)handleIdentifier + 0x14c) = 0x3f800000;
  *(uint16_t *)(handleIdentifier + 0x2a) = 0;
  *(uint8_t *)((longlong)handleIdentifier + 0x152) = 1;
  *(uint32_t *)(handleIdentifier + 0x27) = 0;
  handleIdentifier[8] = 0x3f800000;
  handleIdentifier[9] = 0;
  handleIdentifier[10] = 0x3f80000000000000;
  handleIdentifier[0xb] = 0;
  *(uint32_t *)(handleIdentifier + 0xc) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 100) = 0;
  *(uint32_t *)(handleIdentifier + 0xd) = 0x3f800000;
  *(uint32_t *)((longlong)handleIdentifier + 0x6c) = 0;
  *(uint32_t *)(handleIdentifier + 0xe) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x74) = 0;
  *(uint32_t *)(handleIdentifier + 0xf) = 0;
  *(uint32_t *)((longlong)handleIdentifier + 0x7c) = 0x3f800000;
  if ((void *)*handleIdentifier == &g_system_global_variable8) {
    handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] = handleIdentifier[8];
    handleIdentifier[0x11] = handleIdentifier[9];
    handleIdentifier[0x12] = handleIdentifier[10];
    handleIdentifier[0x13] = handleIdentifier[0xb];
    *(uint32_t *)(handleIdentifier + 0x14) = *(uint32_t *)(handleIdentifier + 0xc);
    *(uint32_t *)((longlong)handleIdentifier + 0xa4) = *(uint32_t *)((longlong)handleIdentifier + 100);
    *(uint32_t *)(handleIdentifier + 0x15) = *(uint32_t *)(handleIdentifier + 0xd);
    *(uint32_t *)((longlong)handleIdentifier + 0xac) = *(uint32_t *)((longlong)handleIdentifier + 0x6c);
    *(uint32_t *)(handleIdentifier + 0x16) = *(uint32_t *)(handleIdentifier + 0xe);
    *(uint32_t *)((longlong)handleIdentifier + 0xb4) = *(uint32_t *)((longlong)handleIdentifier + 0x74);
    *(uint32_t *)(handleIdentifier + 0x17) = *(uint32_t *)(handleIdentifier + 0xf);
    *(uint32_t *)((longlong)handleIdentifier + 0xbc) = *(uint32_t *)((longlong)handleIdentifier + 0x7c);
    uint_result = InitializeSystemProfiler();
    *(uint32_t *)((longlong)handleIdentifier + 0x8c) = 0;
    *(uint32_t *)((longlong)handleIdentifier + 0x9c) = 0;
    *(uint32_t *)((longlong)handleIdentifier + 0xac) = 0;
    *(uint32_t *)((longlong)handleIdentifier + 0xbc) = 0x3f800000;
    InitializeSystemDataNode31(uint_result,handleIdentifier + 0x18);
  }
  else {
    (**(code **)((void *)*handleIdentifier + SYSTEM_DATA_COMPARE_SIZE))(handleIdentifier,0,systemConfig,systemFlags,uint_result);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule41(uint64_t *handleIdentifier,longlong resourceIdentifier)
void InitializeSystemModule41(uint64_t *handleIdentifier,longlong resourceIdentifier)

{
  longlong long_result;
  uint32_t uint_result;
  longlong *long_ptr;
  uint64_t uint_result;
  float *ptr_float_var;
  void *node_current;
  longlong long_result;
  longlong *long_ptr;
  int int_result;
  float float_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  longlong *stack_long_ptr;
  uint64_t localBuffer_X10 [2];
  uint64_t ustack_var;
  uint64_t uintStack_58;
  uint64_t uintStack_50;
  uint32_t uintStack_40;

  int_result = 0;
  long_ptr = handleIdentifier + 1;
  do {
    long_ptr = (longlong *)EngineFunctionfd480(resourceIdentifier,int_result);
    if (long_ptr != (longlong *)0x0) {
      stack_long_ptr = long_ptr;
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    stack_long_ptr = (longlong *)*long_ptr;
    *long_ptr = (longlong)long_ptr;
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
    if ((((*(char *)(resourceIdentifier + 0x380) != '\0') && (*(char *)(resourceIdentifier + 0x381) == '\0')) &&
        (long_result = *long_ptr, long_result != 0)) && ((*(uint *)(long_result + 0x328) & SYSTEM_NODE_HEADER_SIZE0000) == 0)) {
      node_current = &g_system_data_variable3;
      if (*(void **)(long_result + 0x18) != (void *)0x0) {
        node_current = *(void **)(long_result + 0x18);
      }
      ProcessSystemDataHeader(&globalSystemVariable,node_current);
    }
    int_result = int_result + 1;
    long_ptr = long_ptr + 1;
  } while (int_result < 7);
  uint_result = EngineFunctionfc6c0(resourceIdentifier,&uintStack_58);
  long_result = systemCoreData;
  int_result = EngineFunction91c00(systemCoreData,uint_result);
  if ((int_result == -1) || (long_result = (longlong)int_result * 0x68 + *(longlong *)(long_result + 0x38), long_result == 0)) {
    long_result = *(longlong *)(long_result + 0x28);
  }
  uintStack_58 = &resourcePoolPointer;
  if (uintStack_50 != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  uintStack_50 = 0;
  uintStack_40 = 0;
  uintStack_58 = &globalSystemPointerData;
  if (long_result == 0) {
    long_result = *(longlong *)(systemCoreData + 0x38);
  }
  handleIdentifier[0x26] = long_result;
  if ((*(char *)(resourceIdentifier + 0x248) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule1();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x240);
  }
  *(uint32_t *)((longlong)handleIdentifier + 0x114) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x254) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule2();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x24c);
  }
  *(uint32_t *)(handleIdentifier + 0x23) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x2f0) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    EngineFunctionfca40(*(longlong *)(resourceIdentifier + 0x3c8),&uintStack_58);
    uint_result = (uint32_t)uintStack_58;
    uint_result = uintStack_58._4_4_;
    uint_result = (uint32_t)uintStack_50;
    uint_result = uintStack_50._4_4_;
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2d0);
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2d4);
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2d8);
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2dc);
  }
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE) = uint_result;
  *(uint32_t *)((longlong)handleIdentifier + SYSTEM_DATA_COMPARE_SIZE4) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x21) = uint_result;
  *(uint32_t *)((longlong)handleIdentifier + SYSTEM_DATA_COMPARE_SIZEc) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x2fc) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule3();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2f4);
  }
  *(uint32_t *)(handleIdentifier + 0x22) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x260) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule4();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 600);
  }
  *(uint32_t *)((longlong)handleIdentifier + 0x11c) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x26c) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule5();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x264);
  }
  *(uint32_t *)(handleIdentifier + 0x24) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x278) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule6();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x270);
  }
  *(uint32_t *)((longlong)handleIdentifier + 0x124) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x284) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule7();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x27c);
  }
  *(uint32_t *)(handleIdentifier + 0x25) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x290) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule8();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x288);
  }
  *(uint32_t *)(handleIdentifier + 0x27) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x29c) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule9();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x294);
  }
  *(uint32_t *)((longlong)handleIdentifier + 0x13c) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x2a8) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule10();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2a0);
  }
  *(uint32_t *)(handleIdentifier + 0x28) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x2b4) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule11();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2ac);
  }
  *(uint32_t *)((longlong)handleIdentifier + 0x144) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x2c0) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule12();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2b8);
  }
  *(uint32_t *)(handleIdentifier + 0x29) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x2cc) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule13();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x2c4);
  }
  *(uint32_t *)((longlong)handleIdentifier + 0x14c) = uint_result;
  if ((*(char *)(resourceIdentifier + 0x29c) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    uint_result = InitializeModule9();
  }
  else {
    uint_result = *(uint32_t *)(resourceIdentifier + 0x294);
  }
  *(uint32_t *)((longlong)handleIdentifier + 0x13c) = uint_result;
  *(uint8_t *)((longlong)handleIdentifier + 0x152) = *(uint8_t *)(resourceIdentifier + 0x380);
  *(uint8_t *)(handleIdentifier + 0x2a) = *(uint8_t *)(resourceIdentifier + 0x381);
  if ((*(char *)(resourceIdentifier + 0x35c) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    EngineFunctionfc9f0(*(longlong *)(resourceIdentifier + 0x3c8),&stack_long_ptr);
  }
  else {
    stack_long_ptr = *(longlong **)(resourceIdentifier + 0x34c);
  }
  if ((*(char *)(resourceIdentifier + 0x348) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    EngineFunctionfc9a0(*(longlong *)(resourceIdentifier + 0x3c8),localBuffer_X10);
  }
  else {
    localBuffer_X10[0] = *(uint64_t *)(resourceIdentifier + 0x338);
  }
  if ((*(char *)(resourceIdentifier + 0x334) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    EngineFunctionfc950(*(longlong *)(resourceIdentifier + 0x3c8),&ustack_var);
  }
  else {
    ustack_var = *(uint64_t *)(resourceIdentifier + 0x324);
  }
  if ((*(char *)(resourceIdentifier + 800) == '\0') && (*(longlong *)(resourceIdentifier + 0x3c8) != 0)) {
    EngineFunctionfc900(*(longlong *)(resourceIdentifier + 0x3c8),&uintStack_58);
  }
  else {
    uintStack_58 = *(void **)(resourceIdentifier + 0x300);
    uintStack_50 = *(uint64_t *)(resourceIdentifier + 0x308);
  }
  InitializeSystemModule19(handleIdentifier + 8,&uintStack_58,&ustack_var,localBuffer_X10,&stack_long_ptr);
  if ((void *)*handleIdentifier == &g_system_global_variable8) {
    ptr_float_var = (float *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    *(uint64_t *)ptr_float_var = handleIdentifier[8];
    handleIdentifier[0x11] = handleIdentifier[9];
    handleIdentifier[0x12] = handleIdentifier[10];
    handleIdentifier[0x13] = handleIdentifier[0xb];
    *(uint32_t *)(handleIdentifier + 0x14) = *(uint32_t *)(handleIdentifier + 0xc);
    *(uint32_t *)((longlong)handleIdentifier + 0xa4) = *(uint32_t *)((longlong)handleIdentifier + 100);
    *(uint32_t *)(handleIdentifier + 0x15) = *(uint32_t *)(handleIdentifier + 0xd);
    *(uint32_t *)((longlong)handleIdentifier + 0xac) = *(uint32_t *)((longlong)handleIdentifier + 0x6c);
    *(uint32_t *)(handleIdentifier + 0x16) = *(uint32_t *)(handleIdentifier + 0xe);
    *(uint32_t *)((longlong)handleIdentifier + 0xb4) = *(uint32_t *)((longlong)handleIdentifier + 0x74);
    *(uint32_t *)(handleIdentifier + 0x17) = *(uint32_t *)(handleIdentifier + 0xf);
    *(uint32_t *)((longlong)handleIdentifier + 0xbc) = *(uint32_t *)((longlong)handleIdentifier + 0x7c);
    InitializeSystemProfiler();
    *(uint32_t *)((longlong)handleIdentifier + 0x8c) = 0;
    *(uint32_t *)((longlong)handleIdentifier + 0x9c) = 0;
    *(uint32_t *)((longlong)handleIdentifier + 0xac) = 0;
    *(uint32_t *)((longlong)handleIdentifier + 0xbc) = 0x3f800000;
    float_result = ptr_float_var[6];
    float_result = ptr_float_var[0xd];
    float_result = ptr_float_var[9];
    float_result = ptr_float_var[1];
    float_result = ptr_float_var[0xe];
    float_result = ptr_float_var[2];
    float_result = ptr_float_var[10];
    float_result = ptr_float_var[5];
    float_result = float_result * float_result - float_result * float_result;
    float_result = float_result * float_result - float_result * float_result;
    float_result = float_result * float_result - float_result * float_result;
    float_result = float_result * float_result - float_result * float_result;
    float_result = float_result * float_result - float_result * float_result;
    *(float *)(handleIdentifier + 0x18) = float_result;
    float_result = float_result * float_result - float_result * float_result;
    float_result = float_result * ptr_float_var[9] - float_result * ptr_float_var[1];
    *(float *)((longlong)handleIdentifier + 0xc4) = float_result;
    float_result = ptr_float_var[5];
    float_result = ptr_float_var[1];
    *(uint32_t *)((longlong)handleIdentifier + 0xcc) = 0;
    float_result = float_result * float_result - float_result * float_result;
    *(float *)(handleIdentifier + NODE_INITIALIZED_OFFSET) = float_result;
    float_result = float_result * ptr_float_var[8] - float_result * ptr_float_var[4];
    *(float *)(handleIdentifier + 0x1a) = float_result;
    float_result = float_result * *ptr_float_var - float_result * ptr_float_var[8];
    *(float *)((longlong)handleIdentifier + 0xd4) = float_result;
    float_result = ptr_float_var[4];
    float_result = *ptr_float_var;
    *(uint32_t *)((longlong)handleIdentifier + 0xdc) = 0;
    float_result = float_result * float_result - float_result * float_result;
    *(float *)(handleIdentifier + 0x1b) = float_result;
    float_result = float_result * ptr_float_var[4] - float_result * ptr_float_var[8];
    *(float *)(handleIdentifier + 0x1c) = float_result;
    float_result = float_result * ptr_float_var[8] - float_result * *ptr_float_var;
    *(float *)((longlong)handleIdentifier + 0xe4) = float_result;
    float_result = ptr_float_var[4];
    float_result = *ptr_float_var;
    *(uint32_t *)((longlong)handleIdentifier + 0xec) = 0;
    float_result = float_result * float_result - float_result * float_result;
    *(float *)(handleIdentifier + 0x1d) = float_result;
    float_result = (float_result * ptr_float_var[8] - float_result * ptr_float_var[4]) - float_result * ptr_float_var[0xc];
    *(float *)(handleIdentifier + 0x1e) = float_result;
    float_result = (float_result * *ptr_float_var - float_result * ptr_float_var[8]) + float_result * ptr_float_var[0xc];
    *(float *)((longlong)handleIdentifier + 0xf4) = float_result;
    float_result = (float_result * ptr_float_var[4] - float_result * *ptr_float_var) - float_result * ptr_float_var[0xc];
    *(float *)(handleIdentifier + 0x1f) = float_result;
    float_result = (float_result * *ptr_float_var - float_result * ptr_float_var[4]) + float_result * ptr_float_var[8];
    *(float *)((longlong)handleIdentifier + 0xfc) = float_result;
    float_result = float_result * ptr_float_var[4] + float_result * *ptr_float_var + float_result * ptr_float_var[8];
    if (float_result != 1.0) {
      float_result = 1.0 / float_result;
      *(float *)(handleIdentifier + 0x1a) = float_result * float_result;
      *(float *)(handleIdentifier + 0x1c) = float_result * float_result;
      *(float *)(handleIdentifier + 0x18) = float_result * float_result;
      *(float *)((longlong)handleIdentifier + 0xc4) = float_result * float_result;
      *(float *)(handleIdentifier + NODE_INITIALIZED_OFFSET) = float_result * float_result;
      *(float *)((longlong)handleIdentifier + 0xd4) = float_result * float_result;
      *(float *)(handleIdentifier + 0x1b) = float_result * float_result;
      *(float *)((longlong)handleIdentifier + 0xe4) = float_result * float_result;
      *(float *)(handleIdentifier + 0x1d) = float_result * float_result;
      *(float *)(handleIdentifier + 0x1e) = float_result * float_result;
      *(float *)((longlong)handleIdentifier + 0xf4) = float_result * float_result;
      *(float *)(handleIdentifier + 0x1f) = float_result * float_result;
      *(float *)((longlong)handleIdentifier + 0xfc) = float_result * float_result;
    }
    return;
  }
  (**(code **)((void *)*handleIdentifier + SYSTEM_DATA_COMPARE_SIZE))(handleIdentifier);
  return;
}
// void InitializeFilesystemSystem(longlong handleIdentifier)

void InitializeFilesystemSystem(longlong handleIdentifier)

{
  float *ptr_float_var;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;

  ptr_float_var = (float *)(handleIdentifier + 0x80);
  *(uint64_t *)ptr_float_var = *(uint64_t *)(handleIdentifier + 0x40);
  *(uint64_t *)(handleIdentifier + 0x88) = *(uint64_t *)(handleIdentifier + 0x48);
  *(uint64_t *)(handleIdentifier + 0x90) = *(uint64_t *)(handleIdentifier + 0x50);
  *(uint64_t *)(handleIdentifier + 0x98) = *(uint64_t *)(handleIdentifier + 0x58);
  *(uint32_t *)(handleIdentifier + 0xa0) = *(uint32_t *)(handleIdentifier + 0x60);
  *(uint32_t *)(handleIdentifier + 0xa4) = *(uint32_t *)(handleIdentifier + 100);
  *(uint32_t *)(handleIdentifier + 0xa8) = *(uint32_t *)(handleIdentifier + 0x68);
  *(uint32_t *)(handleIdentifier + 0xac) = *(uint32_t *)(handleIdentifier + 0x6c);
  *(uint32_t *)(handleIdentifier + 0xb0) = *(uint32_t *)(handleIdentifier + 0x70);
  *(uint32_t *)(handleIdentifier + 0xb4) = *(uint32_t *)(handleIdentifier + 0x74);
  *(uint32_t *)(handleIdentifier + 0xb8) = *(uint32_t *)(handleIdentifier + 0x78);
  *(uint32_t *)(handleIdentifier + 0xbc) = *(uint32_t *)(handleIdentifier + 0x7c);
  InitializeSystemProfiler();
  *(uint32_t *)(handleIdentifier + 0xbc) = 0x3f800000;
  *(uint32_t *)(handleIdentifier + 0x8c) = 0;
  *(uint32_t *)(handleIdentifier + 0x9c) = 0;
  *(uint32_t *)(handleIdentifier + 0xac) = 0;
  float_result = ptr_float_var[6];
  float_result = ptr_float_var[0xd];
  float_result = ptr_float_var[9];
  float_result = ptr_float_var[1];
  float_result = ptr_float_var[0xe];
  float_result = ptr_float_var[2];
  float_result = ptr_float_var[10];
  float_result = ptr_float_var[5];
  float_result = float_result * float_result - float_result * float_result;
  float_result = float_result * float_result - float_result * float_result;
  float_result = float_result * float_result - float_result * float_result;
  float_result = float_result * float_result - float_result * float_result;
  float_result = float_result * float_result - float_result * float_result;
  *(float *)(handleIdentifier + 0xc0) = float_result;
  float_result = float_result * float_result - float_result * float_result;
  float_result = float_result * ptr_float_var[9] - float_result * ptr_float_var[1];
  *(float *)(handleIdentifier + 0xc4) = float_result;
  float_result = ptr_float_var[5];
  float_result = ptr_float_var[1];
  *(uint32_t *)(handleIdentifier + 0xcc) = 0;
  float_result = float_result * float_result - float_result * float_result;
  *(float *)(handleIdentifier + 200) = float_result;
  float_result = float_result * ptr_float_var[8] - float_result * ptr_float_var[4];
  *(float *)(handleIdentifier + 0xd0) = float_result;
  float_result = float_result * *ptr_float_var - float_result * ptr_float_var[8];
  *(float *)(handleIdentifier + 0xd4) = float_result;
  float_result = ptr_float_var[4];
  float_result = *ptr_float_var;
  *(uint32_t *)(handleIdentifier + 0xdc) = 0;
  float_result = float_result * float_result - float_result * float_result;
  *(float *)(handleIdentifier + 0xd8) = float_result;
  float_result = float_result * ptr_float_var[4] - float_result * ptr_float_var[8];
  *(float *)(handleIdentifier + 0xe0) = float_result;
  float_result = float_result * ptr_float_var[8] - float_result * *ptr_float_var;
  *(float *)(handleIdentifier + 0xe4) = float_result;
  float_result = ptr_float_var[4];
  float_result = *ptr_float_var;
  *(uint32_t *)(handleIdentifier + 0xec) = 0;
  float_result = float_result * float_result - float_result * float_result;
  *(float *)(handleIdentifier + 0xe8) = float_result;
  float_result = (float_result * ptr_float_var[8] - float_result * ptr_float_var[4]) - float_result * ptr_float_var[0xc];
  *(float *)(handleIdentifier + 0xf0) = float_result;
  float_result = (float_result * *ptr_float_var - float_result * ptr_float_var[8]) + float_result * ptr_float_var[0xc];
  *(float *)(handleIdentifier + 0xf4) = float_result;
  float_result = (float_result * ptr_float_var[4] - float_result * *ptr_float_var) - float_result * ptr_float_var[0xc];
  *(float *)(handleIdentifier + 0xf8) = float_result;
  float_result = (float_result * *ptr_float_var - float_result * ptr_float_var[4]) + float_result * ptr_float_var[8];
  *(float *)(handleIdentifier + 0xfc) = float_result;
  float_result = float_result * ptr_float_var[4] + float_result * *ptr_float_var + float_result * ptr_float_var[8];
  if (float_result != 1.0) {
    float_result = 1.0 / float_result;
    *(float *)(handleIdentifier + 0xd0) = float_result * float_result;
    *(float *)(handleIdentifier + 0xe0) = float_result * float_result;
    *(float *)(handleIdentifier + 0xc0) = float_result * float_result;
    *(float *)(handleIdentifier + 0xc4) = float_result * float_result;
    *(float *)(handleIdentifier + 200) = float_result * float_result;
    *(float *)(handleIdentifier + 0xd4) = float_result * float_result;
    *(float *)(handleIdentifier + 0xd8) = float_result * float_result;
    *(float *)(handleIdentifier + 0xe4) = float_result * float_result;
    *(float *)(handleIdentifier + 0xe8) = float_result * float_result;
    *(float *)(handleIdentifier + 0xf0) = float_result * float_result;
    *(float *)(handleIdentifier + 0xf4) = float_result * float_result;
    *(float *)(handleIdentifier + 0xf8) = float_result * float_result;
    *(float *)(handleIdentifier + 0xfc) = float_result * float_result;
  }
  return;
}
// void InitializeSystemModule9(uint32_t *handleIdentifier,longlong *resourceIdentifier)

void InitializeSystemModule9(uint32_t *handleIdentifier,longlong *resourceIdentifier)

{
  uint32_t uint_result;
  uint32_t *node_root;

  uint_result = *handleIdentifier;
  node_root = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[2];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[3];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = 0x3f800000;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[5];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[6];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[7];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = 0x3f800000;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[9];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[10];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0xb];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = 0x3f800000;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0xd];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0xe];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0xf];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = 0x3f800000;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0x11];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0x12];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0x13];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0x14];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0x15];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    node_root = (uint32_t *)resourceIdentifier[1];
  }
  *node_root = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  node_root = (uint32_t *)resourceIdentifier[1];
  uint_result = handleIdentifier[0x16];
  if ((ulonglong)((*resourceIdentifier - (longlong)node_root) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)node_root + (4 - *resourceIdentifier));
    *(uint32_t *)resourceIdentifier[1] = uint_result;
  }
  else {
    *node_root = uint_result;
  }
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  return;
}
// void InitializeAuthenticationSystem(longlong handleIdentifier)

void InitializeAuthenticationSystem(longlong handleIdentifier)

{
  longlong long_result;
  longlong long_result;
  byte bool_var;

  long_result = *(longlong *)(handleIdentifier + 0x210);
  *(uint32_t *)(handleIdentifier + 0x1f8) = *(uint32_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE);
  *(uint32_t *)(handleIdentifier + 0x1fc) = *(uint32_t *)(long_result + 0x88);
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0) = *(uint32_t *)(long_result + 0x60);
  bool_var = *(byte *)(handleIdentifier + 0xfd) & 0x40;
  if ((((bool_var != 0) && (long_result != 0)) || (*(longlong *)(handleIdentifier + 0x1b0) == 0)) ||
     (long_result = InitializeResourceSystem(), handleIdentifier == long_result)) {
    *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE4) = *(uint32_t *)(long_result + 200);
  }
  if (((bool_var == 0) || (long_result == 0)) &&
     ((*(longlong *)(handleIdentifier + 0x1b0) != 0 && (long_result = InitializeResourceSystem(), handleIdentifier != long_result)))) {
    return;
  }
  *(uint *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE8) = (uint)*(ushort *)(long_result + 0xc0);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeAudioMutex(longlong handleIdentifier,longlong resourceIdentifier)
void InitializeAudioMutex(longlong handleIdentifier,longlong resourceIdentifier)

{
  longlong *long_ptr;
  int *ptr_int_var;
  longlong *long_ptr;
  byte *ptr_byte_var;
  uint64_t *ptr_uint_var;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint8_t uint_result;
  char is_initialized6;
  longlong long_result;
  float *ptr_float_var;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint32_t uint_result;
  longlong long_result;
  longlong *long_ptr;
  longlong long_result;
  uint uint_result;
  int compare_result7;
  uint uint_result;
  int compare_result9;
  ulonglong uint_result;
  char *ptr_char_var;
  uint *ptr_uint_var;
  int int_result;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  bool system_pointer_flag;

  long_result = systemCoreData;
  long_result = handleIdentifier;
  if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  LOCK();
  ptr_int_var = (int *)(long_result + 0xed8);
  int_result = *ptr_int_var;
  *ptr_int_var = *ptr_int_var + *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0);
  UNLOCK();
  long_result = *(longlong *)(handleIdentifier + 600);
  uint_result = *(uint8_t *)(resourceIdentifier + 0x24);
  uint_result = *(uint32_t *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE);
  is_initialized6 = *(char *)(resourceIdentifier + 0xd);
  *(uint32_t *)(long_result + 0x48) = *(uint32_t *)(long_result + 0x2c);
  *(uint32_t *)(long_result + 0x50) = *(uint32_t *)(long_result + 0x4c);
  *(int *)(long_result + 0x4c) = int_result;
  *(uint8_t *)(long_result + 0x44) = uint_result;
  *(uint32_t *)(long_result + 0x2c) = uint_result;
  if (is_initialized6 != -1) {
    uint_result = (int)*(char *)(resourceIdentifier + 0xd) + *(int *)(resourceIdentifier + 0x18);
    ptr_float_var = (float *)**(longlong **)(handleIdentifier + 600);
    uint_result = uint_result >> 0xd;
    long_result = *(longlong *)
              ((longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc30 +
              (ulonglong)uint_result * 8);
    long_result = (ulonglong)(uint_result + uint_result * -SYSTEM_NODE_HEADER_SIZE00) * 0x40;
    uint_result = ((uint64_t *)(long_result + long_result))[1];
    *(uint64_t *)ptr_float_var = *(uint64_t *)(long_result + long_result);
    *(uint64_t *)(ptr_float_var + 2) = uint_result;
    ptr_uint_var = (uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result);
    uint_result = ptr_uint_var[1];
    *(uint64_t *)(ptr_float_var + 4) = *ptr_uint_var;
    *(uint64_t *)(ptr_float_var + 6) = uint_result;
    ptr_uint_var = (uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE + long_result);
    uint_result = ptr_uint_var[1];
    *(uint64_t *)(ptr_float_var + 8) = *ptr_uint_var;
    *(uint64_t *)(ptr_float_var + 10) = uint_result;
    ptr_uint_var = (uint64_t *)(long_result + 0x30 + long_result);
    uint_result = ptr_uint_var[1];
    *(uint64_t *)(ptr_float_var + 0xc) = *ptr_uint_var;
    *(uint64_t *)(ptr_float_var + 0xe) = uint_result;
    long_result = *(longlong *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    float_result = ptr_float_var[8];
    float_result = ptr_float_var[9];
    float_result = ptr_float_var[10];
    float_result = ptr_float_var[0xb];
    float_result = *ptr_float_var;
    float_result = ptr_float_var[1];
    float_result = ptr_float_var[2];
    float_result = ptr_float_var[3];
    float_result = ptr_float_var[4];
    float_result = ptr_float_var[5];
    float_result = ptr_float_var[6];
    float_result = ptr_float_var[7];
    float_result = *(float *)(long_result + 0x374);
    float_result = *(float *)(long_result + 0x370);
    float_result = *(float *)(long_result + 0x378);
    float_result = *(float *)(long_result + 900);
    float_result = *(float *)(long_result + 0x394);
    float_result = *(float *)(long_result + 0x380);
    float_result = *(float *)(long_result + 0x388);
    float_result = *(float *)(long_result + 0x390);
    float_result = *(float *)(long_result + 0x398);
    *ptr_float_var = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[1] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[2] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[3] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[4] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[5] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[6] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[7] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[8] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[9] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[10] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[0xb] = float_result * float_result + float_result * float_result + float_result * float_result;
  }
  long_result = *(longlong *)(handleIdentifier + 600);
  if (*(int *)(long_result + 0x28) != *(int *)(g_system_base_1 + 0x224)) {
    int_result = *(int *)(long_result + 0x1c) + *(int *)(long_result + 0x18);
    *(int *)(long_result + 0x28) = *(int *)(g_system_base_1 + 0x224);
    if (0 < int_result) {
      long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
      uint_result = InitializeSystemModule39(long_result,int_result);
      *(uint32_t *)(long_result + 0x30) = uint_result;
      InitializeSystemDataNode26(long_result,uint_result);
      if (*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        if (*(int *)(long_result + 0x18) != 0) {
          *(uint32_t *)(long_result + 0x2c) = *(uint32_t *)(long_result + 0x30);
          return;
        }
      }
      else {
        is_initialized6 = *(char *)(long_result + 0x44);
        uint_result = (ulonglong)is_initialized6;
        long_ptr = (longlong *)(long_result + 0x38);
        int_result = (int)is_initialized6;
        if (*(int *)(long_result + 0x40) == (int)is_initialized6) {
          long_ptr = (longlong *)*long_ptr;
        }
        else {
          *(int *)(long_result + 0x40) = int_result;
          if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          *long_ptr = 0;
          if (is_initialized6 == '\0') {
            long_ptr = (longlong *)0x0;
            *long_ptr = 0;
          }
          else {
            long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)is_initialized6 * 4);
            *long_ptr = (longlong)long_ptr;
          }
        }
        if (long_ptr != (longlong *)0x0) {
          int_result = 0;
          uint_result = (uint)is_initialized6;
          int_result = int_result;
          if ((0 < int_result) && (0xf < uint_result)) {
            compare_result9 = *(int *)(long_result + 0x2c);
            long_ptr = (longlong *)((longlong)long_ptr + (longlong)(is_initialized6 + -1) * 4);
            if ((((longlong *)(long_result + 0x2c) < long_ptr) || (long_ptr < (longlong *)(long_result + 0x2c)))
               && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
              uint_result = uint_result & 0x8000000f;
              if ((int)uint_result < 0) {
                uint_result = (uint_result - 1 | 0xfffffff0) + 1;
              }
              long_ptr = long_ptr + 4;
              compare_result7 = 8;
              do {
                *(int *)(long_ptr + -4) = int_result + compare_result9;
                *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + compare_result9;
                *(int *)(long_ptr + -3) = int_result + 2 + compare_result9;
                *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + compare_result9;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                *(int *)(long_ptr + -2) = compare_result7 + -4 + compare_result9;
                *(int *)((longlong)long_ptr + -0xc) = compare_result7 + -3 + compare_result9;
                *(int *)(long_ptr + -1) = compare_result7 + -2 + compare_result9;
                *(int *)((longlong)long_ptr + -4) = compare_result7 + -1 + compare_result9;
                *(int *)long_ptr = compare_result7 + compare_result9;
                *(int *)((longlong)long_ptr + 4) = compare_result7 + 1 + compare_result9;
                *(int *)(long_ptr + 1) = compare_result7 + 2 + compare_result9;
                *(int *)((longlong)long_ptr + 0xc) = compare_result7 + 3 + compare_result9;
                *(int *)(long_ptr + 2) = compare_result7 + 4 + compare_result9;
                *(int *)((longlong)long_ptr + 0x14) = compare_result7 + 5 + compare_result9;
                *(int *)(long_ptr + 3) = compare_result7 + 6 + compare_result9;
                *(int *)((longlong)long_ptr + 0x1c) = compare_result7 + 7 + compare_result9;
                long_ptr = long_ptr + 8;
                compare_result7 = compare_result7 + SYSTEM_DATA_COMPARE_SIZE;
                int_result = int_result;
              } while (int_result < (int)(uint_result - uint_result));
            }
          }
          for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
            int_result = *(int *)(long_result + 0x2c) + int_result;
            int_result = int_result + 1;
            *(int *)(*long_ptr + long_result * 4) = int_result;
          }
          int_result = *(int *)(long_result + 0x18);
          int_result = 0;
          if (0 < (longlong)int_result) {
            long_result = 0;
            do {
              compare_result9 = *(int *)(long_result + 0x30) + int_result;
              int_result = int_result + 1;
              ptr_byte_var = (byte *)(*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) + long_result);
              long_result = long_result + 1;
              *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = compare_result9;
            } while (long_result < int_result);
          }
        }
        ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 +
                          systemCoreData + 0x9d0);
        if (int_result == 0) {
          uint_result = (int)is_initialized6 - 1;
        }
        else {
          LOCK();
          uint_result = *ptr_uint_var;
          *ptr_uint_var = *ptr_uint_var + (int)is_initialized6;
          UNLOCK();
          uint_result = (ulonglong)(uint_result >> 0xb);
          uint_result = (ulonglong)(is_initialized6 + -1 + uint_result >> 0xb);
          if (uint_result <= uint_result) {
            ptr_char_var = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
            long_result = (uint_result - uint_result) + 1;
            ptr_uint_var = ptr_uint_var + uint_result * 2 + 2;
            do {
              int_result = (int)uint_result;
              if (*(longlong *)ptr_uint_var == 0) {
                long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
                LOCK();
                system_validation_flag2 = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
                if (system_validation_flag2) {
                  *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
                }
                UNLOCK();
                if (system_validation_flag2) {
                  LOCK();
                  *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
                  UNLOCK();
                }
                else {
                  if (long_result != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  do {
                  } while (*ptr_char_var != '\0');
                }
              }
              else {
                do {
                } while (*ptr_char_var != '\0');
              }
              uint_result = (ulonglong)(int_result + 1);
              ptr_uint_var = ptr_uint_var + 2;
              ptr_char_var = ptr_char_var + 1;
              long_result = long_result + -1;
            } while (long_result != 0);
          }
        }
        ptr_uint_var = *(uint32_t **)(long_result + 0x38);
        uint_result = uint_result >> 0xb;
        *(uint *)(long_result + 0x2c) = uint_result;
        if (uint_result == (int)is_initialized6 + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
          memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
                 (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(uint_result & 0xffffffff) << 2);
        }
        if (int_result != 0) {
          uint_result = uint_result & 0xffffffff;
          do {
            uint_result = *ptr_uint_var;
            ptr_uint_var = ptr_uint_var + 1;
            *(uint32_t *)
             (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
             (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
            uint_result = uint_result - 1;
            uint_result = uint_result + 1;
          } while (uint_result != 0);
        }
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule55(longlong handleIdentifier)
void InitializeSystemModule55(longlong handleIdentifier)

{
  longlong *long_ptr;
  int *ptr_int_var;
  longlong *long_ptr;
  byte *ptr_byte_var;
  uint64_t *ptr_uint_var;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint8_t uint_result;
  char is_initialized6;
  longlong long_result;
  float *ptr_float_var;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint32_t uint_result;
  longlong long_result;
  longlong *long_ptr;
  longlong long_result;
  uint uint_result;
  int compare_result7;
  uint uint_result;
  int compare_result9;
  ulonglong uint_result;
  char *ptr_char_var;
  uint *ptr_uint_var;
  int int_result;
  longlong system_RDI;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  bool in_ZF;
  bool system_pointer_flag;

  long_result = systemCoreData;
  long_result = handleIdentifier;
  if (in_ZF) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  LOCK();
  ptr_int_var = (int *)(long_result + 0xed8);
  int_result = *ptr_int_var;
  *ptr_int_var = *ptr_int_var + *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0);
  UNLOCK();
  long_result = *(longlong *)(handleIdentifier + 600);
  uint_result = *(uint8_t *)(system_RDI + 0x24);
  uint_result = *(uint32_t *)(system_RDI + SYSTEM_NODE_HEADER_SIZE);
  is_initialized6 = *(char *)(system_RDI + 0xd);
  *(uint32_t *)(long_result + 0x48) = *(uint32_t *)(long_result + 0x2c);
  *(uint32_t *)(long_result + 0x50) = *(uint32_t *)(long_result + 0x4c);
  *(int *)(long_result + 0x4c) = int_result;
  *(uint8_t *)(long_result + 0x44) = uint_result;
  *(uint32_t *)(long_result + 0x2c) = uint_result;
  if (is_initialized6 != -1) {
    uint_result = (int)*(char *)(system_RDI + 0xd) + *(int *)(system_RDI + 0x18);
    ptr_float_var = (float *)**(longlong **)(handleIdentifier + 600);
    uint_result = uint_result >> 0xd;
    long_result = *(longlong *)
              ((longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc30 +
              (ulonglong)uint_result * 8);
    long_result = (ulonglong)(uint_result + uint_result * -SYSTEM_NODE_HEADER_SIZE00) * 0x40;
    uint_result = ((uint64_t *)(long_result + long_result))[1];
    *(uint64_t *)ptr_float_var = *(uint64_t *)(long_result + long_result);
    *(uint64_t *)(ptr_float_var + 2) = uint_result;
    ptr_uint_var = (uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result);
    uint_result = ptr_uint_var[1];
    *(uint64_t *)(ptr_float_var + 4) = *ptr_uint_var;
    *(uint64_t *)(ptr_float_var + 6) = uint_result;
    ptr_uint_var = (uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE + long_result);
    uint_result = ptr_uint_var[1];
    *(uint64_t *)(ptr_float_var + 8) = *ptr_uint_var;
    *(uint64_t *)(ptr_float_var + 10) = uint_result;
    ptr_uint_var = (uint64_t *)(long_result + 0x30 + long_result);
    uint_result = ptr_uint_var[1];
    *(uint64_t *)(ptr_float_var + 0xc) = *ptr_uint_var;
    *(uint64_t *)(ptr_float_var + 0xe) = uint_result;
    long_result = *(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE);
    float_result = ptr_float_var[8];
    float_result = ptr_float_var[9];
    float_result = ptr_float_var[10];
    float_result = ptr_float_var[0xb];
    float_result = *ptr_float_var;
    float_result = ptr_float_var[1];
    float_result = ptr_float_var[2];
    float_result = ptr_float_var[3];
    float_result = ptr_float_var[4];
    float_result = ptr_float_var[5];
    float_result = ptr_float_var[6];
    float_result = ptr_float_var[7];
    float_result = *(float *)(long_result + 0x374);
    float_result = *(float *)(long_result + 0x370);
    float_result = *(float *)(long_result + 0x378);
    float_result = *(float *)(long_result + 900);
    float_result = *(float *)(long_result + 0x394);
    float_result = *(float *)(long_result + 0x380);
    float_result = *(float *)(long_result + 0x388);
    float_result = *(float *)(long_result + 0x390);
    float_result = *(float *)(long_result + 0x398);
    *ptr_float_var = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[1] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[2] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[3] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[4] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[5] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[6] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[7] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[8] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[9] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[10] = float_result * float_result + float_result * float_result + float_result * float_result;
    ptr_float_var[0xb] = float_result * float_result + float_result * float_result + float_result * float_result;
  }
  long_result = *(longlong *)(handleIdentifier + 600);
  if (*(int *)(long_result + 0x28) != *(int *)(g_system_base_1 + 0x224)) {
    int_result = *(int *)(long_result + 0x1c) + *(int *)(long_result + 0x18);
    *(int *)(long_result + 0x28) = *(int *)(g_system_base_1 + 0x224);
    if (0 < int_result) {
      long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
      uint_result = InitializeSystemModule39(long_result,int_result);
      *(uint32_t *)(long_result + 0x30) = uint_result;
      InitializeSystemDataNode26(long_result,uint_result);
      if (*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        if (*(int *)(long_result + 0x18) != 0) {
          *(uint32_t *)(long_result + 0x2c) = *(uint32_t *)(long_result + 0x30);
          return;
        }
      }
      else {
        is_initialized6 = *(char *)(long_result + 0x44);
        uint_result = (ulonglong)is_initialized6;
        long_ptr = (longlong *)(long_result + 0x38);
        int_result = (int)is_initialized6;
        if (*(int *)(long_result + 0x40) == (int)is_initialized6) {
          long_ptr = (longlong *)*long_ptr;
        }
        else {
          *(int *)(long_result + 0x40) = int_result;
          if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          *long_ptr = 0;
          if (is_initialized6 == '\0') {
            long_ptr = (longlong *)0x0;
            *long_ptr = 0;
          }
          else {
            long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)is_initialized6 * 4);
            *long_ptr = (longlong)long_ptr;
          }
        }
        if (long_ptr != (longlong *)0x0) {
          int_result = 0;
          uint_result = (uint)is_initialized6;
          int_result = int_result;
          if ((0 < int_result) && (0xf < uint_result)) {
            compare_result9 = *(int *)(long_result + 0x2c);
            long_ptr = (longlong *)((longlong)long_ptr + (longlong)(is_initialized6 + -1) * 4);
            if ((((longlong *)(long_result + 0x2c) < long_ptr) || (long_ptr < (longlong *)(long_result + 0x2c)))
               && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
              uint_result = uint_result & 0x8000000f;
              if ((int)uint_result < 0) {
                uint_result = (uint_result - 1 | 0xfffffff0) + 1;
              }
              long_ptr = long_ptr + 4;
              compare_result7 = 8;
              do {
                *(int *)(long_ptr + -4) = int_result + compare_result9;
                *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + compare_result9;
                *(int *)(long_ptr + -3) = int_result + 2 + compare_result9;
                *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + compare_result9;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                *(int *)(long_ptr + -2) = compare_result7 + -4 + compare_result9;
                *(int *)((longlong)long_ptr + -0xc) = compare_result7 + -3 + compare_result9;
                *(int *)(long_ptr + -1) = compare_result7 + -2 + compare_result9;
                *(int *)((longlong)long_ptr + -4) = compare_result7 + -1 + compare_result9;
                *(int *)long_ptr = compare_result7 + compare_result9;
                *(int *)((longlong)long_ptr + 4) = compare_result7 + 1 + compare_result9;
                *(int *)(long_ptr + 1) = compare_result7 + 2 + compare_result9;
                *(int *)((longlong)long_ptr + 0xc) = compare_result7 + 3 + compare_result9;
                *(int *)(long_ptr + 2) = compare_result7 + 4 + compare_result9;
                *(int *)((longlong)long_ptr + 0x14) = compare_result7 + 5 + compare_result9;
                *(int *)(long_ptr + 3) = compare_result7 + 6 + compare_result9;
                *(int *)((longlong)long_ptr + 0x1c) = compare_result7 + 7 + compare_result9;
                long_ptr = long_ptr + 8;
                compare_result7 = compare_result7 + SYSTEM_DATA_COMPARE_SIZE;
                int_result = int_result;
              } while (int_result < (int)(uint_result - uint_result));
            }
          }
          for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
            int_result = *(int *)(long_result + 0x2c) + int_result;
            int_result = int_result + 1;
            *(int *)(*long_ptr + long_result * 4) = int_result;
          }
          int_result = *(int *)(long_result + 0x18);
          int_result = 0;
          if (0 < (longlong)int_result) {
            long_result = 0;
            do {
              compare_result9 = *(int *)(long_result + 0x30) + int_result;
              int_result = int_result + 1;
              ptr_byte_var = (byte *)(*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) + long_result);
              long_result = long_result + 1;
              *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = compare_result9;
            } while (long_result < int_result);
          }
        }
        ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 +
                          systemCoreData + 0x9d0);
        if (int_result == 0) {
          uint_result = (int)is_initialized6 - 1;
        }
        else {
          LOCK();
          uint_result = *ptr_uint_var;
          *ptr_uint_var = *ptr_uint_var + (int)is_initialized6;
          UNLOCK();
          uint_result = (ulonglong)(uint_result >> 0xb);
          uint_result = (ulonglong)(is_initialized6 + -1 + uint_result >> 0xb);
          if (uint_result <= uint_result) {
            ptr_char_var = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
            long_result = (uint_result - uint_result) + 1;
            ptr_uint_var = ptr_uint_var + uint_result * 2 + 2;
            do {
              int_result = (int)uint_result;
              if (*(longlong *)ptr_uint_var == 0) {
                long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
                LOCK();
                system_validation_flag2 = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
                if (system_validation_flag2) {
                  *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
                }
                UNLOCK();
                if (system_validation_flag2) {
                  LOCK();
                  *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
                  UNLOCK();
                }
                else {
                  if (long_result != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  do {
                  } while (*ptr_char_var != '\0');
                }
              }
              else {
                do {
                } while (*ptr_char_var != '\0');
              }
              uint_result = (ulonglong)(int_result + 1);
              ptr_uint_var = ptr_uint_var + 2;
              ptr_char_var = ptr_char_var + 1;
              long_result = long_result + -1;
            } while (long_result != 0);
          }
        }
        ptr_uint_var = *(uint32_t **)(long_result + 0x38);
        uint_result = uint_result >> 0xb;
        *(uint *)(long_result + 0x2c) = uint_result;
        if (uint_result == (int)is_initialized6 + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
          memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
                 (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(uint_result & 0xffffffff) << 2);
        }
        if (int_result != 0) {
          uint_result = uint_result & 0xffffffff;
          do {
            uint_result = *ptr_uint_var;
            ptr_uint_var = ptr_uint_var + 1;
            *(uint32_t *)
             (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
             (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
            uint_result = uint_result - 1;
            uint_result = uint_result + 1;
          } while (uint_result != 0);
        }
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_36_2(void)
void SystemFunction_36_2(void)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  uint64_t *ptr_uint_var;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  char is_initialized4;
  float *ptr_float_var;
  longlong long_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint32_t uint_result;
  longlong long_result;
  longlong *long_ptr;
  uint uint_result;
  int compare_result4;
  uint uint_result;
  int compare_result6;
  longlong system_RBX;
  ulonglong uint_result;
  char *ptr_char_var;
  uint *ptr_uint_var;
  int int_result;
  longlong system_RDI;
  int int_result;
  int int_result;
  longlong long_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  bool memory_pointer_flag;
  uint32_t system_XMM7_Da;
  uint32_t system_XMM7_Db;
  uint64_t init_uint_stack_50;
  uint64_t init_input_stack_58;

  uint_result = (int)*(char *)(system_RDI + 0xd) + *(int *)(system_RDI + 0x18);
  ptr_float_var = (float *)**(longlong **)(system_RBX + 600);
  long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
  uint_result = uint_result >> 0xd;
  long_result = *(longlong *)(long_result + 8 + (ulonglong)uint_result * 8);
  long_result = (ulonglong)(uint_result + uint_result * -SYSTEM_NODE_HEADER_SIZE00) * 0x40;
  uint_result = ((uint64_t *)(long_result + long_result))[1];
  *(uint64_t *)ptr_float_var = *(uint64_t *)(long_result + long_result);
  *(uint64_t *)(ptr_float_var + 2) = uint_result;
  ptr_uint_var = (uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result);
  uint_result = ptr_uint_var[1];
  *(uint64_t *)(ptr_float_var + 4) = *ptr_uint_var;
  *(uint64_t *)(ptr_float_var + 6) = uint_result;
  ptr_uint_var = (uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE + long_result);
  uint_result = ptr_uint_var[1];
  *(uint64_t *)(ptr_float_var + 8) = *ptr_uint_var;
  *(uint64_t *)(ptr_float_var + 10) = uint_result;
  ptr_uint_var = (uint64_t *)(long_result + 0x30 + long_result);
  uint_result = ptr_uint_var[1];
  *(uint64_t *)(ptr_float_var + 0xc) = *ptr_uint_var;
  *(uint64_t *)(ptr_float_var + 0xe) = uint_result;
  long_result = *(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE);
  float_result = ptr_float_var[8];
  float_result = ptr_float_var[9];
  float_result = ptr_float_var[10];
  float_result = ptr_float_var[0xb];
  float_result = *ptr_float_var;
  float_result = ptr_float_var[1];
  float_result = ptr_float_var[2];
  float_result = ptr_float_var[3];
  float_result = ptr_float_var[4];
  float_result = ptr_float_var[5];
  float_result = ptr_float_var[6];
  float_result = ptr_float_var[7];
  float_result = *(float *)(long_result + 0x374);
  float_result = *(float *)(long_result + 0x370);
  float_result = *(float *)(long_result + 0x378);
  float_result = *(float *)(long_result + 900);
  float_result = *(float *)(long_result + 0x394);
  float_result = *(float *)(long_result + 0x380);
  float_result = *(float *)(long_result + 0x388);
  float_result = *(float *)(long_result + 0x390);
  float_result = *(float *)(long_result + 0x398);
  *ptr_float_var = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[1] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[2] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[3] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[4] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[5] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[6] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[7] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[8] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[9] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[10] = float_result * float_result + float_result * float_result + float_result * float_result;
  ptr_float_var[0xb] = float_result * float_result + float_result * float_result + float_result * float_result;
  long_result = *(longlong *)(system_RBX + 600);
  if (*(int *)(long_result + 0x28) != *(int *)(g_system_base_1 + 0x224)) {
    int_result = *(int *)(long_result + 0x1c) + *(int *)(long_result + 0x18);
    *(int *)(long_result + 0x28) = *(int *)(g_system_base_1 + 0x224);
    if (0 < int_result) {
      init_uint_stack_50 = init_input_stack_58;
      long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
      uint_result = InitializeSystemModule39(long_result,int_result,long_result,ptr_float_var,CONCAT44(system_XMM7_Db,system_XMM7_Da));
      *(uint32_t *)(long_result + 0x30) = uint_result;
      InitializeSystemDataNode26(long_result,uint_result);
      if (*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        if (*(int *)(long_result + 0x18) != 0) {
          *(uint32_t *)(long_result + 0x2c) = *(uint32_t *)(long_result + 0x30);
          return;
        }
      }
      else {
        is_initialized4 = *(char *)(long_result + 0x44);
        uint_result = (ulonglong)is_initialized4;
        long_ptr = (longlong *)(long_result + 0x38);
        int_result = (int)is_initialized4;
        if (*(int *)(long_result + 0x40) == (int)is_initialized4) {
          long_ptr = (longlong *)*long_ptr;
        }
        else {
          *(int *)(long_result + 0x40) = int_result;
          if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          *long_ptr = 0;
          if (is_initialized4 == '\0') {
            long_ptr = (longlong *)0x0;
            *long_ptr = 0;
          }
          else {
            long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)is_initialized4 * 4);
            *long_ptr = (longlong)long_ptr;
          }
        }
        if (long_ptr != (longlong *)0x0) {
          int_result = 0;
          uint_result = (uint)is_initialized4;
          int_result = int_result;
          if ((0 < int_result) && (0xf < uint_result)) {
            compare_result6 = *(int *)(long_result + 0x2c);
            long_ptr = (longlong *)((longlong)long_ptr + (longlong)(is_initialized4 + -1) * 4);
            if ((((longlong *)(long_result + 0x2c) < long_ptr) || (long_ptr < (longlong *)(long_result + 0x2c)))
               && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
              uint_result = uint_result & 0x8000000f;
              if ((int)uint_result < 0) {
                uint_result = (uint_result - 1 | 0xfffffff0) + 1;
              }
              long_ptr = long_ptr + 4;
              compare_result4 = 8;
              do {
                *(int *)(long_ptr + -4) = int_result + compare_result6;
                *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + compare_result6;
                *(int *)(long_ptr + -3) = int_result + 2 + compare_result6;
                *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + compare_result6;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                *(int *)(long_ptr + -2) = compare_result4 + -4 + compare_result6;
                *(int *)((longlong)long_ptr + -0xc) = compare_result4 + -3 + compare_result6;
                *(int *)(long_ptr + -1) = compare_result4 + -2 + compare_result6;
                *(int *)((longlong)long_ptr + -4) = compare_result4 + -1 + compare_result6;
                *(int *)long_ptr = compare_result4 + compare_result6;
                *(int *)((longlong)long_ptr + 4) = compare_result4 + 1 + compare_result6;
                *(int *)(long_ptr + 1) = compare_result4 + 2 + compare_result6;
                *(int *)((longlong)long_ptr + 0xc) = compare_result4 + 3 + compare_result6;
                *(int *)(long_ptr + 2) = compare_result4 + 4 + compare_result6;
                *(int *)((longlong)long_ptr + 0x14) = compare_result4 + 5 + compare_result6;
                *(int *)(long_ptr + 3) = compare_result4 + 6 + compare_result6;
                *(int *)((longlong)long_ptr + 0x1c) = compare_result4 + 7 + compare_result6;
                long_ptr = long_ptr + 8;
                compare_result4 = compare_result4 + SYSTEM_DATA_COMPARE_SIZE;
                int_result = int_result;
              } while (int_result < (int)(uint_result - uint_result));
            }
          }
          for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
            int_result = *(int *)(long_result + 0x2c) + int_result;
            int_result = int_result + 1;
            *(int *)(*long_ptr + long_result * 4) = int_result;
          }
          int_result = *(int *)(long_result + 0x18);
          int_result = 0;
          if (0 < (longlong)int_result) {
            long_result = 0;
            do {
              compare_result6 = *(int *)(long_result + 0x30) + int_result;
              int_result = int_result + 1;
              ptr_byte_var = (byte *)(*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) + long_result);
              long_result = long_result + 1;
              *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = compare_result6;
            } while (long_result < int_result);
          }
        }
        ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 +
                          systemCoreData + 0x9d0);
        if (int_result == 0) {
          uint_result = (int)is_initialized4 - 1;
        }
        else {
          LOCK();
          uint_result = *ptr_uint_var;
          *ptr_uint_var = *ptr_uint_var + (int)is_initialized4;
          UNLOCK();
          uint_result = (ulonglong)(uint_result >> 0xb);
          uint_result = (ulonglong)(is_initialized4 + -1 + uint_result >> 0xb);
          if (uint_result <= uint_result) {
            ptr_char_var = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
            long_result = (uint_result - uint_result) + 1;
            ptr_uint_var = ptr_uint_var + uint_result * 2 + 2;
            do {
              int_result = (int)uint_result;
              if (*(longlong *)ptr_uint_var == 0) {
                long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
                LOCK();
                system_buffer_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
                if (system_buffer_flag) {
                  *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
                }
                UNLOCK();
                if (system_buffer_flag) {
                  LOCK();
                  *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
                  UNLOCK();
                }
                else {
                  if (long_result != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  do {
                  } while (*ptr_char_var != '\0');
                }
              }
              else {
                do {
                } while (*ptr_char_var != '\0');
              }
              uint_result = (ulonglong)(int_result + 1);
              ptr_uint_var = ptr_uint_var + 2;
              ptr_char_var = ptr_char_var + 1;
              long_result = long_result + -1;
            } while (long_result != 0);
          }
        }
        ptr_uint_var = *(uint32_t **)(long_result + 0x38);
        uint_result = uint_result >> 0xb;
        *(uint *)(long_result + 0x2c) = uint_result;
        if (uint_result == (int)is_initialized4 + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
          memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
                 (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(uint_result & 0xffffffff) << 2);
        }
        if (int_result != 0) {
          uint_result = uint_result & 0xffffffff;
          do {
            uint_result = *ptr_uint_var;
            ptr_uint_var = ptr_uint_var + 1;
            *(uint32_t *)
             (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
             (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
            uint_result = uint_result - 1;
            uint_result = uint_result + 1;
          } while (uint_result != 0);
        }
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_39_3(longlong handleIdentifier,uint resourceIdentifier,uint64_t systemConfig,float *systemFlags)
void SystemFunction_39_3(longlong handleIdentifier,uint resourceIdentifier,uint64_t systemConfig,float *systemFlags)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  uint64_t *ptr_uint_var;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  char is_initialized4;
  longlong long_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint64_t uint_result;
  uint32_t uint_result;
  uint uint_result;
  longlong long_result;
  longlong *long_ptr;
  longlong long_result;
  int compare_result4;
  int compare_result5;
  longlong system_RBX;
  ulonglong uint_result;
  char *ptr_char_var;
  uint *ptr_uint_var;
  int compare_result9;
  uint uint_result;
  longlong system_RDI;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  uint *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  bool pointer_operation_flag;
  uint32_t system_XMM7_Da;
  uint32_t system_XMM7_Db;
  uint64_t init_uint_stack_50;
  uint64_t init_input_stack_58;

  handleIdentifier = (longlong)*(int *)(handleIdentifier + 0x250) * 0x128 + handleIdentifier;
  long_result = *(longlong *)(handleIdentifier + 8 + (ulonglong)(resourceIdentifier >> 0xd) * 8);
  long_result = (ulonglong)(resourceIdentifier + (resourceIdentifier >> 0xd) * -SYSTEM_NODE_HEADER_SIZE00) * 0x40;
  uint_result = ((uint64_t *)(long_result + long_result))[1];
  *(uint64_t *)systemFlags = *(uint64_t *)(long_result + long_result);
  *(uint64_t *)(systemFlags + 2) = uint_result;
  ptr_uint_var = (uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result);
  uint_result = ptr_uint_var[1];
  *(uint64_t *)(systemFlags + 4) = *ptr_uint_var;
  *(uint64_t *)(systemFlags + 6) = uint_result;
  ptr_uint_var = (uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE + long_result);
  uint_result = ptr_uint_var[1];
  *(uint64_t *)(systemFlags + 8) = *ptr_uint_var;
  *(uint64_t *)(systemFlags + 10) = uint_result;
  ptr_uint_var = (uint64_t *)(long_result + 0x30 + long_result);
  uint_result = ptr_uint_var[1];
  *(uint64_t *)(systemFlags + 0xc) = *ptr_uint_var;
  *(uint64_t *)(systemFlags + 0xe) = uint_result;
  long_result = *(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE);
  float_result = systemFlags[8];
  float_result = systemFlags[9];
  float_result = systemFlags[10];
  float_result = systemFlags[0xb];
  float_result = *systemFlags;
  float_result = systemFlags[1];
  float_result = systemFlags[2];
  float_result = systemFlags[3];
  float_result = systemFlags[4];
  float_result = systemFlags[5];
  float_result = systemFlags[6];
  float_result = systemFlags[7];
  float_result = *(float *)(long_result + 0x374);
  float_result = *(float *)(long_result + 0x370);
  float_result = *(float *)(long_result + 0x378);
  float_result = *(float *)(long_result + 900);
  float_result = *(float *)(long_result + 0x394);
  float_result = *(float *)(long_result + 0x380);
  float_result = *(float *)(long_result + 0x388);
  float_result = *(float *)(long_result + 0x390);
  float_result = *(float *)(long_result + 0x398);
  *systemFlags = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[1] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[2] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[3] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[4] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[5] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[6] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[7] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[8] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[9] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[10] = float_result * float_result + float_result * float_result + float_result * float_result;
  systemFlags[0xb] = float_result * float_result + float_result * float_result + float_result * float_result;
  long_result = *(longlong *)(system_RBX + 600);
  if (*(int *)(long_result + 0x28) != *(int *)(g_system_base_1 + 0x224)) {
    compare_result9 = *(int *)(long_result + 0x1c) + *(int *)(long_result + 0x18);
    *(int *)(long_result + 0x28) = *(int *)(g_system_base_1 + 0x224);
    if (0 < compare_result9) {
      init_uint_stack_50 = init_input_stack_58;
      long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
      uint_result = InitializeSystemModule39(long_result,compare_result9,handleIdentifier,systemFlags,CONCAT44(system_XMM7_Db,system_XMM7_Da));
      *(uint32_t *)(long_result + 0x30) = uint_result;
      InitializeSystemDataNode26(long_result,uint_result);
      if (*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        if (*(int *)(long_result + 0x18) != 0) {
          *(uint32_t *)(long_result + 0x2c) = *(uint32_t *)(long_result + 0x30);
          return;
        }
      }
      else {
        is_initialized4 = *(char *)(long_result + 0x44);
        uint_result = (ulonglong)is_initialized4;
        long_ptr = (longlong *)(long_result + 0x38);
        compare_result9 = (int)is_initialized4;
        if (*(int *)(long_result + 0x40) == (int)is_initialized4) {
          long_ptr = (longlong *)*long_ptr;
        }
        else {
          *(int *)(long_result + 0x40) = compare_result9;
          if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          *long_ptr = 0;
          if (is_initialized4 == '\0') {
            long_ptr = (longlong *)0x0;
            *long_ptr = 0;
          }
          else {
            long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)is_initialized4 * 4);
            *long_ptr = (longlong)long_ptr;
          }
        }
        if (long_ptr != (longlong *)0x0) {
          int_result = 0;
          uint_result = (uint)is_initialized4;
          int_result = int_result;
          if ((0 < compare_result9) && (0xf < uint_result)) {
            compare_result5 = *(int *)(long_result + 0x2c);
            long_ptr = (longlong *)((longlong)long_ptr + (longlong)(is_initialized4 + -1) * 4);
            if ((((longlong *)(long_result + 0x2c) < long_ptr) || (long_ptr < (longlong *)(long_result + 0x2c)))
               && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
              uint_result = uint_result & 0x8000000f;
              if ((int)uint_result < 0) {
                uint_result = (uint_result - 1 | 0xfffffff0) + 1;
              }
              long_ptr = long_ptr + 4;
              compare_result4 = 8;
              do {
                *(int *)(long_ptr + -4) = int_result + compare_result5;
                *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + compare_result5;
                *(int *)(long_ptr + -3) = int_result + 2 + compare_result5;
                *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + compare_result5;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                *(int *)(long_ptr + -2) = compare_result4 + -4 + compare_result5;
                *(int *)((longlong)long_ptr + -0xc) = compare_result4 + -3 + compare_result5;
                *(int *)(long_ptr + -1) = compare_result4 + -2 + compare_result5;
                *(int *)((longlong)long_ptr + -4) = compare_result4 + -1 + compare_result5;
                *(int *)long_ptr = compare_result4 + compare_result5;
                *(int *)((longlong)long_ptr + 4) = compare_result4 + 1 + compare_result5;
                *(int *)(long_ptr + 1) = compare_result4 + 2 + compare_result5;
                *(int *)((longlong)long_ptr + 0xc) = compare_result4 + 3 + compare_result5;
                *(int *)(long_ptr + 2) = compare_result4 + 4 + compare_result5;
                *(int *)((longlong)long_ptr + 0x14) = compare_result4 + 5 + compare_result5;
                *(int *)(long_ptr + 3) = compare_result4 + 6 + compare_result5;
                *(int *)((longlong)long_ptr + 0x1c) = compare_result4 + 7 + compare_result5;
                long_ptr = long_ptr + 8;
                compare_result4 = compare_result4 + SYSTEM_DATA_COMPARE_SIZE;
                int_result = int_result;
              } while (int_result < (int)(uint_result - uint_result));
            }
          }
          for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
            int_result = *(int *)(long_result + 0x2c) + int_result;
            int_result = int_result + 1;
            *(int *)(*long_ptr + long_result * 4) = int_result;
          }
          int_result = *(int *)(long_result + 0x18);
          int_result = 0;
          if (0 < (longlong)int_result) {
            long_result = 0;
            do {
              compare_result5 = *(int *)(long_result + 0x30) + int_result;
              int_result = int_result + 1;
              ptr_byte_var = (byte *)(*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) + long_result);
              long_result = long_result + 1;
              *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = compare_result5;
            } while (long_result < int_result);
          }
        }
        ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 +
                          systemCoreData + 0x9d0);
        if (compare_result9 == 0) {
          uint_result = (int)is_initialized4 - 1;
        }
        else {
          LOCK();
          uint_result = *ptr_uint_var;
          *ptr_uint_var = *ptr_uint_var + (int)is_initialized4;
          UNLOCK();
          uint_result = (ulonglong)(uint_result >> 0xb);
          uint_result = (ulonglong)(is_initialized4 + -1 + uint_result >> 0xb);
          if (uint_result <= uint_result) {
            ptr_char_var = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
            long_result = (uint_result - uint_result) + 1;
            ptr_uint_var = ptr_uint_var + uint_result * 2 + 2;
            do {
              int_result = (int)uint_result;
              if (*(longlong *)ptr_uint_var == 0) {
                long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
                LOCK();
                system_float_buffer = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
                if (system_float_buffer) {
                  *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
                }
                UNLOCK();
                if (system_float_buffer) {
                  LOCK();
                  *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
                  UNLOCK();
                }
                else {
                  if (long_result != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  do {
                  } while (*ptr_char_var != '\0');
                }
              }
              else {
                do {
                } while (*ptr_char_var != '\0');
              }
              uint_result = (ulonglong)(int_result + 1);
              ptr_uint_var = ptr_uint_var + 2;
              ptr_char_var = ptr_char_var + 1;
              long_result = long_result + -1;
            } while (long_result != 0);
          }
        }
        ptr_uint_var = *(uint32_t **)(long_result + 0x38);
        uint_result = uint_result >> 0xb;
        *(uint *)(long_result + 0x2c) = uint_result;
        if (uint_result == (int)is_initialized4 + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
          memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
                 (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(uint_result & 0xffffffff) << 2);
        }
        if (compare_result9 != 0) {
          uint_result = uint_result & 0xffffffff;
          do {
            uint_result = *ptr_uint_var;
            ptr_uint_var = ptr_uint_var + 1;
            *(uint32_t *)
             (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
             (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
            uint_result = uint_result - 1;
            uint_result = uint_result + 1;
          } while (uint_result != 0);
        }
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_65_4(void)
void SystemFunction_65_4(void)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  char char_var;
  longlong allocation_size;
  uint32_t uint_result;
  uint uint_result;
  longlong *long_ptr;
  longlong long_result;
  int int_result;
  int int_result;
  longlong system_RBX;
  longlong long_result;
  ulonglong uint_result;
  char *pis_initialized4;
  uint *ptr_uint_var;
  int int_result;
  uint uint_result;
  int int_result;
  int int_result;
  uint32_t *node_root0;
  uint *node_root1;
  ulonglong uint_result;
  ulonglong uint_result;
  bool system_processing_flag;
  uint64_t init_uint_stack_50;
  uint64_t init_input_stack_58;

  allocation_size = *(longlong *)(system_RBX + 600);
  if (*(int *)(allocation_size + 0x28) != *(int *)(g_system_base_1 + 0x224)) {
    int_result = *(int *)(allocation_size + 0x1c) + *(int *)(allocation_size + 0x18);
    *(int *)(allocation_size + 0x28) = *(int *)(g_system_base_1 + 0x224);
    if (0 < int_result) {
      init_uint_stack_50 = init_input_stack_58;
      long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
      uint_result = InitializeSystemModule39(long_result,int_result);
      *(uint32_t *)(allocation_size + 0x30) = uint_result;
      InitializeSystemDataNode26(long_result,uint_result);
      if (*(longlong *)(allocation_size + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        if (*(int *)(allocation_size + 0x18) != 0) {
          *(uint32_t *)(allocation_size + 0x2c) = *(uint32_t *)(allocation_size + 0x30);
          return;
        }
      }
      else {
        char_var = *(char *)(allocation_size + 0x44);
        uint_result = (ulonglong)char_var;
        long_ptr = (longlong *)(allocation_size + 0x38);
        int_result = (int)char_var;
        if (*(int *)(allocation_size + 0x40) == (int)char_var) {
          long_ptr = (longlong *)*long_ptr;
        }
        else {
          *(int *)(allocation_size + 0x40) = int_result;
          if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          *long_ptr = 0;
          if (char_var == '\0') {
            long_ptr = (longlong *)0x0;
            *long_ptr = 0;
          }
          else {
            long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)char_var * 4);
            *long_ptr = (longlong)long_ptr;
          }
        }
        if (long_ptr != (longlong *)0x0) {
          int_result = 0;
          uint_result = (uint)char_var;
          int_result = int_result;
          if ((0 < int_result) && (0xf < uint_result)) {
            int_result = *(int *)(allocation_size + 0x2c);
            long_ptr = (longlong *)((longlong)long_ptr + (longlong)(char_var + -1) * 4);
            if ((((longlong *)(allocation_size + 0x2c) < long_ptr) || (long_ptr < (longlong *)(allocation_size + 0x2c))) &&
               ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
              uint_result = uint_result & 0x8000000f;
              if ((int)uint_result < 0) {
                uint_result = (uint_result - 1 | 0xfffffff0) + 1;
              }
              long_ptr = long_ptr + 4;
              int_result = 8;
              do {
                *(int *)(long_ptr + -4) = int_result + int_result;
                *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + int_result;
                *(int *)(long_ptr + -3) = int_result + 2 + int_result;
                *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + int_result;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                *(int *)(long_ptr + -2) = int_result + -4 + int_result;
                *(int *)((longlong)long_ptr + -0xc) = int_result + -3 + int_result;
                *(int *)(long_ptr + -1) = int_result + -2 + int_result;
                *(int *)((longlong)long_ptr + -4) = int_result + -1 + int_result;
                *(int *)long_ptr = int_result + int_result;
                *(int *)((longlong)long_ptr + 4) = int_result + 1 + int_result;
                *(int *)(long_ptr + 1) = int_result + 2 + int_result;
                *(int *)((longlong)long_ptr + 0xc) = int_result + 3 + int_result;
                *(int *)(long_ptr + 2) = int_result + 4 + int_result;
                *(int *)((longlong)long_ptr + 0x14) = int_result + 5 + int_result;
                *(int *)(long_ptr + 3) = int_result + 6 + int_result;
                *(int *)((longlong)long_ptr + 0x1c) = int_result + 7 + int_result;
                long_ptr = long_ptr + 8;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                int_result = int_result;
              } while (int_result < (int)(uint_result - uint_result));
            }
          }
          for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
            int_result = *(int *)(allocation_size + 0x2c) + int_result;
            int_result = int_result + 1;
            *(int *)(*long_ptr + long_result * 4) = int_result;
          }
          int_result = *(int *)(allocation_size + 0x18);
          int_result = 0;
          if (0 < (longlong)int_result) {
            long_result = 0;
            do {
              int_result = *(int *)(allocation_size + 0x30) + int_result;
              int_result = int_result + 1;
              ptr_byte_var = (byte *)(*(longlong *)(allocation_size + SYSTEM_DATA_COMPARE_SIZE) + long_result);
              long_result = long_result + 1;
              *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = int_result;
            } while (long_result < int_result);
          }
        }
        ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 +
                          systemCoreData + 0x9d0);
        if (int_result == 0) {
          uint_result = (int)char_var - 1;
        }
        else {
          LOCK();
          uint_result = *ptr_uint_var;
          *ptr_uint_var = *ptr_uint_var + (int)char_var;
          UNLOCK();
          uint_result = (ulonglong)(uint_result >> 0xb);
          uint_result = (ulonglong)(char_var + -1 + uint_result >> 0xb);
          if (uint_result <= uint_result) {
            pis_initialized4 = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
            long_result = (uint_result - uint_result) + 1;
            node_root1 = ptr_uint_var + uint_result * 2 + 2;
            do {
              int_result = (int)uint_result;
              if (*(longlong *)node_root1 == 0) {
                long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
                LOCK();
                system_processing_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
                if (system_processing_flag) {
                  *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
                }
                UNLOCK();
                if (system_processing_flag) {
                  LOCK();
                  *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
                  UNLOCK();
                }
                else {
                  if (long_result != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  do {
                  } while (*pis_initialized4 != '\0');
                }
              }
              else {
                do {
                } while (*pis_initialized4 != '\0');
              }
              uint_result = (ulonglong)(int_result + 1);
              node_root1 = node_root1 + 2;
              pis_initialized4 = pis_initialized4 + 1;
              long_result = long_result + -1;
            } while (long_result != 0);
          }
        }
        node_root0 = *(uint32_t **)(allocation_size + 0x38);
        uint_result = uint_result >> 0xb;
        *(uint *)(allocation_size + 0x2c) = uint_result;
        if (uint_result == (int)char_var + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
          memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
                 (ulonglong)(uint_result + uint_result * -0x800) * 4,node_root0,(uint_result & 0xffffffff) << 2);
        }
        if (int_result != 0) {
          uint_result = uint_result & 0xffffffff;
          do {
            uint_result = *node_root0;
            node_root0 = node_root0 + 1;
            *(uint32_t *)
             (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
             (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
            uint_result = uint_result - 1;
            uint_result = uint_result + 1;
          } while (uint_result != 0);
        }
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void* * ValidateSystemConfiguration(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  if (*(longlong *)(handleIdentifier + 0x1b8) != 0) {
    return (void *)(*(longlong *)(handleIdentifier + 0x1b8) + SYSTEM_DATA_COMPARE_SIZE);
  }
  if (*(int *)(*(longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8) +
              0x48) < systemConfigurationData) {
    CheckSystemInitialized(&g_system_configuration_data_ptr);
    if (systemConfigurationData == -1) {
      systemCoreData = &g_thread_parameter_ptr;
      systemConfigurationData = &g_system_configuration_data_ptr;
// void InitializeAuthenticationSystem(longlong handleIdentifier)

void InitializeAuthenticationSystem(longlong handleIdentifier)

{
  longlong long_result;
  int int_result;
  longlong long_result;

  if (((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) != 0) && (*(longlong *)(handleIdentifier + 0x1e0) != 0)) {
    int_result = 0;
    long_result = 0;
    do {
      while ((*(char *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x15 + long_result) == '\x02' ||
             (*(char *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x15 + long_result) == '\x01'))) {
        Sleep(0);
      }
      long_result = (longlong)int_result;
      long_result = long_result + 0x18;
      int_result = int_result + 1;
      LOCK();
      *(uint8_t *)(*(longlong *)(handleIdentifier + 0x1e0) + long_result * 0x18 + 0x15) = 0;
      UNLOCK();
    } while (int_result < SYSTEM_DATA_COMPARE_SIZE);
  }
  return;
}

uint8_t SystemFunction_95_8(void)

{
  uint8_t *ptr_uint_var;
  uint8_t uint_result;
  longlong long_result;
  longlong system_RBX;
  int int_result;
  longlong allocation_size;

  int_result = 0;
  allocation_size = 0;
  do {
    while ((*(char *)(*(longlong *)(system_RBX + 0x1e0) + 0x15 + allocation_size) == '\x02' ||
           (*(char *)(*(longlong *)(system_RBX + 0x1e0) + 0x15 + allocation_size) == '\x01'))) {
      Sleep(0);
    }
    long_result = (longlong)int_result;
    allocation_size = allocation_size + 0x18;
    int_result = int_result + 1;
    LOCK();
    ptr_uint_var = (uint8_t *)(*(longlong *)(system_RBX + 0x1e0) + long_result * 0x18 + 0x15);
    uint_result = *ptr_uint_var;
    *ptr_uint_var = 0;
    UNLOCK();
  } while (int_result < SYSTEM_DATA_COMPARE_SIZE);
  return uint_result;
}
// void SystemFunction_5_4(void)

void SystemFunction_5_4(void)

{
  return;
}

uint8_t SystemFunction_6_0(void)

{
  uint8_t *ptr_uint_var;
  uint8_t uint_result;
  longlong long_result;
  longlong system_RBX;
  int system_ESI;
  longlong system_RDI;

  do {
    Sleep(0);
    while ((*(char *)(*(longlong *)(system_RBX + 0x1e0) + 0x15 + system_RDI) != '\x02' &&
           (*(char *)(*(longlong *)(system_RBX + 0x1e0) + 0x15 + system_RDI) != '\x01'))) {
      long_result = (longlong)system_ESI;
      system_RDI = system_RDI + 0x18;
      system_ESI = system_ESI + 1;
      LOCK();
      ptr_uint_var = (uint8_t *)(*(longlong *)(system_RBX + 0x1e0) + long_result * 0x18 + 0x15);
      uint_result = *ptr_uint_var;
      *ptr_uint_var = 0;
      UNLOCK();
      if (0xf < system_ESI) {
        return uint_result;
      }
    }
  } while( true );
}
// WARNING: Removing unreachable block (ram,0x000180079699)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address

float * InitializeResourceSystem(float *handleIdentifier)

{
  float *ptr_float_var;
  byte bool_var;
  longlong *long_ptr;
  float *ptr_float_var;
  char char_var;
  float float_result;
  float *ptr_float_var;
  uint uint_result;
  ulonglong uint_result;
  bool comparison_result_flag;
  float float_result;
  float init_float_stack_b8;
  float init_float_stack_b4;
  float init_float_stack_b0;
  uint32_t uintStack_ac;
  float init_float_stack_a8;
  float init_float_stack_a4;
  float init_float_stack_a0;
  uint32_t uintStack_9c;
  float *init_float_ptr_stack_98;
  uint32_t module_type_id;
  longlong longStack_88;
  uint64_t uintStack_80;
  uint64_t uintStack_78;
  uint64_t uintStack_70;
  uint64_t uintStack_68;
  uint64_t uintStack_60;
  void *system_buffer_ptr_58;
  float init_float_stack_50;
  float init_float_stack_4c;
  void *system_buffer_ptr_48;
  uint64_t uintStack_40;
  uint64_t uintStack_38;
  uint8_t localBuffer_30 [8];
  float *init_float_ptr_stack_28;
  uint32_t uintStack_20;

  uintStack_38 = INVALID_HANDLE_VALUE;
  if (((uint)handleIdentifier[0x40] & SYSTEM_DATA_COMPARE_SIZE000) == 0) {
    localBuffer_30[0] = 0;
    uintStack_20 = 0;
    uintStack_80 = 0x1800795fa;
    init_float_ptr_stack_28 = handleIdentifier;
    InitializeSystemModule33(localBuffer_30);
    uintStack_80 = 0x180079605;
    float_result = (float)GetSystemTime(0);
    if ((10 < (int)float_result) ||
       ((int)(*(int *)(*(longlong *)(handleIdentifier + 0x84) + 0x88) +
             (*(int *)(*(longlong *)(handleIdentifier + 0x84) + 0x88) >> 0x1f & 3U)) >> 2 < (int)float_result)) {
      system_buffer_ptr_48 = &g_system_data_variable3;
      if (*(void **)(handleIdentifier + 6) != (void *)0x0) {
        system_buffer_ptr_48 = *(void **)(handleIdentifier + 6);
      }
      uintStack_40 = CONCAT44(uintStack_40._4_4_,*(uint32_t *)(*(longlong *)(handleIdentifier + 0x84) + 0x60));
      system_buffer_ptr_58 = &globalSystemVariable;
      uintStack_80 = 0x18007967a;
      init_float_stack_50 = float_result;
      InitializeEventSystem(g_system_context_1,0,0x80000000000,3);
    }
    handleIdentifier[0x40] = (float)((uint)handleIdentifier[0x40] | SYSTEM_DATA_COMPARE_SIZE000);
    uintStack_80 = 0x18007968e;
    InitializeNetworkManagerSystem(localBuffer_30);
  }
  uintStack_38 = INVALID_HANDLE_VALUE;
  ptr_float_var = handleIdentifier;
  if ((*(byte *)((longlong)handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    ptr_float_var = (float *)GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x6c));
  }
  if ((*(longlong *)(ptr_float_var + 0x84) != 0) && (((uint)handleIdentifier[0x40] & 0x80) == 0)) {
    ptr_float_var = handleIdentifier + 0x9d;
    ptr_float_var[0] = 1e+08;
    ptr_float_var[1] = 1e+08;
    handleIdentifier[0x9f] = 1e+08;
    handleIdentifier[0xa0] = 3.4028235e+38;
    handleIdentifier[0xa1] = -1e+08;
    handleIdentifier[0xa2] = -1e+08;
    handleIdentifier[0xa3] = -1e+08;
    handleIdentifier[0xa4] = 3.4028235e+38;
    uint_result = 0;
    handleIdentifier[0xa9] = 0.0;
    handleIdentifier[0xa5] = 0.0;
    handleIdentifier[0xa6] = 0.0;
    handleIdentifier[0xa7] = 0.0;
    handleIdentifier[0xa8] = 3.4028235e+38;
    uintStack_90 = 0;
    init_float_ptr_stack_98 = ptr_float_var;
    InitializeThreadManagerSystem(&init_float_ptr_stack_98);
    if (*(int *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE) != 0) {
      do {
        ptr_float_var = (float *)((longlong)(int)uint_result * SYSTEM_DATA_COMPARE_SIZE + *(longlong *)(longStack_88 + 0x18));
        init_float_stack_a8 = *ptr_float_var;
        if (*ptr_float_var < init_float_stack_a8) {
          init_float_stack_a8 = *ptr_float_var;
        }
        init_float_stack_a4 = ptr_float_var[1];
        if (handleIdentifier[0x9e] < init_float_stack_a4) {
          init_float_stack_a4 = handleIdentifier[0x9e];
        }
        init_float_stack_a0 = ptr_float_var[2];
        if (handleIdentifier[0x9f] < init_float_stack_a0) {
          init_float_stack_a0 = handleIdentifier[0x9f];
        }
        *(ulonglong *)ptr_float_var = CONCAT44(init_float_stack_a4,init_float_stack_a8);
        *(ulonglong *)(handleIdentifier + 0x9f) = CONCAT44(uintStack_9c,init_float_stack_a0);
        init_float_stack_b8 = *ptr_float_var;
        if (init_float_stack_b8 < handleIdentifier[0xa1]) {
          init_float_stack_b8 = handleIdentifier[0xa1];
        }
        init_float_stack_b4 = ptr_float_var[1];
        if (init_float_stack_b4 < handleIdentifier[0xa2]) {
          init_float_stack_b4 = handleIdentifier[0xa2];
        }
        init_float_stack_b0 = ptr_float_var[2];
        if (init_float_stack_b0 < handleIdentifier[0xa3]) {
          init_float_stack_b0 = handleIdentifier[0xa3];
        }
        *(ulonglong *)(handleIdentifier + 0xa1) = CONCAT44(init_float_stack_b4,init_float_stack_b8);
        *(ulonglong *)(handleIdentifier + 0xa3) = CONCAT44(uintStack_ac,init_float_stack_b0);
        uint_result = uint_result + 1;
      } while (uint_result < *(uint *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE));
    }
    ptr_float_var = *(float **)(handleIdentifier + 0x6e);
    if ((ptr_float_var != (float *)0x0) && (((uint)ptr_float_var[0x4e] & 0x3000) != 0)) {
      uintStack_78 = *(uint64_t *)(handleIdentifier + 0x48);
      uintStack_70 = *(uint64_t *)(handleIdentifier + 0x4a);
      uintStack_68 = *(uint64_t *)(handleIdentifier + 0x4c);
      uintStack_60 = *(uint64_t *)(handleIdentifier + 0x4e);
      system_buffer_ptr_58 = *(void **)(handleIdentifier + 0x50);
      init_float_stack_50 = handleIdentifier[0x52];
      init_float_stack_4c = handleIdentifier[0x53];
      system_buffer_ptr_48 = *(void **)(handleIdentifier + 0x54);
      uintStack_40 = *(uint64_t *)(handleIdentifier + 0x56);
      InitializeSystemModule19(&uintStack_78);
      UtilityFunction3a240(ptr_float_var,ptr_float_var,&uintStack_78);
      ptr_float_var = *(float **)(handleIdentifier + 0x6e);
      if (((uint)ptr_float_var[0x4e] & 0x3000) == SYSTEM_NODE_HEADER_SIZE00) {
        uintStack_78 = *(uint64_t *)(handleIdentifier + 0x48);
        uintStack_70 = *(uint64_t *)(handleIdentifier + 0x4a);
        uintStack_68 = *(uint64_t *)(handleIdentifier + 0x4c);
        uintStack_60 = *(uint64_t *)(handleIdentifier + 0x4e);
        system_buffer_ptr_58 = *(void **)(handleIdentifier + 0x50);
        init_float_stack_50 = handleIdentifier[0x52];
        init_float_stack_4c = handleIdentifier[0x53];
        system_buffer_ptr_48 = *(void **)(handleIdentifier + 0x54);
        uintStack_40 = *(uint64_t *)(handleIdentifier + 0x56);
        InitializeUISystem(&uintStack_78,0x3fc90fdb);
        UtilityFunction3a240(ptr_float_var,ptr_float_var,&uintStack_78);
        uintStack_78 = *(uint64_t *)(handleIdentifier + 0x48);
        uintStack_70 = *(uint64_t *)(handleIdentifier + 0x4a);
        uintStack_68 = *(uint64_t *)(handleIdentifier + 0x4c);
        uintStack_60 = *(uint64_t *)(handleIdentifier + 0x4e);
        system_buffer_ptr_58 = *(void **)(handleIdentifier + 0x50);
        init_float_stack_50 = handleIdentifier[0x52];
        init_float_stack_4c = handleIdentifier[0x53];
        system_buffer_ptr_48 = *(void **)(handleIdentifier + 0x54);
        uintStack_40 = *(uint64_t *)(handleIdentifier + 0x56);
        InitializeSystemModule39(&uintStack_78);
        ptr_float_var = (float *)UtilityFunction3a240(ptr_float_var,ptr_float_var,&uintStack_78);
      }
    }
    ptr_float_var = init_float_ptr_stack_98;
    if (handleIdentifier[0xa1] < *ptr_float_var) {
      handleIdentifier[0xa9] = 0.0;
      ptr_float_var[0] = 0.0;
      ptr_float_var[1] = 0.0;
      handleIdentifier[0x9f] = 0.0;
      handleIdentifier[0xa0] = 0.0;
      handleIdentifier[0xa1] = 0.0;
      handleIdentifier[0xa2] = 0.0;
      handleIdentifier[0xa3] = 0.0;
      handleIdentifier[0xa4] = 0.0;
      handleIdentifier[0xa5] = 0.0;
      handleIdentifier[0xa6] = 0.0;
      handleIdentifier[0xa7] = 0.0;
      handleIdentifier[0xa8] = 0.0;
    }
    else {
      handleIdentifier[0xa5] = (handleIdentifier[0xa1] + *ptr_float_var) * 0.5;
      handleIdentifier[0xa6] = (handleIdentifier[0xa2] + handleIdentifier[0x9e]) * 0.5;
      handleIdentifier[0xa7] = (handleIdentifier[0xa3] + handleIdentifier[0x9f]) * 0.5;
      handleIdentifier[0xa8] = 3.4028235e+38;
      float_result = 0.0;
      uint_result = (ulonglong)*(uint *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE);
      if (0 < (int)*(uint *)(longStack_88 + SYSTEM_DATA_COMPARE_SIZE)) {
        ptr_float_var = *(float **)(longStack_88 + 0x18);
        float_result = float_result;
        do {
          float_result = (*ptr_float_var - handleIdentifier[0xa5]) * (*ptr_float_var - handleIdentifier[0xa5]) +
                  (ptr_float_var[1] - handleIdentifier[0xa6]) * (ptr_float_var[1] - handleIdentifier[0xa6]) +
                  (ptr_float_var[2] - handleIdentifier[0xa7]) * (ptr_float_var[2] - handleIdentifier[0xa7]);
          if (float_result <= float_result) {
            float_result = float_result;
          }
          ptr_float_var = ptr_float_var + 4;
          uint_result = uint_result - 1;
          float_result = float_result;
        } while (uint_result != 0);
      }
      handleIdentifier[0xa9] = SQRT(float_result);
    }
    if (init_float_ptr_stack_98 != (float *)0x0) {
      while( true ) {
        LOCK();
        char_var = *(char *)(ptr_float_var + 0x3b);
        comparison_result_flag = char_var == '\0';
        if (comparison_result_flag) {
          *(char *)(ptr_float_var + 0x3b) = '\x01';
          char_var = '\0';
        }
        UNLOCK();
        if (comparison_result_flag) break;
        float_result = (float)_Thrd_id();
        if ((ptr_float_var[0x3c] == float_result) || (ptr_float_var[0x3c] != 0.0)) goto LAB_180075f4f;
        Sleep();
      }
      char_var = '\0';
LAB_180075f4f:
      LOCK();
      ptr_float_var = ptr_float_var + 0x3a;
      float_result = *ptr_float_var;
      ptr_float_var = (float *)(ulonglong)(uint)float_result;
      *ptr_float_var = (float)((int)*ptr_float_var + -1);
      UNLOCK();
      if (char_var == '\0') {
        if ((((float_result == 1.4013e-45) && (*(longlong *)(init_float_ptr_stack_98 + 0x84) != 0)) &&
            (ptr_float_var = init_float_ptr_stack_98, InitializeAuthenticationSystem(init_float_ptr_stack_98), *(char *)(ptr_float_var + 0x3f) == '\0')) &&
           ((*(char *)(ptr_float_var + 0x3d) == '\0' &&
            (((*(byte *)((longlong)ptr_float_var + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0 ||
             ((*(byte *)((longlong)ptr_float_var + 0xfe) & 1) == 0)))))) {
          long_ptr = *(longlong **)(ptr_float_var + 0x84);
          ptr_float_var[0x84] = 0.0;
          ptr_float_var[0x85] = 0.0;
          if (long_ptr != (longlong *)0x0) {
            (**(code **)(*long_ptr + 0x38))();
          }
        }
        LOCK();
        bool_var = *(byte *)(ptr_float_var + 0x3b);
        *(byte *)(ptr_float_var + 0x3b) = 0;
        ptr_float_var = (float *)(ulonglong)bool_var;
        UNLOCK();
      }
    }
  }
  return ptr_float_var;
}
// WARNING: Removing unreachable block (ram,0x0001800797c0)

// WARNING: Removing unreachable block (ram,0x0001800797c8)

// WARNING: Removing unreachable block (ram,0x0001800797cd)

// WARNING: Removing unreachable block (ram,0x0001800797dd)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeTextureSystem(longlong handleIdentifier)
void InitializeTextureSystem(longlong handleIdentifier)

{
  int *ptr_int_var;
  uint *node_root;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  float float_result;
  uint64_t uint_result;
  uint64_t uint_result;
  uint8_t audio_buffer_temp [16];
  bool bool_var;
  int *ptr_int_var;
  int int_result;
  longlong long_result;
  int *ptr_int_var;
  int *ptr_int_var;
  int *ptr_int_var;
  int *ptr_int_var;
  longlong long_result;
  float *ptr_float_var;
  uint uint_result;
  int *ptr_int_var;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  longlong long_result;
  int *ptr_int_var;
  int *ptr_int_var;
  int int_result;
  ulonglong uint_result;
  uint32_t *node_root9;
  ulonglong uint_result;
  longlong long_result;
  uint *ptr_uint_var;
  uint uint_result;
  int *pcompare_result4;
  uint8_t (*audio_buffer_ptr) [16];
  ulonglong uint_result;
  uint8_t (*audio_data_ptr) [16];
  ulonglong uint_result;
  longlong *long_ptr;
  longlong long_result;
  ulonglong uint_result;
  uint8_t (*audio_vector_ptr) [16];
  longlong long_result;
  bool system_integrity_flag;
  float float_result;
  float float_result;
  uint8_t audio_data_vector [16];
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  int istack_var;
  ulonglong flag_initialized;
  ulonglong ustack_var;
  int *pintStack_218;
  int *pintStack_210;
  int *pintStack_208;
  uint32_t uintStack_200;
  int *pintStack_1f8;
  int *pintStack_1f0;
  int intStack_1e8;
  uint8_t (*plocalBuffer_1e0) [16];
  ulonglong uintStack_1d8;
  longlong longStack_1d0;
  uint uintStack_1c8;
  uint uintStack_1c0;
  uint32_t uintStack_1bc;
  uint64_t uintStack_1b8;
  int *pintStack_1b0;
  uint32_t uintStack_1a8;
  uint64_t uintStack_1a0;
  uint64_t uintStack_198;
  int *pintStack_190;
  uint32_t uintStack_188;
  uint64_t uintStack_180;
  float init_float_stack_178;
  float init_float_stack_174;
  longlong longStack_170;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  uint32_t uintStack_158;
  uint8_t localBuffer_150 [16];
  uint64_t uintStack_140;
  uint32_t uintStack_138;
  uint32_t *system_buffer_ptr_130;
  uint64_t uintStack_128;
  uint64_t uintStack_120;
  uint32_t uintStack_118;
  uint64_t uintStack_110;
  uint64_t uintStack_108;
  uint64_t uintStack_100;
  uint64_t uintStack_f8;
  uint64_t uintStack_f0;
  uint64_t uintStack_e8;
  uint64_t uintStack_e0;
  uint64_t uintStack_d8;
  uint64_t uintStack_d0;
  uint64_t uintStack_c8;
  uint64_t uintStack_c0;
  uint64_t uintStack_b8;
  uint32_t uintStack_b0;

  uintStack_110 = INVALID_HANDLE_VALUE;
  ptr_int_var = (int *)(handleIdentifier + 0x60);
  int_result = *ptr_int_var;
  int_result = *(int *)(handleIdentifier + 0x88);
  uint_result = (ulonglong)int_result;
  intStack_1e8 = *(int *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  system_buffer_ptr_130 = (uint32_t *)0x0;
  uintStack_128 = 0;
  uintStack_120 = 0;
  uintStack_118 = 3;
  InitializeUISystem(&bufferPtr_130system_buffer_ptr_130,uint_result);
  uint_result = uint_result;
  node_root9 = bufferPtr_130;
  if (0 < int_result) {
    for (; uint_result != 0; uint_result = uint_result - 1) {
      *node_root9 = 1;
      node_root9 = node_root9 + 1;
    }
  }
  localBuffer_150 = ZEXT816(0);
  uintStack_140 = 0;
  uintStack_138 = 3;
  long_result = (ulonglong)*(ushort *)(handleIdentifier + 0xc0) + 1;
  if (long_result == 0) {
    long_result = 0;
    localBuffer_150 = ZEXT816(0) << 0x40;
  }
  else {
    ValidateSystemConfiguration(localBuffer_150,long_result);
    long_result = localBuffer_150._0_8_;
  }
  plocalBuffer_1e0 = (uint8_t (*) [16])(ulonglong)*(ushort *)(handleIdentifier + 0xc0);
  long_result = -1;
  do {
    long_result = long_result + 1;
    long_result = long_result * SYSTEM_NODE_HEADER_SIZE;
    long_result = *(longlong *)(long_result + 8 + long_result);
    long_result = *(longlong *)(long_result + long_result);
    uint_result = long_result - long_result >> 4;
    if (uint_result < uint_result) {
      uint_result = uint_result - uint_result;
      if ((ulonglong)(*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result) - long_result >> 4) < uint_result) {
        if (uint_result == 0) {
          uint_result = 1;
        }
        else {
          uint_result = uint_result * 2;
        }
        if (uint_result < uint_result) {
          uint_result = uint_result;
        }
        if (uint_result == 0) {
          long_result = 0;
        }
        else {
          long_result = AllocateSystemResource(systemMemoryPool,uint_result << 4,*(uint8_t *)(long_result + 0x18 + long_result))
          ;
          long_result = *(longlong *)(long_result + 8 + long_result);
          long_result = *(longlong *)(long_result + long_result);
        }
        if (long_result != long_result) {
                    // WARNING: Subroutine does not return
          memmove(long_result,long_result,long_result - long_result);
        }
        if (uint_result != 0) {
                    // WARNING: Subroutine does not return
          memset(long_result,0,uint_result * SYSTEM_DATA_COMPARE_SIZE);
        }
        if (*(longlong *)(long_result + long_result) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(longlong *)(long_result + long_result) = long_result;
        *(longlong *)(long_result + 8 + long_result) = long_result;
        *(ulonglong *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result) = uint_result * SYSTEM_DATA_COMPARE_SIZE + long_result;
      }
      else {
        if (uint_result != 0) {
                    // WARNING: Subroutine does not return
          memset(long_result,0,uint_result * SYSTEM_DATA_COMPARE_SIZE);
        }
        *(longlong *)(long_result + 8 + long_result) = long_result;
      }
    }
    else {
      *(ulonglong *)(long_result + 8 + long_result) = uint_result * SYSTEM_DATA_COMPARE_SIZE + long_result;
    }
    uint_result = 0;
    uint_result = uint_result;
    uint_result = uint_result;
    uint_result = uint_result;
    if (0 < (longlong)uint_result) {
      do {
        long_result = *(longlong *)(handleIdentifier + 0x90);
        long_result = (longlong)*(int *)(long_result + 8 + uint_result);
        long_result = (longlong)*(int *)(long_result + 4 + uint_result) * 0x5c;
        if (long_result == -1) {
          long_result = *(longlong *)(handleIdentifier + 0x68);
          long_result = *(longlong *)(handleIdentifier + 0x18);
          long_result = (longlong)*(int *)(long_result + long_result);
          long_result = (longlong)*(int *)((longlong)*(int *)(long_result + uint_result) * 0x5c + long_result);
          float_result = *(float *)(long_result + 8 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + 8 + long_result * SYSTEM_DATA_COMPARE_SIZE) - float_result;
          float_result = *(float *)(long_result + 4 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + 4 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + long_result * SYSTEM_DATA_COMPARE_SIZE);
          long_result = (longlong)*(int *)(long_result * 0x5c + long_result);
          float_result = *(float *)(long_result + 8 + long_result * SYSTEM_DATA_COMPARE_SIZE) - float_result;
          float_result = *(float *)(long_result + 4 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + long_result * SYSTEM_DATA_COMPARE_SIZE);
        }
        else {
          long_result = *(longlong *)(handleIdentifier + 0x68);
          long_result = *(longlong *)(long_result * 0x50 + *(longlong *)(handleIdentifier + 0xb0) + 8);
          long_result = (longlong)*(int *)(long_result + long_result);
          long_result = (longlong)*(int *)((longlong)*(int *)(long_result + uint_result) * 0x5c + long_result);
          float_result = *(float *)(long_result + 8 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + 8 + long_result * SYSTEM_DATA_COMPARE_SIZE) - float_result;
          float_result = *(float *)(long_result + 4 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + 4 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + long_result * SYSTEM_DATA_COMPARE_SIZE);
          long_result = (longlong)*(int *)(long_result * 0x5c + long_result);
          float_result = *(float *)(long_result + 8 + long_result * SYSTEM_DATA_COMPARE_SIZE) - float_result;
          float_result = *(float *)(long_result + 4 + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + long_result * SYSTEM_DATA_COMPARE_SIZE);
          float_result = *(float *)(long_result + long_result * SYSTEM_DATA_COMPARE_SIZE);
        }
        float_result = (float_result - float_result) * (float_result - float_result) - (float_result - float_result) * (float_result - float_result);
        float_result = float_result * (float_result - float_result) - float_result * (float_result - float_result);
        float_result = float_result * (float_result - float_result) - float_result * (float_result - float_result);
        init_float_stack_174 = SQRT(float_result * float_result + float_result * float_result + float_result * float_result);
        if (init_float_stack_174 <= 0.0) {
          float_result = 0.0;
          float_result = 0.0;
          init_float_stack_178 = 1.0;
          init_float_stack_174 = 1.0;
        }
        else {
          init_float_stack_178 = 1.0 / init_float_stack_174;
          float_result = float_result * init_float_stack_178;
          float_result = init_float_stack_178 * float_result;
          init_float_stack_178 = init_float_stack_178 * float_result;
        }
        uintStack_180 = CONCAT44(float_result,float_result);
        ptr_float_var = (float *)(*(longlong *)(localBuffer_150._0_8_ + long_result) + uint_result);
        *ptr_float_var = float_result;
        ptr_float_var[1] = float_result;
        ptr_float_var[2] = init_float_stack_178;
        ptr_float_var[3] = init_float_stack_174;
        uint_result = uint_result - 1;
        uint_result = uint_result + 0xc;
        uint_result = uint_result + SYSTEM_DATA_COMPARE_SIZE;
      } while (uint_result != 0);
    }
    long_result = localBuffer_150._0_8_;
    long_result = long_result;
  } while (long_result < (longlong)plocalBuffer_1e0);
  longStack_170 = 0;
  stack_long_ptr = (longlong *)0x0;
  stack_long_ptr = (longlong *)0x0;
  uintStack_158 = 3;
  InitializeGraphicsMemory(&longStack_170,(longlong)int_result);
  uint_result = uint_result;
  ustack_var = uint_result;
  if (0 < (longlong)uint_result) {
    do {
      long_result = longStack_170;
      ptr_int_var = (int *)0x0;
      long_result = *(longlong *)(handleIdentifier + 0x90);
      long_result = (ulonglong)*(uint *)(long_result + uint_result) * SYSTEM_NODE_HEADER_SIZE;
      ptr_int_var = *(int **)(long_result + 8 + longStack_170);
      int_result = (int)uint_result;
      if (ptr_int_var < *(int **)(long_result + SYSTEM_DATA_COMPARE_SIZE + longStack_170)) {
        *(int **)(long_result + 8 + longStack_170) = ptr_int_var + 1;
        *ptr_int_var = int_result;
      }
      else {
        ptr_int_var = *(int **)(long_result + longStack_170);
        long_result = (longlong)ptr_int_var - (longlong)ptr_int_var >> 2;
        if (long_result == 0) {
          long_result = 1;
LAB_180079c12:
          ptr_int_var = (int *)AllocateSystemResource(systemMemoryPool,long_result * 4,
                                         *(uint8_t *)(long_result + 0x18 + longStack_170));
          ptr_int_var = *(int **)(long_result + 8 + long_result);
          ptr_int_var = *(int **)(long_result + long_result);
        }
        else {
          long_result = long_result * 2;
          if (long_result != 0) goto LAB_180079c12;
        }
        if (ptr_int_var != ptr_int_var) {
                    // WARNING: Subroutine does not return
          memmove(ptr_int_var,ptr_int_var,(longlong)ptr_int_var - (longlong)ptr_int_var);
        }
        *ptr_int_var = int_result;
        if (*(longlong *)(long_result + long_result) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(int **)(long_result + long_result) = ptr_int_var;
        *(int **)(long_result + 8 + long_result) = ptr_int_var + 1;
        *(int **)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result) = ptr_int_var + long_result;
      }
      long_result = longStack_170;
      ptr_int_var = (int *)0x0;
      long_result = (ulonglong)*(uint *)(long_result + 4 + uint_result) * SYSTEM_NODE_HEADER_SIZE;
      ptr_int_var = *(int **)(long_result + 8 + longStack_170);
      if (ptr_int_var < *(int **)(long_result + SYSTEM_DATA_COMPARE_SIZE + longStack_170)) {
        *(int **)(long_result + 8 + longStack_170) = ptr_int_var + 1;
        *ptr_int_var = int_result;
      }
      else {
        ptr_int_var = *(int **)(long_result + longStack_170);
        long_result = (longlong)ptr_int_var - (longlong)ptr_int_var >> 2;
        if (long_result == 0) {
          long_result = 1;
LAB_180079cd7:
          ptr_int_var = (int *)AllocateSystemResource(systemMemoryPool,long_result * 4,
                                         *(uint8_t *)(long_result + 0x18 + longStack_170));
          ptr_int_var = *(int **)(long_result + 8 + long_result);
          ptr_int_var = *(int **)(long_result + long_result);
        }
        else {
          long_result = long_result * 2;
          if (long_result != 0) goto LAB_180079cd7;
        }
        if (ptr_int_var != ptr_int_var) {
                    // WARNING: Subroutine does not return
          memmove(ptr_int_var,ptr_int_var,(longlong)ptr_int_var - (longlong)ptr_int_var);
        }
        *ptr_int_var = int_result;
        if (*(longlong *)(long_result + long_result) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(int **)(long_result + long_result) = ptr_int_var;
        *(int **)(long_result + 8 + long_result) = ptr_int_var + 1;
        *(int **)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result) = ptr_int_var + long_result;
      }
      long_result = longStack_170;
      long_result = (ulonglong)*(uint *)(long_result + 8 + uint_result) * SYSTEM_NODE_HEADER_SIZE;
      ptr_int_var = *(int **)(long_result + 8 + longStack_170);
      if (ptr_int_var < *(int **)(long_result + SYSTEM_DATA_COMPARE_SIZE + longStack_170)) {
        *(int **)(long_result + 8 + longStack_170) = ptr_int_var + 1;
        *ptr_int_var = int_result;
      }
      else {
        ptr_int_var = *(int **)(long_result + longStack_170);
        long_result = (longlong)ptr_int_var - (longlong)ptr_int_var >> 2;
        if (long_result == 0) {
          long_result = 1;
LAB_180079d9b:
          ptr_int_var = (int *)AllocateSystemResource(systemMemoryPool,long_result * 4,
                                         *(uint8_t *)(long_result + 0x18 + longStack_170));
          ptr_int_var = *(int **)(long_result + 8 + long_result);
          ptr_int_var = *(int **)(long_result + long_result);
        }
        else {
          long_result = long_result * 2;
          if (long_result != 0) goto LAB_180079d9b;
          ptr_int_var = (int *)0x0;
        }
        if (ptr_int_var != ptr_int_var) {
                    // WARNING: Subroutine does not return
          memmove(ptr_int_var,ptr_int_var,(longlong)ptr_int_var - (longlong)ptr_int_var);
        }
        *ptr_int_var = int_result;
        if (*(longlong *)(long_result + long_result) != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *(int **)(long_result + long_result) = ptr_int_var;
        *(int **)(long_result + 8 + long_result) = ptr_int_var + 1;
        *(int **)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result) = ptr_int_var + long_result;
      }
      uint_result = uint_result + 0xc;
      ustack_var = ustack_var - 1;
      uint_result = (ulonglong)(int_result + 1);
    } while (ustack_var != 0);
  }
  uint_result = 0;
  flag_initialized = 0;
  if (*ptr_int_var < 1) {
LAB_18007a5ac:
    InitializeResourceSystem(&longStack_170);
    long_result = (longlong)intStack_1e8;
    uintStack_1d8 = (ulonglong)*(ushort *)(handleIdentifier + 0xc0);
    flag_initialized = -1;
    do {
      pintStack_218 = (int *)0x0;
      pintStack_210 = (int *)0x0;
      pintStack_208 = (int *)0x0;
      uintStack_200 = 3;
      if (long_result == 0) {
        InitializeRenderSystem(0);
        pintStack_210 = pintStack_218;
      }
      else {
        InitializeSystemModule34(&pintStack_218,long_result);
      }
      long_ptr = (longlong *)((flag_initialized + 1) * SYSTEM_NODE_HEADER_SIZE + localBuffer_150._0_8_);
      long_result = 0;
      pintStack_1f0 = (int *)0x0;
      if (0 < (longlong)uint_result) {
        pintStack_1f8 = (int *)0x0;
        do {
          long_result = 0;
          uintStack_180 = *(longlong *)(handleIdentifier + 0x90) + (longlong)pintStack_1f8;
          uint_result = bufferPtr_130[(longlong)pintStack_1f0];
          if (uint_result == 0) {
            do {
              if (flag_initialized == -1) {
                long_result = (longlong)*(int *)(uintStack_180 + long_result * 4) * 0x5c +
                         *(longlong *)(handleIdentifier + 0x68);
                uint_result = ((uint64_t *)(long_result + *long_ptr))[1];
                *(uint64_t *)(long_result + 4) = *(uint64_t *)(long_result + *long_ptr);
                *(uint64_t *)(long_result + 0xc) = uint_result;
                uint_result = ((uint64_t *)(long_result + *long_ptr))[1];
                *(uint64_t *)(long_result + 0x34) = *(uint64_t *)(long_result + *long_ptr);
                *(uint64_t *)(long_result + 0x3c) = uint_result;
                float_result = *(float *)(long_result + 8);
                float_result = *(float *)(long_result + 4);
                float_result = *(float *)(long_result + 0xc);
                float_result = float_result * float_result + float_result * float_result + float_result * float_result;
                system_float_union = rsqrtss(ZEXT416((uint)float_result),ZEXT416((uint)float_result));
                float_result = system_float_union._0_4_;
                float_result = float_result * 0.5 * (3.0 - float_result * float_result * float_result);
                *(float *)(long_result + 4) = float_result * float_result;
                *(float *)(long_result + 8) = float_result * float_result;
                *(float *)(long_result + 0xc) = float_result * float_result;
                float_result = *(float *)(long_result + 0x38);
                float_result = *(float *)(long_result + 0x34);
                float_result = *(float *)(long_result + 0x3c);
                float_result = float_result * float_result + float_result * float_result + float_result * float_result;
                system_float_union = rsqrtss(ZEXT416((uint)float_result),ZEXT416((uint)float_result));
                float_result = system_float_union._0_4_;
                float_result = float_result * 0.5 * (3.0 - float_result * float_result * float_result);
                *(float *)(long_result + 0x34) = float_result * float_result;
                *(float *)(long_result + 0x38) = float_result * float_result;
                *(float *)(long_result + 0x3c) = float_result * float_result;
              }
              else {
                uint_result = ((uint64_t *)(long_result + *long_ptr))[1];
                ptr_uint_var = (uint64_t *)
                         (*(longlong *)(*(longlong *)(handleIdentifier + 0xb0) + 0x30 + flag_initialized * 0x50) +
                         (longlong)*(int *)(uintStack_180 + long_result * 4) * SYSTEM_DATA_COMPARE_SIZE);
                *ptr_uint_var = *(uint64_t *)(long_result + *long_ptr);
                ptr_uint_var[1] = uint_result;
                ptr_float_var = (float *)((longlong)*(int *)(uintStack_180 + long_result * 4) * SYSTEM_DATA_COMPARE_SIZE +
                                   *(longlong *)
                                    (*(longlong *)(handleIdentifier + 0xb0) + 0x30 + flag_initialized * 0x50));
                float_result = ptr_float_var[1];
                float_result = *ptr_float_var;
                float_result = ptr_float_var[2];
                float_result = float_result * float_result + float_result * float_result + float_result * float_result;
                system_float_union = rsqrtss(ZEXT416((uint)float_result),ZEXT416((uint)float_result));
                float_result = system_float_union._0_4_;
                float_result = float_result * 0.5 * (3.0 - float_result * float_result * float_result);
                *ptr_float_var = float_result * float_result;
                ptr_float_var[1] = float_result * float_result;
                ptr_float_var[2] = float_result * float_result;
              }
              long_result = long_result + 1;
            } while (long_result < 3);
          }
          else {
            longStack_1d0 = 0;
            do {
              ptr_int_var = pintStack_218;
              long_result = 0;
              ptr_uint_var = (uint *)((longlong)*(int *)(uintStack_180 + longStack_1d0 * 4) * 0x5c +
                                *(longlong *)(handleIdentifier + 0x68));
              system_operation_flag = false;
              long_result = (longlong)
                       (int)((*(longlong *)((longlong)(pintStack_218 + (ulonglong)*ptr_uint_var * 8) + 8) -
                             *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8)) / 0x14);
              long_result = long_result;
              if (3 < long_result) {
                long_result = (long_result - 4U >> 2) + 1;
                long_result = long_result * 4;
                do {
                  uint_result = *ptr_uint_var;
                  if ((*(uint *)(*(longlong *)(pintStack_218 + (ulonglong)uint_result * 8) + long_result) &
                      uint_result) != 0) {
                    node_root = (uint *)(long_result + *(longlong *)(pintStack_218 + (ulonglong)uint_result * 8));
                    *node_root = *node_root | uint_result;
                    long_result = *long_ptr;
                    float_result = *(float *)(long_result + 8 + long_result);
                    float_result = *(float *)(long_result + 4 + long_result);
                    long_result = *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8);
                    *(float *)(long_result + 4 + long_result) =
                         *(float *)(long_result + 4 + long_result) + *(float *)(long_result + long_result);
                    *(float *)(long_result + 8 + long_result) = float_result + *(float *)(long_result + 8 + long_result);
                    *(float *)(long_result + 0xc + long_result) = float_result + *(float *)(long_result + 0xc + long_result);
                    system_operation_flag = true;
                    uint_result = *ptr_uint_var;
                  }
                  if ((*(uint *)(*(longlong *)(pintStack_218 + (ulonglong)uint_result * 8) + 0x14 + long_result)
                      & uint_result) != 0) {
                    node_root = (uint *)(*(longlong *)(pintStack_218 + (ulonglong)uint_result * 8) + 0x14 +
                                     long_result);
                    *node_root = *node_root | uint_result;
                    long_result = *long_ptr;
                    float_result = *(float *)(long_result + 8 + long_result);
                    float_result = *(float *)(long_result + 4 + long_result);
                    long_result = *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8);
                    *(float *)(long_result + 0x18 + long_result) =
                         *(float *)(long_result + 0x18 + long_result) + *(float *)(long_result + long_result);
                    *(float *)(long_result + 0x1c + long_result) = float_result + *(float *)(long_result + 0x1c + long_result)
                    ;
                    *(float *)(long_result + SYSTEM_NODE_HEADER_SIZE + long_result) = float_result + *(float *)(long_result + SYSTEM_NODE_HEADER_SIZE + long_result)
                    ;
                    system_operation_flag = true;
                    uint_result = *ptr_uint_var;
                  }
                  if ((*(uint *)(*(longlong *)(pintStack_218 + (ulonglong)uint_result * 8) + 0x28 + long_result)
                      & uint_result) != 0) {
                    node_root = (uint *)(*(longlong *)(pintStack_218 + (ulonglong)uint_result * 8) + 0x28 +
                                     long_result);
                    *node_root = *node_root | uint_result;
                    long_result = *long_ptr;
                    float_result = *(float *)(long_result + 8 + long_result);
                    float_result = *(float *)(long_result + 4 + long_result);
                    long_result = *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8);
                    *(float *)(long_result + 0x2c + long_result) =
                         *(float *)(long_result + 0x2c + long_result) + *(float *)(long_result + long_result);
                    *(float *)(long_result + 0x30 + long_result) = float_result + *(float *)(long_result + 0x30 + long_result)
                    ;
                    *(float *)(long_result + 0x34 + long_result) = float_result + *(float *)(long_result + 0x34 + long_result)
                    ;
                    system_operation_flag = true;
                  }
                  uint_result = *(uint *)(long_result + 0x3c +
                                    *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8));
                  if ((uint_result & uint_result) != 0) {
                    *(uint *)(*(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8) + 0x3c + long_result)
                         = uint_result | uint_result;
                    long_result = *long_ptr;
                    float_result = *(float *)(long_result + 8 + long_result);
                    float_result = *(float *)(long_result + 4 + long_result);
                    long_result = *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8);
                    *(float *)(long_result + 0x40 + long_result) =
                         *(float *)(long_result + 0x40 + long_result) + *(float *)(long_result + long_result);
                    *(float *)(long_result + 0x44 + long_result) = float_result + *(float *)(long_result + 0x44 + long_result)
                    ;
                    *(float *)(long_result + 0x48 + long_result) = float_result + *(float *)(long_result + 0x48 + long_result)
                    ;
                    system_operation_flag = true;
                  }
                  long_result = long_result + 0x50;
                  long_result = long_result + -1;
                } while (long_result != 0);
              }
              system_data_array = (uint8_t (*) [16])0x0;
              if (long_result < long_result) {
                long_result = long_result * 0x14;
                long_result = long_result - long_result;
                do {
                  uint_result = *(uint *)(long_result + *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8));
                  if ((uint_result & uint_result) != 0) {
                    *(uint *)(long_result + *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8)) =
                         uint_result | uint_result;
                    long_result = *long_ptr;
                    float_result = *(float *)(long_result + 8 + long_result);
                    float_result = *(float *)(long_result + 4 + long_result);
                    long_result = *(longlong *)(pintStack_218 + (ulonglong)*ptr_uint_var * 8);
                    *(float *)(long_result + 4 + long_result) =
                         *(float *)(long_result + 4 + long_result) + *(float *)(long_result + long_result);
                    *(float *)(long_result + 8 + long_result) = float_result + *(float *)(long_result + 8 + long_result);
                    *(float *)(long_result + 0xc + long_result) = float_result + *(float *)(long_result + 0xc + long_result);
                    system_operation_flag = true;
                  }
                  long_result = long_result + 0x14;
                  long_result = long_result + -1;
                } while (long_result != 0);
              }
              if (!system_operation_flag) {
                long_result = *long_ptr;
                uintStack_1b8._4_4_ = *(uint32_t *)(long_result + 8 + long_result);
                uintStack_1b8._0_4_ = *(uint32_t *)(long_result + 4 + long_result);
                uintStack_1bc = *(uint32_t *)(long_result + long_result);
                uintStack_1a0 = (int *)CONCAT44((uint32_t)uintStack_1b8,uintStack_1bc);
                uintStack_198 = (int *)CONCAT44(0x7f7fffff,uintStack_1b8._4_4_);
                pintStack_1b0 = (int *)CONCAT44(pintStack_1b0._4_4_,0x7f7fffff);
                uint_result = (ulonglong)*ptr_uint_var;
                system_buffer_pointer = *(uint8_t (**) [16])(pintStack_218 + uint_result * 8 + 2);
                uintStack_1c0 = uint_result;
                if (system_buffer_pointer < *(uint8_t (**) [16])(pintStack_218 + uint_result * 8 + 4)) {
                  *(uint8_t **)(pintStack_218 + uint_result * 8 + 2) = system_buffer_pointer[1] + 4;
                  system_audio_union._4_4_ = uintStack_1bc;
                  system_audio_union._0_4_ = uint_result;
                  system_audio_union._8_4_ = (uint32_t)uintStack_1b8;
                  system_audio_union._12_4_ = uintStack_1b8._4_4_;
                  *system_buffer_pointer = system_audio_union;
                  *(uint32_t *)system_buffer_pointer[1] = 0x7f7fffff;
                }
                else {
                  system_array_pointer = *(uint8_t (**) [16])(pintStack_218 + uint_result * 8);
                  long_result = ((longlong)system_buffer_pointer - (longlong)system_array_pointer) / 0x14;
                  if (long_result == 0) {
                    ustack_var = 1;
LAB_18007ac04:
                    system_data_array = (uint8_t (*) [16])
                               AllocateSystemResource(systemMemoryPool,ustack_var * 0x14,
                                             (char)pintStack_218[uint_result * 8 + 6]);
                    system_buffer_pointer = *(uint8_t (**) [16])(ptr_int_var + uint_result * 8 + 2);
                    system_array_pointer = *(uint8_t (**) [16])(ptr_int_var + uint_result * 8);
                  }
                  else {
                    ustack_var = long_result * 2;
                    if (ustack_var != 0) goto LAB_18007ac04;
                  }
                  plocalBuffer_1e0 = system_data_array;
                  if (system_array_pointer != system_buffer_pointer) {
                    // WARNING: Subroutine does not return
                    memmove(system_data_array,system_array_pointer,(longlong)system_buffer_pointer - (longlong)system_array_pointer);
                  }
                  system_float_union._4_4_ = uintStack_1bc;
                  system_float_union._0_4_ = uintStack_1c0;
                  system_float_union._8_4_ = (uint32_t)uintStack_1b8;
                  system_float_union._12_4_ = uintStack_1b8._4_4_;
                  *system_data_array = system_float_union;
                  *(uint32_t *)system_data_array[1] = pintStack_1b0._0_4_;
                  if (*(longlong *)(ptr_int_var + uint_result * 8) != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  *(uint8_t (**) [16])(ptr_int_var + uint_result * 8) = system_data_array;
                  *(uint8_t **)(ptr_int_var + uint_result * 8 + 2) = system_data_array[1] + 4;
                  *(ulonglong *)(ptr_int_var + uint_result * 8 + 4) = (longlong)system_data_array + ustack_var * 0x14;
                }
              }
              longStack_1d0 = longStack_1d0 + 1;
            } while (longStack_1d0 < 3);
          }
          pintStack_1f0 = (int *)((longlong)pintStack_1f0 + 1);
          pintStack_1f8 = pintStack_1f8 + 3;
          long_result = long_result + SYSTEM_DATA_COMPARE_SIZE;
        } while ((longlong)pintStack_1f0 < (longlong)uint_result);
        long_result = (longlong)intStack_1e8;
      }
      long_result = 0;
      long_result = long_result;
      long_result = long_result;
      if (0 < long_result) {
        do {
          int_result = (int)((*(longlong *)(long_result + 8 + (longlong)pintStack_218) -
                         *(longlong *)(long_result + (longlong)pintStack_218)) / 0x14);
          long_result = (longlong)int_result;
          long_result = long_result;
          if (0 < int_result) {
            do {
              long_result = *(longlong *)(long_result + (longlong)pintStack_218);
              float_result = *(float *)(long_result + 8 + long_result);
              float_result = *(float *)(long_result + 4 + long_result);
              float_result = *(float *)(long_result + 0xc + long_result);
              float_result = float_result * float_result + float_result * float_result + float_result * float_result;
              if (SQRT(float_result) == 0.0) {
                *(uint8_t (*) [16])(long_result + 4 + long_result) = systemCoreData;
              }
              else {
                system_float_union = rsqrtss(ZEXT416((uint)float_result),ZEXT416((uint)float_result));
                float_result = system_float_union._0_4_;
                float_result = float_result * 0.5 * (3.0 - float_result * float_result * float_result);
                *(float *)(long_result + 4 + long_result) = float_result * float_result;
                *(float *)(long_result + 8 + long_result) = float_result * float_result;
                *(float *)(long_result + 0xc + long_result) = float_result * float_result;
              }
              long_result = long_result + -1;
              long_result = long_result + 0x14;
            } while (long_result != 0);
          }
          long_result = long_result + -1;
          long_result = long_result + SYSTEM_NODE_HEADER_SIZE;
        } while (long_result != 0);
      }
      long_result = long_result;
      if (0 < (longlong)uint_result) {
        do {
          uint_result = bufferPtr_130[long_result];
          if (uint_result != 0) {
            long_result = *(longlong *)(handleIdentifier + 0x90);
            long_result = (longlong)*(int *)(long_result + long_result) * 0x5c;
            long_result = (longlong)*(int *)(*(longlong *)(handleIdentifier + 0x68) + long_result);
            long_result = 0;
            int_result = (int)((*(longlong *)(pintStack_218 + long_result * 8 + 2) -
                           *(longlong *)(pintStack_218 + long_result * 8)) / 0x14);
            long_result = -1;
            if (0 < int_result) {
              ptr_uint_var = *(uint **)(pintStack_218 + long_result * 8);
              do {
                long_result = long_result;
                if ((*ptr_uint_var & uint_result) != 0) break;
                long_result = long_result + 1;
                ptr_uint_var = ptr_uint_var + 5;
                long_result = -1;
              } while (long_result < int_result);
            }
            long_result = *(longlong *)(pintStack_218 + long_result * 8);
            ptr_uint_var = (uint64_t *)(long_result + 4 + long_result * 0x14);
            uint_result = *ptr_uint_var;
            uint_result = ptr_uint_var[1];
            if (flag_initialized == -1) {
              ptr_uint_var = (uint64_t *)(*(longlong *)(handleIdentifier + 0x68) + 4 + long_result);
              *ptr_uint_var = uint_result;
              ptr_uint_var[1] = uint_result;
              ptr_uint_var = (uint64_t *)(long_result + 4 + long_result * 0x14);
              uint_result = ptr_uint_var[1];
              ptr_uint_var = (uint64_t *)
                       ((longlong)*(int *)(long_result + long_result) * 0x5c + 0x34 +
                       *(longlong *)(handleIdentifier + 0x68));
              *ptr_uint_var = *ptr_uint_var;
              ptr_uint_var[1] = uint_result;
            }
            else {
              ptr_uint_var = (uint64_t *)
                       (*(longlong *)(*(longlong *)(handleIdentifier + 0xb0) + 0x30 + flag_initialized * 0x50) +
                       (longlong)*(int *)(long_result + long_result) * SYSTEM_DATA_COMPARE_SIZE);
              *ptr_uint_var = uint_result;
              ptr_uint_var[1] = uint_result;
            }
            long_result = (longlong)*(int *)(long_result + 4 + long_result);
            long_result = long_result * 0x5c;
            long_result = (longlong)*(int *)(*(longlong *)(handleIdentifier + 0x68) + long_result);
            long_result = 0;
            int_result = (int)((*(longlong *)(pintStack_218 + long_result * 8 + 2) -
                           *(longlong *)(pintStack_218 + long_result * 8)) / 0x14);
            long_result = -1;
            if (0 < int_result) {
              ptr_uint_var = *(uint **)(pintStack_218 + long_result * 8);
              do {
                long_result = long_result;
                if ((*ptr_uint_var & uint_result) != 0) break;
                long_result = long_result + 1;
                ptr_uint_var = ptr_uint_var + 5;
                long_result = -1;
              } while (long_result < int_result);
            }
            long_result = *(longlong *)(pintStack_218 + long_result * 8);
            ptr_uint_var = (uint64_t *)(long_result + 4 + long_result * 0x14);
            uint_result = *ptr_uint_var;
            uint_result = ptr_uint_var[1];
            if (flag_initialized == -1) {
              ptr_uint_var = (uint64_t *)(*(longlong *)(handleIdentifier + 0x68) + 4 + long_result);
              *ptr_uint_var = uint_result;
              ptr_uint_var[1] = uint_result;
              ptr_uint_var = (uint64_t *)(long_result + 4 + long_result * 0x14);
              uint_result = ptr_uint_var[1];
              ptr_uint_var = (uint64_t *)
                       ((longlong)*(int *)(long_result + 4 + long_result) * 0x5c + 0x34 +
                       *(longlong *)(handleIdentifier + 0x68));
              *ptr_uint_var = *ptr_uint_var;
              ptr_uint_var[1] = uint_result;
            }
            else {
              ptr_uint_var = (uint64_t *)
                       (*(longlong *)(*(longlong *)(handleIdentifier + 0xb0) + 0x30 + flag_initialized * 0x50) +
                       long_result * SYSTEM_DATA_COMPARE_SIZE);
              *ptr_uint_var = uint_result;
              ptr_uint_var[1] = uint_result;
            }
            long_result = (longlong)*(int *)(long_result + 8 + long_result);
            long_result = long_result * 0x5c;
            long_result = (longlong)*(int *)(long_result + *(longlong *)(handleIdentifier + 0x68));
            long_result = 0;
            long_result = (longlong)
                     (int)((*(longlong *)(pintStack_218 + long_result * 8 + 2) -
                           *(longlong *)(pintStack_218 + long_result * 8)) / 0x14);
            long_result = -1;
            if (0 < long_result) {
              ptr_uint_var = *(uint **)(pintStack_218 + long_result * 8);
              do {
                long_result = long_result;
                if ((*ptr_uint_var & uint_result) != 0) break;
                long_result = long_result + 1;
                ptr_uint_var = ptr_uint_var + 5;
                long_result = -1;
              } while (long_result < long_result);
            }
            long_result = *(longlong *)(pintStack_218 + long_result * 8);
            system_float_union = *(uint8_t (*) [16])(long_result + 4 + long_result * 0x14);
            if (flag_initialized == -1) {
              *(uint8_t (*) [16])(long_result + 4 + *(longlong *)(handleIdentifier + 0x68)) = system_float_union;
              ptr_uint_var = (uint64_t *)(long_result + 4 + long_result * 0x14);
              uint_result = ptr_uint_var[1];
              ptr_uint_var = (uint64_t *)
                       ((longlong)*(int *)(long_result + 8 + long_result) * 0x5c + 0x34 +
                       *(longlong *)(handleIdentifier + 0x68));
              *ptr_uint_var = *ptr_uint_var;
              ptr_uint_var[1] = uint_result;
            }
            else {
              *(uint8_t (*) [16])
               (*(longlong *)(*(longlong *)(handleIdentifier + 0xb0) + 0x30 + flag_initialized * 0x50) +
               long_result * SYSTEM_DATA_COMPARE_SIZE) = system_float_union;
            }
          }
          long_result = long_result + 1;
          long_result = long_result + 0xc;
        } while (long_result < (longlong)uint_result);
        long_result = (longlong)intStack_1e8;
      }
      InitializeSystemDataNode31(&pintStack_218);
      flag_initialized = flag_initialized + 1;
      if ((longlong)uintStack_1d8 <= (longlong)flag_initialized) {
        InitializeResourceSystem(localBuffer_150);
        if (system_buffer_ptr_130 != (uint32_t *)0x0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation(system_buffer_ptr_130);
        }
        return;
      }
    } while( true );
  }
  longStack_1d0 = 0;
LAB_180079e40:
  system_data_array = (uint8_t (*) [16])(longStack_1d0 * SYSTEM_NODE_HEADER_SIZE);
  ptr_int_var = *(int **)(*system_data_array + longStack_170);
  uint_result = *(longlong *)(*system_data_array + longStack_170 + 8) - (longlong)ptr_int_var >> 2;
  plocalBuffer_1e0 = system_data_array;
  if (1 < uint_result) {
    system_operation_flag = true;
    uintStack_1c8 = bufferPtr_130[*ptr_int_var];
    int_result = 1;
    uint_result = uintStack_1c8;
    ptr_int_var = ptr_int_var;
    do {
      ptr_int_var = ptr_int_var + 1;
      if ((uint_result & bufferPtr_130[*ptr_int_var]) == 0) {
        system_operation_flag = false;
        break;
      }
      uint_result = uint_result | bufferPtr_130[*ptr_int_var];
      int_result = int_result + 1;
    } while ((ulonglong)(longlong)int_result < uint_result);
    uint_result = (uint)flag_initialized;
    if (!system_operation_flag) {
      uintStack_1a0 = (int *)0x0;
      uintStack_198 = (int *)0x0;
      pintStack_190 = (int *)0x0;
      uintStack_188 = 3;
      ptr_int_var = (int *)AllocateSystemResource(systemMemoryPool,4,CONCAT71((uint7)(uint3)(flag_initialized >> 8),3));
      *ptr_int_var = *ptr_int_var;
      ptr_int_var = ptr_int_var + 1;
      pintStack_218 = (int *)0x0;
      pintStack_210 = (int *)0x0;
      ptr_int_var = (int *)0x0;
      pintStack_208 = (int *)0x0;
      uintStack_200 = 3;
      istack_var = 1;
      pintStack_1f8 = *(int **)(*system_data_array + longStack_170);
      ptr_int_var = ptr_int_var;
      uintStack_1a0 = ptr_int_var;
      uintStack_198 = ptr_int_var;
      pintStack_190 = ptr_int_var;
      if (1 < (ulonglong)(*(longlong *)(*system_data_array + longStack_170 + 8) - (longlong)pintStack_1f8 >> 2)) {
        ustack_var = 4;
        ptr_int_var = (int *)0x0;
        do {
          ptr_int_var = pintStack_210;
          ptr_int_var = (int *)0x0;
          if (pintStack_210 < ptr_int_var) {
            *pintStack_210 = *(int *)(ustack_var + (longlong)pintStack_1f8);
            ptr_int_var = ptr_int_var;
          }
          else {
            uintStack_1d8 = (longlong)pintStack_210 - (longlong)ptr_int_var;
            if ((longlong)uintStack_1d8 >> 2 == 0) {
              pintStack_1f0 = (int *)0x1;
LAB_180079fb3:
              ptr_int_var = (int *)AllocateSystemResource(systemMemoryPool,(longlong)pintStack_1f0 * 4,
                                             CONCAT71((int7)(ustack_var >> 8),3));
            }
            else {
              pintStack_1f0 = (int *)(((longlong)uintStack_1d8 >> 2) * 2);
              if (pintStack_1f0 != (int *)0x0) goto LAB_180079fb3;
            }
            if (ptr_int_var != ptr_int_var) {
                    // WARNING: Subroutine does not return
              memmove(ptr_int_var,ptr_int_var,uintStack_1d8);
            }
            *ptr_int_var = *(int *)(ustack_var + (longlong)pintStack_1f8);
            if (ptr_int_var != (int *)0x0) {
                    // WARNING: Subroutine does not return
              ProcessSystemOperation(ptr_int_var);
            }
            ptr_int_var = ptr_int_var + (longlong)pintStack_1f0;
            system_data_array = plocalBuffer_1e0;
            pintStack_218 = ptr_int_var;
            pintStack_208 = ptr_int_var;
            pintStack_210 = ptr_int_var;
          }
          pintStack_210 = pintStack_210 + 1;
          istack_var = istack_var + 1;
          ustack_var = ustack_var + 4;
          pintStack_1f8 = *(int **)(*system_data_array + longStack_170);
          ptr_int_var = ptr_int_var;
        } while ((ulonglong)(longlong)istack_var <
                 (ulonglong)(*(longlong *)(*system_data_array + longStack_170 + 8) - (longlong)pintStack_1f8 >> 2)
                );
      }
      do {
        ptr_int_var = (int *)0x0;
        uintStack_1c0 = 0;
        uintStack_1bc = 0;
        uintStack_1b8 = (int *)0x0;
        pintStack_1b0 = (int *)0x0;
        uintStack_1a8 = 3;
        system_operation_flag = false;
        bool_var = false;
        uint_result = 0;
        uintStack_180 = (longlong)pintStack_210 - (longlong)pintStack_218 >> 2;
        ptr_int_var = (int *)0x0;
        ptr_int_var = (int *)0x0;
        ptr_int_var = ptr_int_var;
        pcompare_result4 = ptr_int_var;
        ptr_int_var = pintStack_218;
        pintStack_1f8 = pintStack_210;
        if (uintStack_180 != 0) {
          do {
            pintStack_1f0 = ptr_int_var;
            ptr_int_var = (int *)0x0;
            int_result = *pintStack_1f0;
            if ((uintStack_1c8 & bufferPtr_130[int_result]) == 0) {
              if (ptr_int_var < ptr_int_var) {
                *ptr_int_var = int_result;
                ptr_int_var = ptr_int_var;
                uint_result = (uint)pcompare_result4;
              }
              else {
                uintStack_1d8 = (longlong)ptr_int_var - (longlong)ptr_int_var;
                if ((longlong)uintStack_1d8 >> 2 == 0) {
                  long_result = 1;
LAB_18007a203:
                  ptr_int_var = (int *)AllocateSystemResource(systemMemoryPool,long_result * 4,3);
                }
                else {
                  long_result = ((longlong)uintStack_1d8 >> 2) * 2;
                  if (long_result != 0) goto LAB_18007a203;
                }
                if (ptr_int_var != ptr_int_var) {
                    // WARNING: Subroutine does not return
                  memmove(ptr_int_var,ptr_int_var,uintStack_1d8);
                }
                *ptr_int_var = *pintStack_1f0;
                if (ptr_int_var != (int *)0x0) {
                    // WARNING: Subroutine does not return
                  ProcessSystemOperation(ptr_int_var);
                }
                uintStack_1c0 = (uint)ptr_int_var;
                uintStack_1bc = (uint32_t)((ulonglong)ptr_int_var >> SYSTEM_NODE_HEADER_SIZE);
                ptr_int_var = ptr_int_var + long_result;
                pintStack_1b0 = ptr_int_var;
                ptr_int_var = ptr_int_var;
              }
              ptr_int_var = ptr_int_var + 1;
              uintStack_1b8 = ptr_int_var;
              system_operation_flag = bool_var;
            }
            else {
              uintStack_1c8 = uintStack_1c8 | bufferPtr_130[int_result];
              if (ptr_int_var < ptr_int_var) {
                uintStack_198 = ptr_int_var + 1;
                *ptr_int_var = int_result;
                ptr_int_var = uintStack_198;
                ptr_int_var = ptr_int_var;
                uint_result = (uint)pcompare_result4;
                system_operation_flag = true;
              }
              else {
                uintStack_1d8 = (longlong)ptr_int_var - (longlong)ptr_int_var;
                if ((longlong)uintStack_1d8 >> 2 == 0) {
                  long_result = 1;
LAB_18007a142:
                  ptr_int_var = (int *)AllocateSystemResource(systemMemoryPool,long_result * 4,3);
                }
                else {
                  long_result = ((longlong)uintStack_1d8 >> 2) * 2;
                  ptr_int_var = ptr_int_var;
                  if (long_result != 0) goto LAB_18007a142;
                }
                if (ptr_int_var != ptr_int_var) {
                    // WARNING: Subroutine does not return
                  memmove(ptr_int_var,ptr_int_var,uintStack_1d8);
                }
                *ptr_int_var = *pintStack_1f0;
                ptr_int_var = ptr_int_var + 1;
                if (ptr_int_var != (int *)0x0) {
                    // WARNING: Subroutine does not return
                  ProcessSystemOperation(ptr_int_var);
                }
                pintStack_190 = ptr_int_var + long_result;
                ptr_int_var = ptr_int_var;
                ptr_int_var = pintStack_1b0;
                ptr_int_var = ptr_int_var;
                uintStack_1a0 = ptr_int_var;
                uintStack_198 = ptr_int_var;
                system_operation_flag = true;
              }
            }
            uint_result = uint_result + 1;
            pintStack_1f0 = pintStack_1f0 + 1;
            ptr_int_var = ptr_int_var;
            pcompare_result4 = (int *)(ulonglong)uint_result;
            ptr_int_var = pintStack_1f0;
            ptr_int_var = pintStack_190;
            bool_var = system_operation_flag;
          } while ((ulonglong)(longlong)(int)uint_result < uintStack_180);
        }
        long_ptr = stack_long_ptr;
        uintStack_1c0 = (uint)pintStack_218;
        uintStack_1bc = (uint32_t)((ulonglong)pintStack_218 >> SYSTEM_NODE_HEADER_SIZE);
        uintStack_1b8._0_4_ = SUB84(pintStack_1f8,0);
        uintStack_1b8._4_4_ = (uint32_t)((ulonglong)pintStack_1f8 >> SYSTEM_NODE_HEADER_SIZE);
        pintStack_1b0 = pintStack_208;
        uintStack_200 = 3;
        uintStack_1a8 = 3;
        pintStack_210 = ptr_int_var;
        pintStack_208 = ptr_int_var;
        pintStack_1f8 = ptr_int_var;
        if ((((longlong)ptr_int_var - (longlong)ptr_int_var & 0xfffffffffffffffcU) == 0) || (!system_operation_flag))
        goto LAB_18007a312;
        system_operation_flag = pintStack_218 != (int *)0x0;
        pintStack_218 = ptr_int_var;
        if (system_operation_flag) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
      } while( true );
    }
  }
  goto LAB_18007a58b;
LAB_18007a312:
  if (pintStack_218 != (int *)0x0) {
    pintStack_218 = ptr_int_var;
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  ptr_int_var = *(int **)(*plocalBuffer_1e0 + longStack_170);
  pintStack_218 = ptr_int_var;
  if (((*(longlong *)(*plocalBuffer_1e0 + longStack_170 + 8) - (longlong)ptr_int_var ^
       (longlong)ptr_int_var - (longlong)ptr_int_var) & 0xfffffffffffffffcU) != 0) {
    *(int **)(*plocalBuffer_1e0 + longStack_170) = ptr_int_var;
    uintStack_198 = *(int **)(*plocalBuffer_1e0 + longStack_170 + 8);
    *(int **)(*plocalBuffer_1e0 + longStack_170 + 8) = ptr_int_var;
    pintStack_190 = *(int **)(plocalBuffer_1e0[1] + longStack_170);
    *(int **)(plocalBuffer_1e0[1] + longStack_170) = ptr_int_var;
    uintStack_188 = *(uint32_t *)(plocalBuffer_1e0[1] + longStack_170 + 8);
    *(uint32_t *)(plocalBuffer_1e0[1] + longStack_170 + 8) = 3;
    uintStack_1a0 = ptr_int_var;
    if (stack_long_ptr < stack_long_ptr) {
      uint_result = (longlong)ptr_int_var - (longlong)ptr_int_var;
      *(uint32_t *)(stack_long_ptr + 3) = 3;
      if (uint_result < 4) {
        long_result = 0;
        stack_long_ptr = stack_long_ptr + 4;
      }
      else {
        stack_long_ptr = stack_long_ptr + 4;
        long_result = AllocateSystemResource(systemMemoryPool,((longlong)uint_result >> 2) * 4,3);
      }
      *long_ptr = long_result;
      long_ptr[1] = long_result;
      long_ptr[2] = long_result + ((longlong)uint_result >> 2) * 4;
      if (ptr_int_var != ptr_int_var) {
                    // WARNING: Subroutine does not return
        memmove(*long_ptr,ptr_int_var,uint_result);
      }
      long_ptr[1] = *long_ptr;
    }
    else {
      InitializeShaderSystem(&longStack_170,&pintStack_218);
      ptr_int_var = pintStack_210;
      ptr_int_var = pintStack_218;
    }
    long_result = longStack_1d0;
    int_result = *ptr_int_var;
    long_result = longStack_1d0 * 0x5c;
    long_result = *(longlong *)(handleIdentifier + 0x68);
    uintStack_108 = *(uint64_t *)(long_result + long_result);
    uintStack_100 = ((uint64_t *)(long_result + long_result))[1];
    ptr_uint_var = (uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result);
    uintStack_f8 = *ptr_uint_var;
    uintStack_f0 = ptr_uint_var[1];
    ptr_uint_var = (uint64_t *)(long_result + SYSTEM_NODE_HEADER_SIZE + long_result);
    uintStack_e8 = *ptr_uint_var;
    uintStack_e0 = ptr_uint_var[1];
    ptr_uint_var = (uint64_t *)(long_result + 0x30 + long_result);
    uintStack_d8 = *ptr_uint_var;
    uintStack_d0 = ptr_uint_var[1];
    ptr_uint_var = (uint64_t *)(long_result + 0x40 + long_result);
    uintStack_c8 = *ptr_uint_var;
    uintStack_c0 = ptr_uint_var[1];
    uintStack_b8 = *(uint64_t *)(long_result + 0x50 + long_result);
    uintStack_b0 = *(uint32_t *)(long_result + 0x58 + long_result);
    InitializeGraphicsSystem(ptr_int_var,&uintStack_108);
    uint_result = (longlong)ptr_int_var - (longlong)ptr_int_var >> 2;
    uint_result = 0;
    ptr_int_var = ptr_int_var;
    uint_result = uint_result;
    if (uint_result != 0) {
      do {
        long_result = (longlong)*ptr_int_var;
        long_result = *(longlong *)(handleIdentifier + 0x90);
        if (*(uint *)(long_result + long_result * 0xc) == (uint)flag_initialized) {
          *(int *)(long_result + long_result * 0xc) = int_result;
        }
        if (*(uint *)(long_result + 4 + long_result * 0xc) == (uint)flag_initialized) {
          *(int *)(long_result + 4 + long_result * 0xc) = int_result;
        }
        if (*(uint *)(long_result + 8 + long_result * 0xc) == (uint)flag_initialized) {
          *(int *)(long_result + 8 + long_result * 0xc) = int_result;
        }
        uint_result = (int)uint_result + 1;
        ptr_int_var = ptr_int_var + 1;
        uint_result = (ulonglong)uint_result;
      } while ((ulonglong)(longlong)(int)uint_result < uint_result);
    }
    uint_result = uint_result;
    ptr_int_var = ptr_int_var;
    if (*(short *)(handleIdentifier + 0xc0) != 0) {
      do {
        long_result = uint_result + *(longlong *)(handleIdentifier + 0xb0);
        long_result = *(longlong *)(uint_result + 0x30 + *(longlong *)(handleIdentifier + 0xb0));
        ptr_uint_var = (uint64_t *)(long_result + long_result * SYSTEM_DATA_COMPARE_SIZE);
        uint_result = *ptr_uint_var;
        uint_result = ptr_uint_var[1];
        int_result = *(int *)(long_result + 0x2c);
        int_result = *(int *)(long_result + 0x28);
        if (int_result <= int_result) {
          if (int_result < 2) {
            *(uint32_t *)(long_result + 0x2c) = 8;
          }
          else {
            *(int *)(long_result + 0x2c) = (int_result >> 1) + int_result;
          }
          InitializeSystemModule47(long_result + 0x28);
          int_result = *(int *)(long_result + 0x28);
          long_result = *(longlong *)(long_result + 0x30);
        }
        ptr_uint_var = (uint64_t *)(long_result + (longlong)int_result * SYSTEM_DATA_COMPARE_SIZE);
        *ptr_uint_var = uint_result;
        ptr_uint_var[1] = uint_result;
        *(int *)(long_result + 0x28) = *(int *)(long_result + 0x28) + 1;
        uint_result = (int)uint_result + 1;
        uint_result = uint_result + 0x50;
        uint_result = (ulonglong)uint_result;
      } while ((int)uint_result < (int)(uint)*(ushort *)(handleIdentifier + 0xc0));
    }
  }
  if (ptr_int_var != (int *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_int_var);
  }
  if (ptr_int_var != (int *)0x0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation(ptr_int_var);
  }
LAB_18007a58b:
  uint_result = uint_result + 1;
  flag_initialized = (ulonglong)uint_result;
  longStack_1d0 = longStack_1d0 + 1;
  if (*ptr_int_var <= (int)uint_result) goto LAB_18007a5ac;
  goto LAB_180079e40;
}
// void InitializeInputSystem(longlong *handleIdentifier)

void InitializeInputSystem(longlong *handleIdentifier)

{
  longlong *long_ptr;

  for (long_ptr = (longlong *)*handleIdentifier; long_ptr != (longlong *)handleIdentifier[1]; long_ptr = long_ptr + 4) {
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}
// void InitializeSystemDataNode25(longlong *handleIdentifier)

void InitializeSystemDataNode25(longlong *handleIdentifier)

{
  longlong *long_ptr;

  for (long_ptr = (longlong *)*handleIdentifier; long_ptr != (longlong *)handleIdentifier[1]; long_ptr = long_ptr + 4) {
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
  }
  if (*handleIdentifier == 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  ProcessSystemOperation();
}

uint8_t InitializeResourceSystem(longlong handleIdentifier)

{
  char is_initialized;
  longlong long_result;

  long_result = *(longlong *)(handleIdentifier + 0x1b8);
  is_initialized = *(char *)(long_result + 0x38c);
  if (is_initialized == '\t') {
    is_initialized = IsSystemInitialized();
    *(char *)(long_result + 0x38c) = is_initialized;
  }
  is_initialized = InitializeSystemComponents(handleIdentifier,handleIdentifier + 0x1e8,is_initialized);
  if (is_initialized == '\0') {
    *(byte *)(handleIdentifier + 0xfe) = *(byte *)(handleIdentifier + 0xfe) & 0xfb;
    return 0;
  }
  return 1;
}
// WARNING: Removing unreachable block (ram,0x00018007b857)

// WARNING: Removing unreachable block (ram,0x00018007b868)

// WARNING: Removing unreachable block (ram,0x00018007b879)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address

ulonglong InitializeSystemComponents(longlong handleIdentifier,longlong *resourceIdentifier,byte systemConfig,char systemFlags)

{
  byte *ptr_byte_var;
  char char_var;
  int compare_result;
  int int_result;
  byte bool_var;
  longlong long_result;
  uint64_t *node_previous;
  ulonglong uint_result;
  uint64_t uint_result;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *long_ptr;
  uint32_t uint_result;
  longlong *long_ptr;
  bool system_initialization_check;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  uint8_t localBuffer_b0 [8];
  longlong longStack_a8;
  uint32_t uintStack_a0;
  longlong *stack_long_ptr;
  longlong longStack_90;
  uint32_t uintStack_88;
  longlong *astack_long_ptr [2];
  code *stack_char_ptr;
  void *system_buffer_ptr_60;
  uint64_t uintStack_58;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;

  uintStack_58 = INVALID_HANDLE_VALUE;
  while ((long_result = handleIdentifier, (*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0 &&
         (long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0)), long_result != handleIdentifier))) {
    if ((systemFlags != '\0') ||
       (ptr_byte_var = (byte *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0), handleIdentifier = long_result, (*ptr_byte_var & 8) != 0)) {
      systemFlags = '\x01';
      handleIdentifier = long_result;
    }
  }
  if ((*(byte *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & 8) != 0) {
    systemFlags = '\x01';
  }
  InitializeSystemModule3(handleIdentifier);
  long_ptr = (longlong *)(*(longlong *)(long_result + 0x1e0) + (ulonglong)systemConfig * 0x18);
  if ((longlong *)*resourceIdentifier != long_ptr) {
    if ((longlong *)*resourceIdentifier != (longlong *)0x0) {
      InitializeSystemComponents();
    }
    *resourceIdentifier = (longlong)long_ptr;
    if (long_ptr != (longlong *)0x0) {
      LOCK();
      *(int *)(long_ptr + 2) = (int)long_ptr[2] + 1;
      UNLOCK();
    }
    if (resourceIdentifier[1] != 0) {
      ptr_byte_var = (byte *)(resourceIdentifier[1] + 0xfe);
      *ptr_byte_var = *ptr_byte_var & 0xfb;
    }
  }
  LOCK();
  system_initialization_check = *(char *)((longlong)long_ptr + 0x15) == '\0';
  if (system_initialization_check) {
    *(char *)((longlong)long_ptr + 0x15) = '\x01';
  }
  UNLOCK();
  if (!system_initialization_check) goto LAB_18007b8fd;
  long_result = handleIdentifier;
  if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  if (*(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0) < 1) {
    LOCK();
    if (*(char *)((longlong)long_ptr + 0x15) == '\x01') {
      *(char *)((longlong)long_ptr + 0x15) = '\x03';
    }
    UNLOCK();
    goto LAB_18007b8fd;
  }
  if (*long_ptr == 0) {
    node_previous = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x28,8,SYSTEM_NODE_HEADER_SIZE);
    *node_previous = &globalSystemVariable;
    *node_previous = &globalSystemVariable;
    *(uint32_t *)(node_previous + 1) = 0;
    *node_previous = &g_system_global_variable8;
    LOCK();
    *(uint8_t *)(node_previous + 2) = 0;
    UNLOCK();
    LOCK();
    *(uint32_t *)((longlong)node_previous + 0x14) = 0;
    UNLOCK();
    node_previous[3] = 0;
    node_previous[4] = handleIdentifier;
    InitializeSystemResources(long_ptr);
  }
  if (long_ptr[1] == 0) {
    node_previous = (uint64_t *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE,8,SYSTEM_NODE_HEADER_SIZE);
    *node_previous = &globalSystemVariable;
    *node_previous = &globalSystemVariable;
    *(uint32_t *)(node_previous + 1) = 0;
    *node_previous = &globalSystemVariable;
    LOCK();
    *(uint32_t *)(node_previous + 2) = 0;
    UNLOCK();
    node_previous[3] = 0;
    InitializeSystemResources(long_ptr + 1);
  }
  uintStack_88 = 1;
  longStack_90 = handleIdentifier;
  InitializeThreadManagerSystem(&longStack_90);
  long_result = *(longlong *)(handleIdentifier + 0x210);
  if (long_result == 0) {
LAB_18007b44a:
    if (*(longlong *)(handleIdentifier + 0xa8) == 0) {
LAB_18007b454:
      LOCK();
      *(uint8_t *)((longlong)long_ptr + 0x15) = 4;
      UNLOCK();
      uint_result = InitializeSystemDataNode30(&longStack_90);
      return uint_result & 0xffffffffffffff00;
    }
  }
  else {
    if (*(int *)(long_result + 0x60) == 0) goto LAB_18007b454;
    if (long_result == 0) goto LAB_18007b44a;
  }
  uint_result = AllocateSystemMemory(systemMemoryPool,0xa0,8,SYSTEM_NODE_HEADER_SIZE);
  long_ptr = (longlong *)InitializeSystemModule17(uint_result);
  stack_long_ptr = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  long_result = handleIdentifier;
  if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  *(uint32_t *)(long_ptr + 2) = *(uint32_t *)(long_result + SYSTEM_NODE_HEADER_SIZE0);
  *(byte *)(long_ptr + 0x13) =
       *(byte *)(long_ptr + 0x13) ^ (*(byte *)(handleIdentifier + 0xfe) >> 1 ^ *(byte *)(long_ptr + 0x13)) & 1;
  *(byte *)((longlong)long_ptr + 0x14) = systemConfig;
  char_var = *(char *)(handleIdentifier + 0xfa);
  *(char *)((longlong)long_ptr + 0x15) = char_var;
  if (char_var == '\x01') {
    systemFlags = '\x01';
  }
  long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,0x30,8,SYSTEM_NODE_HEADER_SIZE);
  *long_ptr = (longlong)&globalSystemVariable;
  *long_ptr = (longlong)&globalSystemVariable;
  *(uint32_t *)(long_ptr + 1) = 0;
  *long_ptr = (longlong)&globalSystemVariable;
  long_ptr[4] = 0;
  long_ptr[2] = 0;
  *(byte *)(long_ptr + 5) = *(byte *)(long_ptr + 5) | 1;
  stack_long_ptr = long_ptr;
  (**(code **)(*long_ptr + 0x28))(long_ptr);
  bool_var = *(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE;
  long_result = handleIdentifier;
  if (bool_var == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  compare_result = *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0);
  long_result = handleIdentifier;
  if (bool_var == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  int_result = *(int *)(long_result + 0x1fc);
  uint_result = 2;
  if (0xffff < compare_result) {
    uint_result = 4;
  }
  *(byte *)(long_ptr + 5) =
       *(byte *)(long_ptr + 5) ^ (*(byte *)(handleIdentifier + 0xfe) >> 1 ^ *(byte *)(long_ptr + 5)) & 1;
  *(uint32_t *)((longlong)long_ptr + 0x14) = uint_result;
  *(int *)(long_ptr + 2) = int_result * 3;
  *(uint8_t *)(long_ptr + 3) = *(uint8_t *)(handleIdentifier + 0xfa);
  if ((*(longlong *)(handleIdentifier + 0xa8) == 0) || (*(longlong *)(handleIdentifier + 0x210) != 0)) {
    if (systemFlags == '\0') {
      uint_result = AllocateSystemMemory(systemMemoryPool,0xe0,8,3);
      (**(code **)(*long_ptr + 0x28))(long_ptr);
      (**(code **)(*long_ptr + 0x28))(long_ptr);
      stack_char_ptr = SystemFunction_48_8;
      system_buffer_ptr_60 = &g_system_func_18;
      stack_long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE,8,g_system_audio_initialized);
      *stack_long_ptr = handleIdentifier;
      *(byte *)(stack_long_ptr + 1) = systemConfig;
      stack_long_ptr[2] = (longlong)long_ptr;
      stack_long_ptr[3] = (longlong)long_ptr;
      astack_long_ptr[0] = stack_long_ptr;
      long_ptr = (longlong *)InitializeInputMutex(uint_result,astack_long_ptr);
      stack_long_ptr = long_ptr;
      stack_long_ptr = long_ptr;
      uint_result = systemConfigurationData;
      if (long_ptr != (longlong *)0x0) {
        (**(code **)(*long_ptr + 0x28))(long_ptr);
        uint_result = systemConfigurationData;
        (**(code **)(*long_ptr + 0x28))(long_ptr);
      }
      ConfigureSystemParameters(uint_result,&stack_long_ptr);
      if (long_ptr != (longlong *)0x0) {
        long_result = *long_ptr;
LAB_18007b8dc:
        (**(code **)(long_result + 0x38))(long_ptr);
      }
    }
    else {
      stack_long_ptr = long_ptr;
      (**(code **)(*long_ptr + 0x28))(long_ptr);
      stack_long_ptr = long_ptr;
      (**(code **)(*long_ptr + 0x28))(long_ptr);
      InitializeInputSystem(handleIdentifier,systemConfig,&stack_long_ptr,&stack_long_ptr);
      stack_long_ptr = long_ptr;
      (**(code **)(*long_ptr + 0x28))(long_ptr);
      stack_long_ptr = long_ptr;
      (**(code **)(*long_ptr + 0x28))(long_ptr);
      SystemFunction_17_6(handleIdentifier,systemConfig,&stack_long_ptr,&stack_long_ptr);
      InitializeSystemDataNode30(&longStack_90);
      if (*(char *)(handleIdentifier + 0xf4) == '\x01') {
        stack_long_ptr = (longlong *)0x0;
        stack_long_ptr = (longlong *)0x0;
        localBuffer_b0[0] = 0;
        uintStack_a0 = 3;
        longStack_a8 = handleIdentifier;
        InitializeSystemModule33(localBuffer_b0);
        long_ptr = stack_long_ptr;
        stack_long_ptr = (longlong *)0x0;
        if (long_ptr != (longlong *)0x0) {
          (**(code **)(*long_ptr + 0x38))();
        }
        InitializeNetworkManagerSystem(localBuffer_b0);
        if (stack_long_ptr != (longlong *)0x0) {
          long_result = *stack_long_ptr;
          long_ptr = stack_long_ptr;
          goto LAB_18007b8dc;
        }
      }
    }
  }
  else {
    stack_long_ptr = long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
    stack_long_ptr = long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
    InitializeResourceSystem(handleIdentifier,systemConfig,&stack_long_ptr,&stack_long_ptr,systemFlags);
  }
  (**(code **)(*long_ptr + 0x38))(long_ptr);
  (**(code **)(*long_ptr + 0x38))(long_ptr);
  InitializeSystemDataNode30(&longStack_90);
LAB_18007b8fd:
  return (ulonglong)((byte)(*(char *)((longlong)long_ptr + 0x15) - 2U) < 2);
}
// void SystemFunction_16_0(longlong *handleIdentifier)

void SystemFunction_16_0(longlong *handleIdentifier)

{
  longlong long_result;
  longlong *long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong **pstack_long_ptr;
  uint64_t uint_result;
  uint8_t localBuffer_40 [8];
  longlong longStack_38;
  uint32_t uintStack_30;
  longlong *stack_long_ptr;

  uint_result = INVALID_HANDLE_VALUE;
  long_result = *handleIdentifier;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)handleIdentifier[3];
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)handleIdentifier[2];
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  InitializeInputSystem(long_result,(char)handleIdentifier[1],&stack_long_ptr,&stack_long_ptr,uint_result);
  long_result = *handleIdentifier;
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)handleIdentifier[3];
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  pstack_long_ptr = &stack_long_ptr;
  stack_long_ptr = (longlong *)handleIdentifier[2];
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x28))();
  }
  SystemFunction_17_6(long_result,(char)handleIdentifier[1],&stack_long_ptr,&stack_long_ptr);
  longStack_38 = *handleIdentifier;
  if (*(char *)(longStack_38 + 0xf4) == '\x01') {
    stack_long_ptr = (longlong *)0x0;
    stack_long_ptr = (longlong *)0x0;
    localBuffer_40[0] = 0;
    uintStack_30 = 3;
    InitializeSystemModule33(localBuffer_40);
    long_ptr = stack_long_ptr;
    stack_long_ptr = stack_long_ptr;
    stack_long_ptr = (longlong *)0x0;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))();
    }
    InitializeNetworkManagerSystem(localBuffer_40);
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
  }
  return;
}
// void InitializeSystemDataNode18(longlong handleIdentifier)

void InitializeSystemDataNode18(longlong handleIdentifier)

{
  if (*(longlong **)(handleIdentifier + 0x18) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(handleIdentifier + 0x18) + 0x38))();
  }
  if (*(longlong **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) + 0x38))();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule3(longlong handleIdentifier)
void InitializeSystemModule3(longlong handleIdentifier)

{
  uint64_t uint_result;

  if (*(longlong *)(handleIdentifier + 0x1e0) == 0) {
    uint_result = AllocateSystemMemory(systemMemoryPool,0x180,8,0x1c);
                    // WARNING: Subroutine does not return
    memset(uint_result,0,0x180);
  }
  return;
}
// void InitializeConfigSystem(longlong *handleIdentifier)

void InitializeConfigSystem(longlong *handleIdentifier)

{
  if ((longlong *)handleIdentifier[1] != (longlong *)0x0) {
    (**(code **)(*(longlong *)handleIdentifier[1] + 0x38))();
  }
  if ((longlong *)*handleIdentifier != (longlong *)0x0) {
    (**(code **)(*(longlong *)*handleIdentifier + 0x38))();
  }
  return;
}
// WARNING: Removing unreachable block (ram,0x00018007c17d)

// WARNING: Removing unreachable block (ram,0x00018007c188)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeStringManager(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)
void InitializeStringManager(longlong handleIdentifier,longlong resourceIdentifier,longlong systemConfig)

{
  int int_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint32_t uint_result;
  uint64_t uint_result;
  longlong *long_ptr;
  longlong long_result;
  longlong *long_ptr;
  uint64_t *ptr_uint_var;
  uint *ptr_uint_var;
  uint uint_result;
  void *ptr_uint_var;
  uint uint_result;
  uint uint_result;
  ulonglong uint_result;
  uint uint_result;
  uint uint_result;
  uint8_t localBuffer_68 [32];
  uint64_t uintStack_48;
  longlong *stack_long_ptr;
  uint64_t uintStack_38;
  longlong *stack_long_ptr;
  longlong longStack_28;
  ulonglong uintStack_20;

  uintStack_48 = INVALID_HANDLE_VALUE;
  uintStack_20 = systemConfigurationData ^ (ulonglong)localBuffer_68;
  if ((resourceIdentifier == 0) ||
     (((*(float *)(handleIdentifier + 0x238) == *(float *)(resourceIdentifier + 0x44) &&
       (*(float *)(handleIdentifier + 0x23c) == *(float *)(resourceIdentifier + 0x48))) &&
      (*(float *)(handleIdentifier + 0x240) == *(float *)(resourceIdentifier + 0x4c))))) {
    uint_result = *(uint64_t *)(systemConfig + 0x4c);
    *(uint64_t *)(handleIdentifier + 0x238) = *(uint64_t *)(systemConfig + 0x44);
    *(uint64_t *)(handleIdentifier + 0x240) = uint_result;
  }
  if ((resourceIdentifier == 0) ||
     (((*(float *)(handleIdentifier + 0x248) == *(float *)(resourceIdentifier + 0x54) &&
       (*(float *)(handleIdentifier + 0x24c) == *(float *)(resourceIdentifier + 0x58))) &&
      (*(float *)(handleIdentifier + 0x250) == *(float *)(resourceIdentifier + 0x5c))))) {
    uint_result = *(uint64_t *)(systemConfig + 0x5c);
    *(uint64_t *)(handleIdentifier + 0x248) = *(uint64_t *)(systemConfig + 0x54);
    *(uint64_t *)(handleIdentifier + 0x250) = uint_result;
  }
  if ((resourceIdentifier == 0) ||
     (((*(float *)(handleIdentifier + 0x2a8) == *(float *)(resourceIdentifier + 100) &&
       (*(float *)(handleIdentifier + 0x2ac) == *(float *)(resourceIdentifier + 0x68))) &&
      (*(float *)(handleIdentifier + 0x2b0) == *(float *)(resourceIdentifier + 0x6c))))) {
    uint_result = *(uint64_t *)(systemConfig + 0x6c);
    *(uint64_t *)(handleIdentifier + 0x2a8) = *(uint64_t *)(systemConfig + 100);
    *(uint64_t *)(handleIdentifier + 0x2b0) = uint_result;
  }
  if ((resourceIdentifier == 0) ||
     (((*(float *)(handleIdentifier + 0x2b8) == *(float *)(resourceIdentifier + 0x74) &&
       (*(float *)(handleIdentifier + 700) == *(float *)(resourceIdentifier + 0x78))) &&
      (*(float *)(handleIdentifier + 0x2c0) == *(float *)(resourceIdentifier + 0x7c))))) {
    uint_result = *(uint64_t *)(systemConfig + 0x7c);
    *(uint64_t *)(handleIdentifier + 0x2b8) = *(uint64_t *)(systemConfig + 0x74);
    *(uint64_t *)(handleIdentifier + 0x2c0) = uint_result;
  }
  if (resourceIdentifier == 0) {
    *(uint32_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = *(uint32_t *)(systemConfig + 0x30);
  }
  else {
    uint_result = 1;
    uint_result = 2;
    do {
      ptr_uint_var = (uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0);
      uint_result = *(uint *)(resourceIdentifier + 0x30);
      uint_result = *(uint *)(systemConfig + 0x30);
      if ((uint_result & uint_result) != (uint_result & uint_result)) {
        if ((uint_result & uint_result) == 0) {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & ~(1 << (uint_result - 2 & 0x1f));
        }
        else {
          uint_result = *ptr_uint_var | 1 << (uint_result - 2 & 0x1f);
        }
        *ptr_uint_var = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 1 & uint_result;
      if ((uint_result << 1 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result - 1 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result - 1 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 2 & uint_result;
      if ((uint_result << 2 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 3 & uint_result;
      if ((uint_result << 3 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 1 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 1 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 4 & uint_result;
      if ((uint_result << 4 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 2 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 2 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 5 & uint_result;
      if ((uint_result << 5 & uint_result) != uint_result) {
        if (uint_result == 0) {
          *ptr_uint_var = *ptr_uint_var & ~(1 << (uint_result + 3 & 0x1f));
          uint_result = *(uint *)(resourceIdentifier + 0x30);
          uint_result = *(uint *)(systemConfig + 0x30);
        }
        else {
          *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 3 & 0x1f);
          uint_result = *(uint *)(resourceIdentifier + 0x30);
          uint_result = *(uint *)(systemConfig + 0x30);
        }
      }
      ptr_uint_var = (uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0);
      uint_result = uint_result << 6 & uint_result;
      if ((uint_result << 6 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 4 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 4 & 0x1f);
        }
        *ptr_uint_var = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 7 & uint_result;
      if ((uint_result << 7 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 5 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 5 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 8 & uint_result;
      if ((uint_result << 8 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 6 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 6 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 9 & uint_result;
      if ((uint_result << 9 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 7 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 7 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 10 & uint_result;
      if ((uint_result << 10 & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 8 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 8 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
        uint_result = *(uint *)(resourceIdentifier + 0x30);
        uint_result = *(uint *)(systemConfig + 0x30);
      }
      uint_result = uint_result << 0xb & uint_result;
      if ((uint_result << 0xb & uint_result) != uint_result) {
        if (uint_result == 0) {
          uint_result = *ptr_uint_var & ~(1 << (uint_result + 9 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 9 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
      }
      uint_result = uint_result << 0xc & *(uint *)(systemConfig + 0x30);
      if ((uint_result << 0xc & *(uint *)(resourceIdentifier + 0x30)) != uint_result) {
        if (uint_result == 0) {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & ~(1 << (uint_result + 10 & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 10 & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
      }
      uint_result = uint_result << 0xd & *(uint *)(systemConfig + 0x30);
      if ((uint_result << 0xd & *(uint *)(resourceIdentifier + 0x30)) != uint_result) {
        if (uint_result == 0) {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & ~(1 << (uint_result + 0xb & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 0xb & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
      }
      uint_result = uint_result << 0xe & *(uint *)(systemConfig + 0x30);
      if ((uint_result << 0xe & *(uint *)(resourceIdentifier + 0x30)) != uint_result) {
        ptr_uint_var = (uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0);
        if (uint_result == 0) {
          *ptr_uint_var = *ptr_uint_var & ~(1 << (uint_result + 0xc & 0x1f));
        }
        else {
          *ptr_uint_var = *ptr_uint_var | 1 << (uint_result + 0xc & 0x1f);
        }
      }
      uint_result = uint_result << 0xf & *(uint *)(systemConfig + 0x30);
      if ((uint_result << 0xf & *(uint *)(resourceIdentifier + 0x30)) != uint_result) {
        if (uint_result == 0) {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) & ~(1 << (uint_result + 0xd & 0x1f));
        }
        else {
          uint_result = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 1 << (uint_result + 0xd & 0x1f);
        }
        *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = uint_result;
      }
      uint_result = uint_result << SYSTEM_DATA_COMPARE_SIZE | uint_result >> SYSTEM_DATA_COMPARE_SIZE;
      int_result = uint_result + 0xe;
      uint_result = uint_result + SYSTEM_DATA_COMPARE_SIZE;
    } while (int_result < SYSTEM_NODE_HEADER_SIZE);
  }
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE8) = *(uint32_t *)(systemConfig + 0x84);
  *(uint32_t *)(handleIdentifier + 0x1f8) = *(uint32_t *)(systemConfig + 0x88);
  *(uint32_t *)(handleIdentifier + 0x1fc) = *(uint32_t *)(systemConfig + 0x8c);
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0) = *(uint32_t *)(systemConfig + 0x90);
  *(uint32_t *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE4) = *(uint32_t *)(systemConfig + 0x94);
  uint_result = *(uint64_t *)(systemConfig + 0xa0);
  *(uint64_t *)(handleIdentifier + 0x274) = *(uint64_t *)(systemConfig + 0x98);
  *(uint64_t *)(handleIdentifier + 0x27c) = uint_result;
  uint_result = *(uint64_t *)(systemConfig + 0xb0);
  *(uint64_t *)(handleIdentifier + 0x284) = *(uint64_t *)(systemConfig + 0xa8);
  *(uint64_t *)(handleIdentifier + 0x28c) = uint_result;
  uint_result = *(uint32_t *)(systemConfig + 0xbc);
  uint_result = *(uint32_t *)(systemConfig + 0xc0);
  uint_result = *(uint32_t *)(systemConfig + 0xc4);
  *(uint32_t *)(handleIdentifier + 0x294) = *(uint32_t *)(systemConfig + 0xb8);
  *(uint32_t *)(handleIdentifier + 0x298) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x29c) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x2a0) = uint_result;
  *(uint32_t *)(handleIdentifier + 0x2a4) = *(uint32_t *)(systemConfig + 200);
  stack_long_ptr = (longlong *)0x0;
  longStack_28 = 0;
  if (resourceIdentifier != 0) {
    long_ptr = (longlong *)(resourceIdentifier + 0x158);
    if ((*long_ptr == 0) && (*(longlong *)(resourceIdentifier + 0x160) == 0)) {
      long_ptr = (longlong *)(resourceIdentifier + 0x34);
    }
    stack_long_ptr = (longlong *)*long_ptr;
    longStack_28 = long_ptr[1];
  }
  uintStack_38 = 0;
  long_ptr = (longlong *)(handleIdentifier + 0x1b8);
  stack_long_ptr = (longlong *)*long_ptr;
  *long_ptr = 0;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x38))();
  }
  long_ptr = (longlong *)(systemConfig + 0x158);
  if ((*long_ptr == 0) && (*(longlong *)(systemConfig + 0x160) == 0)) {
    long_ptr = (longlong *)(systemConfig + 0x34);
  }
  long_result = InitializeSystemData(*(uint64_t *)(handleIdentifier + 0xa8),&g_system_data_variable0,long_ptr);
  if (long_result != 0) {
    InitializeEventSystem(long_ptr,long_result + 0xb0);
  }
  if (*long_ptr == 0) {
    ptr_uint_var = &g_system_data_variable3;
    if (*(void **)(handleIdentifier + 0x18) != (void *)0x0) {
      ptr_uint_var = *(void **)(handleIdentifier + 0x18);
    }
    UtilityFunction27020(&g_system_global_variable8,ptr_uint_var);
    long_ptr = (longlong *)InitializeSystemModule9(systemConfigurationData,&stack_long_ptr,0);
    long_result = *long_ptr;
    *long_ptr = 0;
    stack_long_ptr = (longlong *)*long_ptr;
    *long_ptr = long_result;
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
  }
  InitializeSystemDataNode24(handleIdentifier);
  if ((*(longlong *)(handleIdentifier + 600) == 0) &&
     ((*(uint *)(*(longlong *)(handleIdentifier + 0x1b8) + 0x388) >> NODE_INITIALIZED_OFFSET & 1) != 0)) {
    ptr_uint_var = (uint64_t *)AllocateSystemMemory(systemMemoryPool,0x58,8,0x1c);
    *(uint64_t *)((longlong)ptr_uint_var + 0x2c) = 0xffffffffffffffff;
    *(uint32_t *)(ptr_uint_var + 9) = 0xffffffff;
    *ptr_uint_var = 0;
    ptr_uint_var[2] = 0;
    ptr_uint_var[7] = 0;
    *(uint32_t *)(ptr_uint_var + 5) = 0xffffffff;
    *(uint32_t *)(ptr_uint_var + 4) = 0xffffffff;
    ptr_uint_var[3] = 0;
    *(uint32_t *)(ptr_uint_var + 8) = 0;
    *(uint32_t *)(ptr_uint_var + 1) = 0;
    *(uint8_t *)((longlong)ptr_uint_var + 0x44) = 0;
    *(uint8_t *)((longlong)ptr_uint_var + 0x24) = 0;
    *(uint64_t **)(handleIdentifier + 600) = ptr_uint_var;
  }
  *(uint8_t *)(handleIdentifier + 0xf6) = *(uint8_t *)(systemConfig + 0xcc);
  if ((uint64_t *)(handleIdentifier + 0x218) != (uint64_t *)(systemConfig + 0xd0)) {
    ValidateSystemConfiguration((uint64_t *)(handleIdentifier + 0x218),*(uint64_t *)(systemConfig + 0xd0),
                  *(uint64_t *)(systemConfig + 0xd8));
  }
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + SYSTEM_DATA_COMPARE_SIZE) = *(uint32_t *)(systemConfig + 0xf0);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x14) = *(uint32_t *)(systemConfig + 0x144);
  *(uint8_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x18) = *(uint8_t *)(systemConfig + 0x148);
  *(uint8_t *)(*(longlong *)(handleIdentifier + 0x268) + NODE_INITIALIZED_OFFSET) = *(uint8_t *)(systemConfig + 0x149);
  *(uint8_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x1a) = *(uint8_t *)(systemConfig + 0x14a);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x44) = *(uint32_t *)(systemConfig + 0x118);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x48) = *(uint32_t *)(systemConfig + 0x11c);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x4c) = *(uint32_t *)(systemConfig + 0x120);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x50) = *(uint32_t *)(systemConfig + 0x124);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x54) = *(uint32_t *)(systemConfig + 0x128);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x58) = *(uint32_t *)(systemConfig + 300);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x5c) = *(uint32_t *)(systemConfig + 0x130);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x60) = *(uint32_t *)(systemConfig + 0x134);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 100) = *(uint32_t *)(systemConfig + 0x138);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x68) = *(uint32_t *)(systemConfig + 0x13c);
  *(uint32_t *)(*(longlong *)(handleIdentifier + 0x268) + 0x6c) = *(uint32_t *)(systemConfig + 0x140);
  long_result = *(longlong *)(handleIdentifier + 0x268);
  uint_result = *(uint *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE8);
  uint_result = (ulonglong)uint_result;
  if (*(longlong *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE0) != 0) {
    ConfigureSystemParameters(long_result + SYSTEM_NODE_HEADER_SIZE,uint_result);
  }
  if (uint_result != 0) {
                    // WARNING: Subroutine does not return
    memcpy(*(uint64_t *)(long_result + 0x28),*(uint64_t *)(systemConfig + SYSTEM_DATA_COMPARE_SIZE0),uint_result);
  }
  *(uint32_t *)(long_result + 0x30) = 0;
  if (*(longlong *)(long_result + 0x28) != 0) {
    *(uint8_t *)(uint_result + *(longlong *)(long_result + 0x28)) = 0;
  }
  *(uint32_t *)(long_result + 0x3c) = *(uint32_t *)(systemConfig + 0x114);
                    // WARNING: Subroutine does not return
  InitializeSystemStack(uintStack_20 ^ (ulonglong)localBuffer_68);
}
// void InitializeResourceSystem(longlong *handleIdentifier,byte resourceIdentifier,longlong *systemConfig,longlong *systemFlags,char parameter_5)

void InitializeResourceSystem(longlong *handleIdentifier,byte resourceIdentifier,longlong *systemConfig,longlong *systemFlags,char parameter_5)

{
  char *pis_initialized;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong *ptr_data;
  code *ptr_char_var;
  char char_var;
  void *node_previous;
  uint32_t uintStack_100;
  uint32_t uintStack_fc;
  uint32_t uintStack_f8;
  uint32_t uintStack_f4;
  code *stack_char_ptr;
  void *system_buffer_ptr_e8;
  uint64_t uintStack_e0;
  uint32_t uintStack_d8;
  uint32_t uintStack_d4;
  longlong *stack_long_ptr;
  byte bStack_c8;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  byte bStack_a8;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  uint64_t uintStack_90;
  longlong **pstack_long_ptr;
  uint8_t localBuffer_80 [16];
  code *stack_char_ptr;
  uint8_t localBuffer_60 [16];
  code *stack_char_ptr;

  uintStack_90 = INVALID_HANDLE_VALUE;
  long_ptr = (longlong *)*systemFlags;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  long_ptr = (longlong *)*systemConfig;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  uintStack_d8 = CONCAT31(uintStack_d8._1_3_,resourceIdentifier);
  uintStack_e0 = handleIdentifier;
  if ((void *)*handleIdentifier == &globalSystemVariable) {
    LOCK();
    *(int *)(handleIdentifier + 1) = (int)handleIdentifier[1] + 1;
    UNLOCK();
  }
  else {
    (**(code **)((void *)*handleIdentifier + 0x28))(handleIdentifier);
  }
  if (parameter_5 == '\0') {
    ptr_data = *(longlong **)(handleIdentifier[0x15] + 0x88);
    ptr_char_var = *(code **)(*ptr_data + 0x70);
    stack_char_ptr = (code *)&g_system_func_17;
    system_buffer_ptr_e8 = &g_system_func_16;
    uintStack_100 = (uint32_t)uintStack_e0;
    uintStack_fc = uintStack_e0._4_4_;
    uintStack_f8 = uintStack_d8;
    uintStack_f4 = uintStack_d4;
    stack_long_ptr = handleIdentifier;
    bStack_a8 = resourceIdentifier;
    stack_long_ptr = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    stack_long_ptr = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    SystemFunction_67_2(localBuffer_60,&stack_long_ptr);
    (*ptr_char_var)(ptr_data,&systemDataPattern1,handleIdentifier + 0x17,0,localBuffer_60,&uintStack_100);
    if (stack_char_ptr != (code *)0x0) {
      (*stack_char_ptr)(localBuffer_60,0,0);
    }
    if (stack_char_ptr != (code *)0x0) {
      (*stack_char_ptr)(&uintStack_100,0,0);
    }
  }
  else {
    ptr_data = *(longlong **)(handleIdentifier[0x15] + 0x88);
    ptr_char_var = *(code **)(*ptr_data + 0x60);
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = handleIdentifier;
    bStack_c8 = resourceIdentifier;
    stack_long_ptr = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    stack_long_ptr = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    SystemFunction_67_2(localBuffer_80,&stack_long_ptr);
    char_var = (*ptr_char_var)(ptr_data,&systemDataPattern1,handleIdentifier + 0x17,0,localBuffer_80);
    if (stack_char_ptr != (code *)0x0) {
      (*stack_char_ptr)(localBuffer_80,0,0);
    }
    if (char_var == '\0') {
      node_previous = &g_system_data_variable3;
      if ((void *)handleIdentifier[3] != (void *)0x0) {
        node_previous = (void *)handleIdentifier[3];
      }
      ProcessSystemDataHeader(&globalSystemVariable,node_previous);
      pis_initialized = (char *)(handleIdentifier[0x3c] + 0x15 + (ulonglong)resourceIdentifier * 0x18);
      LOCK();
      if (*pis_initialized == '\x01') {
        *pis_initialized = '\x04';
      }
      UNLOCK();
      (**(code **)(*handleIdentifier + 0x38))(handleIdentifier);
    }
  }
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  if ((longlong *)*systemConfig != (longlong *)0x0) {
    (**(code **)(*(longlong *)*systemConfig + 0x38))();
  }
  if ((longlong *)*systemFlags != (longlong *)0x0) {
    (**(code **)(*(longlong *)*systemFlags + 0x38))();
  }
  return;
}
// void InitializeMemoryManagerSystem(longlong *handleIdentifier)

void InitializeMemoryManagerSystem(longlong *handleIdentifier)

{
  char *pis_initialized;
  void *node_root;

  node_root = &g_system_data_variable3;
  if (*(void **)(*handleIdentifier + 0x18) != (void *)0x0) {
    node_root = *(void **)(*handleIdentifier + 0x18);
  }
  ProcessSystemDataHeader(&globalSystemVariable,node_root);
  pis_initialized = (char *)(*(longlong *)(*handleIdentifier + 0x1e0) + 0x15 +
                   (ulonglong)*(byte *)(handleIdentifier + 1) * 0x18);
  LOCK();
  if (*pis_initialized == '\x01') {
    *pis_initialized = '\x04';
  }
  UNLOCK();
                    // WARNING: Could not recover jumptable at 0x00018007c7e6. Too many branches
                    // WARNING: Treating indirect jump as call
  (**(code **)(*(longlong *)*handleIdentifier + 0x38))();
  return;
}

uint64_t * InitializeNetworkMutex(uint64_t *handleIdentifier,uint64_t *resourceIdentifier)

{
  longlong *long_ptr;

  *handleIdentifier = *resourceIdentifier;
  *(uint8_t *)(handleIdentifier + 1) = *(uint8_t *)(resourceIdentifier + 1);
  long_ptr = (longlong *)resourceIdentifier[2];
  handleIdentifier[2] = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))();
  }
  long_ptr = (longlong *)resourceIdentifier[3];
  handleIdentifier[3] = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))();
  }
  return handleIdentifier;
}
// void InitializeFontSystem(longlong handleIdentifier,uint8_t resourceIdentifier)

void InitializeFontSystem(longlong handleIdentifier,uint8_t resourceIdentifier)

{
  char is_initialized;
  longlong long_result;

  long_result = handleIdentifier;
  if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
    long_result = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
  }
  if (0 < *(int *)(long_result + SYSTEM_NODE_HEADER_SIZE0)) {
    long_result = *(longlong *)(handleIdentifier + 0x1b8);
    is_initialized = *(char *)(long_result + 0x38c);
    if (is_initialized == '\t') {
      is_initialized = IsSystemInitialized();
      *(char *)(long_result + 0x38c) = is_initialized;
    }
    is_initialized = InitializeSystemComponents(handleIdentifier,handleIdentifier + 0x1e8,is_initialized,resourceIdentifier);
    if (is_initialized == '\0') {
      *(byte *)(handleIdentifier + 0xfe) = *(byte *)(handleIdentifier + 0xfe) & 0xfb;
    }
  }
  return;
}
// WARNING: Removing unreachable block (ram,0x00018007cad0)

// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_17_6(longlong handleIdentifier,byte resourceIdentifier,longlong *systemConfig,longlong *systemFlags)
void SystemFunction_17_6(longlong handleIdentifier,byte resourceIdentifier,longlong *systemConfig,longlong *systemFlags)

{
  longlong long_result;
  char *ptr_char_var;
  int compare_result;
  int int_result;
  uint64_t uint_result;
  longlong *long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong **pstack_long_ptr;
  longlong longStack_98;
  byte bStack_90;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong longStack_78;
  byte bStack_70;
  longlong *stack_long_ptr;
  longlong *stack_long_ptr;
  longlong *astack_long_ptr [2];
  code *stack_char_ptr;
  code *stack_char_ptr;
  uint64_t uintStack_38;
  longlong *stack_long_ptr;

  uintStack_38 = INVALID_HANDLE_VALUE;
  compare_result = *(int *)(*(longlong *)(*(longlong *)(systemConfigurationData + 8) + 8) + 0x48);
  int_result = _Thrd_id();
  if (int_result == compare_result) {
    long_result = (ulonglong)resourceIdentifier * 0x18;
    uint_result = *(uint64_t *)(*(longlong *)(handleIdentifier + 0x1e0) + long_result);
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = (longlong *)*systemConfig;
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x28))();
    }
    ConfigureSystemData1(uint_result,&stack_long_ptr);
    uint_result = *(uint64_t *)(*(longlong *)(handleIdentifier + 0x1e0) + 8 + long_result);
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = (longlong *)*systemFlags;
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x28))();
    }
    ConfigureSystemData2(uint_result,&stack_long_ptr);
    ptr_char_var = (char *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x15 + long_result);
    LOCK();
    if (*ptr_char_var == '\x01') {
      *ptr_char_var = '\x03';
    }
    UNLOCK();
  }
  else {
    uint_result = AllocateSystemMemory(systemMemoryPool,0x40,8,SYSTEM_NODE_HEADER_SIZE);
    pstack_long_ptr = astack_long_ptr;
    stack_long_ptr = &longStack_98;
    stack_long_ptr = (longlong *)*systemConfig;
    longStack_98 = handleIdentifier;
    bStack_90 = resourceIdentifier;
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x28))();
    }
    stack_long_ptr = (longlong *)*systemFlags;
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x28))();
    }
    stack_long_ptr = &longStack_98;
    longStack_78 = longStack_98;
    bStack_70 = bStack_90;
    stack_long_ptr = stack_long_ptr;
    stack_long_ptr = (longlong *)0x0;
    stack_long_ptr = stack_long_ptr;
    stack_long_ptr = (longlong *)0x0;
    stack_long_ptr = &longStack_78;
    stack_char_ptr = SystemFunction_17_6;
    stack_char_ptr = InitializeVideoSystem;
    stack_long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE,8,g_system_audio_initialized);
    *stack_long_ptr = longStack_78;
    *(byte *)(stack_long_ptr + 1) = bStack_70;
    stack_long_ptr[2] = (longlong)stack_long_ptr;
    stack_long_ptr[3] = (longlong)stack_long_ptr;
    stack_long_ptr = (longlong *)0x0;
    stack_long_ptr = (longlong *)0x0;
    astack_long_ptr[0] = stack_long_ptr;
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
    long_ptr = (longlong *)InitializeInputSystem(uint_result,astack_long_ptr);
    stack_long_ptr = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    pstack_long_ptr = &stack_long_ptr;
    stack_long_ptr = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    InitializeConfigSystem(systemConfigurationData,&stack_long_ptr);
    ptr_char_var = (char *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x15 + (ulonglong)resourceIdentifier * 0x18);
    LOCK();
    if (*ptr_char_var == '\x01') {
      *ptr_char_var = '\x02';
    }
    UNLOCK();
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))(long_ptr);
    }
  }
  if ((longlong *)*systemConfig != (longlong *)0x0) {
    (**(code **)(*(longlong *)*systemConfig + 0x38))();
  }
  if ((longlong *)*systemFlags != (longlong *)0x0) {
    (**(code **)(*(longlong *)*systemFlags + 0x38))();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void ConfigureSystemSettings(uint handleIdentifier,longlong resourceIdentifier,longlong *systemConfig,uint64_t systemFlags)
void ConfigureSystemSettings(uint handleIdentifier,longlong resourceIdentifier,longlong *systemConfig,uint64_t systemFlags)

{
  float float_result;
  int int_result;
  longlong *long_ptr;
  longlong long_result;
  bool bool_var;
  ushort uint_result;
  uint16_t uint_result;
  int int_result;
  uint uint_result;
  longlong *long_ptr;
  int *ptr_int_var;
  int *ptr_int_var;
  float *ptr_float_var;
  uint uint_result;
  float *ptr_float_var;
  uint32_t *ptr_uint_var;
  uint32_t *ptr_uint_var;
  byte *ptr_byte_var;
  uint8_t *ptr_uint_var;
  float *ptr_float_var;
  longlong long_result;
  longlong long_result;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  longlong *stack_long_ptr;
  uint32_t uint_result;
  float init_float_stack_128;
  float init_float_stack_124;
  float init_float_stack_120;
  float init_float_stack_11c;
  float init_float_stack_118;
  float init_float_stack_114;
  float init_float_stack_110;
  uint32_t uintStack_10c;
  float init_float_stack_108;
  float init_float_stack_104;
  float init_float_stack_100;
  float init_float_stack_fc;
  float init_float_stack_f8;
  float init_float_stack_f4;
  float init_float_stack_f0;
  float init_float_stack_ec;
  float init_float_stack_e8;
  float init_float_stack_e4;
  float init_float_stack_e0;
  float init_float_stack_dc;

  long_result = 0;
  if (handleIdentifier < 0xe) {
    int_result = InitializeSystemResources(handleIdentifier,resourceIdentifier,systemConfig,systemFlags,0,INVALID_HANDLE_VALUE);
  }
  else {
    int_result = -1;
  }
  int_result = *(int *)(resourceIdentifier + 0x60);
  long_result = (longlong)int_result;
  long_ptr = (longlong *)InitializeSystemDataNode28(systemConfigurationData,&stack_long_ptr,int_result * int_result);
  long_ptr = (longlong *)*long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  long_ptr = (longlong *)*systemConfig;
  *systemConfig = (longlong)long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  uint_result = 0;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x38))();
  }
  ptr_float_var = *(float **)(*systemConfig + SYSTEM_DATA_COMPARE_SIZE);
  switch(handleIdentifier) {
  case 0:
    if (0 < int_result) {
      do {
        *ptr_float_var = *(float *)(long_result + 0x54 + *(longlong *)(resourceIdentifier + 0x68));
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 1:
    if (0 < int_result) {
      do {
        *ptr_float_var = *(float *)(long_result + 0x58 + *(longlong *)(resourceIdentifier + 0x68));
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 2:
    if (3 < long_result) {
      long_result = (longlong)int_result;
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0x48);
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + SYSTEM_DATA_COMPARE_SIZE0);
      long_result = (long_result - 4U >> 2) + 1;
      long_result = long_result * 4;
      do {
        *ptr_float_var = ptr_float_var[-1];
        ptr_float_var[1] = 1.0 - *ptr_float_var;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[0x16];
        ptr_float_var[1] = 1.0 - ptr_float_var[0x17];
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[-1];
        ptr_float_var[1] = 1.0 - *ptr_float_var;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[0x16];
        ptr_float_var[1] = 1.0 - ptr_float_var[0x17];
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        ptr_float_var = ptr_float_var + 0x5c;
        ptr_float_var = ptr_float_var + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    if (long_result < long_result) {
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0x48 + long_result * 0x5c);
      long_result = long_result - long_result;
      do {
        *ptr_float_var = ptr_float_var[-1];
        ptr_float_var[1] = 1.0 - *ptr_float_var;
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        ptr_float_var = ptr_float_var + 0x17;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 3:
    if (3 < long_result) {
      long_result = (longlong)int_result;
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0x50);
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + SYSTEM_DATA_COMPARE_SIZE8);
      long_result = (long_result - 4U >> 2) + 1;
      long_result = long_result * 4;
      do {
        *ptr_float_var = ptr_float_var[-1];
        ptr_float_var[1] = 1.0 - *ptr_float_var;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[0x16];
        ptr_float_var[1] = 1.0 - ptr_float_var[0x17];
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[-1];
        ptr_float_var[1] = 1.0 - *ptr_float_var;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[0x16];
        ptr_float_var[1] = 1.0 - ptr_float_var[0x17];
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        ptr_float_var = ptr_float_var + 0x5c;
        ptr_float_var = ptr_float_var + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    if (long_result < long_result) {
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0x50 + long_result * 0x5c);
      long_result = long_result - long_result;
      do {
        *ptr_float_var = ptr_float_var[-1];
        ptr_float_var[1] = 1.0 - *ptr_float_var;
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        ptr_float_var = ptr_float_var + 0x17;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 4:
  case 5:
    if ((handleIdentifier == 5) && (0 < *(int *)(resourceIdentifier + 0x38))) {
      bool_var = true;
    }
    else {
      bool_var = false;
    }
    ptr_int_var = (int *)(resourceIdentifier + 0x38);
    if (!bool_var) {
      ptr_int_var = (int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    }
    if (3 < long_result) {
      long_result = *(longlong *)(ptr_int_var + 2);
      long_result = (longlong)int_result;
      ptr_int_var = (int *)(*(longlong *)(resourceIdentifier + 0x68) + 0xb8);
      long_result = (long_result - 4U >> 2) + 1;
      long_result = long_result * 4;
      do {
        *ptr_float_var = *(float *)(long_result + (longlong)ptr_int_var[-0x2e] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_float_var[1] = *(float *)(long_result + 4 + (longlong)ptr_int_var[-0x2e] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_float_var[2] = *(float *)(long_result + 8 + (longlong)ptr_int_var[-0x2e] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var = (uint32_t *)((longlong)ptr_float_var + long_result);
        *ptr_uint_var = *(uint32_t *)(long_result + (longlong)ptr_int_var[-0x17] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var[1] = *(uint32_t *)(long_result + 4 + (longlong)ptr_int_var[-0x17] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var[2] = *(uint32_t *)(long_result + 8 + (longlong)ptr_int_var[-0x17] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var = (uint32_t *)((longlong)ptr_uint_var + long_result);
        *ptr_uint_var = *(uint32_t *)(long_result + (longlong)*ptr_int_var * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var[1] = *(uint32_t *)(long_result + 4 + (longlong)*ptr_int_var * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var[2] = *(uint32_t *)(long_result + 8 + (longlong)*ptr_int_var * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var = (uint32_t *)((longlong)ptr_uint_var + long_result);
        *ptr_uint_var = *(uint32_t *)(long_result + (longlong)ptr_int_var[0x17] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var[1] = *(uint32_t *)(long_result + 4 + (longlong)ptr_int_var[0x17] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_uint_var[2] = *(uint32_t *)(long_result + 8 + (longlong)ptr_int_var[0x17] * SYSTEM_DATA_COMPARE_SIZE);
        ptr_float_var = (float *)((longlong)ptr_uint_var + long_result);
        ptr_int_var = ptr_int_var + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    if (long_result < long_result) {
      long_result = *(longlong *)(ptr_int_var + 2);
      ptr_float_var = ptr_float_var + 2;
      ptr_int_var = (int *)(long_result * 0x5c + *(longlong *)(resourceIdentifier + 0x68));
      long_result = long_result - long_result;
      do {
        ptr_float_var[-2] = *(float *)(long_result + (longlong)*ptr_int_var * SYSTEM_DATA_COMPARE_SIZE);
        ptr_float_var[-1] = *(float *)(long_result + 4 + (longlong)*ptr_int_var * SYSTEM_DATA_COMPARE_SIZE);
        *ptr_float_var = *(float *)(long_result + 8 + (longlong)*ptr_int_var * SYSTEM_DATA_COMPARE_SIZE);
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        ptr_int_var = ptr_int_var + 0x17;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 6:
    if (3 < long_result) {
      long_result = (longlong)int_result;
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0x38);
      ptr_uint_var = (uint32_t *)(*(longlong *)(resourceIdentifier + 0x68) + 0xf0);
      long_result = (long_result - 4U >> 2) + 1;
      long_result = long_result * 4;
      do {
        *ptr_float_var = ptr_float_var[-1];
        ptr_float_var[1] = *ptr_float_var;
        ptr_float_var[2] = ptr_float_var[1];
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[0x16];
        ptr_float_var[1] = ptr_float_var[0x17];
        ptr_float_var[2] = ptr_float_var[0x18];
        ptr_uint_var = (uint32_t *)((longlong)ptr_float_var + long_result);
        *ptr_uint_var = ptr_uint_var[-1];
        ptr_uint_var[1] = *ptr_uint_var;
        ptr_uint_var[2] = ptr_uint_var[1];
        ptr_uint_var = (uint32_t *)((longlong)ptr_uint_var + long_result);
        *ptr_uint_var = ptr_uint_var[0x16];
        ptr_uint_var[1] = ptr_uint_var[0x17];
        ptr_uint_var[2] = ptr_uint_var[0x18];
        ptr_float_var = (float *)((longlong)ptr_uint_var + long_result);
        ptr_float_var = ptr_float_var + 0x5c;
        ptr_uint_var = ptr_uint_var + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    if (long_result < long_result) {
      ptr_float_var = ptr_float_var + 2;
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0x38 + long_result * 0x5c);
      long_result = long_result - long_result;
      do {
        ptr_float_var[-2] = ptr_float_var[-1];
        ptr_float_var[-1] = *ptr_float_var;
        *ptr_float_var = ptr_float_var[1];
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        ptr_float_var = ptr_float_var + 0x17;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 7:
    if (3 < long_result) {
      long_result = (longlong)int_result;
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0x14);
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 0xc0);
      long_result = (long_result - 4U >> 2) + 1;
      long_result = long_result * 4;
      do {
        *ptr_float_var = *ptr_float_var;
        ptr_float_var[1] = ptr_float_var[1];
        ptr_float_var[2] = ptr_float_var[2];
        if ((ptr_float_var[-0x2e] * ptr_float_var[-0x29] - ptr_float_var[-0x2d] * ptr_float_var[-0x2a]) * ptr_float_var[4] +
            (ptr_float_var[-0x2d] * *ptr_float_var - ptr_float_var[-4] * ptr_float_var[-0x29]) * ptr_float_var[-0x26] +
            (ptr_float_var[-4] * ptr_float_var[-0x2a] - *ptr_float_var * ptr_float_var[-0x2e]) * ptr_float_var[-0x25] <= 0.0) {
          float_result = -1.0;
        }
        else {
          float_result = 1.0;
        }
        ptr_float_var[3] = float_result;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[0x17];
        ptr_float_var[1] = ptr_float_var[0x18];
        ptr_float_var[2] = ptr_float_var[NODE_INITIALIZED_OFFSET];
        if ((ptr_float_var[-0x17] * ptr_float_var[-0x12] - ptr_float_var[-0x16] * ptr_float_var[-0x13]) * ptr_float_var[0x1b] +
            (ptr_float_var[0x17] * ptr_float_var[-0x16] - ptr_float_var[0x13] * ptr_float_var[-0x12]) * ptr_float_var[-0xf] +
            (ptr_float_var[0x13] * ptr_float_var[-0x13] - ptr_float_var[0x17] * ptr_float_var[-0x17]) * ptr_float_var[-0xe] <= 0.0
           ) {
          float_result = -1.0;
        }
        else {
          float_result = 1.0;
        }
        ptr_float_var[3] = float_result;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[3];
        ptr_float_var[1] = ptr_float_var[4];
        ptr_float_var[2] = ptr_float_var[5];
        if ((ptr_float_var[1] * ptr_float_var[3] - ptr_float_var[5] * ptr_float_var[-1]) * ptr_float_var[8] +
            (ptr_float_var[5] * *ptr_float_var - ptr_float_var[1] * ptr_float_var[4]) * ptr_float_var[7] +
            (ptr_float_var[4] * ptr_float_var[-1] - *ptr_float_var * ptr_float_var[3]) * ptr_float_var[9] <= 0.0) {
          float_result = -1.0;
        }
        else {
          float_result = 1.0;
        }
        ptr_float_var[3] = float_result;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        *ptr_float_var = ptr_float_var[0x1a];
        ptr_float_var[1] = ptr_float_var[0x1b];
        ptr_float_var[2] = ptr_float_var[0x1c];
        if ((ptr_float_var[0x1c] * ptr_float_var[0x17] - ptr_float_var[0x18] * ptr_float_var[0x1b]) * ptr_float_var[0x1e] +
            (ptr_float_var[0x1a] * ptr_float_var[0x18] - ptr_float_var[0x1c] * ptr_float_var[0x16]) * ptr_float_var[0x1f] +
            (ptr_float_var[0x16] * ptr_float_var[0x1b] - ptr_float_var[0x1a] * ptr_float_var[0x17]) * ptr_float_var[SYSTEM_NODE_HEADER_SIZE] <= 0.0)
        {
          float_result = -1.0;
        }
        else {
          float_result = 1.0;
        }
        ptr_float_var[3] = float_result;
        ptr_float_var = (float *)((longlong)ptr_float_var + long_result);
        ptr_float_var = ptr_float_var + 0x5c;
        ptr_float_var = ptr_float_var + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    if (long_result < long_result) {
      ptr_float_var = ptr_float_var + 2;
      ptr_float_var = (float *)(*(longlong *)(resourceIdentifier + 0x68) + 8 + long_result * 0x5c);
      long_result = long_result - long_result;
      do {
        ptr_float_var[-2] = ptr_float_var[3];
        ptr_float_var[-1] = ptr_float_var[4];
        *ptr_float_var = ptr_float_var[5];
        if ((ptr_float_var[5] * *ptr_float_var - ptr_float_var[1] * ptr_float_var[4]) * ptr_float_var[7] +
            (ptr_float_var[3] * ptr_float_var[1] - ptr_float_var[-1] * ptr_float_var[5]) * ptr_float_var[8] +
            (ptr_float_var[-1] * ptr_float_var[4] - ptr_float_var[3] * *ptr_float_var) * ptr_float_var[9] <= 0.0) {
          float_result = -1.0;
        }
        else {
          float_result = 1.0;
        }
        ptr_float_var[1] = float_result;
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        ptr_float_var = ptr_float_var + 0x17;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 8:
    if (*(int *)(resourceIdentifier + 200) < 1) {
code_r0x00018007db1b:
                    // WARNING: Subroutine does not return
      memset(ptr_float_var,0,(longlong)(int_result * 4));
    }
    long_result = long_result;
    if (3 < long_result) {
      long_result = (longlong)int_result;
      long_result = (long_result - 4U >> 2) + 1;
      long_result = long_result * 4;
      do {
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        *(char *)ptr_float_var =
             (char)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) +
                                   (longlong)*(int *)(long_result + long_result) * 0x14) * 255.0);
        *(char *)((longlong)ptr_float_var + 1) =
             (char)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 4 +
                                   (longlong)*(int *)(long_result + long_result) * 0x14) * 255.0);
        uint_result = (uint)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 8 +
                                 (longlong)*(int *)(long_result + long_result) * 0x14) * 255.0);
        *(char *)((longlong)ptr_float_var + 2) = (char)uint_result;
        float_result = (float)((uint_result & 0xff) + (uint)*(byte *)((longlong)ptr_float_var + 1) +
                        (uint)*(byte *)ptr_float_var);
        if (0.0 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        *(char *)((longlong)ptr_float_var + 3) = (char)(int)(1.0 - float_result);
        ptr_byte_var = (byte *)((longlong)ptr_float_var + long_result);
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        *ptr_byte_var = (byte)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) +
                                         (longlong)*(int *)(long_result + 0x5c + long_result) * 0x14) * 255.0);
        ptr_byte_var[1] = (byte)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 4 +
                                           (longlong)*(int *)(long_result + 0x5c + long_result) * 0x14) * 255.0
                                );
        uint_result = (uint)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 8 +
                                 (longlong)*(int *)(long_result + 0x5c + long_result) * 0x14) * 255.0);
        ptr_byte_var[2] = (byte)uint_result;
        float_result = (float)((uint_result & 0xff) + (uint)ptr_byte_var[1] + (uint)*ptr_byte_var);
        if (0.0 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        ptr_byte_var[3] = (byte)(int)(1.0 - float_result);
        ptr_byte_var = ptr_byte_var + long_result;
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        *ptr_byte_var = (byte)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) +
                                         (longlong)*(int *)(long_result + 0xb8 + long_result) * 0x14) * 255.0);
        ptr_byte_var[1] = (byte)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 4 +
                                           (longlong)*(int *)(long_result + 0xb8 + long_result) * 0x14) * 255.0
                                );
        uint_result = (uint)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 8 +
                                 (longlong)*(int *)(long_result + 0xb8 + long_result) * 0x14) * 255.0);
        ptr_byte_var[2] = (byte)uint_result;
        float_result = (float)((uint_result & 0xff) + (uint)ptr_byte_var[1] + (uint)*ptr_byte_var);
        if (0.0 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        ptr_byte_var[3] = (byte)(int)(1.0 - float_result);
        ptr_byte_var = ptr_byte_var + long_result;
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        *ptr_byte_var = (byte)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) +
                                         (longlong)*(int *)(long_result + 0x114 + long_result) * 0x14) * 255.0)
        ;
        ptr_byte_var[1] = (byte)(int)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 4 +
                                           (longlong)*(int *)(long_result + 0x114 + long_result) * 0x14) *
                                255.0);
        uint_result = (uint)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 8 +
                                 (longlong)*(int *)(long_result + 0x114 + long_result) * 0x14) * 255.0);
        ptr_byte_var[2] = (byte)uint_result;
        float_result = (float)((uint_result & 0xff) + (uint)ptr_byte_var[1] + (uint)*ptr_byte_var);
        if (0.0 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        ptr_byte_var[3] = (byte)(int)(1.0 - float_result);
        ptr_float_var = (float *)(ptr_byte_var + long_result);
        long_result = long_result + 0x170;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    if (long_result < long_result) {
      long_result = long_result * 0x5c;
      ptr_uint_var = (uint8_t *)((longlong)ptr_float_var + 2);
      long_result = long_result - long_result;
      do {
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        uint_result = (uint)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) +
                                  (longlong)*(int *)(long_result + long_result) * 0x14) * 255.0);
        ptr_uint_var[-2] = (char)uint_result;
        uint_result = (uint)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 4 +
                                  (longlong)*(int *)(long_result + long_result) * 0x14) * 255.0);
        ptr_uint_var[-1] = (char)uint_result;
        uint_result = (uint)(*(float *)(*(longlong *)(resourceIdentifier + 0xd0) + 8 +
                                 (longlong)*(int *)(long_result + long_result) * 0x14) * 255.0);
        *ptr_uint_var = (char)uint_result;
        float_result = (float)((uint_result & 0xff) + (uint_result & 0xff) + (uint_result & 0xff));
        if (0.0 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        ptr_uint_var[1] = (char)(int)(1.0 - float_result);
        ptr_uint_var = ptr_uint_var + int_result;
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 9:
    if (*(int *)(resourceIdentifier + 200) < 1) goto code_r0x00018007db1b;
    if (0 < int_result) {
      do {
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        *(uint8_t *)ptr_float_var =
             *(uint8_t *)
              (*(longlong *)(resourceIdentifier + 0xd0) + SYSTEM_DATA_COMPARE_SIZE + (longlong)*(int *)(long_result + long_result) * 0x14);
        *(uint8_t *)((longlong)ptr_float_var + 1) =
             *(uint8_t *)
              (*(longlong *)(resourceIdentifier + 0xd0) + 0x11 + (longlong)*(int *)(long_result + long_result) * 0x14);
        *(uint8_t *)((longlong)ptr_float_var + 2) =
             *(uint8_t *)
              (*(longlong *)(resourceIdentifier + 0xd0) + 0x12 + (longlong)*(int *)(long_result + long_result) * 0x14);
        *(uint8_t *)((longlong)ptr_float_var + 3) =
             *(uint8_t *)
              (*(longlong *)(resourceIdentifier + 0xd0) + 0x13 + (longlong)*(int *)(long_result + long_result) * 0x14);
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 10:
    if (0 < int_result) {
      do {
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        float_result = *(float *)(long_result + 0x34 + long_result) * 0.5;
        float_result = *(float *)(long_result + 0x38 + long_result) * 0.5;
        float_result = *(float *)(long_result + 0x3c + long_result) * 0.5;
        float_result = float_result + 0.5;
        float_result = float_result + 0.5;
        float_result = float_result + 0.5;
        if (-0.5 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        if (-0.5 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        if (-0.5 <= float_result) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        *ptr_float_var = (float)(((uint)(longlong)(float_result * 2047.0) & 0x7ff |
                           (int)(longlong)(float_result * 2047.0) << 0xb) << 10 |
                          (uint)(longlong)(float_result * 1023.0) & 0x3ff);
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 0xb:
    if (0 < int_result) {
      long_result = 0x40;
      if (*(int *)(resourceIdentifier + 0x38) < 1) {
        long_result = 0x18;
      }
      uint_result = SetSystemFloatValue(0x3f800000);
      uint_result = (ulonglong)uint_result;
      do {
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        uint_result = SetSystemFloatValue(*(uint32_t *)
                                     (*(longlong *)(long_result + resourceIdentifier) +
                                     (longlong)*(int *)(long_result + long_result) * SYSTEM_DATA_COMPARE_SIZE));
        *(uint16_t *)ptr_float_var = uint_result;
        uint_result = SetSystemFloatValue(*(uint32_t *)
                                     (*(longlong *)(long_result + resourceIdentifier) + 4 +
                                     (longlong)*(int *)(long_result + long_result) * SYSTEM_DATA_COMPARE_SIZE));
        *(uint16_t *)((longlong)ptr_float_var + 2) = uint_result;
        uint_result = SetSystemFloatValue(*(uint32_t *)
                                     (*(longlong *)(long_result + resourceIdentifier) + 8 +
                                     (longlong)*(int *)(long_result + long_result) * SYSTEM_DATA_COMPARE_SIZE));
        *(uint16_t *)(ptr_float_var + 1) = uint_result;
        *(short *)((longlong)ptr_float_var + 6) = (short)uint_result;
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 0xc:
    if (0 < int_result) {
      do {
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        float_result = *(float *)(long_result + 0x1c + long_result);
        float_result = *(float *)(long_result + 0x18 + long_result);
        float_result = *(float *)(long_result + 0x14 + long_result);
        float_result = *(float *)(long_result + 4 + long_result);
        float_result = float_result * 0.5 + 0.5;
        float_result = float_result * 0.5 + 0.5;
        float_result = float_result * 0.5 + 0.5;
        if (-0.5 <= float_result * 0.5) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        if (-0.5 <= float_result * 0.5) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        if (-0.5 <= float_result * 0.5) {
          if (1.0 <= float_result) {
            float_result = 1.0;
          }
        }
        else {
          float_result = 0.0;
        }
        uint_result = 0;
        if ((float_result * *(float *)(long_result + 0xc + long_result) - float_result * float_result) *
            *(float *)(long_result + 0x28 + long_result) +
            (float_result * *(float *)(long_result + 8 + long_result) - float_result * *(float *)(long_result + 0xc + long_result))
            * *(float *)(long_result + 0x24 + long_result) +
            (float_result * float_result - float_result * *(float *)(long_result + 8 + long_result)) *
            *(float *)(long_result + 0x2c + long_result) < 0.0) {
          uint_result = 0x80000000;
        }
        *ptr_float_var = (float)((((uint)(longlong)(float_result * 1023.0) & 0x3ff) << 0xb |
                           (uint)(longlong)(float_result * 2047.0) & 0x7ff) << 10 |
                           (uint)(longlong)(float_result * 1023.0) & 0x3ff | uint_result);
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
    break;
  case 0xd:
    if (0 < int_result) {
      long_result = 0x48;
      long_result = *(longlong *)((longlong)threadLocalStoragePointer + (ulonglong)__tls_index * 8);
      float_result = fRam0000000180d49154;
      do {
        long_result = *(longlong *)(resourceIdentifier + 0x68);
        ptr_float_var = (float *)(long_result + 0x34 + long_result);
        init_float_stack_108 = *ptr_float_var;
        init_float_stack_104 = ptr_float_var[1];
        init_float_stack_100 = ptr_float_var[2];
        init_float_stack_fc = ptr_float_var[3];
        ptr_float_var = (float *)(long_result + 0x14 + long_result);
        init_float_stack_f8 = *ptr_float_var;
        init_float_stack_f4 = ptr_float_var[1];
        init_float_stack_f0 = ptr_float_var[2];
        init_float_stack_ec = ptr_float_var[3];
        ptr_float_var = (float *)(long_result + 0x24 + long_result);
        init_float_stack_e8 = *ptr_float_var;
        init_float_stack_e4 = ptr_float_var[1];
        init_float_stack_e0 = ptr_float_var[2];
        init_float_stack_dc = ptr_float_var[3];
        float_result = init_float_stack_100 * init_float_stack_f8 - init_float_stack_f0 * init_float_stack_108;
        if ((init_float_stack_f0 * init_float_stack_104 - init_float_stack_100 * init_float_stack_f4) * init_float_stack_e8 + init_float_stack_e4 * float_result +
            init_float_stack_e0 * (init_float_stack_f4 * init_float_stack_108 - init_float_stack_f8 * init_float_stack_104) < 0.0) {
          init_float_stack_e0 = -init_float_stack_e0;
          init_float_stack_118 = -init_float_stack_e8;
          init_float_stack_114 = -init_float_stack_e4;
          uintStack_10c = 0x7f7fffff;
          init_float_stack_e8 = -init_float_stack_e8;
          init_float_stack_e4 = -init_float_stack_e4;
          init_float_stack_dc = 3.4028235e+38;
          init_float_stack_110 = init_float_stack_e0;
        }
        UtilityFunction3b470(&init_float_stack_128,&init_float_stack_108,init_float_stack_e0,float_result,uint_result);
        SystemFunction_67_2(&init_float_stack_128);
        if (init_float_stack_128 < 0.0) {
          init_float_stack_128 = -init_float_stack_128;
          init_float_stack_124 = -init_float_stack_124;
          init_float_stack_120 = -init_float_stack_120;
          init_float_stack_11c = -init_float_stack_11c;
        }
        float_result = init_float_stack_11c;
        float_result = init_float_stack_120;
        float_result = init_float_stack_124;
        float_result = init_float_stack_128;
        if (*(int *)(long_result + long_result) < iRam0000000180d49150) {
          CheckSystemInitialized(0x180d49150);
          if (iRam0000000180d49150 == -1) {
            fRam0000000180d49154 = 1.0;
            MarkSystemInitialized(0x180d49150);
          }
          long_result = 0x48;
          float_result = fRam0000000180d49154;
        }
        if (float_result < 3.051851e-05) {
          float_result = 3.051851e-05;
          init_float_stack_128 = 3.051851e-05;
          float_result = float_result * float_result;
          float_result = float_result * float_result;
          float_result = float_result * float_result;
          init_float_stack_124 = float_result;
          init_float_stack_120 = float_result;
          init_float_stack_11c = float_result;
        }
        float_result = *(float *)(long_result + 0x18 + long_result);
        float_result = *(float *)(long_result + 0x1c + long_result);
        float_result = *(float *)(long_result + 0x14 + long_result);
        if ((float_result * *(float *)(long_result + 0x34 + long_result) -
            float_result * *(float *)(long_result + 0x3c + long_result)) * *(float *)(long_result + 0x28 + long_result) +
            (float_result * *(float *)(long_result + 0x3c + long_result) -
            float_result * *(float *)(long_result + 0x38 + long_result)) * *(float *)(long_result + 0x24 + long_result) +
            (float_result * *(float *)(long_result + 0x38 + long_result) -
            float_result * *(float *)(long_result + 0x34 + long_result)) * *(float *)(long_result + 0x2c + long_result) <= 0.0
           ) {
          float_result = -float_result;
          float_result = -float_result;
          float_result = -float_result;
          float_result = -float_result;
          init_float_stack_128 = float_result;
          init_float_stack_124 = float_result;
          init_float_stack_120 = float_result;
          init_float_stack_11c = float_result;
        }
        *(short *)ptr_float_var = (short)(int)(float_result * 32767.0);
        *(short *)((longlong)ptr_float_var + 2) = (short)(int)(float_result * 32767.0);
        *(short *)(ptr_float_var + 1) = (short)(int)(float_result * 32767.0);
        *(short *)((longlong)ptr_float_var + 6) = (short)(int)(float_result * 32767.0);
        ptr_float_var = (float *)((longlong)ptr_float_var + (longlong)int_result);
        long_result = long_result + 0x5c;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
  }
  return;
}
// void SystemFunction_92_0(longlong handleIdentifier,longlong *resourceIdentifier,char systemConfig,uint64_t systemFlags)

void SystemFunction_92_0(longlong handleIdentifier,longlong *resourceIdentifier,char systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  longlong long_result;
  uint uint_result;
  uint64_t uint_result;
  uint uint_result;
  longlong *stack_long_ptr;

  if (*(int *)(handleIdentifier + 0x88) != 0) {
    if (systemConfig == '\0') {
      uint_result = InitializeSystemModule40(handleIdentifier,&stack_long_ptr,*(int *)(handleIdentifier + 0x88) * 3,systemFlags,
                            INVALID_HANDLE_VALUE);
      InitializeEventSystem(resourceIdentifier,uint_result);
    }
    else {
      uint_result = InitializeAuthenticationSystem();
      InitializeEventSystem(resourceIdentifier,uint_result);
    }
    if (stack_long_ptr != (longlong *)0x0) {
      (**(code **)(*stack_long_ptr + 0x38))();
    }
    long_result = *(longlong *)(*resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
    if (systemConfig != '\0') {
                    // WARNING: Could not recover jumptable at 0x0001808ffc47. Too many branches
                    // WARNING: Subroutine does not return
                    // WARNING: Treating indirect jump as call
      memcpy(long_result,*(uint64_t *)(handleIdentifier + 0x90),(longlong)*(int *)(handleIdentifier + 0x88) * 0xc);
      return;
    }
    uint_result = 0;
    if (*(int *)(handleIdentifier + 0x88) != 0) {
      do {
        long_result = (longlong)(int)uint_result * 0xc;
        uint_result = uint_result * 3;
        *(uint16_t *)(long_result + (ulonglong)uint_result * 2) =
             *(uint16_t *)(long_result + *(longlong *)(handleIdentifier + 0x90));
        *(uint16_t *)(long_result + (ulonglong)(uint_result + 1) * 2) =
             *(uint16_t *)(*(longlong *)(handleIdentifier + 0x90) + 4 + long_result);
        *(uint16_t *)(long_result + (ulonglong)(uint_result + 2) * 2) =
             *(uint16_t *)(*(longlong *)(handleIdentifier + 0x90) + 8 + long_result);
        uint_result = uint_result + 1;
      } while (uint_result < *(uint *)(handleIdentifier + 0x88));
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeInputSystem(longlong handleIdentifier,ulonglong resourceIdentifier,longlong *systemConfig,longlong *systemFlags)
void InitializeInputSystem(longlong handleIdentifier,ulonglong resourceIdentifier,longlong *systemConfig,longlong *systemFlags)

{
  longlong long_result;
  int *ptr_int_var;
  int compare_result;
  int int_result;
  longlong allocation_size;
  int int_result;
  longlong longStack_70;
  uint32_t uintStack_68;
  longlong longStack_60;
  longlong longStack_58;
  uint32_t uintStack_50;
  uint64_t uintStack_48;

  allocation_size = (resourceIdentifier & 0xff) * 0x1c0 + systemConfigurationData;
  int_result = *(int *)(allocation_size + 0x70);
  long_result = (longlong)int_result;
  if (0 < int_result) {
    uintStack_68 = 0;
    longStack_70 = handleIdentifier;
    InitializeThreadManagerSystem(&longStack_70);
    if (longStack_60 != 0) {
      compare_result = 0;
      int_result = -1;
      if (0 < int_result) {
        ptr_int_var = (int *)(allocation_size + 0x128);
        allocation_size = longStack_60;
        int_result = int_result;
        do {
          switch(*ptr_int_var) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 10:
          case 0xb:
          case 0xc:
          case 0xd:
            ConfigureSystemSettings((longlong)*ptr_int_var,allocation_size,*systemConfig + 0x18 + (longlong)compare_result * 8);
            allocation_size = longStack_60;
            break;
          case 8:
            int_result = compare_result;
            break;
          case 9:
            int_result = compare_result;
          }
          compare_result = compare_result + 1;
          ptr_int_var = ptr_int_var + 3;
          long_result = long_result + -1;
        } while (long_result != 0);
        if (int_result != -1) {
          longStack_58 = handleIdentifier;
          if ((((*(byte *)(handleIdentifier + 0xfd) & 0x40) == 0) || (*(longlong *)(handleIdentifier + 0x210) == 0))
             && (*(longlong *)(handleIdentifier + 0x1b0) != 0)) {
            longStack_58 = InitializeResourceSystem();
          }
          uintStack_50 = 0;
          InitializeThreadManagerSystem(&longStack_58);
          ConfigureSystemSettings(8,uintStack_48,*systemConfig + 0x18 + (longlong)int_result * 8);
          ConfigureSystemSettings(9,uintStack_48,*systemConfig + 0x18 + (longlong)int_result * 8);
          InitializeSystemDataNode30(&longStack_58);
        }
      }
      if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
        handleIdentifier = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
      }
      SystemFunction_92_0(longStack_60,*systemFlags + SYSTEM_NODE_HEADER_SIZE,0xffff < *(int *)(handleIdentifier + SYSTEM_NODE_HEADER_SIZE0));
    }
    InitializeSystemDataNode30(&longStack_70);
  }
  if ((longlong *)*systemConfig != (longlong *)0x0) {
    (**(code **)(*(longlong *)*systemConfig + 0x38))();
  }
  if ((longlong *)*systemFlags != (longlong *)0x0) {
    (**(code **)(*(longlong *)*systemFlags + 0x38))();
  }
  return;
}
// void InitializeSystemModule4(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeSystemModule4(longlong handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  int int_result;
  int int_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeConfigSystem(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  InitializeConfigSystem(handleIdentifier + 0x38,resourceIdentifier);
  *(uint8_t *)(handleIdentifier + 0x80) = *(uint8_t *)(resourceIdentifier + 0x1a);
  *(uint32_t *)(handleIdentifier + 0x60) = **(uint32_t **)(resourceIdentifier + 8);
  *(longlong *)(resourceIdentifier + 8) = *(longlong *)(resourceIdentifier + 8) + 4;
  int_result = *(int *)(handleIdentifier + 0x60);
  int_result = *(int *)(handleIdentifier + 100);
  if (int_result < int_result) {
    if (int_result == 0) {
      if (int_result < 2) {
        *(uint32_t *)(handleIdentifier + 100) = 8;
      }
      else {
        *(int *)(handleIdentifier + 100) = (int_result >> 1) + int_result;
      }
    }
    else {
      *(int *)(handleIdentifier + 100) = int_result;
    }
    SystemFunction_88_0(handleIdentifier + 0x60);
  }
  *(int *)(handleIdentifier + 0x60) = int_result;
                    // WARNING: Subroutine does not return
  memcpy(*(uint64_t *)(handleIdentifier + 0x68),*(uint64_t *)(resourceIdentifier + 8),(longlong)(int_result * 0x5c),
         systemFlags,uint_result);
}
// void InitializeSystemModule42(longlong handleIdentifier,longlong *resourceIdentifier)

void InitializeSystemModule42(longlong handleIdentifier,longlong *resourceIdentifier)

{
  uint32_t uint_result;
  int *ptr_int_var;
  uint32_t *ptr_uint_var;
  longlong long_result;
  int int_result;
  int int_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  InitializeFontSystem(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  InitializeFontSystem(handleIdentifier + 0x38,resourceIdentifier);
  int_result = *(int *)(handleIdentifier + 0x60);
  uint_result = (longlong)int_result * 0x5c + 4;
  long_result = resourceIdentifier[2];
  ptr_int_var = (int *)resourceIdentifier[1];
  long_result = *resourceIdentifier;
  if ((ulonglong)((long_result - (longlong)ptr_int_var) + long_result) <= uint_result) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_int_var + (uint_result - long_result),long_result,uint_result,uint_result);
    int_result = *(int *)(handleIdentifier + 0x60);
    long_result = resourceIdentifier[2];
    ptr_int_var = (int *)resourceIdentifier[1];
    long_result = *resourceIdentifier;
  }
  if ((ulonglong)((long_result - (longlong)ptr_int_var) + long_result) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_int_var + (4 - long_result));
    ptr_int_var = (int *)resourceIdentifier[1];
  }
  *ptr_int_var = int_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  int_result = 0;
  int_result = int_result;
  if (0 < *(int *)(handleIdentifier + 0x60)) {
    do {
      InitializeSystemModule9((longlong)int_result * 0x5c + *(longlong *)(handleIdentifier + 0x68),resourceIdentifier);
      int_result = int_result + 1;
    } while (int_result < *(int *)(handleIdentifier + 0x60));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  uint_result = *(uint32_t *)(handleIdentifier + 0x88);
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  UtilityFunction3a180(resourceIdentifier,*(uint64_t *)(handleIdentifier + 0x90),(longlong)*(int *)(handleIdentifier + 0x88) * 0xc);
  uint_result = (ulonglong)*(ushort *)(handleIdentifier + 0xc0);
  uint_result = uint_result * 4 + 4;
  long_result = resourceIdentifier[2];
  ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  long_result = *resourceIdentifier;
  if ((ulonglong)((long_result - (longlong)ptr_uint_var) + long_result) <= uint_result) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (uint_result - long_result));
    uint_result = (ulonglong)*(ushort *)(handleIdentifier + 0xc0);
    long_result = resourceIdentifier[2];
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
    long_result = *resourceIdentifier;
  }
  if ((ulonglong)((long_result - (longlong)ptr_uint_var) + long_result) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - long_result));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = (int)uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  UtilityFunction3a180(resourceIdentifier,*(uint64_t *)(handleIdentifier + 0xb8),(ulonglong)*(ushort *)(handleIdentifier + 0xc0) << 2)
  ;
  if (*(short *)(handleIdentifier + 0xc0) != 0) {
    do {
      long_result = (longlong)int_result * 0x50 + *(longlong *)(handleIdentifier + 0xb0);
      InitializeFontSystem(long_result,resourceIdentifier);
      InitializeFontSystem(long_result + 0x28,resourceIdentifier);
      int_result = int_result + 1;
    } while (int_result < (int)(uint)*(ushort *)(handleIdentifier + 0xc0));
  }
  uint_result = *(uint32_t *)(handleIdentifier + 200);
  ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = uint_result;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  UtilityFunction3a180(resourceIdentifier,*(uint64_t *)(handleIdentifier + 0xd0),(longlong)*(int *)(handleIdentifier + 200) * 0x14);
  ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  if ((ulonglong)((*resourceIdentifier - (longlong)ptr_uint_var) + resourceIdentifier[2]) < 5) {
    UtilityFunction39bf0(resourceIdentifier,(longlong)ptr_uint_var + (4 - *resourceIdentifier));
    ptr_uint_var = (uint32_t *)resourceIdentifier[1];
  }
  *ptr_uint_var = 0;
  resourceIdentifier[1] = resourceIdentifier[1] + 4;
  UtilityFunction3a180(resourceIdentifier,0,0);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule2(longlong handleIdentifier,char resourceIdentifier,uint64_t systemConfig)
void InitializeSystemModule2(longlong handleIdentifier,char resourceIdentifier,uint64_t systemConfig)

{
  longlong long_result;
  uint64_t uint_result;
  longlong long_result;

  *(int *)(*(longlong *)(handleIdentifier + 600) + 0x18) = (int)resourceIdentifier;
  InitializeTextureSystem(handleIdentifier,*(int *)(*(longlong *)(handleIdentifier + 600) + 0x1c) +
                        *(int *)(*(longlong *)(handleIdentifier + 600) + 0x18));
  long_result = *(longlong *)(handleIdentifier + 600);
  if (*(longlong *)(long_result + SYSTEM_DATA_COMPARE_SIZE) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  uint_result = 0;
  long_result = (longlong)resourceIdentifier;
  *(uint64_t *)(long_result + SYSTEM_DATA_COMPARE_SIZE) = 0;
  if (long_result != 0) {
    uint_result = AllocateSystemMemory(systemMemoryPool,long_result,SYSTEM_DATA_COMPARE_SIZE,CONCAT71((int7)((ulonglong)long_result >> 8),3));
  }
  *(uint64_t *)(*(longlong *)(handleIdentifier + 600) + SYSTEM_DATA_COMPARE_SIZE) = uint_result;
                    // WARNING: Could not recover jumptable at 0x0001808ffc47. Too many branches
                    // WARNING: Subroutine does not return
                    // WARNING: Treating indirect jump as call
  memcpy(*(uint64_t *)(*(longlong *)(handleIdentifier + 600) + SYSTEM_DATA_COMPARE_SIZE),systemConfig,long_result);
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeFontSystem(longlong handleIdentifier)
void InitializeFontSystem(longlong handleIdentifier)

{
  uint64_t uint_result;

  if (*(longlong *)(handleIdentifier + 0x2c8) == 0) {
    *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) = *(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE0) | 8;
    uint_result = AllocateSystemMemory(systemMemoryPool,0xd0,4,9);
                    // WARNING: Subroutine does not return
    memset(uint_result,0,0xd0);
  }
  return;
}
// void SystemFunction_49_5(void)

void SystemFunction_49_5(void)

{
  uint64_t uint_result;

  uint_result = AllocateSystemMemory();
                    // WARNING: Subroutine does not return
  memset(uint_result,0,0xd0);
}
// void InitializeSystemDataNode28(void)

void InitializeSystemDataNode28(void)

{
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeTextureSystem(longlong handleIdentifier,int resourceIdentifier)
void InitializeTextureSystem(longlong handleIdentifier,int resourceIdentifier)

{
  longlong *long_ptr;
  uint64_t uint_result;

  long_ptr = *(longlong **)(handleIdentifier + 600);
  if ((int)long_ptr[1] != resourceIdentifier) {
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    uint_result = 0;
    *long_ptr = 0;
    if (resourceIdentifier != 0) {
      uint_result = AllocateSystemMemory(systemMemoryPool,(longlong)resourceIdentifier << 6,SYSTEM_DATA_COMPARE_SIZE,4);
    }
    **(uint64_t **)(handleIdentifier + 600) = uint_result;
    *(int *)(*(longlong *)(handleIdentifier + 600) + 8) = resourceIdentifier;
  }
  return;
}
// void SystemFunction_67_2(longlong handleIdentifier,char resourceIdentifier)

void SystemFunction_67_2(longlong handleIdentifier,char resourceIdentifier)

{
  byte bool_var;
  longlong long_result;
  longlong *long_ptr;
  uint8_t localBuffer_40 [8];
  longlong longStack_38;
  uint32_t uintStack_30;
  longlong *stack_long_ptr;

  if (*(char *)(handleIdentifier + 0xf4) == resourceIdentifier) {
    return;
  }
  long_result = 0;
  if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) != 0) {
    InitializeSystemModule3();
    do {
      *(char *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x14 + long_result) = resourceIdentifier;
      long_result = long_result + 0x18;
    } while (long_result < 0x180);
  }
  stack_long_ptr = (longlong *)0x0;
  localBuffer_40[0] = 0;
  uintStack_30 = 1;
  longStack_38 = handleIdentifier;
  InitializeSystemModule33(localBuffer_40);
  if (stack_long_ptr == (longlong *)0x0) goto LAB_18007eb55;
  long_ptr = stack_long_ptr;
  if (resourceIdentifier != '\0') {
    if ((resourceIdentifier != '\x01') || ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0)) goto LAB_18007eb55;
    long_result = *(longlong *)(handleIdentifier + 0x1b8);
    bool_var = *(byte *)(long_result + 0x38c);
    if (bool_var == 9) {
      bool_var = IsSystemInitialized();
      *(byte *)(long_result + 0x38c) = bool_var;
    }
    long_ptr = stack_long_ptr;
    if ((*(char *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x15 + (ulonglong)bool_var * 0x18) != '\x03') &&
       (*(char *)(*(longlong *)(handleIdentifier + 0x1e0) + 0x15 + (ulonglong)bool_var * 0x18) != '\x02'))
    goto LAB_18007eb55;
  }
  stack_long_ptr = (longlong *)0x0;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
LAB_18007eb55:
  *(char *)(handleIdentifier + 0xf4) = resourceIdentifier;
  InitializeNetworkManagerSystem(localBuffer_40);
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x38))();
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

code * InitializeSystemModule59(longlong handleIdentifier,char resourceIdentifier)

{
  longlong *long_ptr;
  code *in_RAX;
  uint64_t uint_result;
  code *ptr_char_var;
  longlong *ptr_data;
  longlong longStack_30;
  uint32_t uintStack_28;
  code *stack_char_ptr;
  code *stack_char_ptr;

  ptr_char_var = (code *)(handleIdentifier + 0x210);
  if (*(longlong *)ptr_char_var == 0) {
    if ((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0) {
      longStack_30 = GetSystemDataPointer(*(uint64_t *)(handleIdentifier + 0x1b0));
      if (longStack_30 != handleIdentifier) {
        uintStack_28 = 0;
        InitializeThreadManagerSystem(&longStack_30);
        uint_result = AllocateSystemMemory(systemMemoryPool,0xf0,8,3);
        uint_result = InitializeSystemTimer(uint_result);
        InitializeSystemResources(ptr_char_var,uint_result);
        ConfigureSystemHandles(*(longlong *)ptr_char_var + SYSTEM_DATA_COMPARE_SIZE,(longlong)stack_char_ptr + SYSTEM_DATA_COMPARE_SIZE);
        ConfigureSystemHandles(*(longlong *)ptr_char_var + 0x38,(longlong)stack_char_ptr + 0x38);
        InitializePhysicsSystem(*(longlong *)ptr_char_var + 0x60,(longlong)stack_char_ptr + 0x60);
        InitializeSystemModule4(*(longlong *)ptr_char_var + 0x88,(longlong)stack_char_ptr + 0x88);
        if (resourceIdentifier != '\0') {
          *(byte *)(handleIdentifier + 0xfd) = *(byte *)(handleIdentifier + 0xfd) | 0x40;
          InitializeTextureSystem(*(longlong *)ptr_char_var + 200,(longlong)stack_char_ptr + 200);
          ProcessSystemStringData(*(longlong *)ptr_char_var + 0xb0,(longlong)stack_char_ptr + 0xb0);
        }
        ptr_char_var = (code *)InitializeSystemDataNode30(&longStack_30);
        return ptr_char_var;
      }
    }
    if (*(longlong *)(handleIdentifier + 0xa8) == 0) {
      if ((*(byte *)(handleIdentifier + 0xfd) & 4) != 0) {
        uint_result = AllocateSystemMemory(systemMemoryPool,0xf0,8,3);
        ptr_data = (longlong *)InitializeSystemTimer(uint_result);
        stack_char_ptr = (code *)INVALID_HANDLE_VALUE;
        if (ptr_data != (longlong *)0x0) {
          (**(code **)(*ptr_data + 0x28))(ptr_data);
        }
        long_ptr = *(longlong **)ptr_char_var;
        *(longlong **)ptr_char_var = ptr_data;
        if (long_ptr != (longlong *)0x0) {
          (**(code **)(*long_ptr + 0x38))();
        }
        return ptr_char_var;
      }
      SystemNodeUpdateFunction(&globalSystemVariable);
      in_RAX = (code *)ProcessSystemDataHeader(&globalSystemVariable);
    }
    else {
      ptr_data = *(longlong **)(*(longlong *)(handleIdentifier + 0xa8) + 0x88);
      stack_char_ptr = (code *)&g_system_func_15;
      stack_char_ptr = SystemFunction_52_8;
      longStack_30 = handleIdentifier;
      (**(code **)(*ptr_data + 0x60))(ptr_data,&gameDataDefaultPattern,handleIdentifier + 0xb8,0,&longStack_30);
      in_RAX = stack_char_ptr;
      if (stack_char_ptr != (code *)0x0) {
        ptr_char_var = (code *)(*stack_char_ptr)(&longStack_30,0,0);
        return ptr_char_var;
      }
    }
  }
  return in_RAX;
}
// void InitializeAudioManagerSystem(longlong handleIdentifier,char resourceIdentifier)

void InitializeAudioManagerSystem(longlong handleIdentifier,char resourceIdentifier)

{
  longlong *long_ptr;

  if (*(longlong *)(handleIdentifier + 0x210) != 0) {
    InitializeAuthenticationSystem();
    if (resourceIdentifier != '\0') {
      *(byte *)(handleIdentifier + 0xfd) = *(byte *)(handleIdentifier + 0xfd) | SYSTEM_NODE_HEADER_SIZE;
      *(byte *)(handleIdentifier + 0xfe) = *(byte *)(handleIdentifier + 0xfe) | 1;
      InitializeSystemModule3(handleIdentifier);
    }
    if (((*(char *)(handleIdentifier + 0xfc) == '\0') && (*(char *)(handleIdentifier + 0xf4) == '\0')) &&
       (((*(byte *)(handleIdentifier + 0xfd) & SYSTEM_NODE_HEADER_SIZE) == 0 || ((*(byte *)(handleIdentifier + 0xfe) & 1) == 0)))) {
      long_ptr = *(longlong **)(handleIdentifier + 0x210);
      *(uint64_t *)(handleIdentifier + 0x210) = 0;
      if (long_ptr != (longlong *)0x0) {
                    // WARNING: Could not recover jumptable at 0x00018007ee5b. Too many branches
                    // WARNING: Treating indirect jump as call
        (**(code **)(*long_ptr + 0x38))();
        return;
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemDataNode29(longlong handleIdentifier)
void InitializeSystemDataNode29(longlong handleIdentifier)

{
  int int_result;
  uint uint_result;
  uint64_t uint_result;
  int int_result;
  uint uint_result;
  uint uint_result;
  int int_result;
  uint uint_result;
  longlong long_result;
  longlong long_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;

  long_result = *(longlong *)(handleIdentifier + 0x2d0);
  int_result = *(int *)(g_system_base_1 + 0x224);
  if (*(int *)(long_result + 0xc) != int_result) {
    if (*(int *)(long_result + 8) < 1) {
      if (*(int *)(long_result + 0xc) == int_result + -1) {
        uint_result = *(int *)(systemCoreData + 0x9c8) + 1U & 0x80000001;
        if ((int)uint_result < 0) {
          uint_result = (uint_result - 1 | 0xfffffffe) + 1;
        }
        long_result = (longlong)(int)uint_result * 0x488 + systemCoreData + 0xb8;
        long_result = (longlong)*(int *)(systemCoreData + 0x9c8) * 0x488 + systemCoreData + 0xb8;
        uint_result = InitializeSystemModule21(long_result,*(uint32_t *)(long_result + 0x14));
        int_result = (int)uint_result;
        uint_result = uint_result & 0xffffffff;
        if (-1 < int_result) {
          uint_result = uint_result >> 0xb & 0x1fffff;
          uint_result = *(uint *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x14);
          uint_result = (ulonglong)uint_result;
          uint_result = *(uint *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x18);
          uint_result = (uint)uint_result;
          if (uint_result == uint_result + int_result >> 0xb) {
            uint_result = uint_result >> 0xb;
            if (uint_result == uint_result + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
              memcpy(*(longlong *)(long_result + 8 + uint_result * 8) + (ulonglong)(int_result + uint_result * -0x800) * 8
                     ,*(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
                      (ulonglong)(uint_result + uint_result * -0x800) * 8,(longlong)(int)uint_result << 3);
            }
          }
          if (0 < (int)uint_result) {
            do {
              int_result = (int)uint_result;
              uint_result = (uint_result - int_result) + int_result;
              uint_result = uint_result >> 0xb;
              uint_result = uint_result >> 0xb;
              uint_result = (ulonglong)(int_result + 1);
              *(uint64_t *)
               (*(longlong *)(long_result + 8 + uint_result * 8) +
               (ulonglong)(uint)(int_result + (int)uint_result * -0x800) * 8) =
                   *(uint64_t *)
                    (*(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
                    (ulonglong)(uint_result + uint_result * -0x800) * 8);
              uint_result = uint_result - 1;
            } while (uint_result != 0);
          }
          *(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x18) = int_result;
          *(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 0xc) = int_result;
        }
      }
      else {
        *(uint32_t *)(long_result + 0x14) = 0;
      }
    }
    else {
      long_result = (longlong)*(int *)(systemCoreData + 0x9c8) * 0x488 + systemCoreData + 0xb8;
      uint_result = InitializeSystemModule21(long_result);
      uint_result = uint_result >> 0xb;
      uint_result = *(uint *)(*(uint64_t **)(handleIdentifier + 0x2d0) + 1);
      uint_result = (ulonglong)uint_result;
      ptr_uint_var = (uint64_t *)**(uint64_t **)(handleIdentifier + 0x2d0);
      if (uint_result == uint_result + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
        memcpy(*(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
               (ulonglong)(uint_result + uint_result * -0x800) * 8,ptr_uint_var,(ulonglong)uint_result << 3);
      }
      uint_result = uint_result;
      if (uint_result != 0) {
        do {
          uint_result = *ptr_uint_var;
          ptr_uint_var = ptr_uint_var + 1;
          *(uint64_t *)
           (*(longlong *)(long_result + 8 + (ulonglong)(uint_result >> 0xb) * 8) +
           (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 8) = uint_result;
          uint_result = uint_result - 1;
          uint_result = uint_result + 1;
        } while (uint_result != 0);
      }
      *(uint32_t *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x14) =
           *(uint32_t *)(*(longlong *)(handleIdentifier + 0x2d0) + 8);
      *(uint *)(*(longlong *)(handleIdentifier + 0x2d0) + 0x18) = uint_result;
      *(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 0xc) = int_result;
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_84_1(longlong handleIdentifier,int resourceIdentifier,int systemConfig)
void SystemFunction_84_1(longlong handleIdentifier,int resourceIdentifier,int systemConfig)

{
  uint uint_result;
  uint64_t uint_result;
  int compare_result;
  uint uint_result;
  uint uint_result;
  int int_result;
  uint uint_result;
  longlong system_RBX;
  int system_EBP;
  longlong long_result;
  ulonglong uint_result;
  uint64_t *ptr_uint_var;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;

  if (resourceIdentifier < 1) {
    if (systemConfig == system_EBP + -1) {
      uint_result = *(int *)(systemCoreData + 0x9c8) + 1U & 0x80000001;
      if ((int)uint_result < 0) {
        uint_result = (uint_result - 1 | 0xfffffffe) + 1;
      }
      long_result = (longlong)(int)uint_result * 0x488 + systemCoreData + 0xb8;
      long_result = (longlong)*(int *)(systemCoreData + 0x9c8) * 0x488 + systemCoreData + 0xb8;
      uint_result = InitializeSystemModule21(long_result,*(uint32_t *)(handleIdentifier + 0x14));
      int_result = (int)uint_result;
      uint_result = uint_result & 0xffffffff;
      if (-1 < int_result) {
        uint_result = uint_result >> 0xb & 0x1fffff;
        uint_result = *(uint *)(*(longlong *)(system_RBX + 0x2d0) + 0x14);
        uint_result = (ulonglong)uint_result;
        uint_result = *(uint *)(*(longlong *)(system_RBX + 0x2d0) + 0x18);
        uint_result = (uint)uint_result;
        if (uint_result == uint_result + int_result >> 0xb) {
          uint_result = uint_result >> 0xb;
          if (uint_result == uint_result + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
            memcpy(*(longlong *)(long_result + 8 + uint_result * 8) + (ulonglong)(int_result + uint_result * -0x800) * 8,
                   *(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
                   (ulonglong)(uint_result + uint_result * -0x800) * 8,(longlong)(int)uint_result << 3);
          }
        }
        if (0 < (int)uint_result) {
          do {
            compare_result = (int)uint_result;
            uint_result = (uint_result - int_result) + compare_result;
            uint_result = uint_result >> 0xb;
            uint_result = uint_result >> 0xb;
            uint_result = (ulonglong)(compare_result + 1);
            *(uint64_t *)
             (*(longlong *)(long_result + 8 + uint_result * 8) +
             (ulonglong)(uint)(compare_result + (int)uint_result * -0x800) * 8) =
                 *(uint64_t *)
                  (*(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
                  (ulonglong)(uint_result + uint_result * -0x800) * 8);
            uint_result = uint_result - 1;
          } while (uint_result != 0);
        }
        *(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x18) = int_result;
        *(int *)(*(longlong *)(system_RBX + 0x2d0) + 0xc) = system_EBP;
      }
    }
    else {
      *(uint32_t *)(handleIdentifier + 0x14) = 0;
    }
  }
  else {
    long_result = (longlong)*(int *)(systemCoreData + 0x9c8) * 0x488 + systemCoreData + 0xb8;
    uint_result = InitializeSystemModule21(long_result);
    uint_result = uint_result >> 0xb;
    uint_result = *(uint *)(*(uint64_t **)(system_RBX + 0x2d0) + 1);
    uint_result = (ulonglong)uint_result;
    ptr_uint_var = (uint64_t *)**(uint64_t **)(system_RBX + 0x2d0);
    if (uint_result == uint_result + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
      memcpy(*(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
             (ulonglong)(uint_result + uint_result * -0x800) * 8,ptr_uint_var,(ulonglong)uint_result << 3);
    }
    uint_result = uint_result;
    if (uint_result != 0) {
      do {
        uint_result = *ptr_uint_var;
        ptr_uint_var = ptr_uint_var + 1;
        *(uint64_t *)
         (*(longlong *)(long_result + 8 + (ulonglong)(uint_result >> 0xb) * 8) +
         (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 8) = uint_result;
        uint_result = uint_result - 1;
        uint_result = uint_result + 1;
      } while (uint_result != 0);
    }
    *(uint32_t *)(*(longlong *)(system_RBX + 0x2d0) + 0x14) =
         *(uint32_t *)(*(longlong *)(system_RBX + 0x2d0) + 8);
    *(uint *)(*(longlong *)(system_RBX + 0x2d0) + 0x18) = uint_result;
    *(int *)(*(longlong *)(system_RBX + 0x2d0) + 0xc) = system_EBP;
  }
  return;
}
// void SystemFunction_9_0(longlong handleIdentifier,longlong resourceIdentifier)

void SystemFunction_9_0(longlong handleIdentifier,longlong resourceIdentifier)

{
  uint uint_result;
  int int_result;
  uint uint_result;
  int int_result;
  ulonglong uint_result;
  uint uint_result;
  uint uint_result;
  longlong system_RBX;
  uint32_t system_EBP;
  ulonglong uint_result;
  ulonglong uint_result;
  longlong long_result;

  uint_result = *(int *)(resourceIdentifier + 0x910) + 1U & 0x80000001;
  if ((int)uint_result < 0) {
    uint_result = (uint_result - 1 | 0xfffffffe) + 1;
  }
  long_result = (longlong)(int)uint_result * 0x488 + resourceIdentifier;
  resourceIdentifier = (longlong)*(int *)(resourceIdentifier + 0x910) * 0x488 + resourceIdentifier;
  uint_result = InitializeSystemModule21(resourceIdentifier,*(uint32_t *)(handleIdentifier + 0x14));
  int_result = (int)uint_result;
  uint_result = uint_result & 0xffffffff;
  if (-1 < int_result) {
    uint_result = uint_result >> 0xb & 0x1fffff;
    uint_result = *(uint *)(*(longlong *)(system_RBX + 0x2d0) + 0x14);
    uint_result = (ulonglong)uint_result;
    uint_result = *(uint *)(*(longlong *)(system_RBX + 0x2d0) + 0x18);
    uint_result = (uint)uint_result;
    if (uint_result == uint_result + int_result >> 0xb) {
      uint_result = uint_result >> 0xb;
      if (uint_result == uint_result + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
        memcpy(*(longlong *)(resourceIdentifier + 8 + uint_result * 8) + (ulonglong)(int_result + uint_result * -0x800) * 8,
               *(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
               (ulonglong)(uint_result + uint_result * -0x800) * 8,(longlong)(int)uint_result << 3);
      }
    }
    if (0 < (int)uint_result) {
      do {
        int_result = (int)uint_result;
        uint_result = (uint_result - int_result) + int_result;
        uint_result = uint_result >> 0xb;
        uint_result = uint_result >> 0xb;
        uint_result = (ulonglong)(int_result + 1);
        *(uint64_t *)
         (*(longlong *)(resourceIdentifier + 8 + uint_result * 8) +
         (ulonglong)(uint)(int_result + (int)uint_result * -0x800) * 8) =
             *(uint64_t *)
              (*(longlong *)(long_result + 8 + (ulonglong)uint_result * 8) +
              (ulonglong)(uint_result + uint_result * -0x800) * 8);
        uint_result = uint_result - 1;
      } while (uint_result != 0);
    }
    *(int *)(*(longlong *)(system_RBX + 0x2d0) + 0x18) = int_result;
    *(uint32_t *)(*(longlong *)(system_RBX + 0x2d0) + 0xc) = system_EBP;
  }
  return;
}
// void SystemFunction_37_3(void)

void SystemFunction_37_3(void)

{
  return;
}
// void SystemFunction_38_3(void)

void SystemFunction_38_3(void)

{
  return;
}
// void SystemFunction_39_4(longlong handleIdentifier)

void SystemFunction_39_4(longlong handleIdentifier)

{
  *(uint32_t *)(handleIdentifier + 0x14) = 0;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule47(longlong handleIdentifier,longlong resourceIdentifier,int systemConfig)
void InitializeSystemModule47(longlong handleIdentifier,longlong resourceIdentifier,int systemConfig)

{
  int *ptr_int_var;
  uint64_t *node_root;
  uint64_t *ptr_uint_var;
  uint64_t *ptr_uint_var;
  uint uint_result;
  int *ptr_int_var;
  longlong long_result;
  ulonglong uint_result;
  longlong long_result;
  uint64_t *node_current;

  uint_result = (ulonglong)systemConfig;
  if (**(longlong **)(handleIdentifier + 0x2d0) != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  ptr_uint_var = (uint64_t *)0x0;
  **(longlong **)(handleIdentifier + 0x2d0) = 0;
  if (0 < systemConfig) {
    node_root = ptr_uint_var;
    if (systemConfig != 0) {
      node_root = (uint64_t *)AllocateSystemResource(systemMemoryPool,uint_result * 8,3);
      ptr_uint_var = node_root;
      node_current = ptr_uint_var;
      do {
        uint_result = (int)node_current + 1;
        node_current = (uint64_t *)(ulonglong)uint_result;
        *ptr_uint_var = 0;
        ptr_uint_var = ptr_uint_var + 1;
      } while ((ulonglong)(longlong)(int)uint_result < uint_result);
    }
    **(uint64_t **)(handleIdentifier + 0x2d0) = node_root;
    if (3 < (longlong)uint_result) {
      long_result = -8 - resourceIdentifier;
      long_result = (uint_result - 4 >> 2) + 1;
      ptr_uint_var = (uint64_t *)(long_result * 4);
      ptr_int_var = (int *)(resourceIdentifier + 8);
      do {
        ptr_int_var = ptr_int_var + 8;
        *(float *)((longlong)ptr_int_var + **(longlong **)(handleIdentifier + 0x2d0) + long_result) = (float)ptr_int_var[-2]
        ;
        *(int *)((longlong)ptr_int_var + **(longlong **)(handleIdentifier + 0x2d0) + 4 + long_result) = ptr_int_var[-1];
        *(float *)((longlong)ptr_int_var + **(longlong **)(handleIdentifier + 0x2d0) + 8 + long_result) =
             (float)*ptr_int_var;
        *(int *)((longlong)ptr_int_var + **(longlong **)(handleIdentifier + 0x2d0) + 0xc + long_result) = ptr_int_var[1];
        *(float *)((**(longlong **)(handleIdentifier + 0x2d0) - resourceIdentifier) + -0x18 + (longlong)ptr_int_var) =
             (float)ptr_int_var[2];
        *(int *)((longlong)ptr_int_var + **(longlong **)(handleIdentifier + 0x2d0) + 0x14 + long_result) = ptr_int_var[3];
        *(float *)((**(longlong **)(handleIdentifier + 0x2d0) - resourceIdentifier) + -SYSTEM_DATA_COMPARE_SIZE + (longlong)ptr_int_var) =
             (float)ptr_int_var[4];
        *(int *)((longlong)ptr_int_var + **(longlong **)(handleIdentifier + 0x2d0) + 0x1c + long_result) = ptr_int_var[5];
        long_result = long_result + -1;
        ptr_int_var = ptr_int_var;
      } while (long_result != 0);
    }
    for (; (longlong)ptr_uint_var < (longlong)uint_result; ptr_uint_var = (uint64_t *)((longlong)ptr_uint_var + 1)) {
      *(float *)(**(longlong **)(handleIdentifier + 0x2d0) + (longlong)ptr_uint_var * 8) =
           (float)*(int *)(resourceIdentifier + (longlong)ptr_uint_var * 8);
      *(uint32_t *)(**(longlong **)(handleIdentifier + 0x2d0) + 4 + (longlong)ptr_uint_var * 8) =
           *(uint32_t *)(resourceIdentifier + 4 + (longlong)ptr_uint_var * 8);
    }
    *(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 8) = systemConfig;
    return;
  }
  *(int *)(*(longlong *)(handleIdentifier + 0x2d0) + 8) = systemConfig;
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_47_9(void)
void SystemFunction_47_9(void)

{
  int *ptr_int_var;
  ulonglong *node_root;
  ulonglong *ptr_uint_var;
  ulonglong system_RBX;
  longlong system_RBP;
  longlong system_RDI;
  uint uint_result;
  ulonglong uint_result;
  int *ptr_int_var;
  longlong long_result;
  ulonglong system_R14;
  longlong long_result;
  bool in_ZF;

  if (in_ZF) {
    node_root = (ulonglong *)(system_RBX & 0xffffffff);
  }
  else {
    node_root = (ulonglong *)AllocateSystemResource(systemMemoryPool,system_R14 * 8,3);
    uint_result = system_RBX & 0xffffffff;
    ptr_uint_var = node_root;
    do {
      uint_result = (int)uint_result + 1;
      uint_result = (ulonglong)uint_result;
      *ptr_uint_var = system_RBX;
      ptr_uint_var = ptr_uint_var + 1;
    } while ((ulonglong)(longlong)(int)uint_result < system_R14);
  }
  **(longlong **)(system_RDI + 0x2d0) = (longlong)node_root;
  if (3 < (longlong)system_R14) {
    long_result = -8 - system_RBP;
    long_result = (system_R14 - 4 >> 2) + 1;
    system_RBX = long_result * 4;
    ptr_int_var = (int *)(system_RBP + 8);
    do {
      ptr_int_var = ptr_int_var + 8;
      *(float *)((longlong)ptr_int_var + **(longlong **)(system_RDI + 0x2d0) + long_result) = (float)ptr_int_var[-2];
      *(int *)((longlong)ptr_int_var + **(longlong **)(system_RDI + 0x2d0) + 4 + long_result) = ptr_int_var[-1];
      *(float *)((longlong)ptr_int_var + **(longlong **)(system_RDI + 0x2d0) + 8 + long_result) = (float)*ptr_int_var
      ;
      *(int *)((longlong)ptr_int_var + **(longlong **)(system_RDI + 0x2d0) + 0xc + long_result) = ptr_int_var[1];
      *(float *)((**(longlong **)(system_RDI + 0x2d0) - system_RBP) + -0x18 + (longlong)ptr_int_var) =
           (float)ptr_int_var[2];
      *(int *)((longlong)ptr_int_var + **(longlong **)(system_RDI + 0x2d0) + 0x14 + long_result) = ptr_int_var[3];
      *(float *)((**(longlong **)(system_RDI + 0x2d0) - system_RBP) + -SYSTEM_DATA_COMPARE_SIZE + (longlong)ptr_int_var) =
           (float)ptr_int_var[4];
      *(int *)((longlong)ptr_int_var + **(longlong **)(system_RDI + 0x2d0) + 0x1c + long_result) = ptr_int_var[5];
      long_result = long_result + -1;
      ptr_int_var = ptr_int_var;
    } while (long_result != 0);
  }
  for (; (longlong)system_RBX < (longlong)system_R14; system_RBX = system_RBX + 1) {
    *(float *)(**(longlong **)(system_RDI + 0x2d0) + system_RBX * 8) =
         (float)*(int *)(system_RBP + system_RBX * 8);
    *(uint32_t *)(**(longlong **)(system_RDI + 0x2d0) + 4 + system_RBX * 8) =
         *(uint32_t *)(system_RBP + 4 + system_RBX * 8);
  }
  *(int *)(*(longlong *)(system_RDI + 0x2d0) + 8) = (int)system_R14;
  return;
}
// void SystemFunction_56_6(void)

void SystemFunction_56_6(void)

{
  int *ptr_int_var;
  longlong long_result;
  longlong system_RBP;
  longlong system_RDI;
  int *pcompare_result;
  longlong long_result;
  longlong system_R14;
  longlong allocation_size;

  allocation_size = -8 - system_RBP;
  long_result = (system_R14 - 4U >> 2) + 1;
  long_result = long_result * 4;
  pcompare_result = (int *)(system_RBP + 8);
  do {
    ptr_int_var = pcompare_result + 8;
    *(float *)((longlong)pcompare_result + **(longlong **)(system_RDI + 0x2d0) + allocation_size) = (float)pcompare_result[-2];
    *(int *)((longlong)pcompare_result + **(longlong **)(system_RDI + 0x2d0) + 4 + allocation_size) = pcompare_result[-1];
    *(float *)((longlong)pcompare_result + **(longlong **)(system_RDI + 0x2d0) + 8 + allocation_size) = (float)*pcompare_result;
    *(int *)((longlong)pcompare_result + **(longlong **)(system_RDI + 0x2d0) + 0xc + allocation_size) = pcompare_result[1];
    *(float *)((**(longlong **)(system_RDI + 0x2d0) - system_RBP) + -0x18 + (longlong)ptr_int_var) =
         (float)pcompare_result[2];
    *(int *)((longlong)pcompare_result + **(longlong **)(system_RDI + 0x2d0) + 0x14 + allocation_size) = pcompare_result[3];
    *(float *)((**(longlong **)(system_RDI + 0x2d0) - system_RBP) + -SYSTEM_DATA_COMPARE_SIZE + (longlong)ptr_int_var) =
         (float)pcompare_result[4];
    *(int *)((longlong)pcompare_result + **(longlong **)(system_RDI + 0x2d0) + 0x1c + allocation_size) = pcompare_result[5];
    long_result = long_result + -1;
    pcompare_result = ptr_int_var;
  } while (long_result != 0);
  for (; long_result < system_R14; long_result = long_result + 1) {
    *(float *)(**(longlong **)(system_RDI + 0x2d0) + long_result * 8) =
         (float)*(int *)(system_RBP + long_result * 8);
    *(uint32_t *)(**(longlong **)(system_RDI + 0x2d0) + 4 + long_result * 8) =
         *(uint32_t *)(system_RBP + 4 + long_result * 8);
  }
  *(int *)(*(longlong *)(system_RDI + 0x2d0) + 8) = (int)system_R14;
  return;
}
// void SystemFunction_82_6(void)

void SystemFunction_82_6(void)

{
  longlong system_RBX;
  longlong system_RBP;
  longlong system_RDI;
  longlong system_R14;

  if (system_RBX < system_R14) {
    do {
      *(float *)(**(longlong **)(system_RDI + 0x2d0) + system_RBX * 8) =
           (float)*(int *)(system_RBP + system_RBX * 8);
      *(uint32_t *)(**(longlong **)(system_RDI + 0x2d0) + 4 + system_RBX * 8) =
           *(uint32_t *)(system_RBP + 4 + system_RBX * 8);
      system_RBX = system_RBX + 1;
    } while (system_RBX < system_R14);
  }
  *(int *)(*(longlong *)(system_RDI + 0x2d0) + 8) = (int)system_R14;
  return;
}
// void SystemFunction_91_1(void)

void SystemFunction_91_1(void)

{
  longlong system_RDI;
  uint32_t system_R14D;

  *(uint32_t *)(*(longlong *)(system_RDI + 0x2d0) + 8) = system_R14D;
  return;
}

uint64_t * InitializeSystemTimer(uint64_t *handleIdentifier)

{
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  *(uint32_t *)(handleIdentifier + 1) = 0;
  *handleIdentifier = &g_system_global_variable8;
  handleIdentifier[2] = 0;
  handleIdentifier[3] = 0;
  *(uint8_t *)(handleIdentifier + 6) = 3;
  handleIdentifier[7] = 0;
  handleIdentifier[8] = 0;
  *(uint8_t *)(handleIdentifier + 0xb) = 3;
  handleIdentifier[0xc] = 0;
  handleIdentifier[0xd] = 0;
  *(uint8_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 3;
  handleIdentifier[0x11] = 0;
  handleIdentifier[0x12] = 0;
  *(uint8_t *)(handleIdentifier + 0x15) = 3;
  *(uint16_t *)(handleIdentifier + 0x18) = 0;
  handleIdentifier[0x16] = 0;
  handleIdentifier[0x17] = 0;
  handleIdentifier[NODE_INITIALIZED_OFFSET] = 0;
  handleIdentifier[0x1a] = 0;
  *(uint8_t *)(handleIdentifier + 0x1d) = 3;
  *(uint8_t *)(handleIdentifier + 6) = 0xf;
  *(uint8_t *)(handleIdentifier + 0xb) = 0xf;
  *(uint8_t *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) = 0xf;
  *(uint8_t *)(handleIdentifier + 0x15) = 0xf;
  *(uint8_t *)(handleIdentifier + 0x1d) = 0xf;
  return handleIdentifier;
}

uint64_t * ValidateSystemConfiguration(uint64_t *handleIdentifier,ulonglong resourceIdentifier)

{
  *handleIdentifier = &g_system_global_variable8;
  if (handleIdentifier[0x1a] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  InitializeThreadManagerSystem(handleIdentifier[0x16]);
  handleIdentifier[0x16] = 0;
  if (handleIdentifier[0x17] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  handleIdentifier[0x17] = 0;
  if (handleIdentifier[0x12] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[0xd] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[8] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  if (handleIdentifier[3] != 0) {
                    // WARNING: Subroutine does not return
    ProcessSystemOperation();
  }
  *handleIdentifier = &globalSystemVariable;
  *handleIdentifier = &globalSystemVariable;
  if ((resourceIdentifier & 1) != 0) {
    free(handleIdentifier,0xf0);
  }
  return handleIdentifier;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemModule33(uint8_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)
void InitializeSystemModule33(uint8_t *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  longlong *long_ptr;
  longlong *long_ptr;
  char char_var;
  int int_result;
  uint32_t uint_result;
  longlong long_result;
  void *node_next;
  bool bool_var;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  bool_var = false;
  if ((*(byte *)(*(longlong *)(handleIdentifier + 8) + 0xfd) & SYSTEM_NODE_HEADER_SIZE) != 0) {
    InitializeSystemModule3();
    long_result = 0;
    do {
      char_var = *(char *)(*(longlong *)(*(longlong *)(handleIdentifier + 8) + 0x1e0) + 0x15 + long_result * 0x18);
      if (char_var == '\x01') {
        Sleep(0);
        bool_var = true;
      }
      long_result = long_result + 1;
      long_result = 0;
      if (char_var != '\x01') {
        long_result = long_result;
      }
    } while (long_result < SYSTEM_DATA_COMPARE_SIZE);
    if ((bool_var) &&
       ((long_result = *(longlong *)(handleIdentifier + 8), *(char *)(long_result + 0xfa) == '\0' ||
        (*(char *)(long_result + 0xfb) == '\0')))) {
      node_next = &g_system_data_variable3;
      if (*(void **)(long_result + 0x18) != (void *)0x0) {
        node_next = *(void **)(long_result + 0x18);
      }
                    // WARNING: Subroutine does not return
      SystemFunction_17_6(g_system_context_1,&g_system_global_variable8,node_next,systemFlags,uint_result);
    }
  }
  long_result = *(longlong *)(handleIdentifier + 8);
  while( true ) {
    LOCK();
    char_var = *(char *)(long_result + 0xec);
    bool_var = char_var == '\0';
    if (bool_var) {
      *(char *)(long_result + 0xec) = '\x01';
      char_var = '\0';
    }
    UNLOCK();
    if (bool_var) break;
    int_result = _Thrd_id();
    if (*(int *)(long_result + 0xf0) == int_result) goto LAB_18007f5cb;
    Sleep();
  }
  char_var = '\0';
LAB_18007f5cb:
  uint_result = _Thrd_id();
  *(uint32_t *)(long_result + 0xf0) = uint_result;
  if (char_var == '\0') {
    *handleIdentifier = 1;
  }
  while (*(int *)(long_result + 0xe8) != 0) {
    Sleep(0);
  }
  if ((*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) & 1) == 0) {
    InitializeSystemModule59(*(uint64_t *)(handleIdentifier + 8),(byte)(*(uint *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) >> 2) & 1);
  }
  long_ptr = *(longlong **)(*(longlong *)(handleIdentifier + 8) + 0x210);
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  long_ptr = *(longlong **)(handleIdentifier + 0x18);
  *(longlong **)(handleIdentifier + 0x18) = long_ptr;
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  return;
}
// void InitializeSystemModule45(longlong handleIdentifier)

void InitializeSystemModule45(longlong handleIdentifier)

{
  InitializeNetworkManagerSystem();
  if (*(longlong **)(handleIdentifier + 0x18) != (longlong *)0x0) {
    (**(code **)(**(longlong **)(handleIdentifier + 0x18) + 0x38))();
  }
  return;
}
// void InitializeNetworkManagerSystem(char *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void InitializeNetworkManagerSystem(char *handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong long_result;
  longlong *long_ptr;
  longlong *long_ptr;
  longlong long_result;
  uint64_t uint_result;

  uint_result = INVALID_HANDLE_VALUE;
  long_result = *(longlong *)(handleIdentifier + 8);
  if (long_result != 0) {
    long_ptr = *(longlong **)(handleIdentifier + 0x18);
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x28))(long_ptr);
    }
    long_ptr = *(longlong **)(long_result + 0x210);
    *(longlong **)(long_result + 0x210) = long_ptr;
    if (long_ptr != (longlong *)0x0) {
      (**(code **)(*long_ptr + 0x38))();
    }
    long_result = *(longlong *)(handleIdentifier + 8);
    if (*handleIdentifier != '\0') {
      long_result = long_result;
      if ((handleIdentifier[SYSTEM_DATA_COMPARE_SIZE] & 2U) == 0) {
        InitializeAuthenticationSystem(long_result);
        InitializeAuthenticationSystem(*(uint64_t *)(handleIdentifier + 8));
        long_result = *(longlong *)(handleIdentifier + 8);
      }
      InitializeAudioManagerSystem(long_result,1,systemConfig,systemFlags,uint_result);
      *(uint32_t *)(long_result + 0xf0) = 0;
      LOCK();
      *(uint8_t *)(long_result + 0xec) = 0;
      UNLOCK();
    }
  }
  handleIdentifier[8] = '\0';
  handleIdentifier[9] = '\0';
  handleIdentifier[10] = '\0';
  handleIdentifier[0xb] = '\0';
  handleIdentifier[0xc] = '\0';
  handleIdentifier[0xd] = '\0';
  handleIdentifier[0xe] = '\0';
  handleIdentifier[0xf] = '\0';
  long_ptr = *(longlong **)(handleIdentifier + 0x18);
  handleIdentifier[0x18] = '\0';
  handleIdentifier[NODE_INITIALIZED_OFFSET] = '\0';
  handleIdentifier[0x1a] = '\0';
  handleIdentifier[0x1b] = '\0';
  handleIdentifier[0x1c] = '\0';
  handleIdentifier[0x1d] = '\0';
  handleIdentifier[0x1e] = '\0';
  handleIdentifier[0x1f] = '\0';
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))();
  }
  return;
}
// void InitializeThreadManagerSystem(longlong *handleIdentifier)

void InitializeThreadManagerSystem(longlong *handleIdentifier)

{
  longlong long_result;
  char char_var;
  int compare_result;
  bool bool_var;

  long_result = *handleIdentifier;
  compare_result = _Thrd_id();
  while( true ) {
    LOCK();
    char_var = *(char *)(long_result + 0xec);
    bool_var = char_var == '\0';
    if (bool_var) {
      *(char *)(long_result + 0xec) = '\x01';
      char_var = '\0';
    }
    UNLOCK();
    if (bool_var) break;
    if (*(int *)(long_result + 0xf0) == compare_result) goto LAB_18007f7cf;
    Sleep(0);
  }
  char_var = '\0';
LAB_18007f7cf:
  LOCK();
  *(int *)(long_result + 0xe8) = *(int *)(long_result + 0xe8) + 1;
  UNLOCK();
  if ((*(uint *)(handleIdentifier + 1) & 1) == 0) {
    InitializeSystemModule59(*handleIdentifier,(byte)(*(uint *)(handleIdentifier + 1) >> 2) & 1);
  }
  if (char_var == '\0') {
    LOCK();
    *(uint8_t *)(long_result + 0xec) = 0;
    UNLOCK();
  }
  handleIdentifier[2] = *(longlong *)(*handleIdentifier + 0x210);
  return;
}
// void InitializeSystemModule2(void)

void InitializeSystemModule2(void)

{
  InitializeSystemDataNode30();
  return;
}
// void InitializeSystemDataNode30(longlong *handleIdentifier)

void InitializeSystemDataNode30(longlong *handleIdentifier)

{
  int *ptr_int_var;
  longlong long_result;
  char char_var;
  int int_result;
  bool bool_var;

  long_result = *handleIdentifier;
  if (long_result != 0) {
    while( true ) {
      LOCK();
      char_var = *(char *)(long_result + 0xec);
      bool_var = char_var == '\0';
      if (bool_var) {
        *(char *)(long_result + 0xec) = '\x01';
        char_var = '\0';
      }
      UNLOCK();
      if (bool_var) break;
      int_result = _Thrd_id();
      if ((*(int *)(long_result + 0xf0) == int_result) || (*(int *)(long_result + 0xf0) != 0)) goto LAB_18007f89f;
      Sleep();
    }
    char_var = '\0';
LAB_18007f89f:
    LOCK();
    ptr_int_var = (int *)(long_result + 0xe8);
    int_result = *ptr_int_var;
    *ptr_int_var = *ptr_int_var + -1;
    UNLOCK();
    if (char_var == '\0') {
      if (int_result == 1) {
        InitializeAudioManagerSystem(*handleIdentifier,0);
      }
      LOCK();
      *(uint8_t *)(long_result + 0xec) = 0;
      UNLOCK();
    }
    *handleIdentifier = 0;
  }
  return;
}

uint SystemFunction_32_9(void)

{
  uint *ptr_uint_var;
  byte bool_var;
  char char_var;
  int int_result;
  uint uint_result;
  longlong system_RBX;
  uint64_t *system_RSI;
  bool bool_var;

  while( true ) {
    LOCK();
    char_var = *(char *)(system_RBX + 0xec);
    bool_var = char_var == '\0';
    if (bool_var) {
      *(char *)(system_RBX + 0xec) = '\x01';
      char_var = '\0';
    }
    UNLOCK();
    if (bool_var) break;
    int_result = _Thrd_id();
    if ((*(int *)(system_RBX + 0xf0) == int_result) || (*(int *)(system_RBX + 0xf0) != 0))
    goto LAB_18007f89f;
    Sleep();
  }
  char_var = '\0';
LAB_18007f89f:
  LOCK();
  ptr_uint_var = (uint *)(system_RBX + 0xe8);
  uint_result = *ptr_uint_var;
  *ptr_uint_var = *ptr_uint_var - 1;
  UNLOCK();
  if (char_var == '\0') {
    if (uint_result == 1) {
      InitializeAudioManagerSystem(*system_RSI,0);
    }
    LOCK();
    bool_var = *(byte *)(system_RBX + 0xec);
    *(byte *)(system_RBX + 0xec) = 0;
    uint_result = (uint)bool_var;
    UNLOCK();
  }
  *system_RSI = 0;
  return uint_result;
}

uint8_t SystemFunction_42_7(void)

{
  uint8_t uint_result;
  int in_EAX;
  longlong system_RBX;
  uint64_t *system_RSI;

  if (in_EAX == 1) {
    InitializeAudioManagerSystem(*system_RSI,0);
  }
  LOCK();
  uint_result = *(uint8_t *)(system_RBX + 0xec);
  *(uint8_t *)(system_RBX + 0xec) = 0;
  UNLOCK();
  *system_RSI = 0;
  return uint_result;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeNetworkSystem(longlong handleIdentifier)
void InitializeNetworkSystem(longlong handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  char char_var;
  uint32_t uint_result;
  uint uint_result;
  longlong *long_ptr;
  longlong long_result;
  int int_result;
  int int_result;
  longlong long_result;
  ulonglong uint_result;
  char *pis_initialized3;
  uint *ptr_uint_var;
  int int_result;
  uint uint_result;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  uint *node_root0;
  ulonglong uint_result;
  ulonglong uint_result;
  bool long_comparison_flag;

  if (*(int *)(handleIdentifier + 0x28) != *(int *)(g_system_base_1 + 0x224)) {
    int_result = *(int *)(handleIdentifier + 0x1c) + *(int *)(handleIdentifier + 0x18);
    *(int *)(handleIdentifier + 0x28) = *(int *)(g_system_base_1 + 0x224);
    if (0 < int_result) {
      long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
      uint_result = InitializeSystemModule39(long_result,int_result);
      *(uint32_t *)(handleIdentifier + 0x30) = uint_result;
      InitializeSystemDataNode26(long_result,uint_result);
      if (*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) == 0) {
        if (*(int *)(handleIdentifier + 0x18) != 0) {
          *(uint32_t *)(handleIdentifier + 0x2c) = *(uint32_t *)(handleIdentifier + 0x30);
          return;
        }
      }
      else {
        char_var = *(char *)(handleIdentifier + 0x44);
        uint_result = (ulonglong)char_var;
        long_ptr = (longlong *)(handleIdentifier + 0x38);
        int_result = (int)char_var;
        if (*(int *)(handleIdentifier + 0x40) == (int)char_var) {
          long_ptr = (longlong *)*long_ptr;
        }
        else {
          *(int *)(handleIdentifier + 0x40) = int_result;
          if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          *long_ptr = 0;
          if (char_var == '\0') {
            long_ptr = (longlong *)0x0;
            *long_ptr = 0;
          }
          else {
            long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)char_var * 4);
            *long_ptr = (longlong)long_ptr;
          }
        }
        if (long_ptr != (longlong *)0x0) {
          int_result = 0;
          uint_result = (uint)char_var;
          int_result = int_result;
          if ((0 < int_result) && (0xf < uint_result)) {
            int_result = *(int *)(handleIdentifier + 0x2c);
            long_ptr = (longlong *)((longlong)long_ptr + (longlong)(char_var + -1) * 4);
            if ((((longlong *)(handleIdentifier + 0x2c) < long_ptr) || (long_ptr < (longlong *)(handleIdentifier + 0x2c)))
               && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
              uint_result = uint_result & 0x8000000f;
              if ((int)uint_result < 0) {
                uint_result = (uint_result - 1 | 0xfffffff0) + 1;
              }
              long_ptr = long_ptr + 4;
              int_result = 8;
              do {
                *(int *)(long_ptr + -4) = int_result + int_result;
                *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + int_result;
                *(int *)(long_ptr + -3) = int_result + 2 + int_result;
                *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + int_result;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                *(int *)(long_ptr + -2) = int_result + -4 + int_result;
                *(int *)((longlong)long_ptr + -0xc) = int_result + -3 + int_result;
                *(int *)(long_ptr + -1) = int_result + -2 + int_result;
                *(int *)((longlong)long_ptr + -4) = int_result + -1 + int_result;
                *(int *)long_ptr = int_result + int_result;
                *(int *)((longlong)long_ptr + 4) = int_result + 1 + int_result;
                *(int *)(long_ptr + 1) = int_result + 2 + int_result;
                *(int *)((longlong)long_ptr + 0xc) = int_result + 3 + int_result;
                *(int *)(long_ptr + 2) = int_result + 4 + int_result;
                *(int *)((longlong)long_ptr + 0x14) = int_result + 5 + int_result;
                *(int *)(long_ptr + 3) = int_result + 6 + int_result;
                *(int *)((longlong)long_ptr + 0x1c) = int_result + 7 + int_result;
                long_ptr = long_ptr + 8;
                int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
                int_result = int_result;
              } while (int_result < (int)(uint_result - uint_result));
            }
          }
          for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
            int_result = *(int *)(handleIdentifier + 0x2c) + int_result;
            int_result = int_result + 1;
            *(int *)(*long_ptr + long_result * 4) = int_result;
          }
          int_result = *(int *)(handleIdentifier + 0x18);
          int_result = 0;
          if (0 < (longlong)int_result) {
            long_result = 0;
            do {
              int_result = *(int *)(handleIdentifier + 0x30) + int_result;
              int_result = int_result + 1;
              ptr_byte_var = (byte *)(*(longlong *)(handleIdentifier + SYSTEM_DATA_COMPARE_SIZE) + long_result);
              long_result = long_result + 1;
              *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = int_result;
            } while (long_result < int_result);
          }
        }
        ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 +
                          systemCoreData + 0x9d0);
        if (int_result == 0) {
          uint_result = (int)char_var - 1;
        }
        else {
          LOCK();
          uint_result = *ptr_uint_var;
          *ptr_uint_var = *ptr_uint_var + (int)char_var;
          UNLOCK();
          uint_result = (ulonglong)(uint_result >> 0xb);
          uint_result = (ulonglong)(char_var + -1 + uint_result >> 0xb);
          if (uint_result <= uint_result) {
            pis_initialized3 = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
            long_result = (uint_result - uint_result) + 1;
            node_root0 = ptr_uint_var + uint_result * 2 + 2;
            do {
              int_result = (int)uint_result;
              if (*(longlong *)node_root0 == 0) {
                long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
                LOCK();
                long_comparison_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
                if (long_comparison_flag) {
                  *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
                }
                UNLOCK();
                if (long_comparison_flag) {
                  LOCK();
                  *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
                  UNLOCK();
                }
                else {
                  if (long_result != 0) {
                    // WARNING: Subroutine does not return
                    ProcessSystemOperation();
                  }
                  do {
                  } while (*pis_initialized3 != '\0');
                }
              }
              else {
                do {
                } while (*pis_initialized3 != '\0');
              }
              uint_result = (ulonglong)(int_result + 1);
              node_root0 = node_root0 + 2;
              pis_initialized3 = pis_initialized3 + 1;
              long_result = long_result + -1;
            } while (long_result != 0);
          }
        }
        ptr_uint_var = *(uint32_t **)(handleIdentifier + 0x38);
        uint_result = uint_result >> 0xb;
        *(uint *)(handleIdentifier + 0x2c) = uint_result;
        if (uint_result == (int)char_var + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
          memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
                 (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(uint_result & 0xffffffff) << 2);
        }
        if (int_result != 0) {
          uint_result = uint_result & 0xffffffff;
          do {
            uint_result = *ptr_uint_var;
            ptr_uint_var = ptr_uint_var + 1;
            *(uint32_t *)
             (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
             (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
            uint_result = uint_result - 1;
            uint_result = uint_result + 1;
          } while (uint_result != 0);
        }
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_51_1(uint32_t handleIdentifier)
void SystemFunction_51_1(uint32_t handleIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  char char_var;
  uint32_t uint_result;
  uint uint_result;
  longlong *long_ptr;
  longlong long_result;
  int int_result;
  int int_result;
  longlong long_result;
  ulonglong uint_result;
  char *pis_initialized3;
  uint *ptr_uint_var;
  int int_result;
  uint uint_result;
  longlong system_RDI;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  uint *node_root0;
  ulonglong uint_result;
  ulonglong uint_result;
  bool long_comparison_flag;

  int_result = *(int *)(system_RDI + 0x1c) + *(int *)(system_RDI + 0x18);
  *(uint32_t *)(system_RDI + 0x28) = handleIdentifier;
  if (0 < int_result) {
    long_result = (longlong)*(int *)(systemCoreData + 0xe78) * 0x128 + systemCoreData + 0xc28;
    uint_result = InitializeSystemModule39(long_result,int_result);
    *(uint32_t *)(system_RDI + 0x30) = uint_result;
    InitializeSystemDataNode26(long_result,uint_result);
    if (*(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) == 0) {
      if (*(int *)(system_RDI + 0x18) != 0) {
        *(uint32_t *)(system_RDI + 0x2c) = *(uint32_t *)(system_RDI + 0x30);
        return;
      }
    }
    else {
      char_var = *(char *)(system_RDI + 0x44);
      uint_result = (ulonglong)char_var;
      long_ptr = (longlong *)(system_RDI + 0x38);
      int_result = (int)char_var;
      if (*(int *)(system_RDI + 0x40) == (int)char_var) {
        long_ptr = (longlong *)*long_ptr;
      }
      else {
        *(int *)(system_RDI + 0x40) = int_result;
        if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
          ProcessSystemOperation();
        }
        *long_ptr = 0;
        if (char_var == '\0') {
          long_ptr = (longlong *)0x0;
          *long_ptr = 0;
        }
        else {
          long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)char_var * 4);
          *long_ptr = (longlong)long_ptr;
        }
      }
      if (long_ptr != (longlong *)0x0) {
        int_result = 0;
        uint_result = (uint)char_var;
        int_result = int_result;
        if ((0 < int_result) && (0xf < uint_result)) {
          int_result = *(int *)(system_RDI + 0x2c);
          long_ptr = (longlong *)((longlong)long_ptr + (longlong)(char_var + -1) * 4);
          if ((((longlong *)(system_RDI + 0x2c) < long_ptr) ||
              (long_ptr < (longlong *)(system_RDI + 0x2c))) &&
             ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
            uint_result = uint_result & 0x8000000f;
            if ((int)uint_result < 0) {
              uint_result = (uint_result - 1 | 0xfffffff0) + 1;
            }
            long_ptr = long_ptr + 4;
            int_result = 8;
            do {
              *(int *)(long_ptr + -4) = int_result + int_result;
              *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + int_result;
              *(int *)(long_ptr + -3) = int_result + 2 + int_result;
              *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + int_result;
              int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
              *(int *)(long_ptr + -2) = int_result + -4 + int_result;
              *(int *)((longlong)long_ptr + -0xc) = int_result + -3 + int_result;
              *(int *)(long_ptr + -1) = int_result + -2 + int_result;
              *(int *)((longlong)long_ptr + -4) = int_result + -1 + int_result;
              *(int *)long_ptr = int_result + int_result;
              *(int *)((longlong)long_ptr + 4) = int_result + 1 + int_result;
              *(int *)(long_ptr + 1) = int_result + 2 + int_result;
              *(int *)((longlong)long_ptr + 0xc) = int_result + 3 + int_result;
              *(int *)(long_ptr + 2) = int_result + 4 + int_result;
              *(int *)((longlong)long_ptr + 0x14) = int_result + 5 + int_result;
              *(int *)(long_ptr + 3) = int_result + 6 + int_result;
              *(int *)((longlong)long_ptr + 0x1c) = int_result + 7 + int_result;
              long_ptr = long_ptr + 8;
              int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
              int_result = int_result;
            } while (int_result < (int)(uint_result - uint_result));
          }
        }
        for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
          int_result = *(int *)(system_RDI + 0x2c) + int_result;
          int_result = int_result + 1;
          *(int *)(*long_ptr + long_result * 4) = int_result;
        }
        int_result = *(int *)(system_RDI + 0x18);
        int_result = 0;
        if (0 < (longlong)int_result) {
          long_result = 0;
          do {
            int_result = *(int *)(system_RDI + 0x30) + int_result;
            int_result = int_result + 1;
            ptr_byte_var = (byte *)(*(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) + long_result);
            long_result = long_result + 1;
            *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = int_result;
          } while (long_result < int_result);
        }
      }
      ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 + systemCoreData + 0x9d0
                        );
      if (int_result == 0) {
        uint_result = (int)char_var - 1;
      }
      else {
        LOCK();
        uint_result = *ptr_uint_var;
        *ptr_uint_var = *ptr_uint_var + (int)char_var;
        UNLOCK();
        uint_result = (ulonglong)(uint_result >> 0xb);
        uint_result = (ulonglong)(char_var + -1 + uint_result >> 0xb);
        if (uint_result <= uint_result) {
          pis_initialized3 = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
          long_result = (uint_result - uint_result) + 1;
          node_root0 = ptr_uint_var + uint_result * 2 + 2;
          do {
            int_result = (int)uint_result;
            if (*(longlong *)node_root0 == 0) {
              long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
              LOCK();
              long_comparison_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
              if (long_comparison_flag) {
                *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
              }
              UNLOCK();
              if (long_comparison_flag) {
                LOCK();
                *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
                UNLOCK();
              }
              else {
                if (long_result != 0) {
                    // WARNING: Subroutine does not return
                  ProcessSystemOperation();
                }
                do {
                } while (*pis_initialized3 != '\0');
              }
            }
            else {
              do {
              } while (*pis_initialized3 != '\0');
            }
            uint_result = (ulonglong)(int_result + 1);
            node_root0 = node_root0 + 2;
            pis_initialized3 = pis_initialized3 + 1;
            long_result = long_result + -1;
          } while (long_result != 0);
        }
      }
      ptr_uint_var = *(uint32_t **)(system_RDI + 0x38);
      uint_result = uint_result >> 0xb;
      *(uint *)(system_RDI + 0x2c) = uint_result;
      if (uint_result == (int)char_var + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
        memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
               (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(uint_result & 0xffffffff) << 2);
      }
      if (int_result != 0) {
        uint_result = uint_result & 0xffffffff;
        do {
          uint_result = *ptr_uint_var;
          ptr_uint_var = ptr_uint_var + 1;
          *(uint32_t *)
           (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
           (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
          uint_result = uint_result - 1;
          uint_result = uint_result + 1;
        } while (uint_result != 0);
      }
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_54_7(uint64_t handleIdentifier,longlong resourceIdentifier)
void SystemFunction_54_7(uint64_t handleIdentifier,longlong resourceIdentifier)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  char char_var;
  uint32_t uint_result;
  uint uint_result;
  longlong *long_ptr;
  longlong long_result;
  int int_result;
  int int_result;
  longlong long_result;
  ulonglong uint_result;
  char *pis_initialized3;
  uint *ptr_uint_var;
  uint32_t system_ESI;
  uint uint_result;
  longlong system_RDI;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  int int_result;
  uint *node_root0;
  ulonglong uint_result;
  ulonglong uint_result;
  bool long_comparison_flag;

  resourceIdentifier = (longlong)*(int *)(resourceIdentifier + 0x250) * 0x128 + resourceIdentifier;
  uint_result = InitializeSystemModule39(resourceIdentifier,system_ESI);
  *(uint32_t *)(system_RDI + 0x30) = uint_result;
  InitializeSystemDataNode26(resourceIdentifier,uint_result);
  if (*(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) == 0) {
    if (*(int *)(system_RDI + 0x18) != 0) {
      *(uint32_t *)(system_RDI + 0x2c) = *(uint32_t *)(system_RDI + 0x30);
      return;
    }
  }
  else {
    char_var = *(char *)(system_RDI + 0x44);
    uint_result = (ulonglong)char_var;
    long_ptr = (longlong *)(system_RDI + 0x38);
    int_result = (int)char_var;
    if (*(int *)(system_RDI + 0x40) == (int)char_var) {
      long_ptr = (longlong *)*long_ptr;
    }
    else {
      *(int *)(system_RDI + 0x40) = int_result;
      if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
        ProcessSystemOperation();
      }
      *long_ptr = 0;
      if (char_var == '\0') {
        long_ptr = (longlong *)0x0;
        *long_ptr = 0;
      }
      else {
        long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)char_var * 4);
        *long_ptr = (longlong)long_ptr;
      }
    }
    if (long_ptr != (longlong *)0x0) {
      int_result = 0;
      uint_result = (uint)char_var;
      int_result = int_result;
      if ((0 < int_result) && (0xf < uint_result)) {
        int_result = *(int *)(system_RDI + 0x2c);
        long_ptr = (longlong *)((longlong)long_ptr + (longlong)(char_var + -1) * 4);
        if ((((longlong *)(system_RDI + 0x2c) < long_ptr) || (long_ptr < (longlong *)(system_RDI + 0x2c)))
           && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
          uint_result = uint_result & 0x8000000f;
          if ((int)uint_result < 0) {
            uint_result = (uint_result - 1 | 0xfffffff0) + 1;
          }
          long_ptr = long_ptr + 4;
          int_result = 8;
          do {
            *(int *)(long_ptr + -4) = int_result + int_result;
            *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + int_result;
            *(int *)(long_ptr + -3) = int_result + 2 + int_result;
            *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + int_result;
            int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
            *(int *)(long_ptr + -2) = int_result + -4 + int_result;
            *(int *)((longlong)long_ptr + -0xc) = int_result + -3 + int_result;
            *(int *)(long_ptr + -1) = int_result + -2 + int_result;
            *(int *)((longlong)long_ptr + -4) = int_result + -1 + int_result;
            *(int *)long_ptr = int_result + int_result;
            *(int *)((longlong)long_ptr + 4) = int_result + 1 + int_result;
            *(int *)(long_ptr + 1) = int_result + 2 + int_result;
            *(int *)((longlong)long_ptr + 0xc) = int_result + 3 + int_result;
            *(int *)(long_ptr + 2) = int_result + 4 + int_result;
            *(int *)((longlong)long_ptr + 0x14) = int_result + 5 + int_result;
            *(int *)(long_ptr + 3) = int_result + 6 + int_result;
            *(int *)((longlong)long_ptr + 0x1c) = int_result + 7 + int_result;
            long_ptr = long_ptr + 8;
            int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
            int_result = int_result;
          } while (int_result < (int)(uint_result - uint_result));
        }
      }
      for (long_result = (longlong)int_result; long_result < (longlong)uint_result; long_result = long_result + 1) {
        int_result = *(int *)(system_RDI + 0x2c) + int_result;
        int_result = int_result + 1;
        *(int *)(*long_ptr + long_result * 4) = int_result;
      }
      int_result = *(int *)(system_RDI + 0x18);
      int_result = 0;
      if (0 < (longlong)int_result) {
        long_result = 0;
        do {
          int_result = *(int *)(system_RDI + 0x30) + int_result;
          int_result = int_result + 1;
          ptr_byte_var = (byte *)(*(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) + long_result);
          long_result = long_result + 1;
          *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = int_result;
        } while (long_result < int_result);
      }
    }
    ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 + systemCoreData + 0x9d0);
    if (int_result == 0) {
      uint_result = (int)char_var - 1;
    }
    else {
      LOCK();
      uint_result = *ptr_uint_var;
      *ptr_uint_var = *ptr_uint_var + (int)char_var;
      UNLOCK();
      uint_result = (ulonglong)(uint_result >> 0xb);
      uint_result = (ulonglong)(char_var + -1 + uint_result >> 0xb);
      if (uint_result <= uint_result) {
        pis_initialized3 = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
        long_result = (uint_result - uint_result) + 1;
        node_root0 = ptr_uint_var + uint_result * 2 + 2;
        do {
          int_result = (int)uint_result;
          if (*(longlong *)node_root0 == 0) {
            long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
            LOCK();
            long_comparison_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
            if (long_comparison_flag) {
              *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
            }
            UNLOCK();
            if (long_comparison_flag) {
              LOCK();
              *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
              UNLOCK();
            }
            else {
              if (long_result != 0) {
                    // WARNING: Subroutine does not return
                ProcessSystemOperation();
              }
              do {
              } while (*pis_initialized3 != '\0');
            }
          }
          else {
            do {
            } while (*pis_initialized3 != '\0');
          }
          uint_result = (ulonglong)(int_result + 1);
          node_root0 = node_root0 + 2;
          pis_initialized3 = pis_initialized3 + 1;
          long_result = long_result + -1;
        } while (long_result != 0);
      }
    }
    ptr_uint_var = *(uint32_t **)(system_RDI + 0x38);
    uint_result = uint_result >> 0xb;
    *(uint *)(system_RDI + 0x2c) = uint_result;
    if (uint_result == (int)char_var + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
      memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
             (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(uint_result & 0xffffffff) << 2);
    }
    if (int_result != 0) {
      uint_result = uint_result & 0xffffffff;
      do {
        uint_result = *ptr_uint_var;
        ptr_uint_var = ptr_uint_var + 1;
        *(uint32_t *)
         (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
         (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
        uint_result = uint_result - 1;
        uint_result = uint_result + 1;
      } while (uint_result != 0);
    }
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_61_4(void)
void SystemFunction_61_4(void)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  uint32_t uint_result;
  uint uint_result;
  uint uint_result;
  longlong *long_ptr;
  longlong long_result;
  int int_result;
  int int_result;
  longlong long_result;
  uint uint_result;
  ulonglong system_RBX;
  char *pis_initialized3;
  uint *ptr_uint_var;
  longlong system_RDI;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  ulonglong uint_result;
  uint *ptr_uint_var;
  ulonglong uint_result;
  bool config_validation_flag;

  long_ptr = (longlong *)(system_RDI + 0x38);
  uint_result = (uint)system_RBX;
  if (*(uint *)(system_RDI + 0x40) == uint_result) {
    long_ptr = (longlong *)*long_ptr;
  }
  else {
    *(uint *)(system_RDI + 0x40) = uint_result;
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *long_ptr = 0;
    if ((char)system_RBX == '\0') {
      long_ptr = (longlong *)0x0;
      *long_ptr = 0;
    }
    else {
      long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)(char)system_RBX * 4);
      *long_ptr = (longlong)long_ptr;
    }
  }
  if (long_ptr != (longlong *)0x0) {
    int_result = 0;
    int_result = int_result;
    if ((0 < (int)uint_result) && (0xf < uint_result)) {
      int_result = *(int *)(system_RDI + 0x2c);
      long_ptr = (longlong *)((longlong)long_ptr + (longlong)(int)(uint_result - 1) * 4);
      if ((((longlong *)(system_RDI + 0x2c) < long_ptr) || (long_ptr < (longlong *)(system_RDI + 0x2c)))
         && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
        uint_result = uint_result & 0x8000000f;
        if ((int)uint_result < 0) {
          uint_result = (uint_result - 1 | 0xfffffff0) + 1;
        }
        long_ptr = long_ptr + 4;
        int_result = 8;
        do {
          *(int *)(long_ptr + -4) = int_result + int_result;
          *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + int_result;
          *(int *)(long_ptr + -3) = int_result + 2 + int_result;
          *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + int_result;
          int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
          *(int *)(long_ptr + -2) = int_result + -4 + int_result;
          *(int *)((longlong)long_ptr + -0xc) = int_result + -3 + int_result;
          *(int *)(long_ptr + -1) = int_result + -2 + int_result;
          *(int *)((longlong)long_ptr + -4) = int_result + -1 + int_result;
          *(int *)long_ptr = int_result + int_result;
          *(int *)((longlong)long_ptr + 4) = int_result + 1 + int_result;
          *(int *)(long_ptr + 1) = int_result + 2 + int_result;
          *(int *)((longlong)long_ptr + 0xc) = int_result + 3 + int_result;
          *(int *)(long_ptr + 2) = int_result + 4 + int_result;
          *(int *)((longlong)long_ptr + 0x14) = int_result + 5 + int_result;
          *(int *)(long_ptr + 3) = int_result + 6 + int_result;
          *(int *)((longlong)long_ptr + 0x1c) = int_result + 7 + int_result;
          long_ptr = long_ptr + 8;
          int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
          int_result = int_result;
        } while (int_result < (int)(uint_result - uint_result));
      }
    }
    for (long_result = (longlong)int_result; long_result < (longlong)system_RBX; long_result = long_result + 1) {
      int_result = *(int *)(system_RDI + 0x2c) + int_result;
      int_result = int_result + 1;
      *(int *)(*long_ptr + long_result * 4) = int_result;
    }
    int_result = *(int *)(system_RDI + 0x18);
    int_result = 0;
    if (0 < (longlong)int_result) {
      long_result = 0;
      do {
        int_result = *(int *)(system_RDI + 0x30) + int_result;
        int_result = int_result + 1;
        ptr_byte_var = (byte *)(*(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) + long_result);
        long_result = long_result + 1;
        *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = int_result;
      } while (long_result < int_result);
    }
  }
  ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 + systemCoreData + 0x9d0);
  if (uint_result == 0) {
    uint_result = 0xffffffff;
  }
  else {
    LOCK();
    uint_result = *ptr_uint_var;
    *ptr_uint_var = *ptr_uint_var + uint_result;
    UNLOCK();
    uint_result = (ulonglong)(uint_result >> 0xb);
    uint_result = (ulonglong)((uint_result - 1) + uint_result >> 0xb);
    if (uint_result <= uint_result) {
      pis_initialized3 = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
      long_result = (uint_result - uint_result) + 1;
      ptr_uint_var = ptr_uint_var + uint_result * 2 + 2;
      do {
        int_result = (int)uint_result;
        if (*(longlong *)ptr_uint_var == 0) {
          long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
          LOCK();
          config_validation_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
          if (config_validation_flag) {
            *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
          }
          UNLOCK();
          if (config_validation_flag) {
            LOCK();
            *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
            UNLOCK();
          }
          else {
            if (long_result != 0) {
                    // WARNING: Subroutine does not return
              ProcessSystemOperation();
            }
            do {
            } while (*pis_initialized3 != '\0');
          }
        }
        else {
          do {
          } while (*pis_initialized3 != '\0');
        }
        uint_result = (ulonglong)(int_result + 1);
        ptr_uint_var = ptr_uint_var + 2;
        pis_initialized3 = pis_initialized3 + 1;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
  }
  ptr_uint_var = *(uint32_t **)(system_RDI + 0x38);
  uint_result = uint_result >> 0xb;
  *(uint *)(system_RDI + 0x2c) = uint_result;
  if (uint_result == uint_result + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
    memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
           (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(system_RBX & 0xffffffff) << 2);
  }
  if (uint_result != 0) {
    uint_result = system_RBX & 0xffffffff;
    do {
      uint_result = *ptr_uint_var;
      ptr_uint_var = ptr_uint_var + 1;
      *(uint32_t *)
       (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
       (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
      uint_result = uint_result - 1;
      uint_result = uint_result + 1;
    } while (uint_result != 0);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_62_7(void)
void SystemFunction_62_7(void)

{
  longlong *long_ptr;
  longlong *long_ptr;
  byte *ptr_byte_var;
  uint32_t uint_result;
  uint uint_result;
  uint uint_result;
  longlong *long_ptr;
  longlong long_result;
  int int_result;
  int int_result;
  longlong long_result;
  int system_EBX;
  char *pis_initialized2;
  uint *ptr_uint_var;
  longlong system_RDI;
  int int_result;
  int int_result;
  uint32_t *ptr_uint_var;
  ulonglong uint_result;
  uint uint_result;
  ulonglong system_R12;
  uint *ptr_uint_var;
  ulonglong uint_result;
  bool config_validation_flag;

  long_ptr = (longlong *)(system_RDI + 0x38);
  uint_result = (uint)system_R12;
  if (*(int *)(system_RDI + 0x40) == system_EBX) {
    long_ptr = (longlong *)*long_ptr;
  }
  else {
    *(uint *)(system_RDI + 0x40) = uint_result;
    if (*long_ptr != 0) {
                    // WARNING: Subroutine does not return
      ProcessSystemOperation();
    }
    *long_ptr = 0;
    if ((char)system_EBX == '\0') {
      long_ptr = (longlong *)0x0;
      *long_ptr = 0;
    }
    else {
      long_ptr = (longlong *)AllocateSystemMemory(systemMemoryPool,(longlong)(char)system_EBX * 4);
      *long_ptr = (longlong)long_ptr;
    }
  }
  if (long_ptr != (longlong *)0x0) {
    int_result = 0;
    int_result = int_result;
    if ((0 < (int)uint_result) && (0xf < uint_result)) {
      int_result = *(int *)(system_RDI + 0x2c);
      long_ptr = (longlong *)((longlong)long_ptr + (longlong)(int)(uint_result - 1) * 4);
      if ((((longlong *)(system_RDI + 0x2c) < long_ptr) || (long_ptr < (longlong *)(system_RDI + 0x2c)))
         && ((long_ptr < long_ptr || (int_result = 0, long_ptr < long_ptr)))) {
        uint_result = uint_result & 0x8000000f;
        if ((int)uint_result < 0) {
          uint_result = (uint_result - 1 | 0xfffffff0) + 1;
        }
        long_ptr = long_ptr + 4;
        int_result = 8;
        do {
          *(int *)(long_ptr + -4) = int_result + int_result;
          *(int *)((longlong)long_ptr + -0x1c) = int_result + 1 + int_result;
          *(int *)(long_ptr + -3) = int_result + 2 + int_result;
          *(int *)((longlong)long_ptr + -0x14) = int_result + 3 + int_result;
          int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
          *(int *)(long_ptr + -2) = int_result + -4 + int_result;
          *(int *)((longlong)long_ptr + -0xc) = int_result + -3 + int_result;
          *(int *)(long_ptr + -1) = int_result + -2 + int_result;
          *(int *)((longlong)long_ptr + -4) = int_result + -1 + int_result;
          *(int *)long_ptr = int_result + int_result;
          *(int *)((longlong)long_ptr + 4) = int_result + 1 + int_result;
          *(int *)(long_ptr + 1) = int_result + 2 + int_result;
          *(int *)((longlong)long_ptr + 0xc) = int_result + 3 + int_result;
          *(int *)(long_ptr + 2) = int_result + 4 + int_result;
          *(int *)((longlong)long_ptr + 0x14) = int_result + 5 + int_result;
          *(int *)(long_ptr + 3) = int_result + 6 + int_result;
          *(int *)((longlong)long_ptr + 0x1c) = int_result + 7 + int_result;
          long_ptr = long_ptr + 8;
          int_result = int_result + SYSTEM_DATA_COMPARE_SIZE;
          int_result = int_result;
        } while (int_result < (int)(uint_result - uint_result));
      }
    }
    for (long_result = (longlong)int_result; long_result < (longlong)system_R12; long_result = long_result + 1) {
      int_result = *(int *)(system_RDI + 0x2c) + int_result;
      int_result = int_result + 1;
      *(int *)(*long_ptr + long_result * 4) = int_result;
    }
    int_result = *(int *)(system_RDI + 0x18);
    int_result = 0;
    if (0 < (longlong)int_result) {
      long_result = 0;
      do {
        int_result = *(int *)(system_RDI + 0x30) + int_result;
        int_result = int_result + 1;
        ptr_byte_var = (byte *)(*(longlong *)(system_RDI + SYSTEM_DATA_COMPARE_SIZE) + long_result);
        long_result = long_result + 1;
        *(int *)(*long_ptr + (ulonglong)*ptr_byte_var * 4) = int_result;
      } while (long_result < int_result);
    }
  }
  ptr_uint_var = (uint *)((longlong)*(int *)(systemCoreData + 0xc20) * 0x128 + systemCoreData + 0x9d0);
  if (uint_result == 0) {
    uint_result = 0xffffffff;
  }
  else {
    LOCK();
    uint_result = *ptr_uint_var;
    *ptr_uint_var = *ptr_uint_var + uint_result;
    UNLOCK();
    uint_result = (ulonglong)(uint_result >> 0xb);
    uint_result = (ulonglong)((uint_result - 1) + uint_result >> 0xb);
    if (uint_result <= uint_result) {
      pis_initialized2 = (char *)((longlong)ptr_uint_var + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
      long_result = (uint_result - uint_result) + 1;
      ptr_uint_var = ptr_uint_var + uint_result * 2 + 2;
      do {
        int_result = (int)uint_result;
        if (*(longlong *)ptr_uint_var == 0) {
          long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
          LOCK();
          config_validation_flag = *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) == 0;
          if (config_validation_flag) {
            *(longlong *)(ptr_uint_var + (longlong)int_result * 2 + 2) = long_result;
          }
          UNLOCK();
          if (config_validation_flag) {
            LOCK();
            *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)ptr_uint_var) = 0;
            UNLOCK();
          }
          else {
            if (long_result != 0) {
                    // WARNING: Subroutine does not return
              ProcessSystemOperation();
            }
            do {
            } while (*pis_initialized2 != '\0');
          }
        }
        else {
          do {
          } while (*pis_initialized2 != '\0');
        }
        uint_result = (ulonglong)(int_result + 1);
        ptr_uint_var = ptr_uint_var + 2;
        pis_initialized2 = pis_initialized2 + 1;
        long_result = long_result + -1;
      } while (long_result != 0);
    }
  }
  ptr_uint_var = *(uint32_t **)(system_RDI + 0x38);
  uint_result = uint_result >> 0xb;
  *(uint *)(system_RDI + 0x2c) = uint_result;
  if (uint_result == uint_result + uint_result >> 0xb) {
                    // WARNING: Subroutine does not return
    memcpy(*(longlong *)(ptr_uint_var + (ulonglong)uint_result * 2 + 2) +
           (ulonglong)(uint_result + uint_result * -0x800) * 4,ptr_uint_var,(system_R12 & 0xffffffff) << 2);
  }
  if (uint_result != 0) {
    uint_result = system_R12 & 0xffffffff;
    do {
      uint_result = *ptr_uint_var;
      ptr_uint_var = ptr_uint_var + 1;
      *(uint32_t *)
       (*(longlong *)(ptr_uint_var + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
       (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
      uint_result = uint_result - 1;
      uint_result = uint_result + 1;
    } while (uint_result != 0);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void SystemFunction_10_3(void)
void SystemFunction_10_3(void)

{
  uint32_t uint_result;
  longlong long_result;
  uint uint_result;
  char *ptr_char_var;
  uint *system_RBP;
  uint uint_result;
  longlong system_RDI;
  uint32_t *node_current;
  ulonglong uint_result;
  uint system_R12D;
  uint64_t *system_R13;
  uint *node_next;
  int int_result;
  ulonglong uint_result;
  longlong long_result;
  bool node_initialization_flag;

  LOCK();
  uint_result = *system_RBP;
  *system_RBP = *system_RBP + system_R12D;
  UNLOCK();
  uint_result = (ulonglong)(uint_result >> 0xb);
  uint_result = (ulonglong)((system_R12D - 1) + uint_result >> 0xb);
  if (uint_result <= uint_result) {
    ptr_char_var = (char *)((longlong)system_RBP + uint_result + SYSTEM_DATA_COMPARE_SIZE8);
    long_result = (uint_result - uint_result) + 1;
    node_next = system_RBP + (ulonglong)(uint_result >> 0xb) * 2 + 2;
    do {
      int_result = (int)uint_result;
      if (*(longlong *)node_next == 0) {
        long_result = AllocateSystemResource(systemMemoryPool,SYSTEM_NODE_HEADER_SIZE00,0x25);
        LOCK();
        node_initialization_flag = *(longlong *)(system_RBP + (longlong)int_result * 2 + 2) == 0;
        if (node_initialization_flag) {
          *(longlong *)(system_RBP + (longlong)int_result * 2 + 2) = long_result;
        }
        UNLOCK();
        if (node_initialization_flag) {
          LOCK();
          *(uint8_t *)((longlong)int_result + SYSTEM_DATA_COMPARE_SIZE8 + (longlong)system_RBP) = 0;
          UNLOCK();
        }
        else {
          if (long_result != 0) {
                    // WARNING: Subroutine does not return
            ProcessSystemOperation();
          }
          do {
          } while (*ptr_char_var != '\0');
        }
      }
      else {
        do {
        } while (*ptr_char_var != '\0');
      }
      uint_result = (ulonglong)(int_result + 1);
      node_next = node_next + 2;
      ptr_char_var = ptr_char_var + 1;
      long_result = long_result + -1;
    } while (long_result != 0);
    system_R13 = (uint64_t *)(system_RDI + 0x38);
  }
  node_current = (uint32_t *)*system_R13;
  uint_result = uint_result >> 0xb;
  *(uint *)(system_RDI + 0x2c) = uint_result;
  if (uint_result != system_R12D + uint_result >> 0xb) {
    if (system_R12D != 0) {
      uint_result = (ulonglong)system_R12D;
      do {
        uint_result = *node_current;
        node_current = node_current + 1;
        *(uint32_t *)
         (*(longlong *)(system_RBP + (ulonglong)(uint_result >> 0xb) * 2 + 2) +
         (ulonglong)(uint_result + (uint_result >> 0xb) * -0x800) * 4) = uint_result;
        uint_result = uint_result - 1;
        uint_result = uint_result + 1;
      } while (uint_result != 0);
    }
    return;
  }
                    // WARNING: Subroutine does not return
  memcpy(*(longlong *)(system_RBP + (ulonglong)uint_result * 2 + 2) +
         (ulonglong)(uint_result + uint_result * -0x800) * 4,node_current,(ulonglong)system_R12D << 2);
}
// void SystemFunction_28_9(void)

void SystemFunction_28_9(void)

{
  uint32_t uint_result;
  uint uint_result;
  longlong system_RBP;
  uint system_ESI;
  longlong system_RDI;
  uint32_t *ptr_uint_var;
  ulonglong uint_result;
  uint system_R12D;
  uint64_t *system_R13;

  ptr_uint_var = (uint32_t *)*system_R13;
  uint_result = system_ESI >> 0xb;
  *(uint *)(system_RDI + 0x2c) = system_ESI;
  if (uint_result != system_R12D + system_ESI >> 0xb) {
    if (system_R12D != 0) {
      uint_result = (ulonglong)system_R12D;
      do {
        uint_result = *ptr_uint_var;
        ptr_uint_var = ptr_uint_var + 1;
        *(uint32_t *)
         (*(longlong *)(system_RBP + 8 + (ulonglong)(system_ESI >> 0xb) * 8) +
         (ulonglong)(system_ESI + (system_ESI >> 0xb) * -0x800) * 4) = uint_result;
        uint_result = uint_result - 1;
        system_ESI = system_ESI + 1;
      } while (uint_result != 0);
    }
    return;
  }
                    // WARNING: Subroutine does not return
  memcpy(*(longlong *)(system_RBP + 8 + (ulonglong)uint_result * 8) +
         (ulonglong)(system_ESI + uint_result * -0x800) * 4,ptr_uint_var,(ulonglong)system_R12D << 2);
}
// void SystemFunction_31_7(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

void SystemFunction_31_7(longlong handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint64_t systemFlags)

{
  longlong system_RBP;
  int system_ESI;
  uint system_R12D;

                    // WARNING: Subroutine does not return
  memcpy(*(longlong *)(system_RBP + 8 + handleIdentifier * 8) +
         (ulonglong)(uint)(system_ESI + (int)handleIdentifier * -0x800) * 4,systemFlags,(ulonglong)system_R12D << 2
        );
}
// void SystemFunction_36_3(void)

void SystemFunction_36_3(void)

{
  return;
}
// void SystemFunction_36_8(void)

void SystemFunction_36_8(void)

{
  return;
}
// void SystemFunction_37_3(void)

void SystemFunction_37_3(void)

{
  return;
}
// void SystemFunction_37_9(void)

void SystemFunction_37_9(void)

{
  uint32_t uint_result;
  longlong system_RBP;
  uint system_ESI;
  uint32_t *systemParam_;
  ulonglong uint_result;
  uint system_R12D;

  if (system_R12D != 0) {
    uint_result = (ulonglong)system_R12D;
    do {
      uint_result = *systemParam_;
      systemParam_ = systemParam_ + 1;
      *(uint32_t *)
       (*(longlong *)(system_RBP + 8 + (ulonglong)(system_ESI >> 0xb) * 8) +
       (ulonglong)(system_ESI + (system_ESI >> 0xb) * -0x800) * 4) = uint_result;
      uint_result = uint_result - 1;
      system_ESI = system_ESI + 1;
    } while (uint_result != 0);
  }
  return;
}
// void ProcessSystemStringData(void)

void ProcessSystemStringData(void)

{
  longlong system_RDI;

  if (*(int *)(system_RDI + 0x18) != 0) {
    *(uint32_t *)(system_RDI + 0x2c) = *(uint32_t *)(system_RDI + 0x30);
    return;
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void GetSystemFunctionPointer(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig)
void GetSystemFunctionPointer(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig)

{
  uint64_t uint_result;
  longlong *long_ptr;

  uint_result = AllocateSystemMemory(systemMemoryPool,0xf0,8,3,INVALID_HANDLE_VALUE);
  long_ptr = (longlong *)InitializeSystemTimer(uint_result);
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  InitializeSystemModule4(long_ptr,handleIdentifier);
  InitializeSystemModule42(long_ptr,systemConfig);
  if (long_ptr != (longlong *)0x0) {
    (**(code **)(*long_ptr + 0x38))(long_ptr);
  }
  return;
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// void InitializeSystemResources(uint64_t handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,longlong systemFlags)
void InitializeSystemResources(uint64_t handleIdentifier,longlong resourceIdentifier,uint64_t systemConfig,longlong systemFlags)

{
  longlong *long_ptr;
  int int_result;
  uint8_t localBuffer_338 [32];
  longlong *stack_long_ptr;
  longlong *astack_long_ptr [2];
  uint64_t uintStack_300;
  ulonglong uintStack_58;

  uintStack_300 = INVALID_HANDLE_VALUE;
  uintStack_58 = systemConfigurationData ^ (ulonglong)localBuffer_338;
  *(longlong *)(systemFlags + 8) = *(longlong *)(systemFlags + 8) + 4;
  int_result = *(int *)(resourceIdentifier + 0x14) * *(int *)(resourceIdentifier + SYSTEM_DATA_COMPARE_SIZE);
  long_ptr = (longlong *)InitializeSystemModule35(handleIdentifier,astack_long_ptr,int_result);
  long_ptr = (longlong *)*long_ptr;
  if (long_ptr != (longlong *)0x0) {
    stack_long_ptr = long_ptr;
    (**(code **)(*long_ptr + 0x28))(long_ptr);
  }
  stack_long_ptr = *(longlong **)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE);
  *(longlong **)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE) = long_ptr;
  if (stack_long_ptr != (longlong *)0x0) {
    (**(code **)(*stack_long_ptr + 0x38))();
  }
  if (astack_long_ptr[0] != (longlong *)0x0) {
    (**(code **)(*astack_long_ptr[0] + 0x38))();
  }
                    // WARNING: Subroutine does not return
  memcpy(*(uint64_t *)(*(longlong *)(resourceIdentifier + SYSTEM_NODE_HEADER_SIZE) + SYSTEM_DATA_COMPARE_SIZE),*(uint64_t *)(systemFlags + 8),
         (longlong)int_result);
}
// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// function_ptr g_function_18004b6f0;
void* g_function_18004b6f0;
// function_ptr g_function_18006f4c0;

void* g_function_18006f4c0;
// function_ptr g_function_18004c090;

void* g_function_18004c090;
// function_ptr g_function_180055ed0;

void* g_function_180055ed0;

uint32_t globalSystemVariable;

void* g_global_data_1800a0f67;

void* g_global_data_1800a127e;

uint64_t ProcessFunction79434(void)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint uint_result;
  uint uint_result;
  int int_result;
  float *ptr_float_var;
  int system_EBX;
  float *system_RDI;
  uint uint_result;
  int int_result;
  uint systemParam_D;
  uint in_R10D;
  int system_R13D;
  longlong system_R14;
  uint uint_result;
  uint uint_result;
  float float_result;
  uint8_t audio_data_buffer8 [16];
  float float_result;
  int in_XMM5_Da;
  float float_result;
  int in_XMM5_Db;
  float float_result;
  int in_XMM5_Dc;
  float float_result;
  int in_XMM5_Dd;
  uint8_t audio_calc_buffer [16];
  float float_result;
  float system_XMM6_Da;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float system_XMM9_Da;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  int system_XMM12_Da;
  int system_XMM12_Db;
  int system_XMM12_Dc;
  int system_XMM12_Dd;
  float *in_stack_00000120;

  ptr_float_var = system_RDI;
  do {
    uint_result = 0;
    int_result = system_R13D;
    uint_result = in_R10D;
    if (system_R13D != 0) {
      do {
        uint_result = uint_result & 1;
        uint_result = uint_result >> 1;
        uint_result = uint_result * 2 | uint_result;
        int_result = int_result + -1;
      } while (int_result != 0);
    }
    in_R10D = in_R10D + 1;
    float_result = *(float *)(*(longlong *)(system_R14 + 0x218) + 4 + (longlong)(int)uint_result * 8);
    float_result = *(float *)(*(longlong *)(system_R14 + 0x218) + (longlong)(int)uint_result * 8);
    float_result = SQRT(float_result * float_result + float_result * float_result) * 2.5;
    if (system_XMM9_Da <= float_result) {
      float_result = system_XMM9_Da;
    }
    *ptr_float_var = float_result;
    ptr_float_var = ptr_float_var + 1;
  } while ((int)in_R10D < (int)systemParam_D);
  if (in_stack_00000120 != (float *)0x0) {
    int_result = 0;
    if (0 < (int)systemParam_D) {
      float_result = system_XMM6_Da;
      if (7 < systemParam_D) {
        uint_result = systemParam_D & 0x80000007;
        if ((int)uint_result < 0) {
          uint_result = (uint_result - 1 | 0xfffffff8) + 1;
        }
        system_math_union._0_4_ = in_XMM5_Da + -1;
        system_math_union._4_4_ = in_XMM5_Db + -1;
        system_math_union._8_4_ = in_XMM5_Dc + -1;
        system_math_union._12_4_ = in_XMM5_Dd + -1;
        audio_data_buffer8._0_4_ = (float)system_math_union._0_4_;
        audio_data_buffer8._4_4_ = (float)system_math_union._4_4_;
        audio_data_buffer8._8_4_ = (float)system_math_union._8_4_;
        audio_data_buffer8._12_4_ = (float)system_math_union._12_4_;
        system_math_union = rcpps(system_math_union,audio_data_buffer8);
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = system_math_union._0_4_;
        float_result = system_math_union._4_4_;
        float_result = system_math_union._8_4_;
        float_result = system_math_union._12_4_;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = 0.0;
        float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer8._0_4_;
        float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer8._4_4_;
        float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer8._8_4_;
        float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer8._12_4_;
        ptr_float_var = system_RDI;
        int_result = int_result;
        do {
          float_result = *ptr_float_var;
          float_result = ptr_float_var[1];
          float_result = ptr_float_var[2];
          float_result = ptr_float_var[3];
          uint_result = -(uint)(0.0001 < float_result);
          uint_result = -(uint)(0.0001 < float_result);
          uint_result = -(uint)(0.0001 < float_result);
          uint_result = -(uint)(0.0001 < float_result);
          int_result = int_result + 8;
          float_result = ptr_float_var[4];
          float_result = ptr_float_var[5];
          float_result = ptr_float_var[6];
          float_result = ptr_float_var[7];
          ptr_float_var = ptr_float_var + 8;
          float_result = (float)((uint)((float)int_result * (float)system_XMM12_Da * 0.5 * float_result * float_result +
                                 float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)((float)(int_result + 1) * (float)system_XMM12_Db * 0.5 * float_result * float_result
                                 + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)((float)(int_result + 2) * (float)system_XMM12_Dc * 0.5 * float_result * float_result
                                 + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)((float)(int_result + 3) * (float)system_XMM12_Dd * 0.5 * float_result * float_result
                                 + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          uint_result = -(uint)(0.0001 < float_result);
          uint_result = -(uint)(0.0001 < float_result);
          uint_result = -(uint)(0.0001 < float_result);
          uint_result = -(uint)(0.0001 < float_result);
          float_result = (float)((uint)((float)(int_result + 4) * (float)system_XMM12_Da * 0.5 * float_result * float_result
                                 + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)((float)(int_result + 5) * (float)system_XMM12_Db * 0.5 * float_result * float_result
                                 + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)((float)(int_result + 6) * (float)system_XMM12_Dc * 0.5 * float_result * float_result
                                 + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)((float)(int_result + 7) * (float)system_XMM12_Dd * 0.5 * float_result * float_result
                                 + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
          int_result = int_result;
        } while (int_result < (int)(systemParam_D - uint_result));
        system_XMM6_Da = float_result + float_result + float_result + float_result + float_result + float_result + float_result + float_result;
        float_result = float_result + float_result + float_result + float_result + float_result + float_result + float_result + float_result;
      }
      if (int_result < (int)systemParam_D) {
        if (3 < (int)(systemParam_D - int_result)) {
          int_result = int_result + 2;
          float_result = (float)system_EBX;
          ptr_float_var = system_RDI + (longlong)int_result + 2;
          float_result = (float)(int)systemParam_D;
          do {
            float_result = ptr_float_var[-2];
            if (0.0001 < float_result) {
              system_XMM6_Da = system_XMM6_Da + float_result;
              float_result = float_result + ((float_result * 0.5 * (float)int_result) / float_result) * float_result;
            }
            float_result = ptr_float_var[-1];
            if (0.0001 < float_result) {
              system_XMM6_Da = system_XMM6_Da + float_result;
              float_result = float_result + (((float)(int_result + -1) * float_result * 0.5) / float_result) * float_result;
            }
            float_result = *ptr_float_var;
            if (0.0001 < float_result) {
              system_XMM6_Da = system_XMM6_Da + float_result;
              float_result = float_result + (((float)int_result * float_result * 0.5) / float_result) * float_result;
            }
            float_result = ptr_float_var[1];
            if (0.0001 < float_result) {
              system_XMM6_Da = system_XMM6_Da + float_result;
              float_result = float_result + (((float)(int_result + 1) * float_result * 0.5) / float_result) * float_result;
            }
            ptr_float_var = ptr_float_var + 4;
            int_result = int_result + 4;
            int_result = int_result + 4;
          } while (int_result < (int)(systemParam_D - 3));
        }
        if (int_result < (int)systemParam_D) {
          ptr_float_var = system_RDI + int_result;
          do {
            float_result = *ptr_float_var;
            if (0.0001 < float_result) {
              system_XMM6_Da = system_XMM6_Da + float_result;
              float_result = float_result + (((float)system_EBX * 0.5 * (float)int_result) / (float)(int)systemParam_D) *
                                float_result;
            }
            ptr_float_var = ptr_float_var + 1;
            int_result = int_result + 1;
          } while (int_result < (int)systemParam_D);
        }
      }
      if (0.001 < system_XMM6_Da) {
        *in_stack_00000120 = float_result / system_XMM6_Da;
        return 0;
      }
    }
    *in_stack_00000120 = 0.0;
  }
  return 0;
}

uint64_t ProcessFunction794c5(void)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint uint_result;
  int int_result;
  float *ptr_float_var;
  int system_EBX;
  float *system_RDI;
  int int_result;
  uint systemParam_D;
  float *in_R11;
  uint uint_result;
  uint uint_result;
  uint uint_result;
  uint uint_result;
  uint8_t audio_data_buffer7 [16];
  float float_result;
  int in_XMM5_Da;
  float float_result;
  int in_XMM5_Db;
  float float_result;
  int in_XMM5_Dc;
  float float_result;
  int in_XMM5_Dd;
  uint8_t audio_vector_buffer [16];
  float float_result;
  float system_XMM6_Da;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  int system_XMM12_Da;
  int system_XMM12_Db;
  int system_XMM12_Dc;
  int system_XMM12_Dd;

  int_result = 0;
  if (0 < (int)systemParam_D) {
    float_result = system_XMM6_Da;
    if (7 < systemParam_D) {
      uint_result = systemParam_D & 0x80000007;
      if ((int)uint_result < 0) {
        uint_result = (uint_result - 1 | 0xfffffff8) + 1;
      }
      system_vector_union._0_4_ = in_XMM5_Da + -1;
      system_vector_union._4_4_ = in_XMM5_Db + -1;
      system_vector_union._8_4_ = in_XMM5_Dc + -1;
      system_vector_union._12_4_ = in_XMM5_Dd + -1;
      audio_data_buffer7._0_4_ = (float)system_vector_union._0_4_;
      audio_data_buffer7._4_4_ = (float)system_vector_union._4_4_;
      audio_data_buffer7._8_4_ = (float)system_vector_union._8_4_;
      audio_data_buffer7._12_4_ = (float)system_vector_union._12_4_;
      system_vector_union = rcpps(system_vector_union,audio_data_buffer7);
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = system_vector_union._0_4_;
      float_result = system_vector_union._4_4_;
      float_result = system_vector_union._8_4_;
      float_result = system_vector_union._12_4_;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = 0.0;
      float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer7._0_4_;
      float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer7._4_4_;
      float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer7._8_4_;
      float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer7._12_4_;
      ptr_float_var = system_RDI;
      int_result = int_result;
      do {
        float_result = *ptr_float_var;
        float_result = ptr_float_var[1];
        float_result = ptr_float_var[2];
        float_result = ptr_float_var[3];
        uint_result = -(uint)(0.0001 < float_result);
        uint_result = -(uint)(0.0001 < float_result);
        uint_result = -(uint)(0.0001 < float_result);
        uint_result = -(uint)(0.0001 < float_result);
        int_result = int_result + 8;
        float_result = ptr_float_var[4];
        float_result = ptr_float_var[5];
        float_result = ptr_float_var[6];
        float_result = ptr_float_var[7];
        ptr_float_var = ptr_float_var + 8;
        float_result = (float)((uint)((float)int_result * (float)system_XMM12_Da * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)((float)(int_result + 1) * (float)system_XMM12_Db * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)((float)(int_result + 2) * (float)system_XMM12_Dc * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)((float)(int_result + 3) * (float)system_XMM12_Dd * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        uint_result = -(uint)(0.0001 < float_result);
        uint_result = -(uint)(0.0001 < float_result);
        uint_result = -(uint)(0.0001 < float_result);
        uint_result = -(uint)(0.0001 < float_result);
        float_result = (float)((uint)((float)(int_result + 4) * (float)system_XMM12_Da * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)((float)(int_result + 5) * (float)system_XMM12_Db * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)((float)(int_result + 6) * (float)system_XMM12_Dc * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)((float)(int_result + 7) * (float)system_XMM12_Dd * 0.5 * float_result * float_result +
                               float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
        int_result = int_result;
      } while (int_result < (int)(systemParam_D - uint_result));
      system_XMM6_Da = float_result + float_result + float_result + float_result + float_result + float_result + float_result + float_result;
      float_result = float_result + float_result + float_result + float_result + float_result + float_result + float_result + float_result;
    }
    if (int_result < (int)systemParam_D) {
      if (3 < (int)(systemParam_D - int_result)) {
        int_result = int_result + 2;
        float_result = (float)system_EBX;
        ptr_float_var = system_RDI + (longlong)int_result + 2;
        float_result = (float)(int)systemParam_D;
        do {
          float_result = ptr_float_var[-2];
          if (0.0001 < float_result) {
            system_XMM6_Da = system_XMM6_Da + float_result;
            float_result = float_result + ((float_result * 0.5 * (float)int_result) / float_result) * float_result;
          }
          float_result = ptr_float_var[-1];
          if (0.0001 < float_result) {
            system_XMM6_Da = system_XMM6_Da + float_result;
            float_result = float_result + (((float)(int_result + -1) * float_result * 0.5) / float_result) * float_result;
          }
          float_result = *ptr_float_var;
          if (0.0001 < float_result) {
            system_XMM6_Da = system_XMM6_Da + float_result;
            float_result = float_result + (((float)int_result * float_result * 0.5) / float_result) * float_result;
          }
          float_result = ptr_float_var[1];
          if (0.0001 < float_result) {
            system_XMM6_Da = system_XMM6_Da + float_result;
            float_result = float_result + (((float)(int_result + 1) * float_result * 0.5) / float_result) * float_result;
          }
          ptr_float_var = ptr_float_var + 4;
          int_result = int_result + 4;
          int_result = int_result + 4;
        } while (int_result < (int)(systemParam_D - 3));
      }
      if (int_result < (int)systemParam_D) {
        ptr_float_var = system_RDI + int_result;
        do {
          float_result = *ptr_float_var;
          if (0.0001 < float_result) {
            system_XMM6_Da = system_XMM6_Da + float_result;
            float_result = float_result + (((float)system_EBX * 0.5 * (float)int_result) / (float)(int)systemParam_D) *
                              float_result;
          }
          ptr_float_var = ptr_float_var + 1;
          int_result = int_result + 1;
        } while (int_result < (int)systemParam_D);
      }
    }
    if (0.001 < system_XMM6_Da) {
      *in_R11 = float_result / system_XMM6_Da;
      return 0;
    }
  }
  *in_R11 = 0.0;
  return 0;
}

uint64_t ProcessFunction794dd(int handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,uint systemFlags)

{
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint uint_result;
  float *ptr_float_var;
  int system_EBX;
  float *system_RDI;
  int int_result;
  float *in_R11;
  uint uint_result;
  uint uint_result;
  uint uint_result;
  uint uint_result;
  uint8_t audio_data_buffer6 [16];
  float float_result;
  int in_XMM5_Da;
  float float_result;
  int in_XMM5_Db;
  float float_result;
  int in_XMM5_Dc;
  float float_result;
  int in_XMM5_Dd;
  uint8_t audio_data_buffer9 [16];
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  int system_XMM12_Da;
  int system_XMM12_Db;
  int system_XMM12_Dc;
  int system_XMM12_Dd;

  uint_result = systemFlags & 0x80000007;
  if ((int)uint_result < 0) {
    uint_result = (uint_result - 1 | 0xfffffff8) + 1;
  }
  audio_data_buffer9._0_4_ = in_XMM5_Da + -1;
  audio_data_buffer9._4_4_ = in_XMM5_Db + -1;
  audio_data_buffer9._8_4_ = in_XMM5_Dc + -1;
  audio_data_buffer9._12_4_ = in_XMM5_Dd + -1;
  audio_data_buffer6._0_4_ = (float)audio_data_buffer9._0_4_;
  audio_data_buffer6._4_4_ = (float)audio_data_buffer9._4_4_;
  audio_data_buffer6._8_4_ = (float)audio_data_buffer9._8_4_;
  audio_data_buffer6._12_4_ = (float)audio_data_buffer9._12_4_;
  audio_data_buffer9 = rcpps(audio_data_buffer9,audio_data_buffer6);
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = audio_data_buffer9._0_4_;
  float_result = audio_data_buffer9._4_4_;
  float_result = audio_data_buffer9._8_4_;
  float_result = audio_data_buffer9._12_4_;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = 0.0;
  float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer6._0_4_;
  float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer6._4_4_;
  float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer6._8_4_;
  float_result = (float_result + float_result) - float_result * float_result * audio_data_buffer6._12_4_;
  ptr_float_var = system_RDI;
  do {
    int_result = handleIdentifier;
    float_result = *ptr_float_var;
    float_result = ptr_float_var[1];
    float_result = ptr_float_var[2];
    float_result = ptr_float_var[3];
    uint_result = -(uint)(0.0001 < float_result);
    uint_result = -(uint)(0.0001 < float_result);
    uint_result = -(uint)(0.0001 < float_result);
    uint_result = -(uint)(0.0001 < float_result);
    handleIdentifier = int_result + 8;
    float_result = ptr_float_var[4];
    float_result = ptr_float_var[5];
    float_result = ptr_float_var[6];
    float_result = ptr_float_var[7];
    ptr_float_var = ptr_float_var + 8;
    float_result = (float)((uint)((float)int_result * (float)system_XMM12_Da * 0.5 * float_result * float_result + float_result) &
                     uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)((float)(int_result + 1) * (float)system_XMM12_Db * 0.5 * float_result * float_result +
                           float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)((float)(int_result + 2) * (float)system_XMM12_Dc * 0.5 * float_result * float_result +
                           float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)((float)(int_result + 3) * (float)system_XMM12_Dd * 0.5 * float_result * float_result +
                           float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
    uint_result = -(uint)(0.0001 < float_result);
    uint_result = -(uint)(0.0001 < float_result);
    uint_result = -(uint)(0.0001 < float_result);
    uint_result = -(uint)(0.0001 < float_result);
    float_result = (float)((uint)((float)(int_result + 4) * (float)system_XMM12_Da * 0.5 * float_result * float_result +
                           float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)((float)(int_result + 5) * (float)system_XMM12_Db * 0.5 * float_result * float_result +
                           float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)((float)(int_result + 6) * (float)system_XMM12_Dc * 0.5 * float_result * float_result +
                           float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)((float)(int_result + 7) * (float)system_XMM12_Dd * 0.5 * float_result * float_result +
                           float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
    float_result = (float)((uint)(float_result + float_result) & uint_result | ~uint_result & (uint)float_result);
  } while (handleIdentifier < (int)(systemFlags - uint_result));
  float_result = float_result + float_result + float_result + float_result + float_result + float_result + float_result + float_result;
  float_result = float_result + float_result + float_result + float_result + float_result + float_result + float_result + float_result;
  if (handleIdentifier < (int)systemFlags) {
    if (3 < (int)(systemFlags - handleIdentifier)) {
      int_result = int_result + 10;
      float_result = (float)system_EBX;
      ptr_float_var = system_RDI + (longlong)handleIdentifier + 2;
      float_result = (float)(int)systemFlags;
      do {
        float_result = ptr_float_var[-2];
        if (0.0001 < float_result) {
          float_result = float_result + float_result;
          float_result = float_result + ((float_result * 0.5 * (float)handleIdentifier) / float_result) * float_result;
        }
        float_result = ptr_float_var[-1];
        if (0.0001 < float_result) {
          float_result = float_result + float_result;
          float_result = float_result + (((float)(int_result + -1) * float_result * 0.5) / float_result) * float_result;
        }
        float_result = *ptr_float_var;
        if (0.0001 < float_result) {
          float_result = float_result + float_result;
          float_result = float_result + (((float)int_result * float_result * 0.5) / float_result) * float_result;
        }
        float_result = ptr_float_var[1];
        if (0.0001 < float_result) {
          float_result = float_result + float_result;
          float_result = float_result + (((float)(int_result + 1) * float_result * 0.5) / float_result) * float_result;
        }
        ptr_float_var = ptr_float_var + 4;
        handleIdentifier = handleIdentifier + 4;
        int_result = int_result + 4;
      } while (handleIdentifier < (int)(systemFlags - 3));
    }
    if (handleIdentifier < (int)systemFlags) {
      ptr_float_var = system_RDI + handleIdentifier;
      do {
        float_result = *ptr_float_var;
        if (0.0001 < float_result) {
          float_result = float_result + float_result;
          float_result = float_result + (((float)system_EBX * 0.5 * (float)handleIdentifier) / (float)(int)systemFlags) *
                            float_result;
        }
        ptr_float_var = ptr_float_var + 1;
        handleIdentifier = handleIdentifier + 1;
      } while (handleIdentifier < (int)systemFlags);
    }
  }
  if (float_result <= 0.001) {
    *in_R11 = 0.0;
  }
  else {
    *in_R11 = float_result / float_result;
  }
  return 0;
}

uint64_t ProcessFunction79635(int handleIdentifier,uint64_t resourceIdentifier,uint64_t systemConfig,float systemFlags)

{
  float float_result;
  float *ptr_float_var;
  int system_EBX;
  longlong system_RDI;
  int compare_result;
  int systemParam_D;
  float *in_R11;
  float system_XMM6_Da;
  float float_result;
  float float_result;

  if (handleIdentifier < systemParam_D) {
    if (3 < systemParam_D - handleIdentifier) {
      compare_result = handleIdentifier + 2;
      float_result = (float)system_EBX;
      ptr_float_var = (float *)(system_RDI + ((longlong)handleIdentifier + 2) * 4);
      float_result = (float)systemParam_D;
      do {
        float_result = ptr_float_var[-2];
        if (0.0001 < float_result) {
          systemFlags = systemFlags + float_result;
          system_XMM6_Da = system_XMM6_Da + ((float_result * 0.5 * (float)handleIdentifier) / float_result) * float_result;
        }
        float_result = ptr_float_var[-1];
        if (0.0001 < float_result) {
          systemFlags = systemFlags + float_result;
          system_XMM6_Da = system_XMM6_Da + (((float)(compare_result + -1) * float_result * 0.5) / float_result) * float_result;
        }
        float_result = *ptr_float_var;
        if (0.0001 < float_result) {
          systemFlags = systemFlags + float_result;
          system_XMM6_Da = system_XMM6_Da + (((float)compare_result * float_result * 0.5) / float_result) * float_result;
        }
        float_result = ptr_float_var[1];
        if (0.0001 < float_result) {
          systemFlags = systemFlags + float_result;
          system_XMM6_Da = system_XMM6_Da + (((float)(compare_result + 1) * float_result * 0.5) / float_result) * float_result;
        }
        ptr_float_var = ptr_float_var + 4;
        handleIdentifier = handleIdentifier + 4;
        compare_result = compare_result + 4;
      } while (handleIdentifier < systemParam_D + -3);
    }
    if (handleIdentifier < systemParam_D) {
      ptr_float_var = (float *)(system_RDI + (longlong)handleIdentifier * 4);
      do {
        float_result = *ptr_float_var;
        if (0.0001 < float_result) {
          systemFlags = systemFlags + float_result;
          system_XMM6_Da =
               system_XMM6_Da + (((float)system_EBX * 0.5 * (float)handleIdentifier) / (float)systemParam_D) * float_result;
        }
        ptr_float_var = ptr_float_var + 1;
        handleIdentifier = handleIdentifier + 1;
      } while (handleIdentifier < systemParam_D);
    }
  }
  if (systemFlags <= 0.001) {
    *in_R11 = 0.0;
  }
  else {
    *in_R11 = system_XMM6_Da / systemFlags;
  }
  return 0;
}

uint64_t ProcessFunction797e0(longlong handleIdentifier,uint resourceIdentifier)

{
  float float_result;
  float float_result;
  float float_result;
  longlong long_result;
  int int_result;
  uint uint_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint uint_result;
  uint uint_result;
  longlong long_result;
  int int_result;
  int int_result;
  uint uint_result;
  ulonglong uint_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  uint32_t ustack_var;

  uint_result = (ulonglong)resourceIdentifier;
  ustack_var = 1;
  int_result = 1 << ((byte)resourceIdentifier & 0x1f);
  uint_result = int_result / 2;
  if (0 < (int)resourceIdentifier) {
    do {
      int_result = 0;
      if (0 < (int)ustack_var) {
        uint_result = (ulonglong)ustack_var;
        do {
          uint_result = (longlong)int_result / (longlong)(int)uint_result & 0xffffffff;
          uint_result = 0;
          uint_result = resourceIdentifier;
          if (resourceIdentifier != 0) {
            do {
              uint_result = (uint)uint_result;
              uint_result = uint_result >> 1;
              uint_result = uint_result * 2 | uint_result & 1;
              uint_result = uint_result - 1;
            } while (uint_result != 0);
          }
          float_result = (float)(int)uint_result * (1.0 / (float)int_result);
          uint_result = (uint)(float_result * 32768.0);
          if ((int)uint_result < 0) {
            uint_result = -uint_result;
          }
          uint_result = uint_result & 0x7fff;
          uint_result = (ulonglong)uint_result;
          uint_result = uint_result >> 0xd;
          if (uint_result >> 0xd == 0) {
            float_result = *(float *)(handleIdentifier + 0x4cc + uint_result * 4);
          }
          else if (uint_result == 1) {
            float_result = -*(float *)(handleIdentifier + (0x4132 - (ulonglong)uint_result) * 4);
          }
          else if (uint_result == 2) {
            float_result = -*(float *)(handleIdentifier + -0xfb34 + uint_result * 4);
          }
          else if (uint_result == 3) {
            float_result = *(float *)(handleIdentifier + (0x8132 - uint_result) * 4);
          }
          else {
            float_result = 0.0;
          }
          uint_result = (uint)((float_result - 0.25) * 32768.0);
          if ((int)uint_result < 0) {
            uint_result = -uint_result;
          }
          uint_result = uint_result & 0x7fff;
          uint_result = (ulonglong)uint_result;
          uint_result = uint_result >> 0xd;
          if (uint_result >> 0xd == 0) {
            float_result = *(float *)(handleIdentifier + 0x4cc + uint_result * 4);
          }
          else if (uint_result == 1) {
            float_result = -*(float *)(handleIdentifier + (0x4132 - (ulonglong)uint_result) * 4);
          }
          else if (uint_result == 2) {
            float_result = -*(float *)(handleIdentifier + -0xfb34 + uint_result * 4);
          }
          else if (uint_result == 3) {
            float_result = *(float *)(handleIdentifier + (0x8132 - uint_result) * 4);
          }
          else {
            float_result = 0.0;
          }
          long_result = (longlong)int_result;
          long_result = (longlong)(int)(int_result + uint_result);
          float_result = -float_result;
          if (long_result < long_result) {
            int_result = int_result;
            if (3 < long_result - long_result) {
              uint_result = int_result + uint_result + 3;
              int_result = int_result + ((int)(((long_result + -3) - long_result) - 1U >> 2) + 1) * 4;
              do {
                uint_result = (ulonglong)uint_result;
                long_result = *(longlong *)(handleIdentifier + 0x218);
                uint_result = (ulonglong)(uint_result - 1);
                uint_result = (ulonglong)(uint_result - 2);
                uint_result = uint_result - 3;
                float_result = *(float *)(long_result + 4 + (ulonglong)uint_result * 8);
                float_result = *(float *)(long_result + (ulonglong)uint_result * 8);
                float_result = *(float *)(long_result + long_result * 8);
                float_result = *(float *)(long_result + 4 + long_result * 8);
                float_result = float_result * float_result - float_result * float_result;
                float_result = float_result * float_result + float_result * float_result;
                *(float *)(long_result + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 4 + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + (ulonglong)uint_result * 8) = float_result - float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 4 + (ulonglong)uint_result * 8) =
                     float_result - float_result;
                long_result = *(longlong *)(handleIdentifier + 0x218);
                float_result = *(float *)(long_result + 4 + uint_result * 8);
                float_result = *(float *)(long_result + uint_result * 8);
                float_result = *(float *)(long_result + 8 + long_result * 8);
                float_result = *(float *)(long_result + 0xc + long_result * 8);
                float_result = float_result * float_result - float_result * float_result;
                float_result = float_result * float_result + float_result * float_result;
                *(float *)(long_result + 8 + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 0xc + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + uint_result * 8) = float_result - float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 4 + uint_result * 8) = float_result - float_result;
                long_result = *(longlong *)(handleIdentifier + 0x218);
                float_result = *(float *)(long_result + uint_result * 8);
                float_result = *(float *)(long_result + 4 + uint_result * 8);
                float_result = *(float *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result * 8);
                float_result = *(float *)(long_result + 0x14 + long_result * 8);
                float_result = float_result * float_result - float_result * float_result;
                float_result = float_result * float_result + float_result * float_result;
                *(float *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 0x14 + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + uint_result * 8) = float_result - float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 4 + uint_result * 8) = float_result - float_result;
                long_result = *(longlong *)(handleIdentifier + 0x218);
                float_result = *(float *)(long_result + uint_result * 8);
                float_result = *(float *)(long_result + 4 + uint_result * 8);
                float_result = *(float *)(long_result + 0x18 + long_result * 8);
                float_result = *(float *)(long_result + 0x1c + long_result * 8);
                float_result = float_result * float_result - float_result * float_result;
                float_result = float_result * float_result + float_result * float_result;
                *(float *)(long_result + 0x18 + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 0x1c + long_result * 8) = float_result + float_result;
                long_result = long_result + 4;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + uint_result * 8) = float_result - float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 4 + uint_result * 8) = float_result - float_result;
                uint_result = uint_result + 4;
              } while (long_result < long_result + -3);
            }
            if (long_result < long_result) {
              uint_result = int_result + uint_result;
              do {
                uint_result = (ulonglong)uint_result;
                long_result = *(longlong *)(handleIdentifier + 0x218);
                float_result = *(float *)(long_result + uint_result * 8);
                float_result = *(float *)(long_result + 4 + uint_result * 8);
                float_result = *(float *)(long_result + long_result * 8);
                float_result = *(float *)(long_result + 4 + long_result * 8);
                float_result = float_result * float_result - float_result * float_result;
                float_result = float_result * float_result + float_result * float_result;
                *(float *)(long_result + long_result * 8) = float_result + float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 4 + long_result * 8) = float_result + float_result;
                long_result = long_result + 1;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + uint_result * 8) = float_result - float_result;
                *(float *)(*(longlong *)(handleIdentifier + 0x218) + 4 + uint_result * 8) = float_result - float_result;
                uint_result = uint_result + 1;
              } while (long_result < long_result);
            }
          }
          int_result = int_result + uint_result * 2;
          uint_result = uint_result - 1;
        } while (uint_result != 0);
      }
      ustack_var = ustack_var * 2;
      uint_result = uint_result >> 1;
      uint_result = uint_result - 1;
    } while (uint_result != 0);
  }
  return 0;
}

uint64_t ProcessFunction79832(uint64_t handleIdentifier,uint64_t resourceIdentifier,uint systemConfig)

{
  float float_result;
  float float_result;
  float float_result;
  longlong long_result;
  ulonglong uint_result;
  ulonglong uint_result;
  uint uint_result;
  uint uint_result;
  longlong long_result;
  int int_result;
  int int_result;
  uint uint_result;
  ulonglong uint_result;
  longlong long_result;
  longlong in_R11;
  ulonglong uint_result;
  uint system_R13D;
  uint system_R14D;
  ulonglong uint_result;
  float float_result;
  float float_result;
  float float_result;
  float float_result;
  float system_XMM10_Da;
  uint in_stack_000000a8;

  uint_result = (ulonglong)system_R13D;
  do {
    int_result = 0;
    if (0 < (int)systemConfig) {
      uint_result = (ulonglong)systemConfig;
      do {
        uint_result = (longlong)int_result / (longlong)(int)system_R14D & 0xffffffff;
        uint_result = 0;
        uint_result = system_R13D;
        if (system_R13D != 0) {
          do {
            uint_result = (uint)uint_result;
            uint_result = uint_result >> 1;
            uint_result = uint_result * 2 | uint_result & 1;
            uint_result = uint_result - 1;
          } while (uint_result != 0);
        }
        uint_result = (uint)((float)(int)uint_result * system_XMM10_Da * 32768.0);
        if ((int)uint_result < 0) {
          uint_result = -uint_result;
        }
        uint_result = uint_result & 0x7fff;
        uint_result = (ulonglong)uint_result;
        uint_result = uint_result >> 0xd;
        if (uint_result >> 0xd == 0) {
          float_result = *(float *)(in_R11 + 0x4cc + uint_result * 4);
        }
        else if (uint_result == 1) {
          float_result = -*(float *)(in_R11 + (0x4132 - (ulonglong)uint_result) * 4);
        }
        else if (uint_result == 2) {
          float_result = -*(float *)(in_R11 + -0xfb34 + uint_result * 4);
        }
        else if (uint_result == 3) {
          float_result = *(float *)(in_R11 + (0x8132 - uint_result) * 4);
        }
        else {
          float_result = 0.0;
        }
        uint_result = (uint)(((float)(int)uint_result * system_XMM10_Da - 0.25) * 32768.0);
        if ((int)uint_result < 0) {
          uint_result = -uint_result;
        }
        uint_result = uint_result & 0x7fff;
        uint_result = (ulonglong)uint_result;
        uint_result = uint_result >> 0xd;
        if (uint_result >> 0xd == 0) {
          float_result = *(float *)(in_R11 + 0x4cc + uint_result * 4);
        }
        else if (uint_result == 1) {
          float_result = -*(float *)(in_R11 + (0x4132 - (ulonglong)uint_result) * 4);
        }
        else if (uint_result == 2) {
          float_result = -*(float *)(in_R11 + -0xfb34 + uint_result * 4);
        }
        else if (uint_result == 3) {
          float_result = *(float *)(in_R11 + (0x8132 - uint_result) * 4);
        }
        else {
          float_result = 0.0;
        }
        long_result = (longlong)int_result;
        long_result = (longlong)(int)(int_result + system_R14D);
        float_result = -float_result;
        if (long_result < long_result) {
          int_result = int_result;
          if (3 < long_result - long_result) {
            uint_result = int_result + system_R14D + 3;
            int_result = int_result + ((int)(((long_result + -3) - long_result) - 1U >> 2) + 1) * 4;
            do {
              uint_result = (ulonglong)uint_result;
              long_result = *(longlong *)(in_R11 + 0x218);
              uint_result = (ulonglong)(uint_result - 1);
              uint_result = (ulonglong)(uint_result - 2);
              uint_result = uint_result - 3;
              float_result = *(float *)(long_result + 4 + (ulonglong)uint_result * 8);
              float_result = *(float *)(long_result + (ulonglong)uint_result * 8);
              float_result = *(float *)(long_result + long_result * 8);
              float_result = *(float *)(long_result + 4 + long_result * 8);
              float_result = float_result * float_result - float_result * float_result;
              float_result = float_result * float_result + float_result * float_result;
              *(float *)(long_result + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 4 + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + (ulonglong)uint_result * 8) = float_result - float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 4 + (ulonglong)uint_result * 8) = float_result - float_result;
              long_result = *(longlong *)(in_R11 + 0x218);
              float_result = *(float *)(long_result + 4 + uint_result * 8);
              float_result = *(float *)(long_result + uint_result * 8);
              float_result = *(float *)(long_result + 8 + long_result * 8);
              float_result = *(float *)(long_result + 0xc + long_result * 8);
              float_result = float_result * float_result - float_result * float_result;
              float_result = float_result * float_result + float_result * float_result;
              *(float *)(long_result + 8 + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 0xc + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + uint_result * 8) = float_result - float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 4 + uint_result * 8) = float_result - float_result;
              long_result = *(longlong *)(in_R11 + 0x218);
              float_result = *(float *)(long_result + uint_result * 8);
              float_result = *(float *)(long_result + 4 + uint_result * 8);
              float_result = *(float *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result * 8);
              float_result = *(float *)(long_result + 0x14 + long_result * 8);
              float_result = float_result * float_result - float_result * float_result;
              float_result = float_result * float_result + float_result * float_result;
              *(float *)(long_result + SYSTEM_DATA_COMPARE_SIZE + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 0x14 + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + uint_result * 8) = float_result - float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 4 + uint_result * 8) = float_result - float_result;
              long_result = *(longlong *)(in_R11 + 0x218);
              float_result = *(float *)(long_result + uint_result * 8);
              float_result = *(float *)(long_result + 4 + uint_result * 8);
              float_result = *(float *)(long_result + 0x18 + long_result * 8);
              float_result = *(float *)(long_result + 0x1c + long_result * 8);
              float_result = float_result * float_result - float_result * float_result;
              float_result = float_result * float_result + float_result * float_result;
              *(float *)(long_result + 0x18 + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 0x1c + long_result * 8) = float_result + float_result;
              long_result = long_result + 4;
              *(float *)(*(longlong *)(in_R11 + 0x218) + uint_result * 8) = float_result - float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 4 + uint_result * 8) = float_result - float_result;
              uint_result = uint_result + 4;
            } while (long_result < long_result + -3);
          }
          if (long_result < long_result) {
            uint_result = int_result + system_R14D;
            do {
              uint_result = (ulonglong)uint_result;
              long_result = *(longlong *)(in_R11 + 0x218);
              float_result = *(float *)(long_result + uint_result * 8);
              float_result = *(float *)(long_result + 4 + uint_result * 8);
              float_result = *(float *)(long_result + long_result * 8);
              float_result = *(float *)(long_result + 4 + long_result * 8);
              float_result = float_result * float_result - float_result * float_result;
              float_result = float_result * float_result + float_result * float_result;
              *(float *)(long_result + long_result * 8) = float_result + float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 4 + long_result * 8) = float_result + float_result;
              long_result = long_result + 1;
              *(float *)(*(longlong *)(in_R11 + 0x218) + uint_result * 8) = float_result - float_result;
              *(float *)(*(longlong *)(in_R11 + 0x218) + 4 + uint_result * 8) = float_result - float_result;
              uint_result = uint_result + 1;
            } while (long_result < long_result);
          }
        }
        int_result = int_result + system_R14D * 2;
        uint_result = uint_result - 1;
        systemConfig = in_stack_000000a8;
      } while (uint_result != 0);
    }
    systemConfig = systemConfig * 2;
    system_R14D = system_R14D >> 1;
    uint_result = uint_result - 1;
    in_stack_000000a8 = systemConfig;
  } while (uint_result != 0);
  return 0;
}

uint64_t get_system_zero_value(void)

{
  return 0;
}
// function_ptr g_system_callback_handler;

void* g_system_callback_handler;
// function_ptr g_system_event_processor;

void* g_system_event_processor;

void* g_static_system_config;

uint64_t g_system_status_flag;
uint32_t g_system_error_code;
void* *g_system_pointer_array;
uint8_t *g_system_byte_buffer;
uint32_t g_system_config_flag;
longlong g_global_system_counter_1;
longlong g_global_system_counter_2;
longlong g_global_memory_address_1;
longlong g_global_memory_address_2;
uint32_t g_system_reserved_1;
uint32_t g_system_reserved_2;
void* g_static_memory_pool;

void* g_static_resource_cache;

void* g_static_graphics_buffer;

void* g_static_audio_buffer;

void* g_global_system_data;

longlong g_global_system_handle;

uint64_t g_global_data_flag;
longlong g_global_memory_pointer;
longlong *g_global_system_flags;

