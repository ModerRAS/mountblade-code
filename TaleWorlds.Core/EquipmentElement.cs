using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000040 RID: 64
	public struct EquipmentElement : ISerializableObject, ISavedStruct
	{
		// Token: 0x06000515 RID: 1301 RVA: 0x000123DC File Offset: 0x000105DC
		public static void AutoGeneratedStaticCollectObjectsEquipmentElement(object o, List<object> collectedObjects)
		{
			((EquipmentElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000516 RID: 1302 RVA: 0x000123F8 File Offset: 0x000105F8
		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.Item);
			collectedObjects.Add(this.ItemModifier);
		}

		// Token: 0x06000517 RID: 1303 RVA: 0x00012414 File Offset: 0x00010614
		internal static object AutoGeneratedGetMemberValueItem(object o)
		{
			return ((EquipmentElement)o).Item;
		}

		// Token: 0x06000518 RID: 1304 RVA: 0x00012430 File Offset: 0x00010630
		internal static object AutoGeneratedGetMemberValueItemModifier(object o)
		{
			return ((EquipmentElement)o).ItemModifier;
		}

		// Token: 0x06000519 RID: 1305 RVA: 0x0001244C File Offset: 0x0001064C
		internal static object AutoGeneratedGetMemberValueIsQuestItem(object o)
		{
			return ((EquipmentElement)o).IsQuestItem;
		}

		// Token: 0x170001B4 RID: 436
		// (get) Token: 0x0600051A RID: 1306 RVA: 0x0001246C File Offset: 0x0001066C
		// (set) Token: 0x0600051B RID: 1307 RVA: 0x00012474 File Offset: 0x00010674
		[SaveableProperty(1)]
		public ItemObject Item { get; private set; }

		// Token: 0x170001B5 RID: 437
		// (get) Token: 0x0600051C RID: 1308 RVA: 0x0001247D File Offset: 0x0001067D
		// (set) Token: 0x0600051D RID: 1309 RVA: 0x00012485 File Offset: 0x00010685
		[SaveableProperty(2)]
		public ItemModifier ItemModifier { get; private set; }

		// Token: 0x170001B6 RID: 438
		// (get) Token: 0x0600051E RID: 1310 RVA: 0x0001248E File Offset: 0x0001068E
		// (set) Token: 0x0600051F RID: 1311 RVA: 0x00012496 File Offset: 0x00010696
		[SaveableProperty(3)]
		public bool IsQuestItem { get; private set; }

		// Token: 0x170001B7 RID: 439
		// (get) Token: 0x06000520 RID: 1312 RVA: 0x0001249F File Offset: 0x0001069F
		public bool IsEmpty
		{
			get
			{
				return this.Item == null;
			}
		}

		// Token: 0x170001B8 RID: 440
		// (get) Token: 0x06000521 RID: 1313 RVA: 0x000124AA File Offset: 0x000106AA
		public bool IsVisualEmpty
		{
			get
			{
				return this.IsEmpty && this.CosmeticItem == null;
			}
		}

		// Token: 0x170001B9 RID: 441
		// (get) Token: 0x06000522 RID: 1314 RVA: 0x000124C0 File Offset: 0x000106C0
		public int ItemValue
		{
			get
			{
				int num = 0;
				if (this.Item != null)
				{
					num = this.Item.Value;
					if (this.ItemModifier != null)
					{
						num = MathF.Round((float)num * this.ItemModifier.PriceMultiplier);
					}
				}
				return num;
			}
		}

		// Token: 0x170001BA RID: 442
		// (get) Token: 0x06000523 RID: 1315 RVA: 0x00012500 File Offset: 0x00010700
		public float Weight
		{
			get
			{
				if (this.Item == null)
				{
					return 0f;
				}
				return this.Item.Weight;
			}
		}

		// Token: 0x06000524 RID: 1316 RVA: 0x0001251B File Offset: 0x0001071B
		public EquipmentElement(ItemObject item, ItemModifier itemModifier = null, ItemObject cosmeticItem = null, bool isQuestItem = false)
		{
			this.Item = item;
			this.ItemModifier = itemModifier;
			this.CosmeticItem = cosmeticItem;
			this.IsQuestItem = isQuestItem;
		}

		// Token: 0x06000525 RID: 1317 RVA: 0x0001253A File Offset: 0x0001073A
		public EquipmentElement(EquipmentElement other)
		{
			this = new EquipmentElement(other.Item, other.ItemModifier, other.CosmeticItem, other.IsQuestItem);
		}

		// Token: 0x06000526 RID: 1318 RVA: 0x0001255D File Offset: 0x0001075D
		public void SetModifier(ItemModifier itemModifier)
		{
			this.ItemModifier = itemModifier;
		}

		// Token: 0x06000527 RID: 1319 RVA: 0x00012566 File Offset: 0x00010766
		public void Clear()
		{
			this.Item = null;
			this.ItemModifier = null;
		}

		// Token: 0x06000528 RID: 1320 RVA: 0x00012578 File Offset: 0x00010778
		public override int GetHashCode()
		{
			int num = 0;
			if (this.Item != null)
			{
				num += this.Item.GetHashCode();
			}
			if (this.ItemModifier != null)
			{
				num += this.ItemModifier.GetHashCode() * 317;
			}
			return num;
		}

		// Token: 0x06000529 RID: 1321 RVA: 0x000125BA File Offset: 0x000107BA
		public override string ToString()
		{
			return this.Item.ToString() ?? "";
		}

		// Token: 0x0600052A RID: 1322 RVA: 0x000125D0 File Offset: 0x000107D0
		public int GetModifiedHeadArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				num = this.Item.ArmorComponent.HeadArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		// Token: 0x0600052B RID: 1323 RVA: 0x00012620 File Offset: 0x00010820
		public int GetModifiedBodyArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				ArmorComponent armorComponent = this.Item.ArmorComponent;
				num = ((this.Item.ItemType != ItemObject.ItemTypeEnum.HorseHarness) ? armorComponent.BodyArmor : 0);
			}
			else if (this.Item.WeaponComponent != null)
			{
				num = this.Item.WeaponComponent.PrimaryWeapon.BodyArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		// Token: 0x0600052C RID: 1324 RVA: 0x000126A8 File Offset: 0x000108A8
		public int GetModifiedMountBodyArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				ArmorComponent armorComponent = this.Item.ArmorComponent;
				num = ((this.Item.ItemType == ItemObject.ItemTypeEnum.HorseHarness) ? armorComponent.BodyArmor : 0);
			}
			else if (this.Item.WeaponComponent != null)
			{
				num = this.Item.WeaponComponent.PrimaryWeapon.BodyArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		// Token: 0x0600052D RID: 1325 RVA: 0x00012730 File Offset: 0x00010930
		public int GetModifiedLegArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				num = this.Item.ArmorComponent.LegArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		// Token: 0x0600052E RID: 1326 RVA: 0x00012780 File Offset: 0x00010980
		public int GetModifiedArmArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				num = this.Item.ArmorComponent.ArmArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		// Token: 0x0600052F RID: 1327 RVA: 0x000127CD File Offset: 0x000109CD
		public short GetModifiedMaximumHitPointsForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMaximumHitPoints(this.ItemModifier);
		}

		// Token: 0x06000530 RID: 1328 RVA: 0x000127E8 File Offset: 0x000109E8
		public TextObject GetModifiedItemName()
		{
			if (this.ItemModifier == null || this.Item.IsCraftedByPlayer)
			{
				return this.Item.Name;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			TextObject textObject;
			if (!TextObject.IsNullOrEmpty((horseComponent != null) ? horseComponent.ModifiedName : null) && this.ItemModifier == null)
			{
				textObject = horseComponent.ModifiedName;
			}
			else
			{
				textObject = this.ItemModifier.Name;
				textObject.SetTextVariable("ITEMNAME", this.Item.Name);
			}
			return textObject;
		}

		// Token: 0x06000531 RID: 1329 RVA: 0x0001286A File Offset: 0x00010A6A
		public int GetModifiedThrustDamageForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedThrustDamage(this.ItemModifier);
		}

		// Token: 0x06000532 RID: 1330 RVA: 0x00012883 File Offset: 0x00010A83
		public int GetModifiedSwingDamageForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedSwingDamage(this.ItemModifier);
		}

		// Token: 0x06000533 RID: 1331 RVA: 0x0001289C File Offset: 0x00010A9C
		public int GetModifiedMissileDamageForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMissileDamage(this.ItemModifier);
		}

		// Token: 0x06000534 RID: 1332 RVA: 0x000128B5 File Offset: 0x00010AB5
		public int GetModifiedThrustSpeedForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedThrustSpeed(this.ItemModifier);
		}

		// Token: 0x06000535 RID: 1333 RVA: 0x000128CE File Offset: 0x00010ACE
		public int GetModifiedSwingSpeedForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedSwingSpeed(this.ItemModifier);
		}

		// Token: 0x06000536 RID: 1334 RVA: 0x000128E7 File Offset: 0x00010AE7
		public int GetModifiedMissileSpeedForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMissileSpeed(this.ItemModifier);
		}

		// Token: 0x06000537 RID: 1335 RVA: 0x00012900 File Offset: 0x00010B00
		public int GetModifiedHandlingForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedHandling(this.ItemModifier);
		}

		// Token: 0x06000538 RID: 1336 RVA: 0x00012919 File Offset: 0x00010B19
		public short GetModifiedStackCountForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedStackCount(this.ItemModifier);
		}

		// Token: 0x06000539 RID: 1337 RVA: 0x00012934 File Offset: 0x00010B34
		public int GetBaseValue()
		{
			int num = this.Item.Value;
			if (this.ItemModifier != null)
			{
				num = (int)((float)num * this.ItemModifier.PriceMultiplier);
			}
			return num;
		}

		// Token: 0x0600053A RID: 1338 RVA: 0x00012966 File Offset: 0x00010B66
		public bool IsEqualTo(EquipmentElement other)
		{
			return this.Item == other.Item && this.ItemModifier == other.ItemModifier;
		}

		// Token: 0x0600053B RID: 1339 RVA: 0x00012988 File Offset: 0x00010B88
		public override bool Equals(object obj)
		{
			if (obj is EquipmentElement)
			{
				EquipmentElement other = (EquipmentElement)obj;
				return this.IsEqualTo(other);
			}
			return false;
		}

		// Token: 0x0600053C RID: 1340 RVA: 0x000129B4 File Offset: 0x00010BB4
		public bool Equals(ItemRosterElement other)
		{
			return this.Item == other.EquipmentElement.Item && this.ItemModifier == other.EquipmentElement.ItemModifier;
		}

		// Token: 0x0600053D RID: 1341 RVA: 0x000129F4 File Offset: 0x00010BF4
		public float GetEquipmentElementWeight()
		{
			if (this.Item == null)
			{
				return 0f;
			}
			if (this.Item.PrimaryWeapon == null || !this.Item.PrimaryWeapon.IsConsumable)
			{
				return this.Weight;
			}
			return this.Weight * (float)this.GetModifiedStackCountForUsage(0);
		}

		// Token: 0x0600053E RID: 1342 RVA: 0x00012A44 File Offset: 0x00010C44
		public bool IsInvalid()
		{
			return this.Item == EquipmentElement.Invalid.Item && this.ItemModifier == EquipmentElement.Invalid.ItemModifier;
		}

		// Token: 0x0600053F RID: 1343 RVA: 0x00012A80 File Offset: 0x00010C80
		public int GetModifiedMountManeuver(in EquipmentElement harness)
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			EquipmentElement equipmentElement = harness;
			ItemObject item = equipmentElement.Item;
			ArmorComponent armorComponent = (item != null) ? item.ArmorComponent : null;
			int num = horseComponent.Maneuver + ((armorComponent != null) ? armorComponent.ManeuverBonus : 0);
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountManeuver(num);
			}
			equipmentElement = harness;
			if (!equipmentElement.IsEmpty)
			{
				equipmentElement = harness;
				if (equipmentElement.ItemModifier != null)
				{
					equipmentElement = harness;
					num = equipmentElement.ItemModifier.ModifyMountManeuver(num);
				}
			}
			return num;
		}

		// Token: 0x06000540 RID: 1344 RVA: 0x00012B1C File Offset: 0x00010D1C
		public int GetModifiedMountSpeed(in EquipmentElement harness)
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			EquipmentElement equipmentElement = harness;
			ItemObject item = equipmentElement.Item;
			ArmorComponent armorComponent = (item != null) ? item.ArmorComponent : null;
			int num = horseComponent.Speed + ((armorComponent != null) ? armorComponent.SpeedBonus : 0);
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountSpeed(num);
			}
			equipmentElement = harness;
			if (!equipmentElement.IsEmpty)
			{
				equipmentElement = harness;
				if (equipmentElement.ItemModifier != null)
				{
					equipmentElement = harness;
					num = equipmentElement.ItemModifier.ModifyMountSpeed(num);
				}
			}
			return num;
		}

		// Token: 0x06000541 RID: 1345 RVA: 0x00012BB8 File Offset: 0x00010DB8
		public int GetModifiedMountCharge(in EquipmentElement harness)
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			EquipmentElement equipmentElement = harness;
			ItemObject item = equipmentElement.Item;
			ArmorComponent armorComponent = (item != null) ? item.ArmorComponent : null;
			int num = horseComponent.ChargeDamage + ((armorComponent != null) ? armorComponent.ChargeBonus : 0);
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountCharge(num);
			}
			equipmentElement = harness;
			if (!equipmentElement.IsEmpty)
			{
				equipmentElement = harness;
				if (equipmentElement.ItemModifier != null)
				{
					equipmentElement = harness;
					num = equipmentElement.ItemModifier.ModifyMountCharge(num);
				}
			}
			return num;
		}

		// Token: 0x06000542 RID: 1346 RVA: 0x00012C54 File Offset: 0x00010E54
		public int GetModifiedMountHitPoints()
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			int num = horseComponent.HitPoints + horseComponent.HitPointBonus;
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountHitPoints(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		// Token: 0x06000543 RID: 1347 RVA: 0x00012CA4 File Offset: 0x00010EA4
		void ISerializableObject.DeserializeFrom(IReader reader)
		{
			string text = reader.ReadString();
			this.ItemModifier = null;
			if (text != "")
			{
				this.ItemModifier = Game.Current.ObjectManager.GetObject<ItemModifier>(text);
			}
			MBGUID objectId = new MBGUID(reader.ReadUInt());
			this.Item = (MBObjectManager.Instance.GetObject(objectId) as ItemObject);
		}

		// Token: 0x06000544 RID: 1348 RVA: 0x00012D08 File Offset: 0x00010F08
		void ISerializableObject.SerializeTo(IWriter writer)
		{
			writer.WriteString((this.ItemModifier != null) ? this.ItemModifier.StringId : "");
			ItemObject item = this.Item;
			writer.WriteUInt((item != null) ? item.Id.InternalValue : 0U);
		}

		// Token: 0x06000545 RID: 1349 RVA: 0x00012D55 File Offset: 0x00010F55
		bool ISavedStruct.IsDefault()
		{
			return this.Item == null && this.ItemModifier == null;
		}

		// Token: 0x0400025E RID: 606
		public static readonly EquipmentElement Invalid = new EquipmentElement(null, null, null, false);

		// Token: 0x04000262 RID: 610
		public ItemObject CosmeticItem;
	}
}
